openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Google Forms API
  description: Reads and writes Google Forms and responses.
  version: v1
  x-discovery-doc-revision: '20230620'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://developers.google.com/forms/api
servers:
  - url: https://forms.googleapis.com
components:
  schemas:
    MediaProperties:
      id: MediaProperties
      type: object
      properties:
        width:
          format: int32
          type: integer
          description: >-
            The width of the media in pixels. When the media is displayed, it is
            scaled to the smaller of this value or the width of the displayed
            form. The original aspect ratio of the media is preserved. If a
            width is not specified when the media is added to the form, it is
            set to the width of the media source. Width must be between 0 and
            740, inclusive. Setting width to 0 or unspecified is only permitted
            when updating the media source.
        alignment:
          enum:
            - ALIGNMENT_UNSPECIFIED
            - LEFT
            - RIGHT
            - CENTER
          enumDescriptions:
            - Default value. Unused.
            - Left align.
            - Right align.
            - Center.
          description: Position of the media.
          type: string
      description: Properties of the media.
    QuestionGroupItem:
      type: object
      id: QuestionGroupItem
      description: Defines a question that comprises multiple questions grouped together.
      properties:
        image:
          $ref: '#/components/schemas/Image'
          description: >-
            The image displayed within the question group above the specific
            questions.
        grid:
          description: >-
            The question group is a grid with rows of multiple choice questions
            that share the same options. When `grid` is set, all questions in
            the group must be of kind `row`.
          $ref: '#/components/schemas/Grid'
        questions:
          type: array
          description: >-
            Required. A list of questions that belong in this question group. A
            question must only belong to one group. The `kind` of the group may
            affect what types of questions are allowed.
          items:
            $ref: '#/components/schemas/Question'
    Request:
      id: Request
      properties:
        updateItem:
          $ref: '#/components/schemas/UpdateItemRequest'
          description: Update an item.
        updateFormInfo:
          description: Update Form's Info.
          $ref: '#/components/schemas/UpdateFormInfoRequest'
        updateSettings:
          description: Updates the Form's settings.
          $ref: '#/components/schemas/UpdateSettingsRequest'
        moveItem:
          $ref: '#/components/schemas/MoveItemRequest'
          description: Move an item to a specified location.
        createItem:
          $ref: '#/components/schemas/CreateItemRequest'
          description: Create a new item.
        deleteItem:
          $ref: '#/components/schemas/DeleteItemRequest'
          description: Delete an item.
      type: object
      description: The kinds of update requests that can be made.
    Grading:
      properties:
        whenRight:
          description: >-
            The feedback displayed for correct responses. This feedback can only
            be set for multiple choice questions that have correct answers
            provided.
          $ref: '#/components/schemas/Feedback'
        whenWrong:
          description: >-
            The feedback displayed for incorrect responses. This feedback can
            only be set for multiple choice questions that have correct answers
            provided.
          $ref: '#/components/schemas/Feedback'
        pointValue:
          description: >-
            Required. The maximum number of points a respondent can
            automatically get for a correct answer. This must not be negative.
          format: int32
          type: integer
        generalFeedback:
          description: >-
            The feedback displayed for all answers. This is commonly used for
            short answer questions when a quiz owner wants to quickly give
            respondents some sense of whether they answered the question
            correctly before they've had a chance to officially grade the
            response. General feedback cannot be set for automatically graded
            multiple choice questions.
          $ref: '#/components/schemas/Feedback'
        correctAnswers:
          description: >-
            Required. The answer key for the question. Responses are
            automatically graded based on this field.
          $ref: '#/components/schemas/CorrectAnswers'
      description: Grading for a single question
      type: object
      id: Grading
    FileUploadQuestion:
      id: FileUploadQuestion
      type: object
      properties:
        maxFiles:
          description: >-
            Maximum number of files that can be uploaded for this question in a
            single response.
          type: integer
          format: int32
        folderId:
          type: string
          description: >-
            Required. The ID of the Drive folder where uploaded files are
            stored.
        maxFileSize:
          format: int64
          type: string
          description: >-
            Maximum number of bytes allowed for any single file uploaded to this
            question.
        types:
          items:
            enum:
              - FILE_TYPE_UNSPECIFIED
              - ANY
              - DOCUMENT
              - PRESENTATION
              - SPREADSHEET
              - DRAWING
              - PDF
              - IMAGE
              - VIDEO
              - AUDIO
            enumDescriptions:
              - Default value. Unused.
              - No restrictions on type.
              - A Google Docs document.
              - A Google Slides presentation.
              - A Google Sheets spreadsheet.
              - A drawing.
              - A PDF.
              - An image.
              - A video.
              - An audio file.
            type: string
          description: File types accepted by this question.
          type: array
      description: >-
        A file upload question. The API currently does not support creating file
        upload questions.
    Form:
      description: >-
        A Google Forms document. A form is created in Drive, and deleting a form
        or changing its access protections is done via the [Drive
        API](https://developers.google.com/drive/api/v3/about-sdk).
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          description: >-
            Required. A list of the form's items, which can include section
            headers, questions, embedded media, etc.
        revisionId:
          description: >-
            Output only. The revision ID of the form. Used in the WriteControl
            in update requests to identify the revision on which the changes are
            based. The format of the revision ID may change over time, so it
            should be treated opaquely. A returned revision ID is only
            guaranteed to be valid for 24 hours after it has been returned and
            cannot be shared across users. If the revision ID is unchanged
            between calls, then the form has not changed. Conversely, a changed
            ID (for the same form and user) usually means the form has been
            updated; however, a changed ID can also be due to internal factors
            such as ID format changes.
          readOnly: true
          type: string
        linkedSheetId:
          description: >-
            Output only. The ID of the linked Google Sheet which is accumulating
            responses from this Form (if such a Sheet exists).
          type: string
          readOnly: true
        responderUri:
          description: >-
            Output only. The form URI to share with responders. This opens a
            page that allows the user to submit responses but not edit the
            questions.
          type: string
          readOnly: true
        info:
          description: Required. The title and description of the form.
          $ref: '#/components/schemas/Info'
        settings:
          description: >-
            The form's settings. This must be updated with
            UpdateSettingsRequest; it is ignored during `forms.create` and
            UpdateFormInfoRequest.
          $ref: '#/components/schemas/FormSettings'
        formId:
          readOnly: true
          description: Output only. The form ID.
          type: string
      id: Form
      type: object
    UpdateFormInfoRequest:
      description: Update Form's Info.
      properties:
        updateMask:
          description: >-
            Required. Only values named in this mask are changed. At least one
            field must be specified. The root `info` is implied and should not
            be specified. A single `"*"` can be used as short-hand for updating
            every field.
          format: google-fieldmask
          type: string
        info:
          description: The info to update.
          $ref: '#/components/schemas/Info'
      type: object
      id: UpdateFormInfoRequest
    Answer:
      type: object
      description: The submitted answer for a question.
      id: Answer
      properties:
        questionId:
          type: string
          readOnly: true
          description: Output only. The question's ID. See also Question.question_id.
        grade:
          readOnly: true
          description: Output only. The grade for the answer if the form was a quiz.
          $ref: '#/components/schemas/Grade'
        fileUploadAnswers:
          description: Output only. The answers to a file upload question.
          $ref: '#/components/schemas/FileUploadAnswers'
          readOnly: true
        textAnswers:
          readOnly: true
          $ref: '#/components/schemas/TextAnswers'
          description: Output only. The specific answers as text.
    PageBreakItem:
      description: >-
        A page break. The title and description of this item are shown at the
        top of the new page.
      id: PageBreakItem
      properties: {}
      type: object
    TimeQuestion:
      type: object
      description: A time question.
      properties:
        duration:
          description: >-
            `true` if the question is about an elapsed time. Otherwise it is
            about a time of day.
          type: boolean
      id: TimeQuestion
    Info:
      description: The general information for a form.
      type: object
      id: Info
      properties:
        description:
          description: The description of the form.
          type: string
        documentTitle:
          readOnly: true
          description: >-
            Output only. The title of the document which is visible in Drive. If
            `Info.title` is empty, `document_title` may appear in its place in
            the Google Forms UI and be visible to responders. `document_title`
            can be set on create, but cannot be modified by a batchUpdate
            request. Please use the [Google Drive
            API](https://developers.google.com/drive/api/v3/reference/files/update)
            if you need to programmatically update `document_title`.
          type: string
        title:
          type: string
          description: Required. The title of the form which is visible to responders.
    TextLink:
      description: Link for text.
      properties:
        displayText:
          type: string
          description: Required. Display text for the URI.
        uri:
          description: Required. The URI.
          type: string
      type: object
      id: TextLink
    Grid:
      id: Grid
      description: >-
        A grid of choices (radio or check boxes) with each row constituting a
        separate question. Each row has the same choices, which are shown as the
        columns.
      properties:
        shuffleQuestions:
          type: boolean
          description: >-
            If `true`, the questions are randomly ordered. In other words, the
            rows appear in a different order for every respondent.
        columns:
          description: >-
            Required. The choices shared by each question in the grid. In other
            words, the values of the columns. Only `CHECK_BOX` and `RADIO`
            choices are allowed.
          $ref: '#/components/schemas/ChoiceQuestion'
      type: object
    ImageItem:
      id: ImageItem
      type: object
      description: An item containing an image.
      properties:
        image:
          description: Required. The image displayed in the item.
          $ref: '#/components/schemas/Image'
    MoveItemRequest:
      description: Move an item in a form.
      type: object
      id: MoveItemRequest
      properties:
        originalLocation:
          $ref: '#/components/schemas/Location'
          description: Required. The location of the item to move.
        newLocation:
          $ref: '#/components/schemas/Location'
          description: Required. The new location for the item.
    QuestionItem:
      id: QuestionItem
      properties:
        question:
          description: Required. The displayed question.
          $ref: '#/components/schemas/Question'
        image:
          description: The image displayed within the question.
          $ref: '#/components/schemas/Image'
      description: A form item containing a single question.
      type: object
    VideoLink:
      properties:
        displayText:
          type: string
          description: Required. The display text for the link.
        youtubeUri:
          type: string
          description: The URI of a YouTube video.
      description: Link to a video.
      type: object
      id: VideoLink
    Video:
      id: Video
      type: object
      description: Data representing a video.
      properties:
        youtubeUri:
          description: Required. A YouTube URI.
          type: string
        properties:
          description: Properties of a video.
          $ref: '#/components/schemas/MediaProperties'
    Option:
      id: Option
      description: An option for a Choice question.
      type: object
      properties:
        goToAction:
          type: string
          enum:
            - GO_TO_ACTION_UNSPECIFIED
            - NEXT_SECTION
            - RESTART_FORM
            - SUBMIT_FORM
          description: Section navigation type.
          enumDescriptions:
            - Default value. Unused.
            - Go to the next section.
            - Go back to the beginning of the form.
            - Submit form immediately.
        image:
          description: Display image as an option.
          $ref: '#/components/schemas/Image'
        value:
          type: string
          description: Required. The choice as presented to the user.
        isOther:
          description: >-
            Whether the option is "other". Currently only applies to `RADIO` and
            `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.
          type: boolean
        goToSectionId:
          description: Item ID of section header to go to.
          type: string
    CreateItemResponse:
      id: CreateItemResponse
      description: The result of creating an item.
      type: object
      properties:
        questionId:
          description: >-
            The ID of the question created as part of this item, for a question
            group it lists IDs of all the questions created for this item.
          type: array
          items:
            type: string
        itemId:
          type: string
          description: The ID of the created item.
    CreateItemRequest:
      id: CreateItemRequest
      type: object
      description: Create an item in a form.
      properties:
        item:
          description: Required. The item to create.
          $ref: '#/components/schemas/Item'
        location:
          $ref: '#/components/schemas/Location'
          description: Required. Where to place the new item.
    RenewWatchRequest:
      type: object
      description: Renew an existing Watch for seven days.
      properties: {}
      id: RenewWatchRequest
    FileUploadAnswers:
      id: FileUploadAnswers
      type: object
      description: All submitted files for a FileUpload question.
      properties:
        answers:
          items:
            $ref: '#/components/schemas/FileUploadAnswer'
          type: array
          description: Output only. All submitted files for a FileUpload question.
          readOnly: true
    WatchTarget:
      type: object
      properties:
        topic:
          description: >-
            A Pub/Sub topic. To receive notifications, the topic must grant
            publish privileges to the Forms service account
            `serviceAccount:forms-notifications@system.gserviceaccount.com`.
            Only the project that owns a topic may create a watch with it.
            Pub/Sub delivery guarantees should be considered.
          $ref: '#/components/schemas/CloudPubsubTopic'
      id: WatchTarget
      description: The target for notification delivery.
    ScaleQuestion:
      type: object
      id: ScaleQuestion
      description: A scale question. The user has a range of numeric values to choose from.
      properties:
        highLabel:
          type: string
          description: The label to display describing the highest point on the scale.
        low:
          type: integer
          description: Required. The lowest possible value for the scale.
          format: int32
        lowLabel:
          type: string
          description: The label to display describing the lowest point on the scale.
        high:
          description: Required. The highest possible value for the scale.
          type: integer
          format: int32
    UpdateSettingsRequest:
      description: Update Form's FormSettings.
      type: object
      id: UpdateSettingsRequest
      properties:
        settings:
          $ref: '#/components/schemas/FormSettings'
          description: Required. The settings to update with.
        updateMask:
          type: string
          description: >-
            Required. Only values named in this mask are changed. At least one
            field must be specified. The root `settings` is implied and should
            not be specified. A single `"*"` can be used as short-hand for
            updating every field.
          format: google-fieldmask
    CloudPubsubTopic:
      id: CloudPubsubTopic
      type: object
      description: A Pub/Sub topic.
      properties:
        topicName:
          type: string
          description: >-
            Required. A fully qualified Pub/Sub topic name to publish the events
            to. This topic must be owned by the calling project and already
            exist in Pub/Sub.
    ExtraMaterial:
      description: Supplementary material to the feedback.
      id: ExtraMaterial
      type: object
      properties:
        video:
          $ref: '#/components/schemas/VideoLink'
          description: Video feedback.
        link:
          description: Text feedback.
          $ref: '#/components/schemas/TextLink'
    Question:
      description: Any question. The specific type of question is known by its `kind`.
      id: Question
      type: object
      properties:
        scaleQuestion:
          $ref: '#/components/schemas/ScaleQuestion'
          description: A respondent can choose a number from a range.
        dateQuestion:
          description: A respondent can enter a date.
          $ref: '#/components/schemas/DateQuestion'
        textQuestion:
          description: A respondent can enter a free text response.
          $ref: '#/components/schemas/TextQuestion'
        required:
          description: >-
            Whether the question must be answered in order for a respondent to
            submit their response.
          type: boolean
        questionId:
          description: >-
            Read only. The question ID. On creation, it can be provided but the
            ID must not be already used in the form. If not provided, a new ID
            is assigned.
          type: string
        choiceQuestion:
          description: A respondent can choose from a pre-defined set of options.
          $ref: '#/components/schemas/ChoiceQuestion'
        grading:
          $ref: '#/components/schemas/Grading'
          description: Grading setup for the question.
        timeQuestion:
          $ref: '#/components/schemas/TimeQuestion'
          description: A respondent can enter a time.
        fileUploadQuestion:
          description: A respondent can upload one or more files.
          $ref: '#/components/schemas/FileUploadQuestion'
        rowQuestion:
          description: A row of a QuestionGroupItem.
          $ref: '#/components/schemas/RowQuestion'
    QuizSettings:
      id: QuizSettings
      description: >-
        Settings related to quiz forms and grading. These must be updated with
        the UpdateSettingsRequest.
      type: object
      properties:
        isQuiz:
          description: >-
            Whether this form is a quiz or not. When true, responses are graded
            based on question Grading. Upon setting to false, all question
            Grading is deleted.
          type: boolean
    BatchUpdateFormRequest:
      type: object
      properties:
        requests:
          type: array
          description: Required. The update requests of this batch.
          items:
            $ref: '#/components/schemas/Request'
        writeControl:
          $ref: '#/components/schemas/WriteControl'
          description: Provides control over how write requests are executed.
        includeFormInResponse:
          description: Whether to return an updated version of the model in the response.
          type: boolean
      id: BatchUpdateFormRequest
      description: >-
        A batch of updates to perform on a form. All the specified updates are
        made or none of them are.
    Location:
      description: A specific location in a form.
      type: object
      id: Location
      properties:
        index:
          description: >-
            The index of an item in the form. This must be in the range
            [0..*N*), where *N* is the number of items in the form.
          type: integer
          format: int32
    BatchUpdateFormResponse:
      type: object
      id: BatchUpdateFormResponse
      properties:
        replies:
          description: >-
            The reply of the updates. This maps 1:1 with the update requests,
            although replies to some requests may be empty.
          type: array
          items:
            $ref: '#/components/schemas/Response'
        form:
          description: >-
            Based on the bool request field `include_form_in_response`, a form
            with all applied mutations/updates is returned or not. This may be
            later than the revision ID created by these changes.
          $ref: '#/components/schemas/Form'
        writeControl:
          description: The updated write control after applying the request.
          $ref: '#/components/schemas/WriteControl'
      description: Response to a BatchUpdateFormRequest.
    Watch:
      properties:
        target:
          $ref: '#/components/schemas/WatchTarget'
          description: Required. Where to send the notification.
        expireTime:
          type: string
          description: >-
            Output only. Timestamp for when this will expire. Each watches.renew
            call resets this to seven days in the future.
          format: google-datetime
          readOnly: true
        id:
          type: string
          description: >-
            Output only. The ID of this watch. See notes on
            CreateWatchRequest.watch_id.
          readOnly: true
        state:
          description: >-
            Output only. The current state of the watch. Additional details
            about suspended watches can be found by checking the `error_type`.
          type: string
          enumDescriptions:
            - Unspecified state.
            - Watch is active.
            - >-
              The watch is suspended due to an error that may be resolved. The
              watch will continue to exist until it expires. To attempt to
              reactivate the watch a call can be made to watches.renew
          readOnly: true
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - SUSPENDED
        eventType:
          description: Required. Which event type to watch for.
          type: string
          enumDescriptions:
            - Unspecified event type. This value should not be used.
            - >-
              The schema event type. A watch with this event type will be
              notified about changes to form content and settings.
            - >-
              The responses event type. A watch with this event type will be
              notified when form responses are submitted.
          enum:
            - EVENT_TYPE_UNSPECIFIED
            - SCHEMA
            - RESPONSES
        createTime:
          type: string
          format: google-datetime
          description: Output only. Timestamp of when this was created.
          readOnly: true
        errorType:
          type: string
          enum:
            - ERROR_TYPE_UNSPECIFIED
            - PROJECT_NOT_AUTHORIZED
            - NO_USER_ACCESS
            - OTHER_ERRORS
          readOnly: true
          description: >-
            Output only. The most recent error type for an attempted delivery.
            To begin watching the form again a call can be made to watches.renew
            which also clears this error information.
          enumDescriptions:
            - Unspecified error type.
            - >-
              The cloud project does not have access to the form being watched.
              This occurs if the user has revoked the authorization for your
              project to access their form(s). Watches with this error will not
              be retried. To attempt to begin watching the form again a call can
              be made to watches.renew
            - >-
              The user that granted access no longer has access to the form
              being watched. Watches with this error will not be retried. To
              attempt to begin watching the form again a call can be made to
              watches.renew
            - >-
              Another type of error has occurred. Whether notifications will
              continue depends on the watch state.
      description: >-
        A watch for events for a form. When the designated event happens, a
        notification will be published to the specified target. The
        notification's attributes will include a `formId` key that has the ID of
        the watched form and an `eventType` key that has the string of the type.
        Messages are sent with at-least-once delivery and are only dropped in
        extraordinary circumstances. Typically all notifications should be
        reliably delivered within a few seconds; however, in some situations
        notifications may be delayed. A watch expires seven days after it is
        created unless it is renewed with watches.renew
      type: object
      id: Watch
    ChoiceQuestion:
      properties:
        type:
          description: Required. The type of choice question.
          enum:
            - CHOICE_TYPE_UNSPECIFIED
            - RADIO
            - CHECKBOX
            - DROP_DOWN
          type: string
          enumDescriptions:
            - Default value. Unused.
            - >-
              Radio buttons: All choices are shown to the user, who can only
              pick one of them.
            - >-
              Checkboxes: All choices are shown to the user, who can pick any
              number of them.
            - >-
              Drop-down menu: The choices are only shown to the user on demand,
              otherwise only the current choice is shown. Only one option can be
              chosen.
        options:
          description: Required. List of options that a respondent must choose from.
          items:
            $ref: '#/components/schemas/Option'
          type: array
        shuffle:
          type: boolean
          description: >-
            Whether the options should be displayed in random order for
            different instances of the quiz. This is often used to prevent
            cheating by respondents who might be looking at another respondent's
            screen, or to address bias in a survey that might be introduced by
            always putting the same options first or last.
      description: A radio/checkbox/dropdown question.
      id: ChoiceQuestion
      type: object
    Grade:
      properties:
        feedback:
          description: Output only. Additional feedback given for an answer.
          readOnly: true
          $ref: '#/components/schemas/Feedback'
        score:
          description: Output only. The numeric score awarded for the answer.
          type: number
          format: double
          readOnly: true
        correct:
          description: >-
            Output only. Whether the question was answered correctly or not. A
            zero-point score is not enough to infer incorrectness, since a
            correctly answered question could be worth zero points.
          type: boolean
          readOnly: true
      description: Grade information associated with a respondent's answer to a question.
      type: object
      id: Grade
    DeleteItemRequest:
      id: DeleteItemRequest
      description: Delete an item in a form.
      properties:
        location:
          description: Required. The location of the item to delete.
          $ref: '#/components/schemas/Location'
      type: object
    DateQuestion:
      properties:
        includeTime:
          type: boolean
          description: Whether to include the time as part of the question.
        includeYear:
          type: boolean
          description: Whether to include the year as part of the question.
      description: A date question. Date questions default to just month + day.
      id: DateQuestion
      type: object
    ListFormResponsesResponse:
      properties:
        responses:
          description: >-
            The returned form responses. Note: The `formId` field is not
            returned in the `FormResponse` object for list requests.
          items:
            $ref: '#/components/schemas/FormResponse'
          type: array
        nextPageToken:
          type: string
          description: >-
            If set, there are more responses. To get the next page of responses,
            provide this as `page_token` in a future request.
      id: ListFormResponsesResponse
      description: Response to a ListFormResponsesRequest.
      type: object
    FormResponse:
      id: FormResponse
      properties:
        responseId:
          type: string
          readOnly: true
          description: Output only. The response ID.
        createTime:
          format: google-datetime
          type: string
          description: >-
            Output only. Timestamp for the first time the response was
            submitted.
          readOnly: true
        answers:
          readOnly: true
          additionalProperties:
            $ref: '#/components/schemas/Answer'
          type: object
          description: >-
            Output only. The actual answers to the questions, keyed by
            question_id.
        lastSubmittedTime:
          type: string
          format: google-datetime
          readOnly: true
          description: >-
            Output only. Timestamp for the most recent time the response was
            submitted. Does not track changes to grades.
        formId:
          description: Output only. The form ID.
          readOnly: true
          type: string
        respondentEmail:
          readOnly: true
          description: Output only. The email address (if collected) for the respondent.
          type: string
        totalScore:
          readOnly: true
          type: number
          description: >-
            Output only. The total number of points the respondent received for
            their submission Only set if the form was a quiz and the response
            was graded. This includes points automatically awarded via
            autograding adjusted by any manual corrections entered by the form
            owner.
          format: double
      type: object
      description: A form response.
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
      type: object
      properties: {}
    CreateWatchRequest:
      properties:
        watch:
          description: >-
            Required. The watch object. No ID should be set on this object; use
            `watch_id` instead.
          $ref: '#/components/schemas/Watch'
        watchId:
          description: >-
            The ID to use for the watch. If specified, the ID must not already
            be in use. If not specified, an ID is generated. This value should
            be 4-63 characters, and valid characters are /a-z-/.
          type: string
      id: CreateWatchRequest
      description: Create a new watch.
      type: object
    TextQuestion:
      type: object
      properties:
        paragraph:
          type: boolean
          description: >-
            Whether the question is a paragraph question or not. If not, the
            question is a short text question.
      description: A text-based question.
      id: TextQuestion
    TextAnswers:
      properties:
        answers:
          type: array
          description: >-
            Output only. Answers to a question. For multiple-value
            ChoiceQuestions, each answer is a separate value.
          readOnly: true
          items:
            $ref: '#/components/schemas/TextAnswer'
      type: object
      description: A question's answers as text.
      id: TextAnswers
    Image:
      type: object
      properties:
        altText:
          description: >-
            A description of the image that is shown on hover and read by
            screenreaders.
          type: string
        sourceUri:
          type: string
          description: >-
            Input only. The source URI is the URI used to insert the image. The
            source URI can be empty when fetched.
        properties:
          description: Properties of an image.
          $ref: '#/components/schemas/MediaProperties'
        contentUri:
          type: string
          description: >-
            Output only. A URI from which you can download the image; this is
            valid only for a limited time.
          readOnly: true
      id: Image
      description: Data representing an image.
    CorrectAnswer:
      description: >-
        A single correct answer for a question. For multiple-valued (`CHECKBOX`)
        questions, several `CorrectAnswer`s may be needed to represent a single
        correct response option.
      type: object
      properties:
        value:
          description: >-
            Required. The correct answer value. See the documentation for
            TextAnswer.value for details on how various value types are
            formatted.
          type: string
      id: CorrectAnswer
    Feedback:
      properties:
        material:
          type: array
          items:
            $ref: '#/components/schemas/ExtraMaterial'
          description: >-
            Additional information provided as part of the feedback, often used
            to point the respondent to more reading and resources.
        text:
          type: string
          description: Required. The main text of the feedback.
      type: object
      description: Feedback for a respondent about their response to a question.
      id: Feedback
    FormSettings:
      id: FormSettings
      properties:
        quizSettings:
          $ref: '#/components/schemas/QuizSettings'
          description: Settings related to quiz forms and grading.
      type: object
      description: A form's settings.
    CorrectAnswers:
      id: CorrectAnswers
      type: object
      description: The answer key for a question.
      properties:
        answers:
          type: array
          description: >-
            A list of correct answers. A quiz response can be automatically
            graded based on these answers. For single-valued questions, a
            response is marked correct if it matches any value in this list (in
            other words, multiple correct answers are possible). For
            multiple-valued (`CHECKBOX`) questions, a response is marked correct
            if it contains exactly the values in this list.
          items:
            $ref: '#/components/schemas/CorrectAnswer'
    FileUploadAnswer:
      type: object
      properties:
        fileName:
          type: string
          description: Output only. The file name, as stored in Google Drive on upload.
          readOnly: true
        mimeType:
          description: >-
            Output only. The MIME type of the file, as stored in Google Drive on
            upload.
          type: string
          readOnly: true
        fileId:
          type: string
          description: Output only. The ID of the Google Drive file.
          readOnly: true
      id: FileUploadAnswer
      description: Info for a single file submitted to a file upload question.
    WriteControl:
      type: object
      description: Provides control over how write requests are executed.
      properties:
        requiredRevisionId:
          type: string
          description: >-
            The revision ID of the form that the write request is applied to. If
            this is not the latest revision of the form, the request is not
            processed and returns a 400 bad request error.
        targetRevisionId:
          description: >-
            The target revision ID of the form that the write request is applied
            to. If changes have occurred after this revision, the changes in
            this update request are transformed against those changes. This
            results in a new revision of the form that incorporates both the
            changes in the request and the intervening changes, with the server
            resolving conflicting changes. The target revision ID may only be
            used to write to recent versions of a form. If the target revision
            is too far behind the latest revision, the request is not processed
            and returns a 400 (Bad Request Error). The request may be retried
            after reading the latest version of the form. In most cases a target
            revision ID remains valid for several minutes after it is read, but
            for frequently-edited forms this window may be shorter.
          type: string
      id: WriteControl
    Response:
      properties:
        createItem:
          $ref: '#/components/schemas/CreateItemResponse'
          description: The result of creating an item.
      type: object
      description: A single response from an update.
      id: Response
    VideoItem:
      type: object
      properties:
        video:
          $ref: '#/components/schemas/Video'
          description: Required. The video displayed in the item.
        caption:
          type: string
          description: The text displayed below the video.
      id: VideoItem
      description: An item containing a video.
    TextItem:
      properties: {}
      type: object
      id: TextItem
      description: A text item.
    RowQuestion:
      type: object
      properties:
        title:
          description: Required. The title for the single row in the QuestionGroupItem.
          type: string
      id: RowQuestion
      description: Configuration for a question that is part of a question group.
    ListWatchesResponse:
      description: The response of a ListWatchesRequest.
      type: object
      properties:
        watches:
          items:
            $ref: '#/components/schemas/Watch'
          description: The returned watches.
          type: array
      id: ListWatchesResponse
    UpdateItemRequest:
      id: UpdateItemRequest
      properties:
        updateMask:
          format: google-fieldmask
          type: string
          description: Required. Only values named in this mask are changed.
        item:
          $ref: '#/components/schemas/Item'
          description: >-
            Required. New values for the item. Note that item and question IDs
            are used if they are provided (and are in the field mask). If an ID
            is blank (and in the field mask) a new ID is generated. This means
            you can modify an item by getting the form via forms.get, modifying
            your local copy of that item to be how you want it, and using
            UpdateItemRequest to write it back, with the IDs being the same (or
            not in the field mask).
        location:
          description: Required. The location identifying the item to update.
          $ref: '#/components/schemas/Location'
      description: Update an item in a form.
      type: object
    TextAnswer:
      description: An answer to a question represented as text.
      type: object
      id: TextAnswer
      properties:
        value:
          type: string
          description: >-
            Output only. The answer value. Formatting used for different kinds
            of question: * ChoiceQuestion * `RADIO` or `DROP_DOWN`: A single
            string corresponding to the option that was selected. * `CHECKBOX`:
            Multiple strings corresponding to each option that was selected. *
            TextQuestion: The text that the user entered. * ScaleQuestion: A
            string containing the number that was selected. * DateQuestion *
            Without time or year: MM-DD e.g. "05-19" * With year: YYYY-MM-DD
            e.g. "1986-05-19" * With time: MM-DD HH:MM e.g. "05-19 14:51" * With
            year and time: YYYY-MM-DD HH:MM e.g. "1986-05-19 14:51" *
            TimeQuestion: String with time or duration in HH:MM format e.g.
            "14:51" * RowQuestion within QuestionGroupItem: The answer for each
            row of a QuestionGroupItem is represented as a separate Answer. Each
            will contain one string for `RADIO`-type choices or multiple strings
            for `CHECKBOX` choices.
          readOnly: true
    Item:
      id: Item
      type: object
      description: A single item of the form. `kind` defines which kind of item it is.
      properties:
        videoItem:
          description: Displays a video on the page.
          $ref: '#/components/schemas/VideoItem'
        imageItem:
          $ref: '#/components/schemas/ImageItem'
          description: Displays an image on the page.
        itemId:
          description: >-
            The item ID. On creation, it can be provided but the ID must not be
            already used in the form. If not provided, a new ID is assigned.
          type: string
        questionItem:
          $ref: '#/components/schemas/QuestionItem'
          description: Poses a question to the user.
        title:
          description: The title of the item.
          type: string
        textItem:
          $ref: '#/components/schemas/TextItem'
          description: Displays a title and description on the page.
        pageBreakItem:
          $ref: '#/components/schemas/PageBreakItem'
          description: Starts a new page with a title.
        description:
          type: string
          description: The description of the item.
        questionGroupItem:
          description: Poses one or more questions to the user with a single major prompt.
          $ref: '#/components/schemas/QuestionGroupItem'
  parameters:
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/drive: See, edit, create, and delete all of your Google Drive files
            https://www.googleapis.com/auth/drive.file: >-
              See, edit, create, and delete only the specific Google Drive files
              you use with this app
            https://www.googleapis.com/auth/drive.readonly: See and download all your Google Drive files
            https://www.googleapis.com/auth/forms.body: See, edit, create, and delete all your Google Forms forms
            https://www.googleapis.com/auth/forms.body.readonly: See all your Google Forms forms
            https://www.googleapis.com/auth/forms.responses.readonly: See all responses to your Google Forms forms
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/forms/{formId}:batchUpdate:
    parameters: &ref_1
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
    post:
      description: Change the form with a batch of updates.
      operationId: forms.forms.batchUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateFormRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateFormResponse'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
      x-stackQL-resource: forms
      x-stackQL-verb: exec
  /v1/forms/{formId}:
    parameters: *ref_1
    get:
      description: Get a form.
      operationId: forms.forms.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/drive.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/drive.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
      x-stackQL-resource: forms
      x-stackQL-verb: select
  /v1/forms:
    parameters: *ref_1
    post:
      description: >-
        Create a new form using the title given in the provided form message in
        the request. *Important:* Only the form.info.title and
        form.info.document_title fields are copied to the new form. All other
        fields including the form description, items and settings are
        disallowed. To create a new form and add items, you must first call
        forms.create to create an empty form with a title and (optional)
        document title, and then call forms.update to add the items.
      operationId: forms.forms.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
      parameters: []
      x-stackQL-resource: forms
      x-stackQL-verb: insert
  /v1/forms/{formId}/responses:
    parameters: *ref_1
    get:
      description: List a form's responses.
      operationId: forms.forms.responses.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/forms.responses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.responses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFormResponsesResponse'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: responses
      x-stackQL-verb: select
  /v1/forms/{formId}/responses/{responseId}:
    parameters: *ref_1
    get:
      description: Get one response from the form.
      operationId: forms.forms.responses.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/forms.responses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.responses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormResponse'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
        - in: path
          name: responseId
          required: true
          schema:
            type: string
      x-stackQL-resource: responses
      x-stackQL-verb: select
  /v1/forms/{formId}/watches/{watchId}:renew:
    parameters: *ref_1
    post:
      description: >-
        Renew an existing watch for seven days. The state of the watch after
        renewal is `ACTIVE`, and the `expire_time` is seven days from the
        renewal. Renewing a watch in an error state (e.g. `SUSPENDED`) succeeds
        if the error is no longer present, but fail otherwise. After a watch has
        expired, RenewWatch returns `NOT_FOUND`.
      operationId: forms.forms.watches.renew
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenewWatchRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/drive.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/drive.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.responses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.responses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Watch'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
        - in: path
          name: watchId
          required: true
          schema:
            type: string
      x-stackQL-resource: watches
      x-stackQL-verb: exec
  /v1/forms/{formId}/watches/{watchId}:
    parameters: *ref_1
    delete:
      description: Delete a watch.
      operationId: forms.forms.watches.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/drive.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/drive.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.responses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.responses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
        - in: path
          name: watchId
          required: true
          schema:
            type: string
      x-stackQL-resource: watches
      x-stackQL-verb: delete
  /v1/forms/{formId}/watches:
    parameters: *ref_1
    get:
      description: >-
        Return a list of the watches owned by the invoking project. The maximum
        number of watches is two: For each invoker, the limit is one for each
        event type per form.
      operationId: forms.forms.watches.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/drive.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/drive.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.responses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.responses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWatchesResponse'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
      x-stackQL-resource: watches
      x-stackQL-verb: select
    post:
      description: >-
        Create a new watch. If a watch ID is provided, it must be unused. For
        each invoking project, the per form limit is one watch per
        Watch.EventType. A watch expires seven days after it is created (see
        Watch.expire_time).
      operationId: forms.forms.watches.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWatchRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/drive
          Oauth2c:
            - https://www.googleapis.com/auth/drive
        - Oauth2:
            - https://www.googleapis.com/auth/drive.file
          Oauth2c:
            - https://www.googleapis.com/auth/drive.file
        - Oauth2:
            - https://www.googleapis.com/auth/drive.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/drive.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body
        - Oauth2:
            - https://www.googleapis.com/auth/forms.body.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.body.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/forms.responses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/forms.responses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Watch'
      parameters:
        - in: path
          name: formId
          required: true
          schema:
            type: string
      x-stackQL-resource: watches
      x-stackQL-verb: insert
