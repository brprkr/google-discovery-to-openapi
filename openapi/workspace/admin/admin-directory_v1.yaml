openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Admin SDK API
  description: >-
    Admin SDK lets administrators of enterprise domains to view and manage
    resources like user, groups etc. It also provides audit and usage reports of
    domain.
  version: directory_v1
  x-discovery-doc-revision: '20230619'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://developers.google.com/admin-sdk/
servers:
  - url: https://admin.googleapis.com
components:
  schemas:
    UserGender:
      type: object
      properties:
        customGender:
          description: Custom gender.
          type: string
        addressMeAs:
          description: >-
            AddressMeAs. A human-readable string containing the proper way to
            refer to the profile owner by humans for example he/him/his or
            they/them/their.
          type: string
        type:
          description: Gender.
          type: string
      id: UserGender
    FeatureRename:
      properties:
        newName:
          description: New name of the feature.
          annotations:
            required:
              - directory.resources.features.rename
          type: string
      id: FeatureRename
      type: object
    MobileDevice:
      description: >-
        Google Workspace Mobile Management includes Android, [Google
        Sync](https://support.google.com/a/answer/135937), and iOS devices. For
        more information about common group mobile device API tasks, see the
        [Developer's
        Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html).
      properties:
        deviceCompromisedStatus:
          type: string
          description: The compromised device status.
        kernelVersion:
          type: string
          description: The device's kernel version.
        hardwareId:
          type: string
          description: >-
            The IMEI/MEID unique identifier for Android hardware. It is not
            applicable to Google Sync devices. When adding an Android mobile
            device, this is an optional property. When updating one of these
            devices, this is a read-only property.
        bootloaderVersion:
          description: Mobile Device Bootloader version (Read-only)
          type: string
        securityPatchLevel:
          description: Mobile Device Security patch level (Read-only)
          type: string
          format: int64
        managedAccountIsOnOwnerProfile:
          description: >-
            Boolean indicating if this account is on owner/primary profile or
            not.
          type: boolean
        imei:
          type: string
          description: The device's IMEI number.
        firstSync:
          description: >-
            Date and time the device was first synchronized with the policy
            settings in the G Suite administrator control panel (Read-only)
          format: date-time
          type: string
        developerOptionsStatus:
          description: Developer options enabled or disabled on device (Read-only)
          type: boolean
        hardware:
          type: string
          description: Mobile Device Hardware (Read-only)
        model:
          description: >-
            The mobile device's model name, for example Nexus S. This property
            can be
            [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html).
            For more information, see the [Developer's
            Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).
          type: string
        unknownSourcesStatus:
          description: Unknown sources enabled or disabled on device (Read-only)
          type: boolean
        privilege:
          type: string
          description: DMAgentPermission (Read-only)
        lastSync:
          description: >-
            Date and time the device was last synchronized with the policy
            settings in the G Suite administrator control panel (Read-only)
          type: string
          format: date-time
        adbStatus:
          description: Adb (USB debugging) enabled or disabled on device (Read-only)
          type: boolean
        devicePasswordStatus:
          type: string
          description: DevicePasswordStatus (Read-only)
        applications:
          type: array
          items:
            type: object
            properties:
              versionCode:
                description: The application's version code. An example is `13`.
                type: integer
                format: int32
              displayName:
                type: string
                description: The application's display name. An example is `Browser`.
              packageName:
                type: string
                description: >-
                  The application's package name. An example is
                  `com.android.browser`.
              versionName:
                description: The application's version name. An example is `3.2-140714`.
                type: string
              permission:
                items:
                  type: string
                description: >-
                  The list of permissions of this application. These can be
                  either a standard Android permission or one defined by the
                  application, and are found in an application's [Android
                  manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html).
                  Examples of a Calendar application's permissions are
                  `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.
                type: array
          description: >-
            The list of applications installed on an Android mobile device. It
            is not applicable to Google Sync and iOS devices. The list includes
            any Android applications that access Google Workspace data. When
            updating an applications list, it is important to note that updates
            replace the existing list. If the Android device has two existing
            applications and the API updates the list with five applications,
            the is now the updated list of five applications.
        basebandVersion:
          description: The device's baseband version.
          type: string
        networkOperator:
          type: string
          description: Mobile Device mobile or network operator (if available) (Read-only)
        os:
          type: string
          description: >-
            The mobile device's operating system, for example IOS 4.3 or Android
            2.3.5. This property can be
            [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html).
            For more information, see the [Developer's
            Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
        wifiMacAddress:
          description: The device's MAC address on Wi-Fi networks.
          type: string
        defaultLanguage:
          description: The default locale used on the device.
          type: string
        kind:
          description: >-
            The type of the API resource. For Mobiledevices resources, the value
            is `admin#directory#mobiledevice`.
          default: admin#directory#mobiledevice
          type: string
        encryptionStatus:
          type: string
          description: Mobile Device Encryption Status (Read-only)
        serialNumber:
          description: The device's serial number.
          type: string
        manufacturer:
          type: string
          description: Mobile Device manufacturer (Read-only)
        releaseVersion:
          type: string
          description: Mobile Device release version version (Read-only)
        type:
          type: string
          description: The type of mobile device.
        etag:
          description: ETag of the resource.
          type: string
        meid:
          description: The device's MEID number.
          type: string
        resourceId:
          description: The unique ID the API service uses to identify the mobile device.
          type: string
        deviceId:
          description: >-
            The serial number for a Google Sync mobile device. For Android and
            iOS devices, this is a software generated unique identifier.
          type: string
        status:
          description: The device's status.
          type: string
        userAgent:
          type: string
          description: >-
            Gives information about the device such as `os` version. This
            property can be
            [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html).
            For more information, see the [Developer's
            Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
        name:
          type: array
          description: >-
            The list of the owner's user names. If your application needs the
            current list of device owner names, use the
            [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html)
            method. For more information about retrieving mobile device user
            information, see the [Developer's
            Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).
          items:
            type: string
        otherAccountsInfo:
          items:
            type: string
          type: array
          description: The list of accounts added on device (Read-only)
        supportsWorkProfile:
          type: boolean
          description: Work profile supported on device (Read-only)
        email:
          items:
            type: string
          type: array
          description: >-
            The list of the owner's email addresses. If your application needs
            the current list of user emails, use the
            [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html)
            method. For additional information, see the [retrieve a
            user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.
        buildNumber:
          description: The device's operating system build number.
          type: string
        brand:
          type: string
          description: Mobile Device Brand (Read-only)
      id: MobileDevice
      type: object
    ChromeOsDevices:
      type: object
      id: ChromeOsDevices
      properties:
        nextPageToken:
          description: >-
            Token used to access the next page of this result. To access the
            next page, use this token's value in the `pageToken` query string of
            this request.
          type: string
        kind:
          type: string
          default: admin#directory#chromeosdevices
          description: Kind of resource this is.
        etag:
          description: ETag of the resource.
          type: string
        chromeosdevices:
          type: array
          description: A list of Chrome OS Device objects.
          items:
            $ref: '#/components/schemas/ChromeOsDevice'
    Roles:
      id: Roles
      type: object
      properties:
        items:
          type: array
          description: A list of Role resources.
          items:
            $ref: '#/components/schemas/Role'
        etag:
          description: ETag of the resource.
          type: string
        kind:
          default: admin#directory#roles
          type: string
          description: >-
            The type of the API resource. This is always
            `admin#directory#roles`.
        nextPageToken:
          type: string
    OrgUnits:
      properties:
        etag:
          type: string
          description: ETag of the resource.
        kind:
          default: admin#directory#orgUnits
          description: >-
            The type of the API resource. For Org Unit resources, the type is
            `admin#directory#orgUnits`.
          type: string
        organizationUnits:
          type: array
          description: A list of organizational unit objects.
          items:
            $ref: '#/components/schemas/OrgUnit'
      type: object
      id: OrgUnits
    UserPhone:
      type: object
      properties:
        value:
          type: string
          description: Phone number.
        primary:
          type: boolean
          description: If this is user's primary phone or not.
        customType:
          description: Custom Type.
          type: string
        type:
          type: string
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example phone could be of home_fax work mobile etc. In
            addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a customType value.
      id: UserPhone
      description: JSON template for a phone entry.
    CalendarResources:
      properties:
        nextPageToken:
          type: string
          description: >-
            The continuation token, used to page through large result sets.
            Provide this value in a subsequent request to return the next page
            of results.
        kind:
          default: admin#directory#resources#calendars#calendarResourcesList
          type: string
          description: >-
            Identifies this as a collection of CalendarResources. This is always
            `admin#directory#resources#calendars#calendarResourcesList`.
        items:
          type: array
          description: The CalendarResources in this page of results.
          items:
            $ref: '#/components/schemas/CalendarResource'
        etag:
          description: ETag of the resource.
          type: string
      id: CalendarResources
      type: object
      description: 'Public API: Resources.calendars'
    UserLanguage:
      type: object
      properties:
        customLanguage:
          type: string
          description: >-
            Other language. User can provide their own language name if there is
            no corresponding ISO 639 language code. If this is set,
            `languageCode` can't be set.
        preference:
          description: >-
            Optional. If present, controls whether the specified `languageCode`
            is the user's preferred language. If `customLanguage` is set, this
            can't be set. Allowed values are `preferred` and `not_preferred`.
          type: string
        languageCode:
          type: string
          description: >-
            ISO 639 string representation of a language. See [Language
            Codes](/admin-sdk/directory/v1/languages) for the list of supported
            codes. Valid language codes outside the supported set will be
            accepted by the API but may lead to unexpected behavior. Illegal
            values cause `SchemaException`. If this is set, `customLanguage`
            can't be set.
      description: JSON template for a language entry.
      id: UserLanguage
    Token:
      type: object
      description: JSON template for token resource in Directory API.
      id: Token
      properties:
        scopes:
          description: A list of authorization scopes the application is granted.
          type: array
          items:
            type: string
        etag:
          type: string
          description: ETag of the resource.
        clientId:
          type: string
          description: The Client ID of the application the token is issued to.
        kind:
          default: admin#directory#token
          description: >-
            The type of the API resource. This is always
            `admin#directory#token`.
          type: string
        displayText:
          type: string
          description: The displayable name of the application the token is issued to.
        userKey:
          type: string
          description: The unique ID of the user that issued the token.
        anonymous:
          description: >-
            Whether the application is registered with Google. The value is
            `true` if the application has an anonymous Client ID.
          type: boolean
        nativeApp:
          description: >-
            Whether the token is issued to an installed application. The value
            is `true` if the application is installed to a desktop or mobile
            device.
          type: boolean
    BatchDeletePrintServersRequest:
      type: object
      properties:
        printServerIds:
          description: >-
            A list of print server IDs that should be deleted (max `100` per
            batch).
          items:
            type: string
          type: array
      id: BatchDeletePrintServersRequest
      description: Request to delete multiple existing print servers in a batch.
    BatchCreatePrintersRequest:
      description: Request for adding new printers in batch.
      type: object
      id: BatchCreatePrintersRequest
      properties:
        requests:
          items:
            $ref: '#/components/schemas/CreatePrinterRequest'
          description: A list of Printers to be created. Max 50 at a time.
          type: array
    GroupAlias:
      properties:
        id:
          type: string
          description: The unique ID of the group.
        etag:
          description: ETag of the resource.
          type: string
        kind:
          description: >-
            The type of the API resource. For Alias resources, the value is
            `admin#directory#alias`.
          type: string
        primaryEmail:
          description: The primary email address of the group.
          type: string
        alias:
          type: string
          description: The alias email address.
      description: >-
        The Directory API manages aliases, which are alternative email
        addresses.
      type: object
      id: GroupAlias
    BatchDeletePrintersResponse:
      id: BatchDeletePrintersResponse
      description: Response for deleting existing printers in batch.
      type: object
      properties:
        failedPrinters:
          type: array
          items:
            $ref: '#/components/schemas/FailureInfo'
          description: A list of update failures.
        printerIds:
          type: array
          items:
            type: string
          description: A list of Printer.id that were successfully deleted.
    Empty:
      type: object
      properties: {}
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
    UserRelation:
      type: object
      id: UserRelation
      properties:
        type:
          type: string
          description: >-
            The relation of the user. Some of the possible values are mother
            father sister brother manager assistant partner.
        value:
          type: string
          description: The name of the relation.
        customType:
          type: string
          description: Custom Type.
      description: JSON template for a relation entry.
    UserSshPublicKey:
      description: JSON template for a POSIX account entry.
      type: object
      id: UserSshPublicKey
      properties:
        expirationTimeUsec:
          format: int64
          description: An expiration time in microseconds since epoch.
          type: string
        fingerprint:
          readOnly: true
          description: A SHA-256 fingerprint of the SSH public key. (Read-only)
          type: string
        key:
          description: An SSH public key.
          type: string
    BatchCreatePrintersResponse:
      id: BatchCreatePrintersResponse
      type: object
      properties:
        failures:
          description: >-
            A list of create failures. Printer IDs are not populated, as printer
            were not created.
          type: array
          items:
            $ref: '#/components/schemas/FailureInfo'
        printers:
          type: array
          items:
            $ref: '#/components/schemas/Printer'
          description: A list of successfully created printers with their IDs populated.
      description: Response for adding new printers in batch.
    PrintServer:
      type: object
      id: PrintServer
      properties:
        description:
          description: >-
            Editable. Description of the print server (as shown in the Admin
            console).
          type: string
        displayName:
          type: string
          description: >-
            Editable. Display name of the print server (as shown in the Admin
            console).
        id:
          description: Immutable. ID of the print server. Leave empty when creating.
          type: string
        name:
          description: >-
            Immutable. Resource name of the print server. Leave empty when
            creating. Format:
            `customers/{customer.id}/printServers/{print_server.id}`
          type: string
        orgUnitId:
          description: >-
            ID of the organization unit (OU) that owns this print server. This
            value can only be set when the print server is initially created. If
            it's not populated, the print server is placed under the root OU.
            The `org_unit_id` can be retrieved using the [Directory
            API](/admin-sdk/directory/reference/rest/v1/orgunits).
          type: string
        createTime:
          type: string
          format: google-datetime
          description: Output only. Time when the print server was created.
          readOnly: true
        uri:
          type: string
          description: Editable. Print server URI.
      description: Configuration for a print server.
    RoleAssignment:
      type: object
      description: Defines an assignment of a role.
      id: RoleAssignment
      properties:
        kind:
          type: string
          default: admin#directory#roleAssignment
          description: >-
            The type of the API resource. This is always
            `admin#directory#roleAssignment`.
        roleAssignmentId:
          format: int64
          type: string
          description: ID of this roleAssignment.
        etag:
          description: ETag of the resource.
          type: string
        scopeType:
          description: The scope in which this role is assigned.
          type: string
        roleId:
          description: The ID of the role that is assigned.
          type: string
          format: int64
        assigneeType:
          description: Output only. The type of the assignee (`USER` or `GROUP`).
          enum:
            - user
            - group
          type: string
          readOnly: true
          enumDescriptions:
            - An individual user within the domain.
            - A group within the domain.
        assignedTo:
          type: string
          description: >-
            The unique ID of the entity this role is assigned to—either the
            `user_id` of a user, the `group_id` of a group, or the `uniqueId` of
            a service account as defined in [Identity and Access Management
            (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
        orgUnitId:
          type: string
          description: >-
            If the role is restricted to an organization unit, this contains the
            ID for the organization unit the exercise of this role is restricted
            to.
    Tokens:
      properties:
        etag:
          description: ETag of the resource.
          type: string
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#tokenList`.
          type: string
          default: admin#directory#tokenList
        items:
          type: array
          items:
            $ref: '#/components/schemas/Token'
          description: A list of Token resources.
      type: object
      id: Tokens
      description: JSON response template for List tokens operation in Directory API.
    DirectoryChromeosdevicesIssueCommandRequest:
      type: object
      properties:
        payload:
          type: string
          description: >-
            The payload for the command, provide it only if command supports it.
            The following commands support adding payload: * `SET_VOLUME`:
            Payload is a stringified JSON object in the form: { "volume": 50 }.
            The volume has to be an integer in the range [0,100]. *
            `DEVICE_START_CRD_SESSION`: Payload is optionally a stringified JSON
            object in the form: { "ackedUserPresence": true }.
            `ackedUserPresence` is a boolean. By default, `ackedUserPresence` is
            set to `false`. To start a Chrome Remote Desktop session for an
            active device, set `ackedUserPresence` to `true`.
        commandType:
          description: The type of command.
          enumDescriptions:
            - The command type was unspecified.
            - >-
              Reboot the device. Can only be issued to Kiosk and managed guest
              session devices.
            - >-
              Take a screenshot of the device. Only available if the device is
              in Kiosk Mode.
            - >-
              Set the volume of the device. Can only be issued to Kiosk and
              managed guest session devices.
            - >-
              Wipe all the users off of the device. Executing this command in
              the device will remove all user profile data, but it will keep
              device policy and enrollment.
            - >-
              Wipes the device by performing a power wash. Executing this
              command in the device will remove all data including user
              policies, device policies and enrollment policies. Warning: This
              will revert the device back to a factory state with no enrollment
              unless the device is subject to forced or auto enrollment. Use
              with caution, as this is an irreversible action!
            - Starts a Chrome Remote Desktop session.
            - >-
              Capture the system logs of a kiosk device. The logs can be
              downloaded from the downloadUrl link present in `deviceFiles`
              field of
              [chromeosdevices](https://developers.google.com/admin-sdk/directory/reference/rest/v1/chromeosdevices)
          enum:
            - COMMAND_TYPE_UNSPECIFIED
            - REBOOT
            - TAKE_A_SCREENSHOT
            - SET_VOLUME
            - WIPE_USERS
            - REMOTE_POWERWASH
            - DEVICE_START_CRD_SESSION
            - CAPTURE_LOGS
          type: string
      description: A request for issuing a command.
      id: DirectoryChromeosdevicesIssueCommandRequest
    DirectoryChromeosdevicesCommand:
      id: DirectoryChromeosdevicesCommand
      type: object
      properties:
        type:
          type: string
          description: The type of the command.
          enumDescriptions:
            - The command type was unspecified.
            - >-
              Reboot the device. Can only be issued to Kiosk and managed guest
              session devices.
            - >-
              Take a screenshot of the device. Only available if the device is
              in Kiosk Mode.
            - >-
              Set the volume of the device. Can only be issued to Kiosk and
              managed guest session devices.
            - >-
              Wipe all the users off of the device. Executing this command in
              the device will remove all user profile data, but it will keep
              device policy and enrollment.
            - >-
              Wipes the device by performing a power wash. Executing this
              command in the device will remove all data including user
              policies, device policies and enrollment policies. Warning: This
              will revert the device back to a factory state with no enrollment
              unless the device is subject to forced or auto enrollment. Use
              with caution, as this is an irreversible action!
            - Starts a Chrome Remote Desktop session.
            - >-
              Capture the system logs of a kiosk device. The logs can be
              downloaded from the downloadUrl link present in `deviceFiles`
              field of
              [chromeosdevices](https://developers.google.com/admin-sdk/directory/reference/rest/v1/chromeosdevices)
          enum:
            - COMMAND_TYPE_UNSPECIFIED
            - REBOOT
            - TAKE_A_SCREENSHOT
            - SET_VOLUME
            - WIPE_USERS
            - REMOTE_POWERWASH
            - DEVICE_START_CRD_SESSION
            - CAPTURE_LOGS
        commandId:
          type: string
          description: Unique ID of a device command.
          format: int64
        payload:
          description: The payload that the command specified, if any.
          type: string
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - EXPIRED
            - CANCELLED
            - SENT_TO_CLIENT
            - ACKED_BY_CLIENT
            - EXECUTED_BY_CLIENT
          enumDescriptions:
            - The command status was unspecified.
            - An unexpired command not yet sent to the client.
            - >-
              The command didn't get executed by the client within the expected
              time.
            - The command is cancelled by admin while in PENDING.
            - The command has been sent to the client.
            - The client has responded that it received the command.
            - The client has (un)successfully executed the command.
          description: Indicates the command state.
        issueTime:
          description: The timestamp when the command was issued by the admin.
          format: google-datetime
          type: string
        commandResult:
          description: The result of the command execution.
          $ref: '#/components/schemas/DirectoryChromeosdevicesCommandResult'
        commandExpireTime:
          format: google-datetime
          description: >-
            The time at which the command will expire. If the device doesn't
            execute the command within this time the command will become
            expired.
          type: string
      description: Information regarding a command that was issued to a device.
    Asp:
      id: Asp
      properties:
        lastTimeUsed:
          type: string
          format: int64
          description: >-
            The time when the ASP was last used. Expressed in [Unix
            time](https://en.wikipedia.org/wiki/Epoch_time) format.
        codeId:
          description: The unique ID of the ASP.
          type: integer
          format: int32
        kind:
          default: admin#directory#asp
          type: string
          description: The type of the API resource. This is always `admin#directory#asp`.
        etag:
          description: ETag of the ASP.
          type: string
        name:
          type: string
          description: >-
            The name of the application that the user, represented by their
            `userId`, entered when the ASP was created.
        userKey:
          type: string
          description: The unique ID of the user who issued the ASP.
        creationTime:
          type: string
          format: int64
          description: >-
            The time when the ASP was created. Expressed in [Unix
            time](https://en.wikipedia.org/wiki/Epoch_time) format.
      type: object
      description: >-
        An application-specific password (ASP) is used with applications that do
        not accept a verification code when logging into the application on
        certain devices. The ASP access code is used instead of the login and
        password you commonly use when accessing an application through a
        browser. For more information about ASPs and how to create one, see the
        [help center](https://support.google.com/a/answer/2537800#asp).
    UserAddress:
      id: UserAddress
      description: JSON template for address.
      type: object
      properties:
        extendedAddress:
          description: Extended Address.
          type: string
        sourceIsStructured:
          type: boolean
          description: >-
            User supplied address was structured. Structured addresses are NOT
            supported at this time. You might be able to write structured
            addresses but any values will eventually be clobbered.
        primary:
          type: boolean
          description: >-
            If this is user's primary address. Only one entry could be marked as
            primary.
        type:
          type: string
          description: >-
            Each entry can have a type which indicates standard values of that
            entry. For example address could be of home work etc. In addition to
            the standard type an entry can have a custom type and can take any
            value. Such type should have the CUSTOM value as type and also have
            a customType value.
        country:
          description: Country.
          type: string
        countryCode:
          type: string
          description: Country code.
        poBox:
          type: string
          description: Other parts of address.
        region:
          type: string
          description: Region.
        locality:
          type: string
          description: Locality.
        streetAddress:
          type: string
          description: Street.
        postalCode:
          type: string
          description: Postal code.
        customType:
          type: string
          description: Custom type.
        formatted:
          description: Formatted address.
          type: string
    BatchCreatePrintServersRequest:
      id: BatchCreatePrintServersRequest
      type: object
      properties:
        requests:
          items:
            $ref: '#/components/schemas/CreatePrintServerRequest'
          description: >-
            Required. A list of `PrintServer` resources to be created (max `50`
            per batch).
          type: array
      description: Request to add multiple new print servers in a batch.
    UserCustomProperties:
      description: >-
        JSON template for a set of custom properties (i.e. all fields in a
        particular schema)
      id: UserCustomProperties
      additionalProperties:
        type: any
      type: object
    UserExternalId:
      type: object
      description: JSON template for an externalId entry.
      id: UserExternalId
      properties:
        type:
          type: string
          description: The type of the Id.
        value:
          description: The value of the id.
          type: string
        customType:
          description: Custom type.
          type: string
    Customer:
      id: Customer
      type: object
      properties:
        etag:
          description: ETag of the resource.
          type: string
        phoneNumber:
          type: string
          description: >-
            The customer's contact phone number in
            [E.164](https://en.wikipedia.org/wiki/E.164) format.
        id:
          description: >-
            The unique ID for the customer's Google Workspace account.
            (Readonly)
          type: string
        kind:
          type: string
          description: >-
            Identifies the resource as a customer. Value:
            `admin#directory#customer`
          default: admin#directory#customer
        customerCreationTime:
          type: string
          format: date-time
          description: The customer's creation time (Readonly)
        postalAddress:
          $ref: '#/components/schemas/CustomerPostalAddress'
          description: The customer's postal address information.
        language:
          description: >-
            The customer's ISO 639-2 language code. See the [Language
            Codes](/admin-sdk/directory/v1/languages) page for the list of
            supported codes. Valid language codes outside the supported set will
            be accepted by the API but may lead to unexpected behavior. The
            default value is `en`.
          type: string
        alternateEmail:
          description: >-
            The customer's secondary contact email address. This email address
            cannot be on the same domain as the `customerDomain`
          type: string
        customerDomain:
          description: >-
            The customer's primary domain name string. Do not include the `www`
            prefix when creating a new customer.
          type: string
    DomainAliases:
      id: DomainAliases
      type: object
      properties:
        domainAliases:
          description: A list of domain alias objects.
          items:
            $ref: '#/components/schemas/DomainAlias'
          type: array
        etag:
          description: ETag of the resource.
          type: string
        kind:
          description: Kind of resource this is.
          type: string
          default: admin#directory#domainAliases
    ListPrinterModelsResponse:
      description: Response for listing allowed printer models.
      properties:
        printerModels:
          type: array
          items:
            $ref: '#/components/schemas/PrinterModel'
          description: >-
            Printer models that are currently allowed to be configured for
            ChromeOs. Some printers may be added or removed over time.
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
      id: ListPrinterModelsResponse
      type: object
    BuildingAddress:
      type: object
      id: BuildingAddress
      description: 'Public API: Resources.buildings'
      properties:
        languageCode:
          description: >-
            Optional. BCP-47 language code of the contents of this address (if
            known).
          type: string
        sublocality:
          description: Optional. Sublocality of the address.
          type: string
        administrativeArea:
          description: >-
            Optional. Highest administrative subdivision which is used for
            postal addresses of a country or region.
          type: string
        regionCode:
          description: Required. CLDR region code of the country/region of the address.
          type: string
        postalCode:
          type: string
          description: Optional. Postal code of the address.
        locality:
          type: string
          description: >-
            Optional. Generally refers to the city/town portion of the address.
            Examples: US city, IT comune, UK post town. In regions of the world
            where localities are not well defined or do not fit into this
            structure well, leave locality empty and use addressLines.
        addressLines:
          type: array
          description: >-
            Unstructured address lines describing the lower levels of an
            address.
          items:
            type: string
    Alias:
      properties:
        etag:
          type: string
        primaryEmail:
          type: string
        id:
          type: string
        kind:
          type: string
          default: admin#directory#alias
        alias:
          type: string
      id: Alias
      type: object
      description: JSON template for Alias object in Directory API.
    CreatePrinterRequest:
      id: CreatePrinterRequest
      type: object
      properties:
        parent:
          description: 'Required. The name of the customer. Format: customers/{customer_id}'
          type: string
        printer:
          $ref: '#/components/schemas/Printer'
          description: >-
            Required. A printer to create. If you want to place the printer
            under particular OU then populate printer.org_unit_id filed.
            Otherwise the printer will be placed under root OU.
      description: Request for adding a new printer.
    OrgUnit:
      type: object
      description: >-
        Managing your account's organizational units allows you to configure
        your users' access to services and custom settings. For more information
        about common organizational unit tasks, see the [Developer's
        Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The
        customer's organizational unit hierarchy is limited to 35 levels of
        depth.
      id: OrgUnit
      properties:
        etag:
          description: ETag of the resource.
          type: string
        blockInheritance:
          description: >-
            Determines if a sub-organizational unit can inherit the settings of
            the parent organization. The default value is `false`, meaning a
            sub-organizational unit inherits the settings of the nearest parent
            organizational unit. We recommend using the default value because
            setting `block_inheritance` to `true` can have _unintended
            consequences_. For more information about inheritance and users in
            an organization structure, see the [administration help
            center](https://support.google.com/a/answer/4352075).
          type: boolean
        orgUnitId:
          description: The unique ID of the organizational unit.
          type: string
        parentOrgUnitPath:
          description: >-
            The organizational unit's parent path. For example, /corp/sales is
            the parent path for /corp/sales/sales_support organizational unit.
            Required, unless `parentOrgUnitId` is set.
          type: string
        parentOrgUnitId:
          type: string
          description: >-
            The unique ID of the parent organizational unit. Required, unless
            `parentOrgUnitPath` is set.
        orgUnitPath:
          description: >-
            The full path to the organizational unit. The `orgUnitPath` is a
            derived property. When listed, it is derived from
            `parentOrgunitPath` and organizational unit's `name`. For example,
            for an organizational unit named 'apps' under parent organization
            '/engineering', the orgUnitPath is '/engineering/apps'. In order to
            edit an `orgUnitPath`, either update the name of the organization or
            the `parentOrgunitPath`. A user's organizational unit determines
            which Google Workspace services the user has access to. If the user
            is moved to a new organization, the user's access changes. For more
            information about organization structures, see the [administration
            help center](https://support.google.com/a/answer/4352075). For more
            information about moving a user to a different organization, see
            [Update a
            user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).
          type: string
        description:
          description: Description of the organizational unit.
          type: string
        kind:
          description: >-
            The type of the API resource. For Orgunits resources, the value is
            `admin#directory#orgUnit`.
          type: string
          default: admin#directory#orgUnit
        name:
          type: string
          annotations:
            required:
              - directory.orgunits.insert
          description: >-
            The organizational unit's path name. For example, an organizational
            unit's name within the /corp/support/sales_support parent path is
            sales_support. Required.
    MobileDeviceAction:
      properties:
        action:
          type: string
          description: The action to be performed on the device.
          annotations:
            required:
              - directory.mobiledevices.action
      id: MobileDeviceAction
      type: object
    DomainAlias:
      properties:
        parentDomainName:
          description: >-
            The parent domain name that the domain alias is associated with.
            This can either be a primary or secondary domain name within a
            customer.
          type: string
          annotations:
            required:
              - directory.domains.insert
        etag:
          type: string
          description: ETag of the resource.
        verified:
          description: Indicates the verification state of a domain alias. (Read-only)
          type: boolean
        domainAliasName:
          description: The domain alias name.
          type: string
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#domainAlias
        creationTime:
          type: string
          description: The creation time of the domain alias. (Read-only).
          format: int64
      type: object
      id: DomainAlias
    ChromeOsMoveDevicesToOu:
      type: object
      properties:
        deviceIds:
          annotations:
            required:
              - directory.chromeosdevices.moveDevicesToOu
          items:
            type: string
          description: Chrome OS devices to be moved to OU
          type: array
      id: ChromeOsMoveDevicesToOu
    FeatureInstance:
      id: FeatureInstance
      description: JSON template for a feature instance.
      properties:
        feature:
          description: >-
            The feature that this is an instance of. A calendar resource may
            have multiple instances of a feature.
          $ref: '#/components/schemas/Feature'
      type: object
    CustomerPostalAddress:
      type: object
      properties:
        addressLine3:
          description: Address line 3 of the address.
          type: string
        locality:
          type: string
          description: >-
            Name of the locality. An example of a locality value is the city of
            `San Francisco`.
        postalCode:
          description: >-
            The postal code. A postalCode example is a postal zip code such as
            `10009`. This is in accordance with - http:
            //portablecontacts.net/draft-spec.html#address_element.
          type: string
        region:
          description: >-
            Name of the region. An example of a region value is `NY` for the
            state of New York.
          type: string
        organizationName:
          type: string
          description: The company or company division name.
        contactName:
          type: string
          description: The customer contact's name.
        addressLine2:
          type: string
          description: Address line 2 of the address.
        countryCode:
          description: >-
            This is a required property. For `countryCode` information see the
            [ISO 3166 country code
            elements](https://www.iso.org/iso/country_codes.htm).
          type: string
        addressLine1:
          description: >-
            A customer's physical address. The address can be composed of one to
            three lines.
          type: string
      id: CustomerPostalAddress
    DirectoryChromeosdevicesIssueCommandResponse:
      properties:
        commandId:
          type: string
          description: >-
            The unique ID of the issued command, used to retrieve the command
            status.
          format: int64
      type: object
      description: A response for issuing a command.
      id: DirectoryChromeosdevicesIssueCommandResponse
    Domains2:
      type: object
      id: Domains2
      properties:
        kind:
          default: admin#directory#domains
          type: string
          description: Kind of resource this is.
        domains:
          items:
            $ref: '#/components/schemas/Domains'
          type: array
          description: A list of domain objects.
        etag:
          description: ETag of the resource.
          type: string
    UserUndelete:
      id: UserUndelete
      properties:
        orgUnitPath:
          type: string
          description: OrgUnit of User
      type: object
    UserAbout:
      id: UserAbout
      properties:
        contentType:
          description: >-
            About entry can have a type which indicates the content type. It can
            either be plain or html. By default, notes contents are assumed to
            contain plain text.
          type: string
        value:
          type: string
          description: Actual value of notes.
      description: JSON template for About (notes) of a user in Directory API.
      type: object
    UserPhoto:
      id: UserPhoto
      properties:
        width:
          type: integer
          format: int32
          description: Width of the photo in pixels.
        primaryEmail:
          type: string
          description: The user's primary email address.
        mimeType:
          type: string
          description: >-
            The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`,
            `BMP`, `TIFF`, and web-safe base64 encoding.
        kind:
          type: string
          description: >-
            The type of the API resource. For Photo resources, this is
            `admin#directory#user#photo`.
          default: admin#directory#user#photo
        height:
          format: int32
          type: integer
          description: Height of the photo in pixels.
        photoData:
          annotations:
            required:
              - directory.users.photos.update
          description: >-
            The user photo's upload data in [web-safe
            Base64](https://en.wikipedia.org/wiki/Base64#URL_applications)
            format in bytes. This means: * The slash (/) character is replaced
            with the underscore (_) character. * The plus sign (+) character is
            replaced with the hyphen (-) character. * The equals sign (=)
            character is replaced with the asterisk (*). * For padding, the
            period (.) character is used instead of the RFC-4648 baseURL
            definition which uses the equals sign (=) for padding. This is done
            to simplify URL-parsing. * Whatever the size of the photo being
            uploaded, the API downsizes it to 96x96 pixels.
          type: string
          format: byte
        etag:
          description: ETag of the resource.
          type: string
        id:
          description: The ID the API uses to uniquely identify the user.
          type: string
      type: object
    PrinterModel:
      properties:
        manufacturer:
          description: Manufacturer. eq. "Brother"
          type: string
        makeAndModel:
          description: >-
            Make and model as represented in "make_and_model" field in Printer
            object. eq. "brother mfc-8840d"
          type: string
        displayName:
          description: Display name. eq. "Brother MFC-8840D"
          type: string
      description: Printer manufacturer and model
      type: object
      id: PrinterModel
    ChromeOsDeviceAction:
      description: Data about an update to the status of a Chrome OS device.
      properties:
        action:
          description: Action to be taken on the Chrome OS device.
          type: string
          annotations:
            required:
              - directory.chromeosdevices.action
        deprovisionReason:
          type: string
          description: >-
            Only used when the action is `deprovision`. With the `deprovision`
            action, this field is required. *Note*: The deprovision reason is
            audited because it might have implications on licenses for perpetual
            subscription customers.
      id: ChromeOsDeviceAction
      type: object
    FailureInfo:
      id: FailureInfo
      type: object
      properties:
        errorMessage:
          type: string
          description: Failure reason message.
        printer:
          $ref: '#/components/schemas/Printer'
          description: Failed printer.
        errorCode:
          type: string
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          description: Canonical code for why the update failed to apply.
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - >-
              The operation was cancelled, typically by the caller. HTTP
              Mapping: 499 Client Closed Request
            - >-
              Unknown error. For example, this error may be returned when a
              `Status` value received from another address space belongs to an
              error space that is not known in this address space. Also errors
              raised by APIs that do not return enough error information may be
              converted to this error. HTTP Mapping: 500 Internal Server Error
            - >-
              The client specified an invalid argument. Note that this differs
              from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
              that are problematic regardless of the state of the system (e.g.,
              a malformed file name). HTTP Mapping: 400 Bad Request
            - >-
              The deadline expired before the operation could complete. For
              operations that change the state of the system, this error may be
              returned even if the operation has completed successfully. For
              example, a successful response from a server could have been
              delayed long enough for the deadline to expire. HTTP Mapping: 504
              Gateway Timeout
            - >-
              Some requested entity (e.g., file or directory) was not found.
              Note to server developers: if a request is denied for an entire
              class of users, such as gradual feature rollout or undocumented
              allowlist, `NOT_FOUND` may be used. If a request is denied for
              some users within a class of users, such as user-based access
              control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not
              Found
            - >-
              The entity that a client attempted to create (e.g., file or
              directory) already exists. HTTP Mapping: 409 Conflict
            - >-
              The caller does not have permission to execute the specified
              operation. `PERMISSION_DENIED` must not be used for rejections
              caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
              instead for those errors). `PERMISSION_DENIED` must not be used if
              the caller can not be identified (use `UNAUTHENTICATED` instead
              for those errors). This error code does not imply the request is
              valid or the requested entity exists or satisfies other
              pre-conditions. HTTP Mapping: 403 Forbidden
            - >-
              The request does not have valid authentication credentials for the
              operation. HTTP Mapping: 401 Unauthorized
            - >-
              Some resource has been exhausted, perhaps a per-user quota, or
              perhaps the entire file system is out of space. HTTP Mapping: 429
              Too Many Requests
            - >-
              The operation was rejected because the system is not in a state
              required for the operation's execution. For example, the directory
              to be deleted is non-empty, an rmdir operation is applied to a
              non-directory, etc. Service implementors can use the following
              guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
              `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just
              the failing call. (b) Use `ABORTED` if the client should retry at
              a higher level. For example, when a client-specified test-and-set
              fails, indicating the client should restart a read-modify-write
              sequence. (c) Use `FAILED_PRECONDITION` if the client should not
              retry until the system state has been explicitly fixed. For
              example, if an "rmdir" fails because the directory is non-empty,
              `FAILED_PRECONDITION` should be returned since the client should
              not retry unless the files are deleted from the directory. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation was aborted, typically due to a concurrency issue
              such as a sequencer check failure or transaction abort. See the
              guidelines above for deciding between `FAILED_PRECONDITION`,
              `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict
            - >-
              The operation was attempted past the valid range. E.g., seeking or
              reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error
              indicates a problem that may be fixed if the system state changes.
              For example, a 32-bit file system will generate `INVALID_ARGUMENT`
              if asked to read at an offset that is not in the range [0,2^32-1],
              but it will generate `OUT_OF_RANGE` if asked to read from an
              offset past the current file size. There is a fair bit of overlap
              between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend
              using `OUT_OF_RANGE` (the more specific error) when it applies so
              that callers who are iterating through a space can easily look for
              an `OUT_OF_RANGE` error to detect when they are done. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation is not implemented or is not supported/enabled in
              this service. HTTP Mapping: 501 Not Implemented
            - >-
              Internal errors. This means that some invariants expected by the
              underlying system have been broken. This error code is reserved
              for serious errors. HTTP Mapping: 500 Internal Server Error
            - >-
              The service is currently unavailable. This is most likely a
              transient condition, which can be corrected by retrying with a
              backoff. Note that it is not always safe to retry non-idempotent
              operations. See the guidelines above for deciding between
              `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping:
              503 Service Unavailable
            - >-
              Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
              Server Error
        printerId:
          type: string
          description: Id of a failed printer.
      description: Info about failures
    UserOrganization:
      id: UserOrganization
      properties:
        symbol:
          type: string
          description: Symbol of the organization.
        title:
          description: Title (designation) of the user in the organization.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example organization could be of school work etc. In
            addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a CustomType value.
          type: string
        department:
          type: string
          description: Department within the organization.
        location:
          type: string
          description: >-
            Location of the organization. This need not be fully qualified
            address.
        costCenter:
          type: string
          description: The cost center of the users department.
        fullTimeEquivalent:
          type: integer
          description: >-
            The full-time equivalent millipercent within the organization
            (100000 = 100%).
          format: int32
        customType:
          description: Custom type.
          type: string
        name:
          description: Name of the organization
          type: string
        primary:
          type: boolean
          description: If it user's primary organization.
        description:
          type: string
          description: Description of the organization.
        domain:
          description: The domain to which the organization belongs to.
          type: string
      description: JSON template for an organization entry.
      type: object
    Buildings:
      properties:
        nextPageToken:
          type: string
          description: >-
            The continuation token, used to page through large result sets.
            Provide this value in a subsequent request to return the next page
            of results.
        etag:
          description: ETag of the resource.
          type: string
        kind:
          type: string
          default: admin#directory#resources#buildings#buildingsList
          description: Kind of resource this is.
        buildings:
          description: The Buildings in this page of results.
          type: array
          items:
            $ref: '#/components/schemas/Building'
      type: object
      description: 'Public API: Resources.buildings'
      id: Buildings
    CalendarResource:
      description: 'Public API: Resources.calendars'
      type: object
      properties:
        etags:
          description: ETag of the resource.
          type: string
        resourceCategory:
          type: string
          description: >-
            The category of the calendar resource. Either CONFERENCE_ROOM or
            OTHER. Legacy data is set to CATEGORY_UNKNOWN.
        resourceEmail:
          description: >-
            The read-only email for the calendar resource. Generated as part of
            creating a new calendar resource.
          type: string
        userVisibleDescription:
          description: Description of the resource, visible to users and admins.
          type: string
        floorName:
          description: Name of the floor a resource is located on.
          type: string
        floorSection:
          type: string
          description: Name of the section within a floor a resource is located in.
        featureInstances:
          description: Instances of features for the calendar resource.
          type: any
        resourceDescription:
          type: string
          description: Description of the resource, visible only to admins.
        capacity:
          type: integer
          format: int32
          description: Capacity of a resource, number of seats in a room.
        generatedResourceName:
          type: string
          description: >-
            The read-only auto-generated name of the calendar resource which
            includes metadata about the resource such as building name, floor,
            capacity, etc. For example, "NYC-2-Training Room 1A (16)".
        buildingId:
          type: string
          description: Unique ID for the building a resource is located in.
        resourceType:
          description: The type of the calendar resource, intended for non-room resources.
          type: string
        kind:
          default: admin#directory#resources#calendars#CalendarResource
          type: string
          description: >-
            The type of the resource. For calendar resources, the value is
            `admin#directory#resources#calendars#CalendarResource`.
        resourceId:
          annotations:
            required:
              - directory.resources.calendars.insert
          type: string
          description: The unique ID for the calendar resource.
        resourceName:
          description: The name of the calendar resource. For example, "Training Room 1A".
          annotations:
            required:
              - directory.resources.calendars.insert
          type: string
      id: CalendarResource
    BatchDeletePrintServersResponse:
      type: object
      properties:
        failedPrintServers:
          description: A list of update failures.
          type: array
          items:
            $ref: '#/components/schemas/PrintServerFailureInfo'
        printServerIds:
          items:
            type: string
          description: A list of print server IDs that were successfully deleted.
          type: array
      id: BatchDeletePrintServersResponse
    UserName:
      type: object
      id: UserName
      properties:
        displayName:
          type: string
          description: 'The user''s display name. Limit: 256 characters.'
        familyName:
          type: string
          description: The user's last name. Required when creating a user account.
          annotations:
            required:
              - directory.users.insert
        givenName:
          annotations:
            required:
              - directory.users.insert
          description: The user's first name. Required when creating a user account.
          type: string
        fullName:
          type: string
          description: >-
            The user's full name formed by concatenating the first and last name
            values.
    DirectoryChromeosdevicesCommandResult:
      id: DirectoryChromeosdevicesCommandResult
      type: object
      properties:
        executeTime:
          format: google-datetime
          description: The time at which the command was executed or failed to execute.
          type: string
        errorMessage:
          description: >-
            The error message with a short explanation as to why the command
            failed. Only present if the command failed.
          type: string
        commandResultPayload:
          description: >-
            The payload for the command result. The following commands respond
            with a payload: * `DEVICE_START_CRD_SESSION`: Payload is a
            stringified JSON object in the form: { "url": url }. The URL
            provides a link to the Chrome Remote Desktop session.
          type: string
        result:
          enum:
            - COMMAND_RESULT_TYPE_UNSPECIFIED
            - IGNORED
            - FAILURE
            - SUCCESS
          description: The result of the command.
          enumDescriptions:
            - The command result was unspecified.
            - The command was ignored as obsolete.
            - The command could not be executed successfully.
            - The command was successfully executed.
          type: string
      description: The result of executing a command.
    OsUpdateStatus:
      id: OsUpdateStatus
      description: Contains information regarding the current OS update status.
      type: object
      properties:
        targetOsVersion:
          type: string
          description: >-
            New platform version of the OS image being downloaded and applied.
            It is only set when update status is
            UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT.
            Note this could be a dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT
            for some edge cases, e.g. update engine is restarted without a
            reboot.
        updateCheckTime:
          description: Date and time of the last update check.
          type: string
        rebootTime:
          type: string
          description: Date and time of the last reboot.
        targetKioskAppVersion:
          description: New required platform version from the pending updated kiosk app.
          type: string
        state:
          description: The update state of an OS update.
          enum:
            - updateStateUnspecified
            - updateStateNotStarted
            - updateStateDownloadInProgress
            - updateStateNeedReboot
          type: string
          enumDescriptions:
            - The update state is unspecified.
            - There is an update pending but it hasn't started.
            - The pending update is being downloaded.
            - The device is ready to install the update, but must reboot.
        updateTime:
          type: string
          description: Date and time of the last successful OS update.
    RoleAssignments:
      id: RoleAssignments
      type: object
      properties:
        nextPageToken:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignment'
          description: A list of RoleAssignment resources.
        kind:
          default: admin#directory#roleAssignments
          type: string
          description: >-
            The type of the API resource. This is always
            `admin#directory#roleAssignments`.
        etag:
          description: ETag of the resource.
          type: string
    PrintServerFailureInfo:
      description: Info about failures
      id: PrintServerFailureInfo
      type: object
      properties:
        printServer:
          description: Failed print server.
          $ref: '#/components/schemas/PrintServer'
        errorMessage:
          description: Failure reason message.
          type: string
        errorCode:
          type: string
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - >-
              The operation was cancelled, typically by the caller. HTTP
              Mapping: 499 Client Closed Request
            - >-
              Unknown error. For example, this error may be returned when a
              `Status` value received from another address space belongs to an
              error space that is not known in this address space. Also errors
              raised by APIs that do not return enough error information may be
              converted to this error. HTTP Mapping: 500 Internal Server Error
            - >-
              The client specified an invalid argument. Note that this differs
              from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
              that are problematic regardless of the state of the system (e.g.,
              a malformed file name). HTTP Mapping: 400 Bad Request
            - >-
              The deadline expired before the operation could complete. For
              operations that change the state of the system, this error may be
              returned even if the operation has completed successfully. For
              example, a successful response from a server could have been
              delayed long enough for the deadline to expire. HTTP Mapping: 504
              Gateway Timeout
            - >-
              Some requested entity (e.g., file or directory) was not found.
              Note to server developers: if a request is denied for an entire
              class of users, such as gradual feature rollout or undocumented
              allowlist, `NOT_FOUND` may be used. If a request is denied for
              some users within a class of users, such as user-based access
              control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not
              Found
            - >-
              The entity that a client attempted to create (e.g., file or
              directory) already exists. HTTP Mapping: 409 Conflict
            - >-
              The caller does not have permission to execute the specified
              operation. `PERMISSION_DENIED` must not be used for rejections
              caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
              instead for those errors). `PERMISSION_DENIED` must not be used if
              the caller can not be identified (use `UNAUTHENTICATED` instead
              for those errors). This error code does not imply the request is
              valid or the requested entity exists or satisfies other
              pre-conditions. HTTP Mapping: 403 Forbidden
            - >-
              The request does not have valid authentication credentials for the
              operation. HTTP Mapping: 401 Unauthorized
            - >-
              Some resource has been exhausted, perhaps a per-user quota, or
              perhaps the entire file system is out of space. HTTP Mapping: 429
              Too Many Requests
            - >-
              The operation was rejected because the system is not in a state
              required for the operation's execution. For example, the directory
              to be deleted is non-empty, an rmdir operation is applied to a
              non-directory, etc. Service implementors can use the following
              guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
              `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just
              the failing call. (b) Use `ABORTED` if the client should retry at
              a higher level. For example, when a client-specified test-and-set
              fails, indicating the client should restart a read-modify-write
              sequence. (c) Use `FAILED_PRECONDITION` if the client should not
              retry until the system state has been explicitly fixed. For
              example, if an "rmdir" fails because the directory is non-empty,
              `FAILED_PRECONDITION` should be returned since the client should
              not retry unless the files are deleted from the directory. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation was aborted, typically due to a concurrency issue
              such as a sequencer check failure or transaction abort. See the
              guidelines above for deciding between `FAILED_PRECONDITION`,
              `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict
            - >-
              The operation was attempted past the valid range. E.g., seeking or
              reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error
              indicates a problem that may be fixed if the system state changes.
              For example, a 32-bit file system will generate `INVALID_ARGUMENT`
              if asked to read at an offset that is not in the range [0,2^32-1],
              but it will generate `OUT_OF_RANGE` if asked to read from an
              offset past the current file size. There is a fair bit of overlap
              between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend
              using `OUT_OF_RANGE` (the more specific error) when it applies so
              that callers who are iterating through a space can easily look for
              an `OUT_OF_RANGE` error to detect when they are done. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation is not implemented or is not supported/enabled in
              this service. HTTP Mapping: 501 Not Implemented
            - >-
              Internal errors. This means that some invariants expected by the
              underlying system have been broken. This error code is reserved
              for serious errors. HTTP Mapping: 500 Internal Server Error
            - >-
              The service is currently unavailable. This is most likely a
              transient condition, which can be corrected by retrying with a
              backoff. Note that it is not always safe to retry non-idempotent
              operations. See the guidelines above for deciding between
              `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping:
              503 Service Unavailable
            - >-
              Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
              Server Error
          description: Canonical code for why the update failed to apply.
        printServerId:
          type: string
          description: ID of a failed print server.
    CreatePrintServerRequest:
      id: CreatePrintServerRequest
      type: object
      properties:
        parent:
          type: string
          description: >-
            Required. The [unique
            ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
            of the customer's Google Workspace account. Format: `customers/{id}`
        printServer:
          $ref: '#/components/schemas/PrintServer'
          description: >-
            Required. A print server to create. If you want to place the print
            server under a specific organizational unit (OU), then populate the
            `org_unit_id`. Otherwise the print server is created under the root
            OU. The `org_unit_id` can be retrieved using the [Directory
            API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-org-units).
      description: Request for adding a new print server.
    Feature:
      type: object
      id: Feature
      properties:
        kind:
          description: Kind of resource this is.
          type: string
          default: admin#directory#resources#features#Feature
        etags:
          description: ETag of the resource.
          type: string
        name:
          type: string
          annotations:
            required:
              - directory.resources.features.insert
          description: The name of the feature.
      description: JSON template for Feature object in Directory API.
    BuildingCoordinates:
      properties:
        latitude:
          format: double
          type: number
          description: Latitude in decimal degrees.
        longitude:
          type: number
          format: double
          description: Longitude in decimal degrees.
      description: 'Public API: Resources.buildings'
      id: BuildingCoordinates
      type: object
    UserIm:
      properties:
        customType:
          description: Custom type.
          type: string
        protocol:
          type: string
          description: >-
            Protocol used in the instant messenger. It should be one of the
            values from ImProtocolTypes map. Similar to type it can take a
            CUSTOM value and specify the custom name in customProtocol field.
        primary:
          description: >-
            If this is user's primary im. Only one entry could be marked as
            primary.
          type: boolean
        customProtocol:
          description: Custom protocol.
          type: string
        im:
          description: Instant messenger id.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example instant messengers could be of home work etc. In
            addition to the standard type an entry can have a custom type and
            can take any value. Such types should have the CUSTOM value as type
            and also have a customType value.
          type: string
      description: JSON template for instant messenger of an user.
      type: object
      id: UserIm
    User:
      properties:
        thumbnailPhotoUrl:
          type: string
          readOnly: true
          description: >-
            Output only. The URL of the user's profile photo. The URL might be
            temporary or private.
        addresses:
          type: any
          description: >-
            The list of the user's addresses. The maximum allowed data size for
            this field is 10KB.
        isAdmin:
          readOnly: true
          description: >-
            Output only. Indicates a user with super admininistrator privileges.
            The `isAdmin` property can only be edited in the [Make a user an
            administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin)
            operation (
            [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html)
            method). If edited in the user
            [insert](/admin-sdk/directory/v1/reference/users/insert.html) or
            [update](/admin-sdk/directory/v1/reference/users/update.html)
            methods, the edit is ignored by the API service.
          type: boolean
        primaryEmail:
          type: string
          annotations:
            required:
              - directory.users.insert
          description: >-
            The user's primary email address. This property is required in a
            request to create a user account. The `primaryEmail` must be unique
            and cannot be an alias of another user.
        creationTime:
          readOnly: true
          format: date-time
          type: string
          description: User's G Suite account creation time. (Read-only)
        ims:
          type: any
          description: >-
            The list of the user's Instant Messenger (IM) accounts. A user
            account can have multiple ims properties. But, only one of these ims
            properties can be the primary IM contact. The maximum allowed data
            size for this field is 2KB.
        hashFunction:
          description: >-
            Stores the hash format of the `password` property. The following
            `hashFunction` values are allowed: * `MD5` - Accepts simple
            hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. *
            `crypt` - Compliant with the [C crypt
            library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the
            DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and
            SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified
            as part of the prefix, they must be 10,000 or fewer.
          type: string
        gender:
          description: >-
            The user's gender. The maximum allowed data size for this field is
            1KB.
          type: any
        sshPublicKeys:
          description: A list of SSH public keys.
          type: any
        isDelegatedAdmin:
          description: >-
            Output only. Indicates if the user is a delegated administrator.
            Delegated administrators are supported by the API but cannot create
            or undelete users, or make users administrators. These requests are
            ignored by the API service. Roles and privileges for administrators
            are assigned using the [Admin
            console](https://support.google.com/a/answer/33325).
          readOnly: true
          type: boolean
        suspensionReason:
          description: >-
            Output only. Has the reason a user account is suspended either by
            the administrator or by Google at the time of suspension. The
            property is returned only if the `suspended` property is `true`.
          readOnly: true
          type: string
        emails:
          description: >-
            The list of the user's email addresses. The maximum allowed data
            size for this field is 10KB.
          type: any
        name:
          description: >-
            Holds the given and family names of the user, and the read-only
            `fullName` value. The maximum number of characters in the
            `givenName` and in the `familyName` values is 60. In addition, name
            values support unicode/UTF-8 characters, and can contain spaces,
            letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and
            periods (.). For more information about character usage rules, see
            the [administration help
            center](https://support.google.com/a/answer/9193374). Maximum
            allowed data size for this field is 1KB.
          annotations:
            required:
              - directory.users.insert
          $ref: '#/components/schemas/UserName'
        id:
          description: >-
            The unique ID for the user. A user `id` can be used as a user
            request URI's `userKey`.
          type: string
        suspended:
          type: boolean
          description: Indicates if user is suspended.
        etag:
          readOnly: true
          description: Output only. ETag of the resource.
          type: string
        isEnforcedIn2Sv:
          readOnly: true
          description: Output only. Is 2-step verification enforced (Read-only)
          type: boolean
        changePasswordAtNextLogin:
          description: >-
            Indicates if the user is forced to change their password at next
            login. This setting doesn't apply when [the user signs in via a
            third-party identity
            provider](https://support.google.com/a/answer/60224).
          type: boolean
        isEnrolledIn2Sv:
          readOnly: true
          type: boolean
          description: Output only. Is enrolled in 2-step verification (Read-only)
        password:
          annotations:
            required:
              - directory.users.insert
          description: User's password
          type: string
        phones:
          type: any
          description: >-
            The list of the user's phone numbers. The maximum allowed data size
            for this field is 1KB.
        lastLoginTime:
          readOnly: true
          format: date-time
          description: User's last login time. (Read-only)
          type: string
        includeInGlobalAddressList:
          type: boolean
          description: >-
            Indicates if the user's profile is visible in the Google Workspace
            global address list when the contact sharing feature is enabled for
            the domain. For more information about excluding user profiles, see
            the [administration help
            center](https://support.google.com/a/answer/1285988).
        deletionTime:
          format: date-time
          readOnly: true
          type: string
        notes:
          type: any
          description: Notes for the user.
        locations:
          description: >-
            The user's locations. The maximum allowed data size for this field
            is 10KB.
          type: any
        orgUnitPath:
          type: string
          description: >-
            The full path of the parent organization associated with the user.
            If the parent organization is the top-level, it is represented as a
            forward slash (`/`).
        organizations:
          type: any
          description: >-
            The list of organizations the user belongs to. The maximum allowed
            data size for this field is 10KB.
        websites:
          description: >-
            The user's websites. The maximum allowed data size for this field is
            2KB.
          type: any
        keywords:
          type: any
          description: >-
            The list of the user's keywords. The maximum allowed data size for
            this field is 1KB.
        relations:
          description: >-
            The list of the user's relationships to other users. The maximum
            allowed data size for this field is 2KB.
          type: any
        posixAccounts:
          description: >-
            The list of
            [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html)
            account information for the user.
          type: any
        languages:
          type: any
          description: >-
            The user's languages. The maximum allowed data size for this field
            is 1KB.
        customerId:
          readOnly: true
          description: >-
            Output only. The customer ID to [retrieve all account
            users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users).
            You can use the alias `my_customer` to represent your account's
            `customerId`. As a reseller administrator, you can use the resold
            customer account's `customerId`. To get a `customerId`, use the
            account's primary domain in the `domain` parameter of a
            [users.list](/admin-sdk/directory/v1/reference/users/list) request.
          type: string
        ipWhitelisted:
          type: boolean
          description: >-
            If `true`, the user's IP address is subject to a deprecated IP
            address [`allowlist`](https://support.google.com/a/answer/60752)
            configuration.
        recoveryPhone:
          type: string
          description: >-
            Recovery phone of the user. The phone number must be in the E.164
            format, starting with the plus sign (+). Example: *+16506661212*.
        thumbnailPhotoEtag:
          type: string
          description: Output only. ETag of the user's photo (Read-only)
          readOnly: true
        customSchemas:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserCustomProperties'
          description: >-
            Custom fields of the user. The key is a `schema_name` and its values
            are `'field_name': 'field_value'`.
        aliases:
          readOnly: true
          type: array
          items:
            type: string
          description: Output only. The list of the user's alias email addresses.
        agreedToTerms:
          readOnly: true
          description: >-
            Output only. This property is `true` if the user has completed an
            initial login and accepted the Terms of Service agreement.
          type: boolean
        recoveryEmail:
          type: string
          description: Recovery email of the user.
        externalIds:
          description: >-
            The list of external IDs for the user, such as an employee or
            network ID. The maximum allowed data size for this field is 2KB.
          type: any
        kind:
          type: string
          description: >-
            Output only. The type of the API resource. For Users resources, the
            value is `admin#directory#user`.
          default: admin#directory#user
          readOnly: true
        isMailboxSetup:
          readOnly: true
          type: boolean
          description: >-
            Output only. Indicates if the user's Google mailbox is created. This
            property is only applicable if the user has been assigned a Gmail
            license.
        archived:
          type: boolean
          description: Indicates if user is archived.
        nonEditableAliases:
          type: array
          readOnly: true
          items:
            type: string
          description: >-
            Output only. The list of the user's non-editable alias email
            addresses. These are typically outside the account's primary domain
            or sub-domain.
      type: object
      description: >-
        The Directory API allows you to create and manage your account's users,
        user aliases, and user Google profile photos. For more information about
        common tasks, see the [User Accounts Developer's
        Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User
        Aliases Developer's
        Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).
      id: User
    MembersHasMember:
      type: object
      properties:
        isMember:
          readOnly: true
          description: >-
            Output only. Identifies whether the given user is a member of the
            group. Membership can be direct or nested.
          type: boolean
      description: JSON template for Has Member response in Directory API.
      id: MembersHasMember
    Schemas:
      id: Schemas
      properties:
        schemas:
          description: A list of UserSchema objects.
          items:
            $ref: '#/components/schemas/Schema'
          type: array
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#schemas
        etag:
          type: string
          description: ETag of the resource.
      type: object
      description: JSON response template for List Schema operation in Directory API.
    MobileDevices:
      type: object
      properties:
        etag:
          description: ETag of the resource.
          type: string
        mobiledevices:
          description: A list of Mobile Device objects.
          type: array
          items:
            $ref: '#/components/schemas/MobileDevice'
        nextPageToken:
          description: Token used to access next page of this result.
          type: string
        kind:
          type: string
          default: admin#directory#mobiledevices
          description: Kind of resource this is.
      id: MobileDevices
    VerificationCode:
      properties:
        kind:
          type: string
          description: >-
            The type of the resource. This is always
            `admin#directory#verificationCode`.
          default: admin#directory#verificationCode
        etag:
          type: string
          description: ETag of the resource.
        userId:
          type: string
          description: The obfuscated unique ID of the user.
        verificationCode:
          description: >-
            A current verification code for the user. Invalidated or used
            verification codes are not returned as part of the result.
          type: string
      type: object
      id: VerificationCode
      description: >-
        The Directory API allows you to view, generate, and invalidate backup
        verification codes for a user.
    Members:
      properties:
        etag:
          description: ETag of the resource.
          type: string
        kind:
          type: string
          default: admin#directory#members
          description: Kind of resource this is.
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
          description: A list of member objects.
        nextPageToken:
          type: string
          description: Token used to access next page of this result.
      id: Members
      type: object
    Privileges:
      type: object
      id: Privileges
      properties:
        kind:
          default: admin#directory#privileges
          type: string
          description: >-
            The type of the API resource. This is always
            `admin#directory#privileges`.
        etag:
          type: string
          description: ETag of the resource.
        items:
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
          description: A list of Privilege resources.
    BatchDeletePrintersRequest:
      description: Request for deleting existing printers in batch.
      type: object
      properties:
        printerIds:
          type: array
          items:
            type: string
          description: A list of Printer.id that should be deleted. Max 100 at a time.
      id: BatchDeletePrintersRequest
    AuxiliaryMessage:
      properties:
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - SEVERITY_INFO
            - SEVERITY_WARNING
            - SEVERITY_ERROR
          description: Message severity
          enumDescriptions:
            - Message type unspecified.
            - 'Message of severity: info.'
            - 'Message of severity: warning.'
            - 'Message of severity: error.'
          type: string
        auxiliaryMessage:
          description: >-
            Human readable message in English. Example: "Given printer is
            invalid or no longer supported."
          type: string
        fieldMask:
          type: string
          format: google-fieldmask
          description: Field that this message concerns.
      type: object
      id: AuxiliaryMessage
      description: >-
        Auxiliary message about issues with printers or settings. Example:
        {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model,
        message:"Given printer is invalid or no longer supported."}
    UserPosixAccount:
      properties:
        operatingSystemType:
          description: The operating system type for this account.
          type: string
        accountId:
          type: string
          description: A POSIX account field identifier.
        uid:
          format: uint64
          description: The POSIX compliant user ID.
          type: string
        username:
          type: string
          description: The username of the account.
        shell:
          description: The path to the login shell for this account.
          type: string
        gecos:
          description: The GECOS (user information) for this account.
          type: string
        homeDirectory:
          type: string
          description: The path to the home directory for this account.
        systemId:
          description: System identifier for which account Username or Uid apply to.
          type: string
        primary:
          description: If this is user's primary account within the SystemId.
          type: boolean
        gid:
          type: string
          format: uint64
          description: The default group ID.
      id: UserPosixAccount
      description: JSON template for a POSIX account entry.
      type: object
    UserLocation:
      properties:
        buildingId:
          type: string
          description: Building Identifier.
        floorSection:
          description: >-
            Floor section. More specific location within the floor. For example
            if a floor is divided into sections 'A', 'B' and 'C' this field
            would identify one of those values.
          type: string
        area:
          type: string
          description: >-
            Textual location. This is most useful for display purposes to
            concisely describe the location. For example 'Mountain View, CA',
            'Near Seattle', 'US-NYC-9TH 9A209A.''
        deskCode:
          description: Most specific textual code of individual desk location.
          type: string
        type:
          type: string
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example location could be of types default and desk. In
            addition to standard type an entry can have a custom type and can
            give it any name. Such types should have 'custom' as type and also
            have a customType value.
        customType:
          description: Custom Type.
          type: string
        floorName:
          description: Floor name/number.
          type: string
      id: UserLocation
      description: JSON template for a location entry.
      type: object
    Channel:
      type: object
      description: An notification channel used to watch for resource changes.
      id: Channel
      properties:
        expiration:
          format: int64
          description: >-
            Date and time of notification channel expiration, expressed as a
            Unix timestamp, in milliseconds. Optional.
          type: string
        kind:
          type: string
          description: >-
            Identifies this as a notification channel used to watch for changes
            to a resource, which is `api#channel`.
          default: api#channel
        resourceUri:
          type: string
          description: A version-specific identifier for the watched resource.
        address:
          type: string
          description: The address where notifications are delivered for this channel.
        resourceId:
          type: string
          description: >-
            An opaque ID that identifies the resource being watched on this
            channel. Stable across different API versions.
        token:
          description: >-
            An arbitrary string delivered to the target address with each
            notification delivered over this channel. Optional.
          type: string
        type:
          type: string
          description: The type of delivery mechanism used for this channel.
        id:
          description: A UUID or similar unique string that identifies this channel.
          type: string
        payload:
          description: A Boolean value to indicate whether payload is wanted. Optional.
          type: boolean
        params:
          type: object
          description: >-
            Additional parameters controlling delivery channel behavior.
            Optional. For example, `params.ttl` specifies the time-to-live in
            seconds for the notification channel, where the default is 2 hours
            and the maximum TTL is 2 days.
          additionalProperties:
            type: string
    BatchCreatePrintServersResponse:
      type: object
      properties:
        printServers:
          type: array
          description: >-
            A list of successfully created print servers with their IDs
            populated.
          items:
            $ref: '#/components/schemas/PrintServer'
        failures:
          items:
            $ref: '#/components/schemas/PrintServerFailureInfo'
          description: >-
            A list of create failures. `PrintServer` IDs are not populated, as
            print servers were not created.
          type: array
      id: BatchCreatePrintServersResponse
    ListPrintersResponse:
      type: object
      id: ListPrintersResponse
      properties:
        printers:
          type: array
          items:
            $ref: '#/components/schemas/Printer'
          description: >-
            List of printers. If `org_unit_id` was given in the request, then
            only printers visible for this OU will be returned. If `org_unit_id`
            was not given in the request, then all printers will be returned.
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
      description: Response for listing printers.
    Building:
      id: Building
      type: object
      properties:
        floorNames:
          type: array
          description: >-
            The display names for all floors in this building. The floors are
            expected to be sorted in ascending order, from lowest floor to
            highest floor. For example, ["B2", "B1", "L", "1", "2", "2M", "3",
            "PH"] Must contain at least one entry.
          items:
            type: string
        description:
          description: A brief description of the building. For example, "Chelsea Market".
          type: string
        buildingId:
          description: >-
            Unique identifier for the building. The maximum length is 100
            characters.
          type: string
        coordinates:
          $ref: '#/components/schemas/BuildingCoordinates'
          description: >-
            The geographic coordinates of the center of the building, expressed
            as latitude and longitude in decimal degrees.
        kind:
          type: string
          default: admin#directory#resources#buildings#Building
          description: Kind of resource this is.
        buildingName:
          description: >-
            The building name as seen by users in Calendar. Must be unique for
            the customer. For example, "NYC-CHEL". The maximum length is 100
            characters.
          type: string
        etags:
          type: string
          description: ETag of the resource.
        address:
          description: >-
            The postal address of the building. See
            [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for
            details. Note that only a single address line and region code are
            required.
          $ref: '#/components/schemas/BuildingAddress'
      description: 'Public API: Resources.buildings'
    Member:
      description: >-
        A Google Groups member can be a user or another group. This member can
        be inside or outside of your account's domains. For more information
        about common group member tasks, see the [Developer's
        Guide](/admin-sdk/directory/v1/guides/manage-group-members).
      type: object
      id: Member
      properties:
        type:
          description: The type of group member.
          type: string
        delivery_settings:
          description: >-
            Defines mail delivery preferences of member. This field is only
            supported by `insert`, `update`, and `get` methods.
          type: string
        status:
          description: Status of member (Immutable)
          type: string
        etag:
          description: ETag of the resource.
          type: string
        role:
          description: >-
            The member's role in a group. The API returns an error for cycles in
            group memberships. For example, if `group1` is a member of `group2`,
            `group2` cannot be a member of `group1`. For more information about
            a member's role, see the [administration help
            center](https://support.google.com/a/answer/167094).
          type: string
        kind:
          description: >-
            The type of the API resource. For Members resources, the value is
            `admin#directory#member`.
          type: string
          default: admin#directory#member
        id:
          description: >-
            The unique ID of the group member. A member `id` can be used as a
            member request URI's `memberKey`.
          type: string
        email:
          type: string
          description: >-
            The member's email address. A member can be a user or another group.
            This property is required when adding a member to a group. The
            `email` must be unique and cannot be an alias of another group. If
            the email address is changed, the API automatically reflects the
            email address changes.
    Schema:
      description: >-
        The type of API resource. For Schema resources, this is always
        `admin#directory#schema`.
      id: Schema
      type: object
      properties:
        fields:
          items:
            $ref: '#/components/schemas/SchemaFieldSpec'
          description: A list of fields in the schema.
          type: array
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
        schemaName:
          type: string
          description: >-
            The schema's name. Each `schema_name` must be unique within a
            customer. Reusing a name results in a `409: Entity already exists`
            error.
          annotations:
            required:
              - directory.schemas.insert
        etag:
          type: string
          description: The ETag of the resource.
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#schema
        displayName:
          type: string
          annotations:
            required:
              - directory.schemas.insert
          description: Display name for the schema.
        schemaId:
          description: The unique identifier of the schema (Read-only)
          type: string
    VerificationCodes:
      type: object
      properties:
        items:
          items:
            $ref: '#/components/schemas/VerificationCode'
          description: A list of verification code resources.
          type: array
        kind:
          description: >-
            The type of the resource. This is always
            `admin#directory#verificationCodesList`.
          default: admin#directory#verificationCodesList
          type: string
        etag:
          description: ETag of the resource.
          type: string
      description: >-
        JSON response template for list verification codes operation in
        Directory API.
      id: VerificationCodes
    Asps:
      id: Asps
      type: object
      properties:
        etag:
          description: ETag of the resource.
          type: string
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#aspList`.
          default: admin#directory#aspList
          type: string
        items:
          items:
            $ref: '#/components/schemas/Asp'
          description: A list of ASP resources.
          type: array
    Printer:
      properties:
        description:
          description: Editable. Description of printer.
          type: string
        displayName:
          description: Editable. Name of printer.
          type: string
        orgUnitId:
          description: >-
            Organization Unit that owns this printer (Only can be set during
            Printer creation)
          type: string
        useDriverlessConfig:
          type: boolean
          description: >-
            Editable. flag to use driverless configuration or not. If it's set
            to be true, make_and_model can be ignored
        createTime:
          readOnly: true
          type: string
          description: Output only. Time when printer was created.
          format: google-datetime
        makeAndModel:
          type: string
          description: >-
            Editable. Make and model of printer. e.g. Lexmark MS610de Value must
            be in format as seen in ListPrinterModels response.
        uri:
          type: string
          description: Editable. Printer URI.
        auxiliaryMessages:
          readOnly: true
          items:
            $ref: '#/components/schemas/AuxiliaryMessage'
          type: array
          description: >-
            Output only. Auxiliary messages about issues with the printer
            configuration if any.
        id:
          description: Id of the printer. (During printer creation leave empty)
          type: string
        name:
          description: >-
            The resource name of the Printer object, in the format
            customers/{customer-id}/printers/{printer-id} (During printer
            creation leave empty)
          type: string
      id: Printer
      type: object
      description: Printer configuration.
    SchemaFieldSpec:
      properties:
        kind:
          type: string
          default: admin#directory#schema#fieldspec
          description: >-
            The kind of resource this is. For schema fields this is always
            `admin#directory#schema#fieldspec`.
        displayName:
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          type: string
          description: Display Name of the field.
        fieldType:
          type: string
          description: The type of the field.
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
        indexed:
          default: 'true'
          description: >-
            Boolean specifying whether the field is indexed or not. Default:
            `true`.
          type: boolean
        multiValued:
          description: >-
            A boolean specifying whether this is a multi-valued field or not.
            Default: `false`.
          type: boolean
        etag:
          type: string
          description: The ETag of the field.
        numericIndexingSpec:
          description: >-
            Indexing spec for a numeric field. By default, only exact match
            queries will be supported for numeric fields. Setting the
            `numericIndexingSpec` allows range queries to be supported.
          properties:
            maxValue:
              format: double
              description: >-
                Maximum value of this field. This is meant to be indicative
                rather than enforced. Values outside this range will still be
                indexed, but search may not be as performant.
              type: number
            minValue:
              type: number
              format: double
              description: >-
                Minimum value of this field. This is meant to be indicative
                rather than enforced. Values outside this range will still be
                indexed, but search may not be as performant.
          type: object
        fieldName:
          type: string
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          description: The name of the field.
        readAccessType:
          type: string
          default: ALL_DOMAIN_USERS
          description: >-
            Specifies who can view values of this field. See [Retrieve users as
            a
            non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin)
            for more information. Note: It may take up to 24 hours for changes
            to this field to be reflected.
        fieldId:
          type: string
          description: The unique identifier of the field (Read-only)
      description: >-
        You can use schemas to add custom fields to user profiles. You can use
        these fields to store information such as the projects your users work
        on, their physical locations, their hire dates, or whatever else fits
        your business needs. For more information, see [Custom User
        Fields](/admin-sdk/directory/v1/guides/manage-schemas).
      id: SchemaFieldSpec
      type: object
    Groups:
      type: object
      id: Groups
      properties:
        kind:
          default: admin#directory#groups
          type: string
          description: Kind of resource this is.
        etag:
          description: ETag of the resource.
          type: string
        groups:
          type: array
          description: A list of group objects.
          items:
            $ref: '#/components/schemas/Group'
        nextPageToken:
          type: string
          description: Token used to access next page of this result.
    UserEmail:
      properties:
        customType:
          description: Custom Type.
          type: string
        address:
          description: Email id of the user.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example email could be of home, work etc. In addition to
            the standard type, an entry can have a custom type and can take any
            value Such types should have the CUSTOM value as type and also have
            a customType value.
          type: string
        primary:
          type: boolean
          description: >-
            If this is user's primary email. Only one entry could be marked as
            primary.
      id: UserEmail
      description: JSON template for an email.
      type: object
    UserAlias:
      properties:
        alias:
          type: string
          description: The alias email address.
        id:
          description: The unique ID for the user.
          type: string
        primaryEmail:
          type: string
          description: The user's primary email address.
        etag:
          type: string
          description: ETag of the resource.
        kind:
          type: string
          description: >-
            The type of the API resource. For Alias resources, the value is
            `admin#directory#alias`.
      type: object
      description: >-
        The Directory API manages aliases, which are alternative email
        addresses.
      id: UserAlias
    UserMakeAdmin:
      id: UserMakeAdmin
      type: object
      properties:
        status:
          description: Indicates the administrator status of the user.
          annotations:
            required:
              - directory.users.makeAdmin
          type: boolean
    Group:
      type: object
      properties:
        name:
          type: string
          description: The group's display name.
        adminCreated:
          description: >-
            Read-only. Value is `true` if this group was created by an
            administrator rather than a user.
          type: boolean
        aliases:
          items:
            type: string
          type: array
          description: >-
            Read-only. The list of a group's alias email addresses. To add,
            update, or remove a group's aliases, use the `groups.aliases`
            methods. If edited in a group's POST or PUT request, the edit is
            ignored.
        id:
          description: >-
            Read-only. The unique ID of a group. A group `id` can be used as a
            group request URI's `groupKey`.
          type: string
        etag:
          type: string
          description: ETag of the resource.
        directMembersCount:
          description: >-
            The number of users that are direct members of the group. If a group
            is a member (child) of this group (the parent), members of the child
            group are not counted in the `directMembersCount` property of the
            parent group.
          type: string
          format: int64
        kind:
          default: admin#directory#group
          description: >-
            The type of the API resource. For Groups resources, the value is
            `admin#directory#group`.
          type: string
        email:
          description: >-
            The group's email address. If your account has multiple domains,
            select the appropriate domain for the email address. The `email`
            must be unique. This property is required when creating a group.
            Group email addresses are subject to the same character usage rules
            as usernames, see the [help
            center](https://support.google.com/a/answer/9193374) for details.
          type: string
          annotations:
            required:
              - directory.groups.insert
        nonEditableAliases:
          description: >-
            Read-only. The list of the group's non-editable alias email
            addresses that are outside of the account's primary domain or
            subdomains. These are functioning email addresses used by the group.
            This is a read-only property returned in the API's response for a
            group. If edited in a group's POST or PUT request, the edit is
            ignored.
          items:
            type: string
          type: array
        description:
          type: string
          description: >-
            An extended description to help users determine the purpose of a
            group. For example, you can include information about who should
            join the group, the types of messages to send to the group, links to
            FAQs about the group, or related groups. Maximum length is `4,096`
            characters.
      id: Group
      description: >-
        Google Groups provide your users the ability to send messages to groups
        of people using the group's email address. For more information about
        common tasks, see the [Developer's
        Guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-groups).
        For information about other types of groups, see the [Cloud Identity
        Groups API
        documentation](https://cloud.google.com/identity/docs/groups). Note: The
        user calling the API (or being impersonated by a service account) must
        have an assigned
        [role](https://developers.google.com/admin-sdk/directory/v1/guides/manage-roles)
        that includes Admin API Groups permissions, such as Super Admin or
        Groups Admin.
    Users:
      id: Users
      type: object
      properties:
        etag:
          type: string
          description: ETag of the resource.
        nextPageToken:
          type: string
          description: Token used to access next page of this result.
        kind:
          default: admin#directory#users
          description: Kind of resource this is.
          type: string
        users:
          type: array
          description: A list of user objects.
          items:
            $ref: '#/components/schemas/User'
        trigger_event:
          description: >-
            Event that triggered this response (only used in case of Push
            Response)
          type: string
    Role:
      properties:
        roleId:
          description: ID of the role.
          type: string
          format: int64
        rolePrivileges:
          type: array
          annotations:
            required:
              - directory.roles.insert
          items:
            properties:
              serviceId:
                description: >-
                  The obfuscated ID of the service this privilege is for. This
                  value is returned with
                  [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).
                type: string
              privilegeName:
                description: The name of the privilege.
                type: string
            type: object
          description: The set of privileges that are granted to this role.
        roleDescription:
          type: string
          description: A short description of the role.
        etag:
          type: string
          description: ETag of the resource.
        kind:
          type: string
          default: admin#directory#role
          description: The type of the API resource. This is always `admin#directory#role`.
        isSuperAdminRole:
          description: Returns `true` if the role is a super admin role.
          type: boolean
        roleName:
          annotations:
            required:
              - directory.roles.insert
          description: Name of the role.
          type: string
        isSystemRole:
          description: Returns `true` if this is a pre-defined system role.
          type: boolean
      type: object
      id: Role
    ChromeOsDevice:
      type: object
      id: ChromeOsDevice
      description: >-
        Google Chrome devices run on the [Chrome
        OS](https://support.google.com/chromeos). For more information about
        common API tasks, see the [Developer's
        Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).
      properties:
        deviceFiles:
          type: array
          description: A list of device files to download (Read-only)
          items:
            type: object
            properties:
              downloadUrl:
                type: string
                description: File download URL
              name:
                type: string
                description: File name
              type:
                type: string
                description: File type
              createTime:
                type: string
                format: date-time
                description: Date and time the file was created
        macAddress:
          type: string
          description: >-
            The device's wireless MAC address. If the device does not have this
            information, it is not included in the response.
        willAutoRenew:
          type: boolean
          description: >-
            Determines if the device will auto renew its support after the
            support end date. This is a read-only property.
        status:
          description: The status of the device.
          type: string
        systemRamFreeReports:
          description: Reports of amounts of available RAM memory (Read-only)
          type: array
          items:
            properties:
              systemRamFreeInfo:
                type: array
                items:
                  type: string
                  format: int64
              reportTime:
                description: Date and time the report was received.
                format: date-time
                type: string
            type: object
        serialNumber:
          description: >-
            The Chrome device serial number entered when the device was enabled.
            This value is the same as the Admin console's *Serial Number* in the
            *Chrome OS Devices* tab.
          type: string
        recentUsers:
          type: array
          description: >-
            A list of recent device users, in descending order, by last login
            time.
          items:
            type: object
            description: >-
              A list of recent device users, in descending order, by last login
              time.
            properties:
              email:
                type: string
                description: >-
                  The user's email address. This is only present if the user
                  type is `USER_TYPE_MANAGED`.
              type:
                type: string
                description: The type of the user.
        tpmVersionInfo:
          description: Trusted Platform Module (TPM) (Read-only)
          type: object
          properties:
            family:
              description: >-
                TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2:
                "1.2" -> 312e3200 TPM 2.0: "2.0" -> 322e3000
              type: string
            specLevel:
              type: string
              description: >-
                TPM specification level. See Library Specification for TPM 2.0
                and Main Specification for TPM 1.2.
            vendorSpecific:
              type: string
              description: Vendor-specific information such as Vendor ID.
            firmwareVersion:
              type: string
              description: TPM firmware version.
            manufacturer:
              type: string
              description: TPM manufacturer code.
            tpmModel:
              type: string
              description: TPM model number.
        cpuInfo:
          type: array
          description: Information regarding CPU specs in the device.
          items:
            properties:
              maxClockSpeedKhz:
                type: integer
                format: int32
                description: The max CPU clock speed in kHz.
              logicalCpus:
                items:
                  description: Status of a single logical CPU.
                  type: object
                  properties:
                    maxScalingFrequencyKhz:
                      description: >-
                        Maximum frequency the CPU is allowed to run at, by
                        policy.
                      format: int32
                      type: integer
                    idleDuration:
                      description: Idle time since last boot.
                      format: google-duration
                      type: string
                    currentScalingFrequencyKhz:
                      format: int32
                      type: integer
                      description: Current frequency the CPU is running at.
                    cStates:
                      type: array
                      items:
                        description: >-
                          Status of a single C-state. C-states are various modes
                          the CPU can transition to in order to use more or less
                          power.
                        type: object
                        properties:
                          displayName:
                            description: Name of the state.
                            type: string
                          sessionDuration:
                            format: google-duration
                            type: string
                            description: Time spent in the state since the last reboot.
                      description: >-
                        C-States indicate the power consumption state of the
                        CPU. For more information look at documentation
                        published by the CPU maker.
                type: array
                description: Information for the Logical CPUs
              model:
                description: The CPU model name.
                type: string
              architecture:
                type: string
                description: The CPU architecture.
            type: object
            description: CPU specs for a CPU.
        lastDeprovisionTimestamp:
          description: (Read-only) Date and time for the last deprovision of the device.
          type: string
        annotatedAssetId:
          type: string
          description: >-
            The asset identifier as noted by an administrator or specified
            during enrollment.
        supportEndDate:
          description: Final date the device will be supported (Read-only)
          format: date-time
          type: string
        bootMode:
          type: string
          description: >-
            The boot mode for the device. The possible values are: * `Verified`:
            The device is running a valid version of the Chrome OS. * `Dev`: The
            devices's developer hardware switch is enabled. When booted, the
            device has a command line shell. For an example of a developer
            switch, see the [Chromebook developer
            information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).
        model:
          description: >-
            The device's model information. If the device does not have this
            information, this property is not included in the response.
          type: string
        etag:
          type: string
          description: ETag of the resource.
        deviceId:
          type: string
          description: The unique ID of the Chrome device.
        annotatedLocation:
          description: >-
            The address or location of the device as noted by the administrator.
            Maximum length is `200` characters. Empty values are allowed.
          type: string
        kind:
          type: string
          description: >-
            The type of resource. For the Chromeosdevices resource, the value is
            `admin#directory#chromeosdevice`.
          default: admin#directory#chromeosdevice
        osUpdateStatus:
          description: The status of the OS updates for the device.
          $ref: '#/components/schemas/OsUpdateStatus'
        diskVolumeReports:
          description: >-
            Reports of disk space and other info about mounted/connected
            volumes.
          items:
            properties:
              volumeInfo:
                description: Disk volumes
                items:
                  properties:
                    storageFree:
                      type: string
                      description: Free disk space [in bytes]
                      format: int64
                    storageTotal:
                      type: string
                      description: Total disk space [in bytes]
                      format: int64
                    volumeId:
                      description: Volume id
                      type: string
                  type: object
                type: array
            type: object
          type: array
        ethernetMacAddress:
          type: string
          description: The device's MAC address on the ethernet network interface.
        orderNumber:
          type: string
          description: >-
            The device's order number. Only devices directly purchased from
            Google have an order number.
        notes:
          description: >-
            Notes about this device added by the administrator. This property
            can be
            [searched](https://support.google.com/chrome/a/answer/1698333) with
            the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list)
            method's `query` parameter. Maximum length is 500 characters. Empty
            values are allowed.
          type: string
        lastSync:
          type: string
          format: date-time
          description: >-
            Date and time the device was last synchronized with the policy
            settings in the G Suite administrator control panel (Read-only)
        platformVersion:
          description: The Chrome device's platform version.
          type: string
        lastEnrollmentTime:
          type: string
          format: date-time
          description: Date and time the device was last enrolled (Read-only)
        osVersion:
          description: The Chrome device's operating system version.
          type: string
        cpuStatusReports:
          description: Reports of CPU utilization and temperature (Read-only)
          type: array
          items:
            type: object
            properties:
              reportTime:
                type: string
                description: Date and time the report was received.
                format: date-time
              cpuUtilizationPercentageInfo:
                items:
                  format: int32
                  type: integer
                type: array
              cpuTemperatureInfo:
                description: A list of CPU temperature samples.
                items:
                  properties:
                    temperature:
                      format: int32
                      description: Temperature in Celsius degrees.
                      type: integer
                    label:
                      type: string
                      description: CPU label
                  type: object
                type: array
        systemRamTotal:
          description: Total RAM on the device [in bytes] (Read-only)
          type: string
          format: int64
        ethernetMacAddress0:
          type: string
          description: >-
            (Read-only) MAC address used by the Chromebook’s internal ethernet
            port, and for onboard network (ethernet) interface. The format is
            twelve (12) hexadecimal digits without any delimiter (uppercase
            letters). This is only relevant for some devices.
        deprovisionReason:
          enumDescriptions:
            - The deprovision reason is unknown.
            - The device was replaced by a device with the same model.
            - The device was upgraded.
            - The device's domain was changed.
            - Service expired for the device.
            - >-
              The device was deprovisioned for a legacy reason that is no longer
              supported.
            - The device was replaced by a device with a different model.
            - The device was retired.
            - The device's perpetual upgrade was transferred to a new device.
            - >-
              A reason was not required. For example, the licenses were returned
              to the customer's license pool.
            - The device was deprovisioned by a repair service center.
          description: (Read-only) Deprovision reason.
          type: string
          enum:
            - deprovisionReasonUnspecified
            - deprovisionReasonSameModelReplacement
            - deprovisionReasonUpgrade
            - deprovisionReasonDomainMove
            - deprovisionReasonServiceExpiration
            - deprovisionReasonOther
            - deprovisionReasonDifferentModelReplacement
            - deprovisionReasonRetiringDevice
            - deprovisionReasonUpgradeTransfer
            - deprovisionReasonNotRequired
            - deprovisionReasonRepairCenter
        meid:
          type: string
          description: >-
            The Mobile Equipment Identifier (MEID) or the International Mobile
            Equipment Identity (IMEI) for the 3G mobile card in a mobile device.
            A MEID/IMEI is typically used when adding a device to a wireless
            carrier's post-pay service plan. If the device does not have this
            information, this property is not included in the response. For more
            information on how to export a MEID/IMEI list, see the [Developer's
            Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).
        activeTimeRanges:
          description: A list of active time ranges (Read-only).
          items:
            properties:
              date:
                type: string
                format: date
                description: Date of usage
              activeTime:
                format: int32
                description: Duration of usage in milliseconds.
                type: integer
            type: object
          type: array
        dockMacAddress:
          description: >-
            (Read-only) Built-in MAC address for the docking station that the
            device connected to. Factory sets Media access control address (MAC
            address) assigned for use by a dock. It is reserved specifically for
            MAC pass through device policy. The format is twelve (12)
            hexadecimal digits without any delimiter (uppercase letters). This
            is only relevant for some devices.
          type: string
        firstEnrollmentTime:
          description: Date and time for the first time the device was enrolled.
          type: string
        firmwareVersion:
          description: The Chrome device's firmware version.
          type: string
        lastKnownNetwork:
          items:
            type: object
            description: Information for an ip address.
            properties:
              wanIpAddress:
                type: string
                description: The WAN IP address.
              ipAddress:
                description: The IP address.
                type: string
          description: Contains last known network (Read-only)
          type: array
        annotatedUser:
          description: >-
            The user of the device as noted by the administrator. Maximum length
            is 100 characters. Empty values are allowed.
          type: string
        orgUnitId:
          type: string
          description: >-
            The unique ID of the organizational unit. orgUnitPath is the human
            readable version of orgUnitId. While orgUnitPath may change by
            renaming an organizational unit within the path, orgUnitId is
            unchangeable for one organizational unit. This property can be
            [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou)
            using the API. For more information about how to create an
            organizational structure for your device, see the [administration
            help center](https://support.google.com/a/answer/182433).
        orgUnitPath:
          type: string
          description: >-
            The full parent path with the organizational unit's name associated
            with the device. Path names are case insensitive. If the parent
            organizational unit is the top-level organization, it is represented
            as a forward slash, `/`. This property can be
            [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou)
            using the API. For more information about how to create an
            organizational structure for your device, see the [administration
            help center](https://support.google.com/a/answer/182433).
        autoUpdateExpiration:
          type: string
          format: int64
          description: >-
            (Read-only) The timestamp after which the device will stop receiving
            Chrome updates or support
        screenshotFiles:
          description: >-
            A list of screenshot files to download. Type is always
            "SCREENSHOT_FILE". (Read-only)
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: File type
              name:
                description: File name
                type: string
              downloadUrl:
                description: File download URL
                type: string
              createTime:
                description: Date and time the file was created
                format: date-time
                type: string
        manufactureDate:
          description: >-
            (Read-only) The date the device was manufactured in yyyy-mm-dd
            format.
          type: string
    Domains:
      type: object
      properties:
        creationTime:
          description: >-
            Creation time of the domain. Expressed in [Unix
            time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).
          format: int64
          type: string
        etag:
          description: ETag of the resource.
          type: string
        isPrimary:
          description: Indicates if the domain is a primary domain (Read-only).
          type: boolean
        domainAliases:
          description: A list of domain alias objects. (Read-only)
          type: array
          items:
            $ref: '#/components/schemas/DomainAlias'
        domainName:
          description: The domain name of the customer.
          type: string
          annotations:
            required:
              - directory.domains.insert
        verified:
          type: boolean
          description: Indicates the verification state of a domain. (Read-only).
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#domain
      id: Domains
    ListPrintServersResponse:
      type: object
      id: ListPrintServersResponse
      properties:
        printServers:
          description: List of print servers.
          items:
            $ref: '#/components/schemas/PrintServer'
          type: array
        nextPageToken:
          type: string
          description: >-
            A token that can be sent as `page_token` in a request to retrieve
            the next page. If this field is omitted, there are no subsequent
            pages.
    UserWebsite:
      properties:
        primary:
          description: If this is user's primary website or not.
          type: boolean
        customType:
          description: Custom Type.
          type: string
        value:
          description: Website.
          type: string
        type:
          type: string
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example website could be of home work blog etc. In
            addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a customType value.
      description: JSON template for a website entry.
      type: object
      id: UserWebsite
    Privilege:
      id: Privilege
      properties:
        isOuScopable:
          type: boolean
          description: If the privilege can be restricted to an organization unit.
        serviceName:
          type: string
          description: The name of the service this privilege is for.
        serviceId:
          description: >-
            The obfuscated ID of the service this privilege is for. This value
            is returned with
            [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).
          type: string
        childPrivileges:
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
          description: >-
            A list of child privileges. Privileges for a service form a tree.
            Each privilege can have a list of child privileges; this list is
            empty for a leaf privilege.
        kind:
          type: string
          default: admin#directory#privilege
          description: >-
            The type of the API resource. This is always
            `admin#directory#privilege`.
        privilegeName:
          description: The name of the privilege.
          type: string
        etag:
          description: ETag of the resource.
          type: string
      type: object
    Aliases:
      description: JSON response template to list aliases in Directory API.
      type: object
      id: Aliases
      properties:
        etag:
          type: string
        aliases:
          type: array
          items:
            type: any
        kind:
          type: string
          default: admin#directory#aliases
    UserKeyword:
      type: object
      description: JSON template for a keyword entry.
      properties:
        type:
          description: >-
            Each entry can have a type which indicates standard type of that
            entry. For example keyword could be of type occupation or outlook.
            In addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a customType value.
          type: string
        customType:
          type: string
          description: Custom Type.
        value:
          description: Keyword.
          type: string
      id: UserKeyword
    Features:
      id: Features
      properties:
        etag:
          description: ETag of the resource.
          type: string
        kind:
          default: admin#directory#resources#features#featuresList
          description: Kind of resource this is.
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          description: The Features in this page of results.
        nextPageToken:
          type: string
          description: >-
            The continuation token, used to page through large result sets.
            Provide this value in a subsequent request to return the next page
            of results.
      description: 'Public API: Resources.features'
      type: object
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/admin.directory.userschema.readonly: View user schemas on your domain
            https://www.googleapis.com/auth/admin.directory.domain.readonly: View domains related to your customers
            https://www.googleapis.com/auth/admin.directory.device.mobile: View and manage your mobile devices' metadata
            https://www.googleapis.com/auth/admin.directory.group.member: View and manage group subscriptions on your domain
            https://www.googleapis.com/auth/admin.directory.group.readonly: View groups on your domain
            https://www.googleapis.com/auth/admin.directory.user: View and manage the provisioning of users on your domain
            https://www.googleapis.com/auth/admin.directory.customer.readonly: View customer related information
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
            https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly: View calendar resources on your domain
            https://www.googleapis.com/auth/admin.directory.resource.calendar: >-
              View and manage the provisioning of calendar resources on your
              domain
            https://www.googleapis.com/auth/admin.chrome.printers: >-
              See, add, edit, and permanently delete the printers that your
              organization can use with Chrome
            https://www.googleapis.com/auth/admin.chrome.printers.readonly: See the printers that your organization can use with Chrome
            https://www.googleapis.com/auth/admin.directory.orgunit: View and manage organization units on your domain
            https://www.googleapis.com/auth/admin.directory.customer: View and manage customer related information
            https://www.googleapis.com/auth/admin.directory.user.alias.readonly: View user aliases on your domain
            https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly: View delegated admin roles for your domain
            https://www.googleapis.com/auth/admin.directory.userschema: View and manage the provisioning of user schemas on your domain
            https://www.googleapis.com/auth/admin.directory.device.chromeos: View and manage your Chrome OS devices' metadata
            https://www.googleapis.com/auth/admin.directory.group: View and manage the provisioning of groups on your domain
            https://www.googleapis.com/auth/admin.directory.domain: View and manage the provisioning of domains for your customers
            https://www.googleapis.com/auth/admin.directory.device.mobile.action: Manage your mobile devices by performing administrative tasks
            https://www.googleapis.com/auth/admin.directory.rolemanagement: Manage delegated admin roles for your domain
            https://www.googleapis.com/auth/admin.directory.orgunit.readonly: View organization units on your domain
            https://www.googleapis.com/auth/admin.directory.user.security: Manage data access permissions for users on your domain
            https://www.googleapis.com/auth/admin.directory.user.readonly: See info about users on your domain
            https://www.googleapis.com/auth/admin.directory.user.alias: View and manage user aliases on your domain
            https://www.googleapis.com/auth/admin.directory.device.mobile.readonly: View your mobile devices' metadata
            https://www.googleapis.com/auth/admin.directory.group.member.readonly: View group subscriptions on your domain
            https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly: View your Chrome OS devices' metadata
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /admin/directory/v1/users/{userKey}/photos/thumbnail:
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
    get:
      description: Retrieves the user's photo.
      operationId: directory.users.photos.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: select
    put:
      description: Adds a photo for the user.
      operationId: directory.users.photos.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPhoto'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: exec
    patch:
      description: >-
        Adds a photo for the user. This method supports [patch
        semantics](/admin-sdk/directory/v1/guides/performance#patch).
      operationId: directory.users.photos.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPhoto'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: exec
    delete:
      description: Removes the user's photo.
      operationId: directory.users.photos.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: delete
  /admin/directory/v1/users/{userKey}/aliases:
    parameters: *ref_1
    post:
      description: Adds an alias.
      operationId: directory.users.aliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alias'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: insert
    get:
      description: Lists all aliases for a user.
      operationId: directory.users.aliases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliases'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: select
  /admin/directory/v1/users/{userKey}/aliases/watch:
    parameters: *ref_1
    post:
      description: Watches for changes in users list.
      operationId: directory.users.aliases.watch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: exec
  /admin/directory/v1/users/{userKey}/aliases/{alias}:
    parameters: *ref_1
    delete:
      description: Removes an alias.
      operationId: directory.users.aliases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: alias
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: delete
  /admin/directory/v1/users/{userKey}/undelete:
    parameters: *ref_1
    post:
      description: Undeletes a deleted user.
      operationId: directory.users.undelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUndelete'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  /admin/directory/v1/users/{userKey}/makeAdmin:
    parameters: *ref_1
    post:
      description: Makes a user a super administrator.
      operationId: directory.users.makeAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMakeAdmin'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  /admin/directory/v1/users/watch:
    parameters: *ref_1
    post:
      description: Watches for changes in users list.
      operationId: directory.users.watch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      parameters:
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: domain
          schema:
            type: string
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
        - in: query
          name: showDeleted
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  /admin/directory/v1/users/{userKey}/signOut:
    parameters: *ref_1
    post:
      description: >-
        Signs a user out of all web and device sessions and reset their sign-in
        cookies. User will have to sign in by authenticating again.
      operationId: directory.users.signOut
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  /admin/directory/v1/users/{userKey}:
    parameters: *ref_1
    delete:
      description: Deletes a user.
      operationId: directory.users.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: delete
    patch:
      description: >-
        Updates a user using patch semantics. The update method should be used
        instead, because it also supports patch semantics and has better
        performance. If you're mapping an external identity to a Google
        identity, use the
        [`update`](https://developers.google.com/admin-sdk/directory/v1/reference/users/update)
        method instead of the `patch` method. This method is unable to clear
        fields that contain repeated objects (`addresses`, `phones`, etc). Use
        the update method instead.
      operationId: directory.users.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
    put:
      description: >-
        Updates a user. This method supports patch semantics, meaning that you
        only need to include the fields you wish to update. Fields that are not
        present in the request will be preserved, and fields set to `null` will
        be cleared. For repeating fields that contain arrays, individual items
        in the array can't be patched piecemeal; they must be supplied in the
        request body with the desired values for all items. See the [user
        accounts
        guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user)
        for more information.
      operationId: directory.users.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
    get:
      description: Retrieves a user.
      operationId: directory.users.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: select
  /admin/directory/v1/users:
    parameters: *ref_1
    post:
      description: >-
        Creates a user. Mutate calls immediately following user creation might
        sometimes fail as the user isn't fully created due to propagation delay
        in our backends. Check the error details for the "User creation is not
        complete" message to see if this is the case. Retrying the calls after
        some time can help in this case.
      operationId: directory.users.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters: []
      x-stackQL-resource: users
      x-stackQL-verb: insert
    get:
      description: >-
        Retrieves a paginated list of either deleted users or all users in a
        domain.
      operationId: directory.users.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
      parameters:
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: domain
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: showDeleted
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customer}/roles/ALL/privileges:
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of all privileges for a customer.
      operationId: directory.privileges.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Privileges'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: privileges
      x-stackQL-verb: select
  /admin/directory/v1/users/{userKey}/verificationCodes/generate:
    parameters: *ref_1
    post:
      description: Generates new backup verification codes for the user.
      operationId: directory.verificationCodes.generate
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: verification_codes
      x-stackQL-verb: exec
  /admin/directory/v1/users/{userKey}/verificationCodes/invalidate:
    parameters: *ref_1
    post:
      description: Invalidates the current backup verification codes for the user.
      operationId: directory.verificationCodes.invalidate
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: verification_codes
      x-stackQL-verb: exec
  /admin/directory/v1/users/{userKey}/verificationCodes:
    parameters: *ref_1
    get:
      description: >-
        Returns the current set of valid backup verification codes for the
        specified user.
      operationId: directory.verificationCodes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationCodes'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: verification_codes
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu:
    parameters: *ref_1
    post:
      description: >-
        Moves or inserts multiple Chrome OS devices to an organizational unit.
        You can move up to 50 devices at once.
      operationId: directory.chromeosdevices.moveDevicesToOu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsMoveDevicesToOu'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: orgUnitPath
          required: true
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action:
    parameters: *ref_1
    post:
      description: >-
        Takes an action that affects a Chrome OS Device. This includes
        deprovisioning, disabling, and re-enabling devices. *Warning:* *
        Deprovisioning a device will stop device policy syncing and remove
        device-level printers. After a device is deprovisioned, it must be wiped
        before it can be re-enrolled. * Lost or stolen devices should use the
        disable action. * Re-enabling a disabled device will consume a device
        license. If you do not have sufficient licenses available when
        completing the re-enable action, you will receive an error. For more
        information about deprovisioning and disabling devices, visit the [help
        center](https://support.google.com/chrome/a/answer/3523633).
      operationId: directory.chromeosdevices.action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDeviceAction'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:
    parameters: *ref_1
    get:
      description: Retrieves a Chrome OS device's properties.
      operationId: directory.chromeosdevices.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: select
    put:
      description: >-
        Updates a device's updatable properties, such as `annotatedUser`,
        `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.
      operationId: directory.chromeosdevices.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDevice'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
    patch:
      description: >-
        Updates a device's updatable properties, such as `annotatedUser`,
        `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This
        method supports [patch
        semantics](/admin-sdk/directory/v1/guides/performance#patch).
      operationId: directory.chromeosdevices.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDevice'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customerId}/devices/chromeos:
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of Chrome OS devices within an account.
      operationId: directory.chromeosdevices.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevices'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: includeChildOrgunits
          schema:
            type: boolean
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: orgUnitPath
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: select
  /admin/directory/v1/users/{userKey}/asps:
    parameters: *ref_1
    get:
      description: Lists the ASPs issued by a user.
      operationId: directory.asps.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asps'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: asps
      x-stackQL-verb: select
  /admin/directory/v1/users/{userKey}/asps/{codeId}:
    parameters: *ref_1
    get:
      description: Gets information about an ASP issued by a user.
      operationId: directory.asps.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asp'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: codeId
          required: true
          schema:
            type: string
      x-stackQL-resource: asps
      x-stackQL-verb: select
    delete:
      description: Deletes an ASP issued by a user.
      operationId: directory.asps.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: codeId
          required: true
          schema:
            type: string
      x-stackQL-resource: asps
      x-stackQL-verb: delete
  /admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}:
    parameters: *ref_1
    delete:
      description: Removes a mobile device.
      operationId: directory.mobiledevices.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: delete
    get:
      description: Retrieves a mobile device's properties.
      operationId: directory.mobiledevices.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customerId}/devices/mobile:
    parameters: *ref_1
    get:
      description: >-
        Retrieves a paginated list of all user-owned mobile devices for an
        account. To retrieve a list that includes company-owned devices, use the
        Cloud Identity [Devices
        API](https://cloud.google.com/identity/docs/concepts/overview-devices)
        instead. This method times out after 60 minutes. For more information,
        see [Troubleshoot error
        codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).
      operationId: directory.mobiledevices.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevices'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action:
    parameters: *ref_1
    post:
      description: >-
        Takes an action that affects a mobile device. For example, remotely
        wiping a device.
      operationId: directory.mobiledevices.action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDeviceAction'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: exec
  /admin/directory/v1/users/{userKey}/tokens:
    parameters: *ref_1
    get:
      description: >-
        Returns the set of tokens specified user has issued to 3rd party
        applications.
      operationId: directory.tokens.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: tokens
      x-stackQL-verb: select
  /admin/directory/v1/users/{userKey}/tokens/{clientId}:
    parameters: *ref_1
    get:
      description: Gets information about an access token issued by a user.
      operationId: directory.tokens.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      x-stackQL-resource: tokens
      x-stackQL-verb: select
    delete:
      description: Deletes all access tokens issued by a user for an application.
      operationId: directory.tokens.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      x-stackQL-resource: tokens
      x-stackQL-verb: delete
  /admin/directory/v1/customer/{customer}/roles/{roleId}:
    parameters: *ref_1
    put:
      description: Updates a role.
      operationId: directory.roles.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: exec
    get:
      description: Retrieves a role.
      operationId: directory.roles.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: select
    patch:
      description: Patches a role.
      operationId: directory.roles.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: exec
    delete:
      description: Deletes a role.
      operationId: directory.roles.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: delete
  /admin/directory/v1/customer/{customer}/roles:
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of all the roles in a domain.
      operationId: directory.roles.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: roles
      x-stackQL-verb: select
    post:
      description: Creates a role.
      operationId: directory.roles.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: insert
  /admin/directory/v1/users/{userKey}/twoStepVerification/turnOff:
    parameters: *ref_1
    post:
      description: Turns off 2-Step Verification for user.
      operationId: directory.twoStepVerification.turnOff
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: two_step_verification
      x-stackQL-verb: exec
  /admin/directory_v1/channels/stop:
    parameters: *ref_1
    post:
      description: Stops watching resources through this channel.
      operationId: admin.channels.stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      parameters: []
      x-stackQL-resource: channels
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}:
    parameters: *ref_1
    get:
      description: Retrieves a domain alias of the customer.
      operationId: directory.domainAliases.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAlias'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainAliasName
          required: true
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: select
    delete:
      description: Deletes a domain Alias of the customer.
      operationId: directory.domainAliases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainAliasName
          required: true
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: delete
  /admin/directory/v1/customer/{customer}/domainaliases:
    parameters: *ref_1
    post:
      description: Inserts a domain alias of the customer.
      operationId: directory.domainAliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainAlias'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAlias'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: insert
    get:
      description: Lists the domain aliases of the customer.
      operationId: directory.domainAliases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAliases'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: parentDomainName
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customer}/domains:
    parameters: *ref_1
    get:
      description: Lists the domains of the customer.
      operationId: directory.domains.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains2'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: select
    post:
      description: Inserts a domain of the customer.
      operationId: directory.domains.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domains'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: insert
  /admin/directory/v1/customer/{customer}/domains/{domainName}:
    parameters: *ref_1
    get:
      description: Retrieves a domain of the customer.
      operationId: directory.domains.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainName
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: select
    delete:
      description: Deletes a domain of the customer.
      operationId: directory.domains.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainName
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: delete
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}:
    parameters: *ref_1
    get:
      description: Gets command data a specific command issued to the device.
      operationId: admin.customer.devices.chromeos.commands.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryChromeosdevicesCommand'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: path
          name: commandId
          required: true
          schema:
            type: string
      x-stackQL-resource: commands
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand:
    parameters: *ref_1
    post:
      description: Issues a command for the device to execute.
      operationId: admin.customer.devices.chromeos.issueCommand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryChromeosdevicesIssueCommandRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DirectoryChromeosdevicesIssueCommandResponse
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
      x-stackQL-resource: chromeos
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}:
    parameters: *ref_1
    get:
      description: Retrieves a role assignment.
      operationId: directory.roleAssignments.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleAssignmentId
          required: true
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: select
    delete:
      description: Deletes a role assignment.
      operationId: directory.roleAssignments.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleAssignmentId
          required: true
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: delete
  /admin/directory/v1/customer/{customer}/roleassignments:
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of all roleAssignments.
      operationId: directory.roleAssignments.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignments'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: roleId
          schema:
            type: string
        - in: query
          name: includeIndirectRoleAssignments
          schema:
            type: boolean
        - in: query
          name: userKey
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: select
    post:
      description: Creates a role assignment.
      operationId: directory.roleAssignments.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: insert
  /admin/directory/v1/customer/{customerId}/orgunits:
    parameters: *ref_1
    post:
      description: Adds an organizational unit.
      operationId: directory.orgunits.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: insert
    get:
      description: Retrieves a list of all organizational units for an account.
      operationId: directory.orgunits.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnits'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: orgUnitPath
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}:
    parameters: *ref_1
    patch:
      description: >-
        Updates an organizational unit. This method supports [patch
        semantics](/admin-sdk/directory/v1/guides/performance#patch)
      operationId: directory.orgunits.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: exec
    delete:
      description: Removes an organizational unit.
      operationId: directory.orgunits.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: delete
    get:
      description: Retrieves an organizational unit.
      operationId: directory.orgunits.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: select
    put:
      description: Updates an organizational unit.
      operationId: directory.orgunits.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customer}/resources/calendars:
    parameters: *ref_1
    post:
      description: Inserts a calendar resource.
      operationId: directory.resources.calendars.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: insert
    get:
      description: Retrieves a list of calendar resources for an account.
      operationId: directory.resources.calendars.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResources'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}:
    parameters: *ref_1
    patch:
      description: Patches a calendar resource.
      operationId: directory.resources.calendars.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: exec
    get:
      description: Retrieves a calendar resource.
      operationId: directory.resources.calendars.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: select
    delete:
      description: Deletes a calendar resource.
      operationId: directory.resources.calendars.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: delete
    put:
      description: >-
        Updates a calendar resource. This method supports patch semantics,
        meaning you only need to include the fields you wish to update. Fields
        that are not present in the request will be preserved.
      operationId: directory.resources.calendars.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}:
    parameters: *ref_1
    put:
      description: Updates a building.
      operationId: directory.resources.buildings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: exec
    patch:
      description: Patches a building.
      operationId: directory.resources.buildings.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: exec
    delete:
      description: Deletes a building.
      operationId: directory.resources.buildings.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: delete
    get:
      description: Retrieves a building.
      operationId: directory.resources.buildings.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: select
  /admin/directory/v1/customer/{customer}/resources/buildings:
    parameters: *ref_1
    get:
      description: Retrieves a list of buildings for an account.
      operationId: directory.resources.buildings.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buildings'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: select
    post:
      description: Inserts a building.
      operationId: directory.resources.buildings.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: insert
  /admin/directory/v1/customer/{customer}/resources/features:
    parameters: *ref_1
    get:
      description: Retrieves a list of features for an account.
      operationId: directory.resources.features.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Features'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: features
      x-stackQL-verb: select
    post:
      description: Inserts a feature.
      operationId: directory.resources.features.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: insert
  /admin/directory/v1/customer/{customer}/resources/features/{featureKey}:
    parameters: *ref_1
    put:
      description: Updates a feature.
      operationId: directory.resources.features.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: exec
    get:
      description: Retrieves a feature.
      operationId: directory.resources.features.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: select
    delete:
      description: Deletes a feature.
      operationId: directory.resources.features.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: delete
    patch:
      description: Patches a feature.
      operationId: directory.resources.features.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename:
    parameters: *ref_1
    post:
      description: Renames a feature.
      operationId: directory.resources.features.rename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureRename'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: oldName
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: exec
  /admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters:
    parameters: *ref_1
    post:
      description: Creates printers under given Organization Unit.
      operationId: admin.customers.chrome.printers.batchCreatePrinters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreatePrintersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreatePrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: exec
  /admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters:
    parameters: *ref_1
    post:
      description: Deletes printers in batch.
      operationId: admin.customers.chrome.printers.batchDeletePrinters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeletePrintersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeletePrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: exec
  /admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}:
    parameters: *ref_1
    get:
      description: Returns a `Printer` resource (printer's config).
      operationId: admin.customers.chrome.printers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: select
    delete:
      description: Deletes a `Printer`.
      operationId: admin.customers.chrome.printers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: delete
    patch:
      description: Updates a `Printer` resource.
      operationId: admin.customers.chrome.printers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Printer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
        - in: query
          name: clearMask
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: exec
  /admin/directory/v1/customers/{customersId}/chrome/printers:
    parameters: *ref_1
    post:
      description: Creates a printer under given Organization Unit.
      operationId: admin.customers.chrome.printers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Printer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: insert
    get:
      description: List printers configs.
      operationId: admin.customers.chrome.printers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orgUnitId
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: select
  /admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels:
    parameters: *ref_1
    get:
      description: Lists the supported printer models.
      operationId: admin.customers.chrome.printers.listPrinterModels
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrinterModelsResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: printers__printer_models
      x-stackQL-verb: select
  /admin/directory/v1/customers/{customersId}/chrome/printServers:
    parameters: *ref_1
    get:
      description: Lists print server configurations.
      operationId: admin.customers.chrome.printServers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orgUnitId
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: select
    post:
      description: Creates a print server.
      operationId: admin.customers.chrome.printServers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrintServer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: insert
  /admin/directory/v1/customers/{customersId}/chrome/printServers:batchDeletePrintServers:
    parameters: *ref_1
    post:
      description: Deletes multiple print servers.
      operationId: admin.customers.chrome.printServers.batchDeletePrintServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeletePrintServersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeletePrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: exec
  /admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}:
    parameters: *ref_1
    delete:
      description: Deletes a print server.
      operationId: admin.customers.chrome.printServers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: delete
    get:
      description: Returns a print server's configuration.
      operationId: admin.customers.chrome.printServers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: select
    patch:
      description: Updates a print server's configuration.
      operationId: admin.customers.chrome.printServers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrintServer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: exec
  /admin/directory/v1/customers/{customersId}/chrome/printServers:batchCreatePrintServers:
    parameters: *ref_1
    post:
      description: Creates multiple print servers.
      operationId: admin.customers.chrome.printServers.batchCreatePrintServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreatePrintServersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreatePrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: exec
  /admin/directory/v1/customers/{customerKey}:
    parameters: *ref_1
    get:
      description: Retrieves a customer.
      operationId: directory.customers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
      x-stackQL-resource: customers
      x-stackQL-verb: select
    patch:
      description: Patches a customer.
      operationId: directory.customers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
      x-stackQL-resource: customers
      x-stackQL-verb: exec
    put:
      description: Updates a customer.
      operationId: directory.customers.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
      x-stackQL-resource: customers
      x-stackQL-verb: exec
  /admin/directory/v1/groups/{groupKey}/members/{memberKey}:
    parameters: *ref_1
    put:
      description: Updates the membership of a user in the specified group.
      operationId: directory.members.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: exec
    get:
      description: Retrieves a group member's properties.
      operationId: directory.members.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: select
    patch:
      description: >-
        Updates the membership properties of a user in the specified group. This
        method supports [patch
        semantics](/admin-sdk/directory/v1/guides/performance#patch).
      operationId: directory.members.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: exec
    delete:
      description: Removes a member from a group.
      operationId: directory.members.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: delete
  /admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}:
    parameters: *ref_1
    get:
      description: >-
        Checks whether the given user is a member of the group. Membership can
        be direct or nested, but if nested, the `memberKey` and `groupKey` must
        be entities in the same domain or an `Invalid input` error is returned.
        To check for nested memberships that include entities outside of the
        group's domain, use the
        [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership)
        method in the Cloud Identity Groups API.
      operationId: directory.members.hasMember
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersHasMember'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: exec
  /admin/directory/v1/groups/{groupKey}/members:
    parameters: *ref_1
    get:
      description: >-
        Retrieves a paginated list of all members in a group. This method times
        out after 60 minutes. For more information, see [Troubleshoot error
        codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).
      operationId: directory.members.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: query
          name: roles
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: includeDerivedMembership
          schema:
            type: boolean
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: members
      x-stackQL-verb: select
    post:
      description: Adds a user to the specified group.
      operationId: directory.members.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: insert
  /admin/directory/v1/groups:
    parameters: *ref_1
    get:
      description: >-
        Retrieves all groups of a domain or of a user given a userKey
        (paginated).
      operationId: directory.groups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
      parameters:
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: domain
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: userKey
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: select
    post:
      description: Creates a group.
      operationId: directory.groups.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters: []
      x-stackQL-resource: groups
      x-stackQL-verb: insert
  /admin/directory/v1/groups/{groupKey}:
    parameters: *ref_1
    get:
      description: Retrieves a group's properties.
      operationId: directory.groups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: select
    put:
      description: Updates a group's properties.
      operationId: directory.groups.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: exec
    delete:
      description: Deletes a group.
      operationId: directory.groups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: delete
    patch:
      description: >-
        Updates a group's properties. This method supports [patch
        semantics](/admin-sdk/directory/v1/guides/performance#patch).
      operationId: directory.groups.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: exec
  /admin/directory/v1/groups/{groupKey}/aliases:
    parameters: *ref_1
    post:
      description: Adds an alias for the group.
      operationId: directory.groups.aliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alias'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: insert
    get:
      description: Lists all aliases for a group.
      operationId: directory.groups.aliases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliases'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: select
  /admin/directory/v1/groups/{groupKey}/aliases/{alias}:
    parameters: *ref_1
    delete:
      description: Removes an alias.
      operationId: directory.groups.aliases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: alias
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: delete
  /admin/directory/v1/customer/{customerId}/schemas/{schemaKey}:
    parameters: *ref_1
    patch:
      description: Patches a schema.
      operationId: directory.schemas.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
    get:
      description: Retrieves a schema.
      operationId: directory.schemas.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: select
    delete:
      description: Deletes a schema.
      operationId: directory.schemas.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: delete
    put:
      description: Updates a schema.
      operationId: directory.schemas.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
  /admin/directory/v1/customer/{customerId}/schemas:
    parameters: *ref_1
    post:
      description: Creates a schema.
      operationId: directory.schemas.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: insert
    get:
      description: Retrieves all schemas for a customer.
      operationId: directory.schemas.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schemas'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: select
