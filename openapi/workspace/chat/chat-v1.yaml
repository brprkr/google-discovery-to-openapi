openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Google Chat API
  description: >-
    Enables apps to fetch information and perform actions in Google Chat.
    Authentication is a prerequisite for using the Google Chat REST API.
  version: v1
  x-discovery-doc-revision: '20230618'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://developers.google.com/hangouts/chat
servers:
  - url: https://chat.googleapis.com
components:
  schemas:
    GoogleAppsCardV1CardFixedFooter:
      description: >-
        A persistent (sticky) footer that that appears at the bottom of the
        card. Setting `fixedFooter` without specifying a `primaryButton` or a
        `secondaryButton` causes an error. Supported by Google Workspace Add-ons
        and Chat apps. For Chat apps, you can use fixed footers in
        [dialogs](https://developers.google.com/chat/how-tos/dialogs), but not
        [card
        messages](https://developers.google.com/chat/api/guides/message-formats/cards).
      type: object
      id: GoogleAppsCardV1CardFixedFooter
      properties:
        secondaryButton:
          $ref: '#/components/schemas/GoogleAppsCardV1Button'
          description: >-
            The secondary button of the fixed footer. The button must be a text
            button with text and color set. If `secondaryButton` is set, you
            must also set `primaryButton`.
        primaryButton:
          description: >-
            The primary button of the fixed footer. The button must be a text
            button with text and color set.
          $ref: '#/components/schemas/GoogleAppsCardV1Button'
    GoogleAppsCardV1ActionParameter:
      id: GoogleAppsCardV1ActionParameter
      description: >-
        List of string parameters to supply when the action method is invoked.
        For example, consider three snooze buttons: snooze now, snooze one day,
        or snooze next week. You might use `action method = snooze()`, passing
        the snooze type and snooze time in the list of string parameters. To
        learn more, see
        [`CommonEventObject`](https://developers.google.com/chat/api/reference/rest/v1/Event#commoneventobject).
      type: object
      properties:
        value:
          type: string
          description: The value of the parameter.
        key:
          type: string
          description: The name of the parameter for the action script.
    ActionStatus:
      description: >-
        Represents the status for a request to either invoke or submit a
        [dialog](https://developers.google.com/chat/how-tos/dialogs).
      properties:
        userFacingMessage:
          description: >-
            The message to send users about the status of their request. If
            unset, a generic message based on the `status_code` is sent.
          type: string
        statusCode:
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - >-
              The operation was cancelled, typically by the caller. HTTP
              Mapping: 499 Client Closed Request
            - >-
              Unknown error. For example, this error may be returned when a
              `Status` value received from another address space belongs to an
              error space that is not known in this address space. Also errors
              raised by APIs that do not return enough error information may be
              converted to this error. HTTP Mapping: 500 Internal Server Error
            - >-
              The client specified an invalid argument. Note that this differs
              from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
              that are problematic regardless of the state of the system (e.g.,
              a malformed file name). HTTP Mapping: 400 Bad Request
            - >-
              The deadline expired before the operation could complete. For
              operations that change the state of the system, this error may be
              returned even if the operation has completed successfully. For
              example, a successful response from a server could have been
              delayed long enough for the deadline to expire. HTTP Mapping: 504
              Gateway Timeout
            - >-
              Some requested entity (e.g., file or directory) was not found.
              Note to server developers: if a request is denied for an entire
              class of users, such as gradual feature rollout or undocumented
              allowlist, `NOT_FOUND` may be used. If a request is denied for
              some users within a class of users, such as user-based access
              control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not
              Found
            - >-
              The entity that a client attempted to create (e.g., file or
              directory) already exists. HTTP Mapping: 409 Conflict
            - >-
              The caller does not have permission to execute the specified
              operation. `PERMISSION_DENIED` must not be used for rejections
              caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
              instead for those errors). `PERMISSION_DENIED` must not be used if
              the caller can not be identified (use `UNAUTHENTICATED` instead
              for those errors). This error code does not imply the request is
              valid or the requested entity exists or satisfies other
              pre-conditions. HTTP Mapping: 403 Forbidden
            - >-
              The request does not have valid authentication credentials for the
              operation. HTTP Mapping: 401 Unauthorized
            - >-
              Some resource has been exhausted, perhaps a per-user quota, or
              perhaps the entire file system is out of space. HTTP Mapping: 429
              Too Many Requests
            - >-
              The operation was rejected because the system is not in a state
              required for the operation's execution. For example, the directory
              to be deleted is non-empty, an rmdir operation is applied to a
              non-directory, etc. Service implementors can use the following
              guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
              `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just
              the failing call. (b) Use `ABORTED` if the client should retry at
              a higher level. For example, when a client-specified test-and-set
              fails, indicating the client should restart a read-modify-write
              sequence. (c) Use `FAILED_PRECONDITION` if the client should not
              retry until the system state has been explicitly fixed. For
              example, if an "rmdir" fails because the directory is non-empty,
              `FAILED_PRECONDITION` should be returned since the client should
              not retry unless the files are deleted from the directory. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation was aborted, typically due to a concurrency issue
              such as a sequencer check failure or transaction abort. See the
              guidelines above for deciding between `FAILED_PRECONDITION`,
              `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict
            - >-
              The operation was attempted past the valid range. E.g., seeking or
              reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error
              indicates a problem that may be fixed if the system state changes.
              For example, a 32-bit file system will generate `INVALID_ARGUMENT`
              if asked to read at an offset that is not in the range [0,2^32-1],
              but it will generate `OUT_OF_RANGE` if asked to read from an
              offset past the current file size. There is a fair bit of overlap
              between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend
              using `OUT_OF_RANGE` (the more specific error) when it applies so
              that callers who are iterating through a space can easily look for
              an `OUT_OF_RANGE` error to detect when they are done. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation is not implemented or is not supported/enabled in
              this service. HTTP Mapping: 501 Not Implemented
            - >-
              Internal errors. This means that some invariants expected by the
              underlying system have been broken. This error code is reserved
              for serious errors. HTTP Mapping: 500 Internal Server Error
            - >-
              The service is currently unavailable. This is most likely a
              transient condition, which can be corrected by retrying with a
              backoff. Note that it is not always safe to retry non-idempotent
              operations. See the guidelines above for deciding between
              `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping:
              503 Service Unavailable
            - >-
              Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
              Server Error
          description: The status code.
          type: string
      type: object
      id: ActionStatus
    GoogleAppsCardV1DateTimePicker:
      type: object
      properties:
        valueMsEpoch:
          format: int64
          description: >-
            The default value displayed in the widget, in milliseconds since
            [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time). Specify
            the value based on the type of picker (`DateTimePickerType`): *
            `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
            represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`. *
            `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to
            represent January 1, 2023, use `1672531200000`. * `TIME_ONLY`: a
            time in UTC. For example, to represent 12:00 PM, use `43200000` (or
            `12 * 60 * 60 * 1000`).
          type: string
        onChangeAction:
          description: >-
            Triggered when the user clicks **Save** or **Clear** from the
            `DateTimePicker` interface.
          $ref: '#/components/schemas/GoogleAppsCardV1Action'
        type:
          description: >-
            Whether the widget supports inputting a date, a time, or the date
            and time.
          type: string
          enumDescriptions:
            - Users input a date and time.
            - Users input a date.
            - Users input a time.
          enum:
            - DATE_AND_TIME
            - DATE_ONLY
            - TIME_ONLY
        label:
          type: string
          description: >-
            The text that prompts users to input a date, a time, or a date and
            time. For example, if users are scheduling an appointment, use a
            label such as `Appointment date` or `Appointment date and time`.
        timezoneOffsetDate:
          type: integer
          format: int32
          description: >-
            The number representing the time zone offset from UTC, in minutes.
            If set, the `value_ms_epoch` is displayed in the specified time
            zone. If unset, the value defaults to the user's time zone setting.
        name:
          type: string
          description: >-
            The name by which the `DateTimePicker` is identified in a form input
            event. For details about working with form inputs, see [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
      description: >-
        Lets users input a date, a time, or both a date and a time. Users can
        input text or use the picker to select dates and times. If users input
        an invalid date or time, the picker shows an error that prompts users to
        input the information correctly.
      id: GoogleAppsCardV1DateTimePicker
    GoogleAppsCardV1OnClick:
      properties:
        card:
          $ref: '#/components/schemas/GoogleAppsCardV1Card'
          description: >-
            A new card is pushed to the card stack after clicking if specified.
            Supported by Google Workspace Add-ons, but not Chat apps.
        openDynamicLinkAction:
          description: >-
            An add-on triggers this action when the action needs to open a link.
            This differs from the `open_link` above in that this needs to talk
            to server to get the link. Thus some preparation work is required
            for web client to do before the open link action response comes
            back.
          $ref: '#/components/schemas/GoogleAppsCardV1Action'
        openLink:
          description: If specified, this `onClick` triggers an open link action.
          $ref: '#/components/schemas/GoogleAppsCardV1OpenLink'
        action:
          $ref: '#/components/schemas/GoogleAppsCardV1Action'
          description: If specified, an action is triggered by this `onClick`.
      id: GoogleAppsCardV1OnClick
      description: >-
        Represents how to respond when users click an interactive element on a
        card, such as a button.
      type: object
    Space:
      description: >-
        A space in Google Chat. Spaces are conversations between two or more
        users or 1:1 messages between a user and a Chat app.
      type: object
      properties:
        singleUserBotDm:
          description: >-
            Optional. Whether the space is a DM between a Chat app and a single
            human.
          type: boolean
        threaded:
          readOnly: true
          description: >-
            Output only. Deprecated: Use `spaceThreadingState` instead. Whether
            messages are threaded in this space.
          type: boolean
        spaceHistoryState:
          enum:
            - HISTORY_STATE_UNSPECIFIED
            - HISTORY_OFF
            - HISTORY_ON
          enumDescriptions:
            - Default value. Do not use.
            - >-
              History off. [Messages and threads are kept for 24
              hours](https://support.google.com/chat/answer/7664687).
            - >-
              History on. The organization's [Vault retention
              rules](https://support.google.com/vault/answer/7657597) specify
              for how long messages and threads are kept.
          description: The message history state for messages and threads in this space.
          type: string
        name:
          type: string
          description: 'Resource name of the space. Format: `spaces/{space}`'
        displayName:
          type: string
          description: >-
            The space's display name. Required when [creating a
            space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create).
            For direct messages, this field might be empty. Supports up to 128
            characters.
        adminInstalled:
          readOnly: true
          type: boolean
          description: >-
            Output only. Whether the Chat app was installed by a Google
            Workspace administrator. Administrators can install a Chat app for
            their domain, organizational unit, or a group of users.
            Administrators can only install Chat apps for direct messaging
            between users and the app. To support admin install, your app must
            feature direct messaging.
        spaceType:
          enum:
            - SPACE_TYPE_UNSPECIFIED
            - SPACE
            - GROUP_CHAT
            - DIRECT_MESSAGE
          enumDescriptions:
            - Reserved.
            - >-
              A place where people send messages, share files, and collaborate.
              A `SPACE` can include Chat apps.
            - >-
              Group conversations between 3 or more people. A `GROUP_CHAT` can
              include Chat apps.
            - 1:1 messages between two humans or a human and a Chat app.
          type: string
          description: >-
            The type of space. Required when creating a space or updating the
            space type of a space. Output only for other usage.
        spaceDetails:
          $ref: '#/components/schemas/SpaceDetails'
          description: Details about the space including description and rules.
        spaceThreadingState:
          type: string
          readOnly: true
          enumDescriptions:
            - Reserved.
            - >-
              Named spaces that support message threads. When users respond to a
              message, they can reply in-thread, which keeps their response in
              the context of the original message.
            - >-
              Named spaces where the conversation is organized by topic. Topics
              and their replies are grouped together.
            - >-
              Direct messages (DMs) between two people and group conversations
              between 3 or more people.
          enum:
            - SPACE_THREADING_STATE_UNSPECIFIED
            - THREADED_MESSAGES
            - GROUPED_MESSAGES
            - UNTHREADED_MESSAGES
          description: Output only. The threading state in the Chat space.
        type:
          enum:
            - TYPE_UNSPECIFIED
            - ROOM
            - DM
          description: >-
            Output only. Deprecated: Use `space_type` instead. The type of a
            space.
          type: string
          readOnly: true
          enumDescriptions:
            - ''
            - Conversations between two or more humans.
            - >-
              1:1 Direct Message between a human and a Chat app, where all
              messages are flat. Note that this doesn't include direct messages
              between two humans.
      id: Space
    GoogleAppsCardV1CardHeader:
      id: GoogleAppsCardV1CardHeader
      properties:
        imageUrl:
          description: The HTTPS URL of the image in the card header.
          type: string
        imageType:
          type: string
          enum:
            - SQUARE
            - CIRCLE
          enumDescriptions:
            - >-
              Default value. Applies a square mask to the image. For example, a
              4x3 image becomes 3x3.
            - >-
              Applies a circular mask to the image. For example, a 4x3 image
              becomes a circle with a diameter of 3.
          description: The shape used to crop the image.
        imageAltText:
          description: The alternative text of this image that's used for accessibility.
          type: string
        subtitle:
          description: >-
            The subtitle of the card header. If specified, appears on its own
            line below the `title`.
          type: string
        title:
          description: >-
            Required. The title of the card header. The header has a fixed
            height: if both a title and subtitle are specified, each takes up
            one line. If only the title is specified, it takes up both lines.
          type: string
      type: object
      description: Represents a card header.
    ActionParameter:
      properties:
        key:
          type: string
          description: The name of the parameter for the action script.
        value:
          description: The value of the parameter.
          type: string
      description: >-
        List of string parameters to supply when the action method is invoked.
        For example, consider three snooze buttons: snooze now, snooze one day,
        snooze next week. You might use `action method = snooze()`, passing the
        snooze type and snooze time in the list of string parameters.
      type: object
      id: ActionParameter
    ListReactionsResponse:
      properties:
        nextPageToken:
          description: >-
            Continuation token to retrieve the next page of results. It's empty
            for the last page of results.
          type: string
        reactions:
          items:
            $ref: '#/components/schemas/Reaction'
          type: array
          description: List of reactions in the requested (or first) page.
      type: object
      id: ListReactionsResponse
    StringInputs:
      type: object
      id: StringInputs
      description: >-
        Input parameter for regular widgets. For single-valued widgets, it is a
        single value list. For multi-valued widgets, such as checkbox, all the
        values are presented.
      properties:
        value:
          type: array
          items:
            type: string
          description: An array of strings entered by the user.
    Dialog:
      properties:
        body:
          description: >-
            Input only. Body of the dialog, which is rendered in a modal. Google
            Chat apps don't support the following card entities:
            `DateTimePicker`, `OnChangeAction`.
          $ref: '#/components/schemas/GoogleAppsCardV1Card'
      description: Wrapper around the card body of the dialog.
      id: Dialog
      type: object
    GoogleAppsCardV1Widgets:
      id: GoogleAppsCardV1Widgets
      properties:
        textParagraph:
          $ref: '#/components/schemas/GoogleAppsCardV1TextParagraph'
          description: TextParagraph widget.
        dateTimePicker:
          $ref: '#/components/schemas/GoogleAppsCardV1DateTimePicker'
          description: DateTimePicker widget.
        textInput:
          description: TextInput widget.
          $ref: '#/components/schemas/GoogleAppsCardV1TextInput'
        selectionInput:
          description: SelectionInput widget.
          $ref: '#/components/schemas/GoogleAppsCardV1SelectionInput'
        image:
          description: Image widget.
          $ref: '#/components/schemas/GoogleAppsCardV1Image'
        buttonList:
          $ref: '#/components/schemas/GoogleAppsCardV1ButtonList'
          description: ButtonList widget.
        decoratedText:
          description: DecoratedText widget.
          $ref: '#/components/schemas/GoogleAppsCardV1DecoratedText'
      description: The supported widgets that you can include in a column.
      type: object
    GoogleAppsCardV1Grid:
      id: GoogleAppsCardV1Grid
      properties:
        columnCount:
          description: >-
            The number of columns to display in the grid. A default value is
            used if this field isn't specified, and that default value is
            different depending on where the grid is shown (dialog versus
            companion).
          type: integer
          format: int32
        title:
          description: The text that displays in the grid header.
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1GridItem'
          description: The items to display in the grid.
        borderStyle:
          $ref: '#/components/schemas/GoogleAppsCardV1BorderStyle'
          description: The border style to apply to each grid item.
        onClick:
          $ref: '#/components/schemas/GoogleAppsCardV1OnClick'
          description: >-
            This callback is reused by each individual grid item, but with the
            item's identifier and index in the items list added to the
            callback's parameters.
      type: object
      description: >-
        Displays a grid with a collection of items. Items can only include text
        or images. A grid supports any number of columns and items. The number
        of rows is determined by items divided by columns. A grid with 10 items
        and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows.
        For responsive columns, or to include more than text or images, use
        `Columns`. For example, the following JSON creates a 2 column grid with
        a single item: ``` "grid": { "title": "A fine collection of items",
        "columnCount": 2, "borderStyle": { "type": "STROKE", "cornerRadius": 4
        }, "items": [ { "image": { "imageUri":
        "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" },
        "borderStyle": { "type": "STROKE" } }, "title": "An item",
        "textAlignment": "CENTER" } ], "onClick": { "openLink": { "url":
        "https://www.example.com" } } } ```
    GoogleAppsCardV1OpenLink:
      type: object
      id: GoogleAppsCardV1OpenLink
      description: Represents an `onClick` event that opens a hyperlink.
      properties:
        url:
          type: string
          description: The URL to open.
        onClose:
          type: string
          enum:
            - NOTHING
            - RELOAD
          enumDescriptions:
            - Default value. The card doesn't reload; nothing happens.
            - >-
              Reloads the card after the child window closes. If used in
              conjunction with
              [`OpenAs.OVERLAY`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
              the child window acts as a modal dialog and the parent card is
              blocked until the child window closes.
          description: >-
            Whether the client forgets about a link after opening it, or
            observes it until the window closes. Not supported by Chat apps.
        openAs:
          description: How to open a link. Not supported by Chat apps.
          enumDescriptions:
            - >-
              The link opens as a full-size window (if that's the frame used by
              the client).
            - The link opens as an overlay, such as a pop-up.
          enum:
            - FULL_SIZE
            - OVERLAY
          type: string
    SlashCommandMetadata:
      properties:
        triggersDialog:
          type: boolean
          description: Indicates whether the slash command is for a dialog.
        commandId:
          description: The command ID of the invoked slash command.
          type: string
          format: int64
        bot:
          description: The Chat app whose command was invoked.
          $ref: '#/components/schemas/User'
        commandName:
          type: string
          description: The name of the invoked slash command.
        type:
          type: string
          enum:
            - TYPE_UNSPECIFIED
            - ADD
            - INVOKE
          enumDescriptions:
            - Default value for the enum. Don't use.
            - Add Chat app to space.
            - Invoke slash command in space.
          description: The type of slash command.
      type: object
      id: SlashCommandMetadata
      description: Annotation metadata for slash commands (/).
    ListMessagesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            You can send a token as `pageToken` to retrieve the next page of
            results. If empty, there are no subsequent pages.
        messages:
          items:
            $ref: '#/components/schemas/Message'
          description: List of messages.
          type: array
      id: ListMessagesResponse
    CardAction:
      description: >-
        A card action is the action associated with the card. For an invoice
        card, a typical action would be: delete invoice, email invoice or open
        the invoice in browser. Not supported by Google Chat apps.
      properties:
        actionLabel:
          description: The label used to be displayed in the action menu item.
          type: string
        onClick:
          description: The onclick action for this action item.
          $ref: '#/components/schemas/OnClick'
      id: CardAction
      type: object
    GoogleAppsCardV1ImageCropStyle:
      description: >-
        Represents the crop style applied to an image. For example, here's how
        to apply a 16:9 aspect ratio: ``` cropStyle { "type":
        "RECTANGLE_CUSTOM", "aspectRatio": 16/9 } ```
      id: GoogleAppsCardV1ImageCropStyle
      properties:
        aspectRatio:
          format: double
          type: number
          description: >-
            The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. For
            example, here's how to apply a 16:9 aspect ratio: ``` cropStyle {
            "type": "RECTANGLE_CUSTOM", "aspectRatio": 16/9 } ```
        type:
          description: The crop type.
          enum:
            - IMAGE_CROP_TYPE_UNSPECIFIED
            - SQUARE
            - CIRCLE
            - RECTANGLE_CUSTOM
            - RECTANGLE_4_3
          enumDescriptions:
            - Don't use. Unspecified.
            - Default value. Applies a square crop.
            - Applies a circular crop.
            - >-
              Applies a rectangular crop with a custom aspect ratio. Set the
              custom aspect ratio with `aspectRatio`.
            - Applies a rectangular crop with a 4:3 aspect ratio.
          type: string
      type: object
    Image:
      type: object
      id: Image
      properties:
        imageUrl:
          type: string
          description: The URL of the image.
        onClick:
          description: The `onclick` action.
          $ref: '#/components/schemas/OnClick'
        aspectRatio:
          format: double
          type: number
          description: >-
            The aspect ratio of this image (width and height). This field lets
            you reserve the right height for the image while waiting for it to
            load. It's not meant to override the built-in aspect ratio of the
            image. If unset, the server fills it by prefetching the image.
      description: An image that's specified by a URL and can have an `onclick` action.
    GoogleAppsCardV1GridItem:
      type: object
      description: >-
        Represents an item in a grid layout. Items can contain text, an image,
        or both text and an image.
      properties:
        image:
          $ref: '#/components/schemas/GoogleAppsCardV1ImageComponent'
          description: The image that displays in the grid item.
        layout:
          enumDescriptions:
            - Don't use. Unspecified.
            - The title and subtitle are shown below the grid item's image.
            - The title and subtitle are shown above the grid item's image.
          description: The layout to use for the grid item.
          enum:
            - GRID_ITEM_LAYOUT_UNSPECIFIED
            - TEXT_BELOW
            - TEXT_ABOVE
          type: string
        title:
          description: The grid item's title.
          type: string
        subtitle:
          description: The grid item's subtitle.
          type: string
        id:
          description: >-
            A user-specified identifier for this grid item. This identifier is
            returned in the parent grid's `onClick` callback parameters.
          type: string
      id: GoogleAppsCardV1GridItem
    ListMembershipsResponse:
      id: ListMembershipsResponse
      properties:
        nextPageToken:
          type: string
          description: >-
            A token that you can send as `pageToken` to retrieve the next page
            of results. If empty, there are no subsequent pages.
        memberships:
          type: array
          description: List of memberships in the requested (or first) page.
          items:
            $ref: '#/components/schemas/Membership'
      type: object
    DeprecatedEvent:
      properties:
        token:
          description: >-
            A secret value that legacy Chat apps can use to verify if a request
            is from Google. Google randomly generates the token, and its value
            remains static. You can obtain, revoke, or regenerate the token from
            the [Chat API configuration
            page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat)
            in the Google Cloud Console. Modern Chat apps don't use this field.
            It is absent from API responses and the [Chat API configuration
            page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
          type: string
        threadKey:
          description: >-
            The Chat app-defined key for the thread related to the event. See
            [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key)
            for more information.
          type: string
        isDialogEvent:
          type: boolean
          description: >-
            True when the event is related to
            [dialogs](https://developers.google.com/chat/how-tos/dialogs).
        user:
          description: The user that triggered the event.
          $ref: '#/components/schemas/User'
        message:
          $ref: '#/components/schemas/Message'
          description: The message that triggered the event, if applicable.
        dialogEventType:
          description: >-
            The type of
            [dialog](https://developers.google.com/chat/how-tos/dialogs) event
            received.
          type: string
          enum:
            - TYPE_UNSPECIFIED
            - REQUEST_DIALOG
            - SUBMIT_DIALOG
            - CANCEL_DIALOG
          enumDescriptions:
            - >-
              This could be used when the corresponding event is not dialog
              related. For example an @mention.
            - >-
              Any user action that opens a
              [dialog](https://developers.google.com/chat/how-tos/dialogs).
            - >-
              A card click event from a
              [dialog](https://developers.google.com/chat/how-tos/dialogs).
            - >-
              The [dialog](https://developers.google.com/chat/how-tos/dialogs)
              was cancelled.
        configCompleteRedirectUrl:
          description: >-
            The URL the Chat app should redirect the user to after they have
            completed an authorization or configuration flow outside of Google
            Chat. For more information, see [Connect a Chat app with other
            services &
            tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).
          type: string
        common:
          $ref: '#/components/schemas/CommonEventObject'
          description: >-
            Represents information about the user's client, such as locale, host
            app, and platform. For Chat apps, `CommonEventObject` includes
            information submitted by users interacting with
            [dialogs](https://developers.google.com/chat/how-tos/dialogs), like
            data entered on a card.
        action:
          description: >-
            The form action data associated with an interactive card that was
            clicked. Only populated for CARD_CLICKED events. See the
            [Interactive Cards guide](/chat/how-tos/cards-onclick) for more
            information.
          $ref: '#/components/schemas/FormAction'
        type:
          type: string
          enum:
            - UNSPECIFIED
            - MESSAGE
            - ADDED_TO_SPACE
            - REMOVED_FROM_SPACE
            - CARD_CLICKED
          description: The type of the event.
          enumDescriptions:
            - Default value for the enum. DO NOT USE.
            - A message was sent in a space.
            - >-
              The Chat app was added to a space by a Chat user or Workspace
              administrator.
            - >-
              The Chat app was removed from a space by a Chat user or Workspace
              administrator.
            - The Chat app's interactive card was clicked.
        space:
          description: The space in which the event occurred.
          $ref: '#/components/schemas/Space'
        eventTime:
          description: The timestamp indicating when the event occurred.
          type: string
          format: google-datetime
      description: >-
        Google Chat events. To learn how to use events, see [Receive and respond
        to Google Chat
        events](https://developers.google.com/chat/api/guides/message-formats).
      id: DeprecatedEvent
      type: object
    GoogleAppsCardV1SelectionItem:
      type: object
      id: GoogleAppsCardV1SelectionItem
      properties:
        text:
          type: string
          description: The text that identifies or describes the item to users.
        value:
          type: string
          description: >-
            The value associated with this item. The client should use this as a
            form input value. For details about working with form inputs, see
            [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
        selected:
          type: boolean
          description: >-
            Whether the item is selected by default. If the selection input only
            accepts one value (such as for radio buttons or a dropdown menu),
            only set this field for one item.
      description: >-
        An item that users can select in a selection input, such as a checkbox
        or switch.
    UploadAttachmentResponse:
      id: UploadAttachmentResponse
      type: object
      properties:
        attachmentDataRef:
          $ref: '#/components/schemas/AttachmentDataRef'
          description: Reference to the uploaded attachment.
    CommonEventObject:
      description: >-
        Represents information about the user's client, such as locale, host
        app, and platform. For Chat apps, `CommonEventObject` includes data
        submitted by users interacting with cards, like data entered in
        [dialogs](https://developers.google.com/chat/how-tos/dialogs).
      type: object
      id: CommonEventObject
      properties:
        hostApp:
          description: >-
            The hostApp enum which indicates the app the add-on is invoked from.
            Always `CHAT` for Chat apps.
          enumDescriptions:
            - Google can't identify a host app.
            - The add-on launches from Gmail.
            - The add-on launches from Google Calendar.
            - The add-on launches from Google Drive.
            - Not used.
            - The add-on launches from Google Docs.
            - The add-on launches from Google Meet.
            - The add-on launches from Google Sheets.
            - The add-on launches from Google Slides.
            - The add-on launches from Google Drawings.
            - A Google Chat app. Not used for Google Workspace Add-ons.
          type: string
          enum:
            - UNSPECIFIED_HOST_APP
            - GMAIL
            - CALENDAR
            - DRIVE
            - DEMO
            - DOCS
            - MEET
            - SHEETS
            - SLIDES
            - DRAWINGS
            - CHAT
        userLocale:
          type: string
          description: >-
            The full `locale.displayName` in the format of [ISO 639 language
            code]-[ISO 3166 country/region code] such as "en-US".
        timeZone:
          $ref: '#/components/schemas/TimeZone'
          description: >-
            The timezone ID and offset from Coordinated Universal Time (UTC).
            Only supported for the event types
            [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED)
            and
            [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
        parameters:
          type: object
          additionalProperties:
            type: string
          description: >-
            Custom
            [parameters](/chat/api/reference/rest/v1/cards#ActionParameter)
            passed to the invoked function. Both keys and values must be
            strings.
        invokedFunction:
          type: string
          description: >-
            Name of the invoked function associated with the widget. Only set
            for Chat apps.
        formInputs:
          description: >-
            A map containing the current values of the widgets in a card. The
            map keys are the string IDs assigned to each widget, and the values
            represent inputs to the widget. Depending on the input data type, a
            different object represents each input: For single-value widgets,
            `StringInput`. For multi-value widgets, an array of `StringInput`
            objects. For a date-time picker, a `DateTimeInput`. For a date-only
            picker, a `DateInput`. For a time-only picker, a `TimeInput`.
            Corresponds with the data entered by a user on a card in a
            [dialog](https://developers.google.com/chat/how-tos/dialogs).
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Inputs'
        platform:
          description: >-
            The platform enum which indicates the platform where the event
            originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - UNKNOWN_PLATFORM
            - WEB
            - IOS
            - ANDROID
          type: string
    Reaction:
      type: object
      id: Reaction
      properties:
        name:
          type: string
          description: >-
            The resource name of the reaction. Format:
            `spaces/{space}/messages/{message}/reactions/{reaction}`
        user:
          $ref: '#/components/schemas/User'
          readOnly: true
          description: Output only. The user who created the reaction.
        emoji:
          $ref: '#/components/schemas/Emoji'
          description: The emoji used in the reaction.
      description: A reaction to a message.
    UserMentionMetadata:
      description: Annotation metadata for user mentions (@).
      properties:
        user:
          $ref: '#/components/schemas/User'
          description: The user mentioned.
        type:
          enumDescriptions:
            - Default value for the enum. Don't use.
            - Add user to space.
            - Mention user in space.
          type: string
          description: The type of user mention.
          enum:
            - TYPE_UNSPECIFIED
            - ADD
            - MENTION
      id: UserMentionMetadata
      type: object
    DriveDataRef:
      description: A reference to the data of a drive attachment.
      properties:
        driveFileId:
          description: The ID for the drive file. Use with the Drive API.
          type: string
      id: DriveDataRef
      type: object
    AttachedGif:
      description: A GIF image that's specified by a URL.
      id: AttachedGif
      type: object
      properties:
        uri:
          description: Output only. The URL that hosts the GIF image.
          readOnly: true
          type: string
    Attachment:
      description: An attachment in Google Chat.
      properties:
        downloadUri:
          type: string
          description: >-
            Output only. The download URL which should be used to allow a human
            user to download the attachment. Chat apps shouldn't use this URL to
            download attachment content.
          readOnly: true
        contentType:
          description: The content type (MIME type) of the file.
          type: string
        source:
          description: The source of the attachment.
          enum:
            - SOURCE_UNSPECIFIED
            - DRIVE_FILE
            - UPLOADED_CONTENT
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
        driveDataRef:
          description: >-
            A reference to the drive attachment. This field is used with the
            Drive API.
          $ref: '#/components/schemas/DriveDataRef'
        thumbnailUri:
          description: >-
            Output only. The thumbnail URL which should be used to preview the
            attachment to a human user. Chat apps shouldn't use this URL to
            download attachment content.
          type: string
          readOnly: true
        attachmentDataRef:
          description: >-
            A reference to the attachment data. This field is used with the
            media API to download the attachment data.
          $ref: '#/components/schemas/AttachmentDataRef'
        contentName:
          description: The original file name for the content, not the full path.
          type: string
        name:
          description: >-
            Resource name of the attachment, in the form
            `spaces/*/messages/*/attachments/*`.
          type: string
      type: object
      id: Attachment
    Thread:
      description: A thread in Google Chat.
      properties:
        threadKey:
          type: string
          description: >-
            Optional. Opaque thread identifier. To start or add to a thread,
            create a message and specify a `threadKey` or the thread.name. For
            example usage, see [Start or reply to a message
            thread](https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
            For other requests, this is an output only field.
        name:
          description: >-
            Resource name of the thread. Example:
            `spaces/{space}/threads/{thread}`
          type: string
      id: Thread
      type: object
    GoogleAppsCardV1Card:
      id: GoogleAppsCardV1Card
      description: >-
        Cards support a defined layout, interactive UI elements like buttons,
        and rich media like images. Use cards to present detailed information,
        gather information from users, and guide users to take a next step. In
        Google Chat, cards appear in several places: - As stand-alone messages.
        - Accompanying a text message, just beneath the text message. - As a
        [dialog](https://developers.google.com/chat/how-tos/dialogs). The
        following example JSON creates a "contact card" that features: - A
        header with the contact's name, job title, and avatar picture. - A
        section with the contact information, including formatted text. -
        Buttons that users can click to share the contact, or see more or less
        information. ![Example contact
        card](https://developers.google.com/chat/images/card_api_reference.png)
        ``` { "cardsV2": [ { "cardId": "unique-card-id", "card": { "header": {
        "title": "Sasha", "subtitle": "Software Engineer", "imageUrl":
        "https://developers.google.com/chat/images/quickstart-app-avatar.png",
        "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha", },
        "sections": [ { "header": "Contact Info", "collapsible": true,
        "uncollapsibleWidgetsCount": 1, "widgets": [ { "decoratedText": {
        "startIcon": { "knownIcon": "EMAIL", }, "text": "sasha@example.com", }
        }, { "decoratedText": { "startIcon": { "knownIcon": "PERSON", }, "text":
        "Online", }, }, { "decoratedText": { "startIcon": { "knownIcon":
        "PHONE", }, "text": "+1 (555) 555-1234", } }, { "buttonList": {
        "buttons": [ { "text": "Share", "onClick": { "openLink": { "url":
        "https://example.com/share", } } }, { "text": "Edit", "onClick": {
        "action": { "function": "goToView", "parameters": [ { "key": "viewType",
        "value": "EDIT", } ], } } }, ], } }, ], }, ], }, } ], } ```
      properties:
        cardActions:
          description: >-
            The card's actions. Actions are added to the card's toolbar menu.
            Because Chat app cards have no toolbar, `cardActions[]` isn't
            supported by Chat apps. For example, the following JSON constructs a
            card action menu with `Settings` and `Send Feedback` options: ```
            "card_actions": [ { "actionLabel": "Settings", "onClick": {
            "action": { "functionName": "goToView", "parameters": [ { "key":
            "viewType", "value": "SETTING" } ], "loadIndicator":
            "LoadIndicator.SPINNER" } } }, { "actionLabel": "Send Feedback",
            "onClick": { "openLink": { "url": "https://example.com/feedback" } }
            } ] ```
          type: array
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1CardAction'
        name:
          type: string
          description: >-
            Name of the card. Used as a card identifier in card navigation.
            Because Chat apps don't support card navigation, they ignore this
            field.
        displayStyle:
          description: >-
            In Google Workspace add-ons, sets the display properties of the
            `peekCardHeader`. Not supported by Chat apps.
          enumDescriptions:
            - Don't use. Unspecified.
            - >-
              The header of the card appears at the bottom of the sidebar,
              partially covering the current top card of the stack. Clicking the
              header pops the card into the card stack. If the card has no
              header, a generated header is used instead.
            - >-
              Default value. The card is shown by replacing the view of the top
              card in the card stack.
          type: string
          enum:
            - DISPLAY_STYLE_UNSPECIFIED
            - PEEK
            - REPLACE
        sections:
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1Section'
          type: array
          description: >-
            Contains a collection of widgets. Each section has its own, optional
            header. Sections are visually separated by a line divider.
        fixedFooter:
          $ref: '#/components/schemas/GoogleAppsCardV1CardFixedFooter'
          description: >-
            The fixed footer shown at the bottom of this card. Setting
            `fixedFooter` without specifying a `primaryButton` or a
            `secondaryButton` causes an error. Supported by Google Workspace
            Add-ons and Chat apps. For Chat apps, you can use fixed footers in
            [dialogs](https://developers.google.com/chat/how-tos/dialogs), but
            not [card
            messages](https://developers.google.com/chat/api/guides/message-formats/cards).
        peekCardHeader:
          $ref: '#/components/schemas/GoogleAppsCardV1CardHeader'
          description: >-
            When displaying contextual content, the peek card header acts as a
            placeholder so that the user can navigate forward between the
            homepage cards and the contextual cards. Not supported by Chat apps.
        header:
          description: >-
            The header of the card. A header usually contains a leading image
            and a title. Headers always appear at the top of a card.
          $ref: '#/components/schemas/GoogleAppsCardV1CardHeader'
      type: object
    GoogleAppsCardV1Image:
      properties:
        onClick:
          $ref: '#/components/schemas/GoogleAppsCardV1OnClick'
          description: When a user clicks the image, the click triggers this action.
        altText:
          type: string
          description: The alternative text of this image that's used for accessibility.
        imageUrl:
          type: string
          description: >-
            The HTTPS URL that hosts the image. For example: ```
            https://developers.google.com/chat/images/quickstart-app-avatar.png
            ```
      id: GoogleAppsCardV1Image
      type: object
      description: An image that is specified by a URL and can have an `onClick` action.
    TextParagraph:
      properties:
        text:
          type: string
      id: TextParagraph
      type: object
      description: >-
        A paragraph of text. Formatted text supported. For more information
        about formatting text, see [Formatting text in Google Chat
        apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
        and [Formatting text in Google Workspace
        Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
    ChatAppLogEntry:
      description: >-
        JSON payload of error messages. If the Cloud Logging API is enabled,
        these error messages are logged to [Google Cloud
        Logging](https://cloud.google.com/logging/docs).
      properties:
        error:
          description: The error code and message.
          $ref: '#/components/schemas/Status'
        deploymentFunction:
          description: >-
            The unencrypted `callback_method` name that was running when the
            error was encountered.
          type: string
        deployment:
          description: >-
            The deployment that caused the error. For Chat apps built in Apps
            Script, this is the deployment ID defined by Apps Script.
          type: string
      id: ChatAppLogEntry
      type: object
    Membership:
      properties:
        createTime:
          type: string
          readOnly: true
          format: google-datetime
          description: >-
            Output only. The creation time of the membership, such as when a
            member joined or was invited to join a space.
        member:
          description: >-
            The Google Chat user or app the membership corresponds to. If your
            Chat app [authenticates as a
            user](https://developers.google.com/chat/api/guides/auth/users), the
            output populates the
            [user](https://developers.google.com/chat/api/reference/rest/v1/User)
            `name` and `type`.
          $ref: '#/components/schemas/User'
        name:
          description: >-
            Resource name of the membership, assigned by the server. Format:
            `spaces/{space}/members/{member}`
          type: string
        state:
          readOnly: true
          enum:
            - MEMBERSHIP_STATE_UNSPECIFIED
            - JOINED
            - INVITED
            - NOT_A_MEMBER
          type: string
          enumDescriptions:
            - Default, don't use.
            - The user has joined the space.
            - >-
              The user has been invited, is able to join the space, but
              currently hasn't joined.
            - >-
              The user isn't a member of the space, hasn't been invited and
              isn't able to join the space.
          description: Output only. State of the membership.
        role:
          readOnly: true
          type: string
          enum:
            - MEMBERSHIP_ROLE_UNSPECIFIED
            - ROLE_MEMBER
            - ROLE_MANAGER
          enumDescriptions:
            - >-
              Default value. For users: they aren't a member of the space, but
              can be invited. For Google Groups: they're always assigned this
              role (other enum values might be used in the future).
            - >-
              A member of the space. The user has basic permissions, like
              sending messages to the space. In 1:1 and unnamed group
              conversations, everyone has this role.
            - >-
              A space manager. The user has all basic permissions plus
              administrative permissions that let them manage the space, like
              adding or removing members. Only supported in SpaceType.SPACE.
          description: >-
            Output only. User's role within a Chat space, which determines their
            permitted actions in the space.
      id: Membership
      type: object
      description: >-
        Represents a membership relation in Google Chat, such as whether a user
        or Chat app is invited to, part of, or absent from a space.
    GoogleAppsCardV1Section:
      type: object
      properties:
        widgets:
          description: All the widgets in the section. Must contain at least one widget.
          type: array
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1Widget'
        collapsible:
          type: boolean
          description: >-
            Indicates whether this section is collapsible. Collapsible sections
            hide some or all widgets, but users can expand the section to reveal
            the hidden widgets by clicking **Show more**. Users can hide the
            widgets again by clicking **Show less**. To determine which widgets
            are hidden, specify `uncollapsibleWidgetsCount`.
        header:
          type: string
          description: >-
            Text that appears at the top of a section. Supports simple HTML
            formatted text. For more information about formatting text, see
            [Formatting text in Google Chat
            apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
            and [Formatting text in Google Workspace
            Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
        uncollapsibleWidgetsCount:
          format: int32
          description: >-
            The number of uncollapsible widgets which remain visible even when a
            section is collapsed. For example, when a section contains five
            widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first
            two widgets are always shown and the last three are collapsed by
            default. The `uncollapsibleWidgetsCount` is taken into account only
            when `collapsible` is `true`.
          type: integer
      description: >-
        A section contains a collection of widgets that are rendered vertically
        in the order that they're specified.
      id: GoogleAppsCardV1Section
    Message:
      type: object
      description: A message in Google Chat.
      properties:
        actionResponse:
          $ref: '#/components/schemas/ActionResponse'
          description: >-
            Input only. Parameters that a Chat app can use to configure how its
            response is posted.
        deletionMetadata:
          readOnly: true
          description: >-
            Output only. Information about a deleted message. A message is
            deleted when `delete_time` is set.
          $ref: '#/components/schemas/DeletionMetadata'
        name:
          type: string
          description: >-
            Resource name in the form `spaces/*/messages/*`. Example:
            `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
        slashCommand:
          readOnly: true
          $ref: '#/components/schemas/SlashCommand'
          description: Output only. Slash command information, if applicable.
        emojiReactionSummaries:
          description: Output only. The list of emoji reaction summaries on the message.
          items:
            $ref: '#/components/schemas/EmojiReactionSummary'
          readOnly: true
          type: array
        annotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
          readOnly: true
          description: Output only. Annotations associated with the `text` in this message.
        thread:
          description: >-
            The thread the message belongs to. For example usage, see [Start or
            reply to a message
            thread](https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
          $ref: '#/components/schemas/Thread'
        threadReply:
          type: boolean
          description: >-
            Output only. When `true`, the message is a response in a reply
            thread. When `false`, the message is visible in the space's
            top-level conversation as either the first message of a thread or a
            message with no threaded replies. If the space doesn't support reply
            in threads, this field is always `false`.
          readOnly: true
        space:
          description: >-
            If your Chat app [authenticates as a
            user](https://developers.google.com/chat/api/guides/auth/users), the
            output populates the
            [space](https://developers.google.com/chat/api/reference/rest/v1/spaces)
            `name`.
          $ref: '#/components/schemas/Space'
        argumentText:
          readOnly: true
          type: string
          description: >-
            Output only. Plain-text body of the message with all Chat app
            mentions stripped out.
        deleteTime:
          type: string
          description: >-
            Output only. The time at which the message was deleted in Google
            Chat. If the message is never deleted, this field is empty.
          readOnly: true
          format: google-datetime
        sender:
          description: >-
            Output only. The user who created the message. If your Chat app
            [authenticates as a
            user](https://developers.google.com/chat/api/guides/auth/users), the
            output populates the
            [user](https://developers.google.com/chat/api/reference/rest/v1/User)
            `name` and `type`.
          $ref: '#/components/schemas/User'
          readOnly: true
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
          description: >-
            Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive
            cards that you can use to display UI elements such as: formatted
            texts, buttons, and clickable images. Cards are normally displayed
            below the plain-text body of the message. `cards` and `cards_v2` can
            have a maximum size of 32 KB.
        attachment:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
          description: User-uploaded attachment.
        attachedGifs:
          description: Output only. GIF images that are attached to the message.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AttachedGif'
        cardsV2:
          description: >-
            Richly formatted and interactive cards that display UI elements and
            editable widgets, such as: - Formatted text - Buttons - Clickable
            images - Checkboxes - Radio buttons - Input widgets. Cards are
            usually displayed below the text body of a Chat message, but can
            situationally appear other places, such as
            [dialogs](https://developers.google.com/chat/how-tos/dialogs). Each
            card can have a maximum size of 32 KB. The `cardId` is a unique
            identifier among cards in the same message and for identifying user
            input values. Currently supported widgets include: - `TextParagraph`
            - `DecoratedText` - `Image` - `ButtonList` - `Divider` - `TextInput`
            - `SelectionInput` - `Grid`
          type: array
          items:
            $ref: '#/components/schemas/CardWithId'
        text:
          type: string
          description: >-
            Plain-text body of the message. The first link to an image, video,
            web page, or other preview-able item generates a preview chip.
        createTime:
          type: string
          description: >-
            For spaces created in Chat, the time at which the message was
            created. This field is output only, except when used in imported
            spaces. [Developer
            Preview](https://developers.google.com/workspace/preview): For
            imported spaces, set this field to the historical timestamp at which
            the message was created in the source in order to preserve the
            original creation time.
          format: google-datetime
        fallbackText:
          description: >-
            A plain-text description of the message's cards, used when the
            actual cards can't be displayed—for example, mobile notifications.
          type: string
        lastUpdateTime:
          type: string
          format: google-datetime
          readOnly: true
          description: >-
            Output only. The time at which the message was last edited by a
            user. If the message has never been edited, this field is empty.
        matchedUrl:
          description: >-
            Output only. A URL in `spaces.messages.text` that matches a link
            preview pattern. For more information, see [Preview
            links](https://developers.google.com/chat/how-tos/preview-links).
          readOnly: true
          $ref: '#/components/schemas/MatchedUrl'
        clientAssignedMessageId:
          description: >-
            A custom name for a Chat message assigned at creation. Must start
            with `client-` and contain only lowercase letters, numbers, and
            hyphens up to 63 characters in length. Specify this field to get,
            update, or delete the message with the specified value. Assigning a
            custom name lets a Chat app recall the message without saving the
            message `name` from the [response
            body](/chat/api/reference/rest/v1/spaces.messages/get#response-body)
            returned when creating the message. Assigning a custom name doesn't
            replace the generated `name` field, the message's resource name.
            Instead, it sets the custom name as the `clientAssignedMessageId`
            field, which you can reference while processing later operations,
            like updating or deleting the message. For example usage, see [Name
            a created
            message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
          type: string
      id: Message
    SlashCommand:
      id: SlashCommand
      type: object
      description: >-
        A [slash
        command](https://developers.google.com/chat/how-tos/slash-commands) in
        Google Chat.
      properties:
        commandId:
          format: int64
          type: string
          description: The ID of the slash command invoked.
    CardWithId:
      description: Widgets for Chat apps to specify.
      id: CardWithId
      properties:
        card:
          $ref: '#/components/schemas/GoogleAppsCardV1Card'
          description: >-
            Cards support a defined layout, interactive UI elements like
            buttons, and rich media like images. Use this card to present
            detailed information, gather information from users, and guide users
            to take a next step.
        cardId:
          type: string
          description: >-
            Required for `cardsV2` messages. Chat app-specified identifier for
            this widget. Scoped within a message.
      type: object
    SetUpSpaceRequest:
      type: object
      id: SetUpSpaceRequest
      properties:
        requestId:
          type: string
          description: >-
            Optional. A unique identifier for this request. A random UUID is
            recommended. Specifying an existing request ID returns the space
            created with that ID instead of creating a new space. Specifying an
            existing request ID from the same Chat app with a different
            authenticated user returns an error.
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/Membership'
          description: >-
            Optional. The initial set of in-domain users invited to join the
            space. The calling user is automatically added to the space, and
            shouldn't be specified as a membership. The set currently allows up
            to 20 memberships (in addition to the caller). The
            `Membership.member` field must contain a user with `name` populated
            and `User.Type.HUMAN`. All other fields are ignored. Optional when
            setting `Space.spaceType` to `SPACE`. Required when setting
            `Space.spaceType` to `GROUP_CHAT`, along with at least two
            memberships. Required when setting `Space.spaceType` to
            `DIRECT_MESSAGE` with a human user, along with exactly one
            membership. Must be empty when creating a 1:1 conversation between a
            human and the calling Chat app (when setting `Space.spaceType` to
            `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`). Not
            supported: Inviting guest users, or adding other Chat apps.
        space:
          $ref: '#/components/schemas/Space'
          description: >-
            Required. The `Space.spaceType` field is required. To create a
            space, set `Space.spaceType` to `SPACE` and set `Space.displayName`.
            To create a group chat, set `Space.spaceType` to `GROUP_CHAT`. Don't
            set `Space.displayName`. To create a 1:1 conversation between
            humans, set `Space.spaceType` to `DIRECT_MESSAGE` and set
            `Space.singleUserBotDm` to `false`. Don't set `Space.displayName` or
            `Space.spaceDetails`. To create an 1:1 conversation between a human
            and the calling Chat app, set `Space.spaceType` to `DIRECT_MESSAGE`
            and `Space.singleUserBotDm` to `true`. Don't set `Space.displayName`
            or `Space.spaceDetails`. If a `DIRECT_MESSAGE` space already exists,
            that space is returned instead of creating a new space.
    DialogAction:
      description: >-
        Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs)
        and request status code.
      properties:
        dialog:
          description: >-
            Input only.
            [Dialog](https://developers.google.com/chat/how-tos/dialogs) for the
            request.
          $ref: '#/components/schemas/Dialog'
        actionStatus:
          $ref: '#/components/schemas/ActionStatus'
          description: >-
            Input only. Status for a request to either invoke or submit a
            [dialog](https://developers.google.com/chat/how-tos/dialogs).
            Displays a status and message to users, if necessary. For example,
            in case of an error or success.
      id: DialogAction
      type: object
    SpaceDetails:
      id: SpaceDetails
      type: object
      properties:
        description:
          type: string
          description: >-
            Optional. A description of the space. For example, describe the
            space's discussion topic, functional purpose, or participants.
            Supports up to 150 characters.
        guidelines:
          type: string
          description: >-
            Optional. The space's rules, expectations, and etiquette. Supports
            up to 5,000 characters.
      description: Details about the space including description and rules.
    GoogleAppsCardV1ButtonList:
      id: GoogleAppsCardV1ButtonList
      type: object
      description: A list of buttons layed out horizontally.
      properties:
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1Button'
          description: An array of buttons.
    Media:
      type: object
      description: Media resource.
      properties:
        resourceName:
          type: string
          description: Name of the media resource.
      id: Media
    Annotation:
      description: >-
        Annotations associated with the plain-text body of the message. Example
        plain-text message body: ``` Hello @FooBot how are you!" ``` The
        corresponding annotations metadata: ``` "annotations":[{
        "type":"USER_MENTION", "startIndex":6, "length":7, "userMention": {
        "user": { "name":"users/{user}", "displayName":"FooBot",
        "avatarUrl":"https://goo.gl/aeDtrS", "type":"BOT" }, "type":"MENTION" }
        }] ```
      properties:
        length:
          description: >-
            Length of the substring in the plain-text message body this
            annotation corresponds to.
          format: int32
          type: integer
        slashCommand:
          description: The metadata for a slash command.
          $ref: '#/components/schemas/SlashCommandMetadata'
        type:
          enum:
            - ANNOTATION_TYPE_UNSPECIFIED
            - USER_MENTION
            - SLASH_COMMAND
          type: string
          description: The type of this annotation.
          enumDescriptions:
            - Default value for the enum. Don't use.
            - A user is mentioned.
            - A slash command is invoked.
        startIndex:
          type: integer
          format: int32
          description: >-
            Start index (0-based, inclusive) in the plain-text message body this
            annotation corresponds to.
        userMention:
          $ref: '#/components/schemas/UserMentionMetadata'
          description: The metadata of user mention.
      id: Annotation
      type: object
    ListSpacesResponse:
      properties:
        spaces:
          type: array
          description: List of spaces in the requested (or first) page.
          items:
            $ref: '#/components/schemas/Space'
        nextPageToken:
          type: string
          description: >-
            You can send a token as `pageToken` to retrieve the next page of
            results. If empty, there are no subsequent pages.
      id: ListSpacesResponse
      type: object
    TimeInput:
      description: Time input values.
      type: object
      id: TimeInput
      properties:
        hours:
          type: integer
          format: int32
          description: The hour on a 24-hour clock.
        minutes:
          format: int32
          type: integer
          description: The number of minutes past the hour. Valid values are 0 to 59.
    GoogleAppsCardV1SwitchControl:
      description: >-
        Either a toggle-style switch or a checkbox inside a `decoratedText`
        widget. Only supported in the `decoratedText` widget.
      type: object
      id: GoogleAppsCardV1SwitchControl
      properties:
        selected:
          type: boolean
          description: When `true`, the switch is selected.
        value:
          type: string
          description: >-
            The value entered by a user, returned as part of a form input event.
            For details about working with form inputs, see [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
        controlType:
          description: How the switch appears in the user interface.
          enumDescriptions:
            - A toggle-style switch.
            - Deprecated in favor of `CHECK_BOX`.
            - A checkbox.
          type: string
          enum:
            - SWITCH
            - CHECKBOX
            - CHECK_BOX
        onChangeAction:
          $ref: '#/components/schemas/GoogleAppsCardV1Action'
          description: >-
            The action to perform when the switch state is changed, such as what
            function to run.
        name:
          type: string
          description: >-
            The name by which the switch widget is identified in a form input
            event. For details about working with form inputs, see [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
    Status:
      id: Status
      type: object
      properties:
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
        code:
          format: int32
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
    AttachmentDataRef:
      type: object
      id: AttachmentDataRef
      properties:
        resourceName:
          type: string
          description: >-
            The resource name of the attachment data. This field is used with
            the media API to download the attachment data.
        attachmentUploadToken:
          type: string
          description: >-
            Opaque token containing a reference to an uploaded attachment.
            Treated by clients as an opaque string and used to create or update
            Chat messages with attachments.
    MatchedUrl:
      id: MatchedUrl
      properties:
        url:
          readOnly: true
          description: Output only. The URL that was matched.
          type: string
      description: >-
        A matched URL in a Chat message. Chat apps can preview matched URLs. For
        more information, see [Preview
        links](https://developers.google.com/chat/how-tos/preview-links).
      type: object
    Inputs:
      id: Inputs
      type: object
      description: Types of data inputs for widgets. Users enter data with these inputs.
      properties:
        dateInput:
          $ref: '#/components/schemas/DateInput'
          description: Date input values.
        dateTimeInput:
          $ref: '#/components/schemas/DateTimeInput'
          description: Date and time input values.
        timeInput:
          $ref: '#/components/schemas/TimeInput'
          description: Time input values.
        stringInputs:
          $ref: '#/components/schemas/StringInputs'
          description: >-
            Input parameter for regular widgets. For single-valued widgets, it
            is a single value list. For multi-valued widgets, such as checkbox,
            all the values are presented.
    OpenLink:
      id: OpenLink
      description: A link that opens a new window.
      properties:
        url:
          type: string
          description: The URL to open.
      type: object
    GoogleAppsCardV1Divider:
      id: GoogleAppsCardV1Divider
      description: >-
        Displays a divider between widgets as a horizontal line. For example,
        the following JSON creates a divider: ``` "divider": {} ```
      properties: {}
      type: object
    TextButton:
      description: A button with text and `onclick` action.
      properties:
        text:
          description: The text of the button.
          type: string
        onClick:
          $ref: '#/components/schemas/OnClick'
          description: The `onclick` action of the button.
      type: object
      id: TextButton
    ActionResponse:
      id: ActionResponse
      description: >-
        Parameters that a Chat app can use to configure how its response is
        posted.
      type: object
      properties:
        type:
          type: string
          description: Input only. The type of Chat app response.
          enumDescriptions:
            - Default type that's handled as `NEW_MESSAGE`.
            - Post as a new message in the topic.
            - >-
              Update the Chat app's message. This is only permitted on a
              `CARD_CLICKED` event where the message sender type is `BOT`.
            - >-
              Update the cards on a user's message. This is only permitted as a
              response to a `MESSAGE` event with a matched url, or a
              `CARD_CLICKED` event where the message sender type is `HUMAN`.
              Text is ignored.
            - >-
              Privately ask the user for additional authentication or
              configuration.
            - >-
              Presents a
              [dialog](https://developers.google.com/chat/how-tos/dialogs).
          enum:
            - TYPE_UNSPECIFIED
            - NEW_MESSAGE
            - UPDATE_MESSAGE
            - UPDATE_USER_MESSAGE_CARDS
            - REQUEST_CONFIG
            - DIALOG
        url:
          type: string
          description: >-
            Input only. URL for users to authenticate or configure. (Only for
            `REQUEST_CONFIG` response types.)
        dialogAction:
          $ref: '#/components/schemas/DialogAction'
          description: >-
            Input only. A response to an event related to a
            [dialog](https://developers.google.com/chat/how-tos/dialogs). Must
            be accompanied by `ResponseType.Dialog`.
    KeyValue:
      properties:
        iconUrl:
          description: The icon specified by a URL.
          type: string
        icon:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - ICON_UNSPECIFIED
            - AIRPLANE
            - BOOKMARK
            - BUS
            - CAR
            - CLOCK
            - CONFIRMATION_NUMBER_ICON
            - DOLLAR
            - DESCRIPTION
            - EMAIL
            - EVENT_PERFORMER
            - EVENT_SEAT
            - FLIGHT_ARRIVAL
            - FLIGHT_DEPARTURE
            - HOTEL
            - HOTEL_ROOM_TYPE
            - INVITE
            - MAP_PIN
            - MEMBERSHIP
            - MULTIPLE_PEOPLE
            - OFFER
            - PERSON
            - PHONE
            - RESTAURANT_ICON
            - SHOPPING_CART
            - STAR
            - STORE
            - TICKET
            - TRAIN
            - VIDEO_CAMERA
            - VIDEO_PLAY
          description: >-
            An enum value that's replaced by the Chat API with the corresponding
            icon image.
          type: string
        bottomLabel:
          type: string
          description: >-
            The text of the bottom label. Formatted text supported. For more
            information about formatting text, see [Formatting text in Google
            Chat
            apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
            and [Formatting text in Google Workspace
            Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
        contentMultiline:
          description: If the content should be multiline.
          type: boolean
        onClick:
          description: >-
            The `onclick` action. Only the top label, bottom label, and content
            region are clickable.
          $ref: '#/components/schemas/OnClick'
        button:
          $ref: '#/components/schemas/Button'
          description: A button that can be clicked to trigger an action.
        topLabel:
          description: >-
            The text of the top label. Formatted text supported. For more
            information about formatting text, see [Formatting text in Google
            Chat
            apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
            and [Formatting text in Google Workspace
            Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
        content:
          description: >-
            The text of the content. Formatted text supported and always
            required. For more information about formatting text, see
            [Formatting text in Google Chat
            apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
            and [Formatting text in Google Workspace
            Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
      id: KeyValue
      type: object
      description: >-
        A UI element contains a key (label) and a value (content). This element
        can also contain some actions such as `onclick` button.
    WidgetMarkup:
      description: A widget is a UI element that presents text and images.
      id: WidgetMarkup
      type: object
      properties:
        image:
          $ref: '#/components/schemas/Image'
          description: Display an image in this widget.
        keyValue:
          description: Display a key value item in this widget.
          $ref: '#/components/schemas/KeyValue'
        buttons:
          items:
            $ref: '#/components/schemas/Button'
          description: >-
            A list of buttons. Buttons is also `oneof data` and only one of
            these fields should be set.
          type: array
        textParagraph:
          $ref: '#/components/schemas/TextParagraph'
          description: Display a text paragraph in this widget.
    Color:
      id: Color
      type: object
      properties:
        alpha:
          description: >-
            The fraction of this color that should be applied to the pixel. That
            is, the final pixel color is defined by the equation: `pixel color =
            alpha * (this color) + (1.0 - alpha) * (background color)` This
            means that a value of 1.0 corresponds to a solid color, whereas a
            value of 0.0 corresponds to a completely transparent color. This
            uses a wrapper message rather than a simple float scalar so that it
            is possible to distinguish between a default value and the value
            being unset. If omitted, this color object is rendered as a solid
            color (as if the alpha value had been explicitly given a value of
            1.0).
          format: float
          type: number
        red:
          format: float
          type: number
          description: The amount of red in the color as a value in the interval [0, 1].
        green:
          format: float
          description: The amount of green in the color as a value in the interval [0, 1].
          type: number
        blue:
          type: number
          description: The amount of blue in the color as a value in the interval [0, 1].
          format: float
      description: >-
        Represents a color in the RGBA color space. This representation is
        designed for simplicity of conversion to and from color representations
        in various languages over compactness. For example, the fields of this
        representation can be trivially provided to the constructor of
        `java.awt.Color` in Java; it can also be trivially provided to UIColor's
        `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little
        work, it can be easily formatted into a CSS `rgba()` string in
        JavaScript. This reference page doesn't have information about the
        absolute color space that should be used to interpret the RGB value—for
        example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications
        should assume the sRGB color space. When color equality needs to be
        decided, implementations, unless documented otherwise, treat two colors
        as equal if all their red, green, blue, and alpha values each differ by
        at most `1e-5`. Example (Java): import com.google.type.Color; // ...
        public static java.awt.Color fromProto(Color protocolor) { float alpha =
        protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return
        new java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
        protocolor.getBlue(), alpha); } public static Color
        toProto(java.awt.Color color) { float red = (float) color.getRed();
        float green = (float) color.getGreen(); float blue = (float)
        color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder
        = Color .newBuilder() .setRed(red / denominator) .setGreen(green /
        denominator) .setBlue(blue / denominator); int alpha = color.getAlpha();
        if (alpha != 255) { result.setAlpha( FloatValue .newBuilder()
        .setValue(((float) alpha) / denominator) .build()); } return
        resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static
        UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
        float green = [protocolor green]; float blue = [protocolor blue];
        FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
        (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return
        [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static
        Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if
        (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return
        nil; } Color* result = [[Color alloc] init]; [result setRed:red];
        [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) {
        [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease];
        return result; } // ... Example (JavaScript): // ... var protoToCssColor
        = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var
        greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue ||
        0.0; var red = Math.floor(redFrac * 255); var green =
        Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if
        (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); }
        var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red,
        green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac,
        ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var
        rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString
        = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var
        resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) {
        resultBuilder.push('0'); } resultBuilder.push(hexString); return
        resultBuilder.join(''); }; // ...
    TimeZone:
      type: object
      id: TimeZone
      properties:
        id:
          type: string
          description: >-
            The [IANA TZ](https://www.iana.org/time-zones) time zone database
            code, such as "America/Toronto".
        offset:
          type: integer
          description: >-
            The user timezone offset, in milliseconds, from Coordinated
            Universal Time (UTC).
          format: int32
      description: >-
        The timezone ID and offset from Coordinated Universal Time (UTC). Only
        supported for the event types
        [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED)
        and
        [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
    GoogleAppsCardV1TextParagraph:
      id: GoogleAppsCardV1TextParagraph
      description: >-
        A paragraph of text that supports formatting. For more information about
        formatting text, see [Formatting text in Google Chat
        apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
        and [Formatting text in Google Workspace
        Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
      type: object
      properties:
        text:
          description: The text that's shown in the widget.
          type: string
    Section:
      id: Section
      type: object
      description: >-
        A section contains a collection of widgets that are rendered
        (vertically) in the order that they are specified. Across all platforms,
        cards have a narrow fixed width, so there's currently no need for layout
        properties (for example, float).
      properties:
        header:
          description: >-
            The header of the section. Formatted text is supported. For more
            information about formatting text, see [Formatting text in Google
            Chat
            apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
            and [Formatting text in Google Workspace
            Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
          type: string
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/WidgetMarkup'
          description: A section must contain at least one widget.
    Button:
      properties:
        imageButton:
          description: A button with image and `onclick` action.
          $ref: '#/components/schemas/ImageButton'
        textButton:
          description: A button with text and `onclick` action.
          $ref: '#/components/schemas/TextButton'
      description: A button. Can be a text button or an image button.
      type: object
      id: Button
    DateTimeInput:
      type: object
      description: Date and time input values.
      id: DateTimeInput
      properties:
        hasDate:
          description: Whether the `datetime` input includes a calendar date.
          type: boolean
        msSinceEpoch:
          description: Time since epoch time, in milliseconds.
          type: string
          format: int64
        hasTime:
          description: Whether the `datetime` input includes a timestamp.
          type: boolean
    GoogleAppsCardV1Widget:
      description: >-
        Each card is made up of widgets. A widget is a composite object that can
        represent one of text, images, buttons, and other object types.
      id: GoogleAppsCardV1Widget
      type: object
      properties:
        buttonList:
          description: >-
            A list of buttons. For example, the following JSON creates two
            buttons. The first is a blue text button and the second is an image
            button that opens a link: ``` "buttonList": { "buttons": [ { "text":
            "Edit", "color": { "red": 0, "green": 0, "blue": 1, "alpha": 1 },
            "disabled": true, }, { "icon": { "knownIcon": "INVITE", "altText":
            "check calendar" }, "onClick": { "openLink": { "url":
            "https://example.com/calendar" } } } ] } ```
          $ref: '#/components/schemas/GoogleAppsCardV1ButtonList'
        selectionInput:
          $ref: '#/components/schemas/GoogleAppsCardV1SelectionInput'
          description: >-
            Displays a selection control that lets users select items. Selection
            controls can be checkboxes, radio buttons, switches, or dropdown
            menus. For example, the following JSON creates a dropdown menu that
            lets users choose a size: ``` "selectionInput": { "name": "size",
            "label": "Size" "type": "DROPDOWN", "items": [ { "text": "S",
            "value": "small", "selected": false }, { "text": "M", "value":
            "medium", "selected": true }, { "text": "L", "value": "large",
            "selected": false }, { "text": "XL", "value": "extra_large",
            "selected": false } ] } ```
        textParagraph:
          $ref: '#/components/schemas/GoogleAppsCardV1TextParagraph'
          description: >-
            Displays a text paragraph. Supports simple HTML formatted text. For
            more information about formatting text, see [Formatting text in
            Google Chat
            apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
            and [Formatting text in Google Workspace
            Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
            For example, the following JSON creates a bolded text: ```
            "textParagraph": { "text": " *bold text*" } ```
        image:
          $ref: '#/components/schemas/GoogleAppsCardV1Image'
          description: >-
            Displays an image. For example, the following JSON creates an image
            with alternative text: ``` "image": { "imageUrl":
            "https://developers.google.com/chat/images/quickstart-app-avatar.png",
            "altText": "Chat app avatar" } ```
        dateTimePicker:
          description: >-
            Displays a widget that lets users input a date, time, or date and
            time. For example, the following JSON creates a date time picker to
            schedule an appointment: ``` "dateTimePicker": { "name":
            "appointment_time", "label": "Book your appointment at:", "type":
            "DATE_AND_TIME", "valueMsEpoch": "796435200000" } ```
          $ref: '#/components/schemas/GoogleAppsCardV1DateTimePicker'
        horizontalAlignment:
          enumDescriptions:
            - Don't use. Unspecified.
            - >-
              Default value. Aligns widgets to the start position of the column.
              For left-to-right layouts, aligns to the left. For right-to-left
              layouts, aligns to the right.
            - Aligns widgets to the center of the column.
            - >-
              Aligns widgets to the end position of the column. For
              left-to-right layouts, aligns widgets to the right. For
              right-to-left layouts, aligns widgets to the left.
          description: >-
            Specifies whether widgets align to the left, right, or center of a
            column.
          enum:
            - HORIZONTAL_ALIGNMENT_UNSPECIFIED
            - START
            - CENTER
            - END
          type: string
        decoratedText:
          $ref: '#/components/schemas/GoogleAppsCardV1DecoratedText'
          description: >-
            Displays a decorated text item. For example, the following JSON
            creates a decorated text widget showing email address: ```
            "decoratedText": { "icon": { "knownIcon": "EMAIL" }, "topLabel":
            "Email Address", "text": "sasha@example.com", "bottomLabel": "This
            is a new Email address!", "switchControl": { "name":
            "has_send_welcome_email_to_sasha", "selected": false, "controlType":
            "CHECKBOX" } } ```
        grid:
          $ref: '#/components/schemas/GoogleAppsCardV1Grid'
          description: >-
            Displays a grid with a collection of items. A grid supports any
            number of columns and items. The number of rows is determined by the
            upper bounds of the number items divided by the number of columns. A
            grid with 10 items and 2 columns has 5 rows. A grid with 11 items
            and 2 columns has 6 rows. For example, the following JSON creates a
            2 column grid with a single item: ``` "grid": { "title": "A fine
            collection of items", "columnCount": 2, "borderStyle": { "type":
            "STROKE", "cornerRadius": 4 }, "items": [ { "image": { "imageUri":
            "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE"
            }, "borderStyle": { "type": "STROKE" } }, "title": "An item",
            "textAlignment": "CENTER" } ], "onClick": { "openLink": { "url":
            "https://www.example.com" } } } ```
        columns:
          $ref: '#/components/schemas/GoogleAppsCardV1Columns'
          description: >-
            Displays up to 2 columns. To include more than 2 columns, or to use
            rows, use the `Grid` widget. For example, the following JSON creates
            2 columns that each contain text paragraphs: ``` "columns": {
            "columnItems": [ { "horizontalSizeStyle": "FILL_AVAILABLE_SPACE",
            "horizontalAlignment": "CENTER", "verticalAlignment": "CENTER",
            "widgets": [ { "textParagraph": { "text": "First column text
            paragraph" } } ] }, { "horizontalSizeStyle": "FILL_AVAILABLE_SPACE",
            "horizontalAlignment": "CENTER", "verticalAlignment": "CENTER",
            "widgets": [ { "textParagraph": { "text": "Second column text
            paragraph" } } ] } ] } ```
        textInput:
          $ref: '#/components/schemas/GoogleAppsCardV1TextInput'
          description: >-
            Displays a text box that users can type into. For example, the
            following JSON creates a text input for an email address: ```
            "textInput": { "name": "mailing_address", "label": "Mailing Address"
            } ``` As another example, the following JSON creates a text input
            for a programming language with static suggestions: ``` "textInput":
            { "name": "preferred_programing_language", "label": "Preferred
            Language", "initialSuggestions": { "items": [ { "text": "C++" }, {
            "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" } ] }
            } ```
        divider:
          $ref: '#/components/schemas/GoogleAppsCardV1Divider'
          description: >-
            Displays a horizontal line divider between widgets. For example, the
            following JSON creates a divider: ``` "divider": { } ```
    GoogleAppsCardV1ImageComponent:
      id: GoogleAppsCardV1ImageComponent
      description: Represents an image.
      type: object
      properties:
        imageUri:
          type: string
          description: The image URL.
        altText:
          type: string
          description: The accessibility label for the image.
        borderStyle:
          $ref: '#/components/schemas/GoogleAppsCardV1BorderStyle'
          description: The border style to apply to the image.
        cropStyle:
          description: The crop style to apply to the image.
          $ref: '#/components/schemas/GoogleAppsCardV1ImageCropStyle'
    GoogleAppsCardV1DecoratedText:
      type: object
      properties:
        button:
          $ref: '#/components/schemas/GoogleAppsCardV1Button'
          description: A button that a user can click to trigger an action.
        endIcon:
          $ref: '#/components/schemas/GoogleAppsCardV1Icon'
          description: >-
            An icon displayed after the text. Supports
            [built-in](https://developers.google.com/chat/api/guides/message-formats/cards#builtinicons)
            and
            [custom](https://developers.google.com/chat/api/guides/message-formats/cards#customicons)
            icons.
        topLabel:
          description: The text that appears above `text`. Always truncates.
          type: string
        wrapText:
          type: boolean
          description: >-
            The wrap text setting. If `true`, the text wraps and displays on
            multiple lines. Otherwise, the text is truncated. Only applies to
            `text`, not `topLabel` and `bottomLabel`.
        text:
          type: string
          description: >-
            Required. The primary text. Supports simple formatting. For more
            information about formatting text, see [Formatting text in Google
            Chat
            apps](https://developers.google.com/chat/api/guides/message-formats/cards#card_text_formatting)
            and [Formatting text in Google Workspace
            Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
        switchControl:
          description: >-
            A switch widget that a user can click to change its state and
            trigger an action.
          $ref: '#/components/schemas/GoogleAppsCardV1SwitchControl'
        startIcon:
          $ref: '#/components/schemas/GoogleAppsCardV1Icon'
          description: The icon displayed in front of the text.
        onClick:
          $ref: '#/components/schemas/GoogleAppsCardV1OnClick'
          description: >-
            This action is triggered when users click `topLabel` or
            `bottomLabel`.
        icon:
          $ref: '#/components/schemas/GoogleAppsCardV1Icon'
          description: Deprecated in favor of `startIcon`.
        bottomLabel:
          type: string
          description: The text that appears below `text`. Always wraps.
      description: >-
        A widget that displays text with optional decorations such as a label
        above or below the text, an icon in front of the text, a selection
        widget, or a button after the text.
      id: GoogleAppsCardV1DecoratedText
    GoogleAppsCardV1Button:
      type: object
      properties:
        icon:
          description: >-
            The icon image. If both `icon` and `text` are set, then the icon
            appears before the text.
          $ref: '#/components/schemas/GoogleAppsCardV1Icon'
        altText:
          description: >-
            The alternative text that's used for accessibility. Set descriptive
            text that lets users know what the button does. For example, if a
            button opens a hyperlink, you might write: "Opens a new browser tab
            and navigates to the Google Chat developer documentation at
            https://developers.google.com/chat".
          type: string
        text:
          description: The text displayed inside the button.
          type: string
        onClick:
          $ref: '#/components/schemas/GoogleAppsCardV1OnClick'
          description: >-
            Required. The action to perform when a user clicks the button, such
            as opening a hyperlink or running a custom function.
        color:
          description: >-
            If set, the button is filled with a solid background color and the
            font color changes to maintain contrast with the background color.
            For example, setting a blue background likely results in white text.
            If unset, the image background is white and the font color is blue.
            For red, green, and blue, the value of each field is a `float`
            number that you can express in either of two ways: as a number
            between 0 and 255 divided by 255 (153/255), or as a value between 0
            and 1 (0.6). 0 represents the absence of a color and 1 or 255/255
            represent the full presence of that color on the RGB scale.
            Optionally set `alpha`, which sets a level of transparency using
            this equation: ``` pixel color = alpha * (this color) + (1.0 -
            alpha) * (background color) ``` For `alpha`, a value of `1`
            corresponds with a solid color, and a value of `0` corresponds with
            a completely transparent color. For example, the following color
            represents a half transparent red: ``` "color": { "red": 1, "green":
            0, "blue": 0, "alpha": 0.5 } ```
          $ref: '#/components/schemas/Color'
        disabled:
          description: >-
            If `true`, the button is displayed in an inactive state and doesn't
            respond to user actions.
          type: boolean
      description: >-
        A text, icon, or text and icon button that users can click. To make an
        image a clickable button, specify an `Image` (not an `ImageComponent`)
        and set an `onClick` action.
      id: GoogleAppsCardV1Button
    GoogleAppsCardV1Column:
      type: object
      id: GoogleAppsCardV1Column
      properties:
        verticalAlignment:
          enumDescriptions:
            - Don't use. Unspecified.
            - Default value. Aligns widgets to the center of a column.
            - Aligns widgets to the top of a column.
            - Aligns widgets to the bottom of a column.
          description: >-
            Specifies whether widgets align to the top, bottom, or center of a
            column.
          type: string
          enum:
            - VERTICAL_ALIGNMENT_UNSPECIFIED
            - CENTER
            - TOP
            - BOTTOM
        horizontalSizeStyle:
          enum:
            - HORIZONTAL_SIZE_STYLE_UNSPECIFIED
            - FILL_AVAILABLE_SPACE
            - FILL_MINIMUM_SPACE
          description: Specifies how a column fills the width of the card.
          enumDescriptions:
            - Don't use. Unspecified.
            - >-
              Default value. Column fills the available space, up to 70% of the
              card's width. If both columns are set to `FILL_AVAILABLE_SPACE`,
              each column fills 50% of the space.
            - >-
              Column fills the least amount of space possible and no more than
              30% of the card's width.
          type: string
        widgets:
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1Widgets'
          type: array
          description: >-
            An array of widgets included in a column. Widgets appear in the
            order that they are specified.
        horizontalAlignment:
          enumDescriptions:
            - Don't use. Unspecified.
            - >-
              Default value. Aligns widgets to the start position of the column.
              For left-to-right layouts, aligns to the left. For right-to-left
              layouts, aligns to the right.
            - Aligns widgets to the center of the column.
            - >-
              Aligns widgets to the end position of the column. For
              left-to-right layouts, aligns widgets to the right. For
              right-to-left layouts, aligns widgets to the left.
          type: string
          description: >-
            Specifies whether widgets align to the left, right, or center of a
            column.
          enum:
            - HORIZONTAL_ALIGNMENT_UNSPECIFIED
            - START
            - CENTER
            - END
      description: A column.
    GoogleAppsCardV1BorderStyle:
      properties:
        cornerRadius:
          description: The corner radius for the border.
          type: integer
          format: int32
        type:
          description: The border type.
          enum:
            - BORDER_TYPE_UNSPECIFIED
            - NO_BORDER
            - STROKE
          enumDescriptions:
            - Don't use. Unspecified.
            - Default value. No border.
            - Outline.
          type: string
        strokeColor:
          description: The colors to use when the type is `BORDER_TYPE_STROKE`.
          $ref: '#/components/schemas/Color'
      id: GoogleAppsCardV1BorderStyle
      description: >-
        The style options for the border of a card or widget, including the
        border type and color.
      type: object
    GoogleAppsCardV1Icon:
      type: object
      id: GoogleAppsCardV1Icon
      properties:
        altText:
          type: string
          description: >-
            Optional. A description of the icon used for accessibility. If
            unspecified, the default value `Button` is provided. As a best
            practice, you should set a helpful description for what the icon
            displays, and if applicable, what it does. For example, `A user's
            account portrait`, or `Opens a new browser tab and navigates to the
            Google Chat developer documentation at
            https://developers.google.com/chat`. If the icon is set in a
            `Button`, the `altText` appears as helper text when the user hovers
            over the button. However, if the button also sets `text`, the icon's
            `altText` is ignored.
        imageType:
          description: >-
            The crop style applied to the image. In some cases, applying a
            `CIRCLE` crop causes the image to be drawn larger than a built-in
            icon.
          type: string
          enum:
            - SQUARE
            - CIRCLE
          enumDescriptions:
            - >-
              Default value. Applies a square mask to the image. For example, a
              4x3 image becomes 3x3.
            - >-
              Applies a circular mask to the image. For example, a 4x3 image
              becomes a circle with a diameter of 3.
        knownIcon:
          description: >-
            Display one of the built-in icons provided by Google Workspace. For
            example, to display an airplane icon, specify `AIRPLANE`. For a bus,
            specify `BUS`. For a full list of supported icons, see [built-in
            icons](https://developers.google.com/chat/api/guides/message-formats/cards#builtinicons).
          type: string
        iconUrl:
          description: >-
            Display a custom icon hosted at an HTTPS URL. For example: ```
            "iconUrl":
            "https://developers.google.com/chat/images/quickstart-app-avatar.png"
            ``` Supported file types include `.png` and `.jpg`.
          type: string
      description: >-
        An icon displayed in a widget on a card. Supports
        [built-in](https://developers.google.com/chat/api/guides/message-formats/cards#builtinicons)
        and
        [custom](https://developers.google.com/chat/api/guides/message-formats/cards#customicons)
        icons.
    GoogleAppsCardV1Columns:
      id: GoogleAppsCardV1Columns
      properties:
        columnItems:
          description: >-
            An array of columns. You can include up to 2 columns in a card or
            dialog.
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1Column'
          type: array
      type: object
      description: >-
        The `Columns` widget displays up to 2 columns in a card message or
        dialog. You can add widgets to each column; the widgets appear in the
        order that they are specified. The height of each column is determined
        by the taller column. For example, if the first column is taller than
        the second column, both columns have the height of the first column.
        Because each column can contain a different number of widgets, you can't
        define rows or align widgets between the columns. Columns are displayed
        side-by-side. You can customize the width of each column using the
        `HorizontalSizeStyle` field. If the user's screen width is too narrow,
        the second column wraps below the first: * On web, the second column
        wraps if the screen width is less than or equal to 480 pixels. * On iOS
        devices, the second column wraps if the screen width is less than or
        equal to 300 pt. * On Android devices, the second column wraps if the
        screen width is less than or equal to 320 dp. To include more than 2
        columns, or to use rows, use the `Grid` widget. Supported by Chat apps,
        but not Google Workspace Add-ons.
    UploadAttachmentRequest:
      properties:
        filename:
          type: string
          description: >-
            Required. The filename of the attachment, including the file
            extension.
      type: object
      id: UploadAttachmentRequest
    Emoji:
      properties:
        unicode:
          type: string
          description: A basic emoji represented by a unicode string.
        customEmoji:
          readOnly: true
          description: Output only. A custom emoji.
          $ref: '#/components/schemas/CustomEmoji'
      description: An emoji that is used as a reaction to a message.
      type: object
      id: Emoji
    GoogleAppsCardV1TextInput:
      properties:
        value:
          description: >-
            The value entered by a user, returned as part of a form input event.
            For details about working with form inputs, see [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
          type: string
        name:
          type: string
          description: >-
            The name by which the text input is identified in a form input
            event. For details about working with form inputs, see [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
        type:
          description: >-
            How a text input field appears in the user interface. For example,
            whether the field is single or multi-line.
          type: string
          enumDescriptions:
            - The text input field has a fixed height of one line.
            - The text input field has a fixed height of multiple lines.
          enum:
            - SINGLE_LINE
            - MULTIPLE_LINE
        hintText:
          description: >-
            Text that appears below the text input field meant to assist users
            by prompting them to enter a certain value. This text is always
            visible. Required if `label` is unspecified. Otherwise, optional.
          type: string
        onChangeAction:
          $ref: '#/components/schemas/GoogleAppsCardV1Action'
          description: >-
            What to do when a change occurs in the text input field. For
            example, a user adding to the field or deleting text. Examples of
            actions to take include running a custom function or opening a
            [dialog](https://developers.google.com/chat/how-tos/dialogs) in
            Google Chat.
        autoCompleteAction:
          description: >-
            Optional. Specify what action to take when the text input field
            provides suggestions to users who interact with it. If unspecified,
            the suggestions are set by `initialSuggestions` and are processed by
            the client. If specified, the app takes the action specified here,
            such as running a custom function. Supported by Google Workspace
            Add-ons, but not Chat apps.
          $ref: '#/components/schemas/GoogleAppsCardV1Action'
        initialSuggestions:
          description: >-
            Suggested values that users can enter. These values appear when
            users click inside the text input field. As users type, the
            suggested values dynamically filter to match what the users have
            typed. For example, a text input field for programming language
            might suggest Java, JavaScript, Python, and C++. When users start
            typing `Jav`, the list of suggestions filters to show just `Java`
            and `JavaScript`. Suggested values help guide users to enter values
            that your app can make sense of. When referring to JavaScript, some
            users might enter `javascript` and others `java script`. Suggesting
            `JavaScript` can standardize how users interact with your app. When
            specified, `TextInput.type` is always `SINGLE_LINE`, even if it's
            set to `MULTIPLE_LINE`.
          $ref: '#/components/schemas/GoogleAppsCardV1Suggestions'
        label:
          type: string
          description: >-
            The text that appears above the text input field in the user
            interface. Specify text that helps the user enter the information
            your app needs. For example, if you are asking someone's name, but
            specifically need their surname, write `surname` instead of `name`.
            Required if `hintText` is unspecified. Otherwise, optional.
      description: >-
        A field in which users can enter text. Supports suggestions and
        on-change actions. Chat apps receive and can process the value of
        entered text during form input events. For details about working with
        form inputs, see [Receive form
        data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
        When you need to collect undefined or abstract data from users, use a
        text input. To collect defined or enumerated data from users, use the
        SelectionInput widget.
      id: GoogleAppsCardV1TextInput
      type: object
    GoogleAppsCardV1Action:
      id: GoogleAppsCardV1Action
      type: object
      properties:
        persistValues:
          type: boolean
          description: >-
            Indicates whether form values persist after the action. The default
            value is `false`. If `true`, form values remain after the action is
            triggered. To let the user make changes while the action is being
            processed, set
            [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
            to `NONE`. For [card
            messages](https://developers.google.com/chat/api/guides/message-formats/cards)
            in Chat apps, you must also set the action's
            [`ResponseType`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#responsetype)
            to `UPDATE_MESSAGE` and use the same
            [`card_id`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#CardWithId)
            from the card that contained the action. If `false`, the form values
            are cleared when the action is triggered. To prevent the user from
            making changes while the action is being processed, set
            [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
            to `SPINNER`.
        parameters:
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1ActionParameter'
          description: List of action parameters.
          type: array
        function:
          type: string
          description: >-
            A custom function to invoke when the containing element is clicked
            or othrwise activated. For example usage, see [Create interactive
            cards](https://developers.google.com/chat/how-tos/cards-onclick).
        loadIndicator:
          enumDescriptions:
            - Displays a spinner to indicate that content is loading.
            - Nothing is displayed.
          enum:
            - SPINNER
            - NONE
          type: string
          description: >-
            Specifies the loading indicator that the action displays while
            making the call to the action.
        interaction:
          description: >-
            Optional. Required when opening a
            [dialog](https://developers.google.com/chat/how-tos/dialogs). What
            to do in response to an interaction with a user, such as a user
            clicking a button in a card message. If unspecified, the app
            responds by executing an `action`—like opening a link or running a
            function—as normal. By specifying an `interaction`, the app can
            respond in special interactive ways. For example, by setting
            `interaction` to `OPEN_DIALOG`, the app can open a
            [dialog](https://developers.google.com/chat/how-tos/dialogs). When
            specified, a loading indicator isn't shown. Supported by Chat apps,
            but not Google Workspace Add-ons. If specified for an add-on, the
            entire card is stripped and nothing is shown in the client.
          enum:
            - INTERACTION_UNSPECIFIED
            - OPEN_DIALOG
          type: string
          enumDescriptions:
            - Default value. The `action` executes as normal.
            - >-
              Opens a
              [dialog](https://developers.google.com/chat/how-tos/dialogs), a
              windowed, card-based interface that Chat apps use to interact with
              users. Only supported by Chat apps in response to button-clicks on
              card messages. Not supported by Google Workspace Add-ons. If
              specified for an add-on, the entire card is stripped and nothing
              is shown in the client.
      description: >-
        An action that describes the behavior when the form is submitted. For
        example, you can invoke an Apps Script script to handle the form. If the
        action is triggered, the form values are sent to the server.
    GoogleAppsCardV1SelectionInput:
      properties:
        name:
          description: >-
            The name that identifies the selection input in a form input event.
            For details about working with form inputs, see [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1SelectionItem'
          description: >-
            An array of selectable items. For example, an array of radio buttons
            or checkboxes. Supports up to 100 items.
        label:
          type: string
          description: >-
            The text that appears above the selection input field in the user
            interface. Specify text that helps the user enter the information
            your app needs. For example, if users are selecting the urgency of a
            work ticket from a drop-down menu, the label might be "Urgency" or
            "Select urgency".
        type:
          type: string
          enum:
            - CHECK_BOX
            - RADIO_BUTTON
            - SWITCH
            - DROPDOWN
          description: >-
            The type of items that are displayed to users in a `SelectionInput`
            widget. Selection types support different types of interactions. For
            example, users can select one or more checkboxes, but they can only
            select one value from a dropdown menu.
          enumDescriptions:
            - A set of checkboxes. Users can select one or more checkboxes.
            - A set of radio buttons. Users can select one radio button.
            - A set of switches. Users can turn on one or more switches.
            - A dropdown menu. Users can select one item from the menu.
        onChangeAction:
          description: >-
            If specified, the form is submitted when the selection changes. If
            not specified, you must specify a separate button that submits the
            form. For details about working with form inputs, see [Receive form
            data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
          $ref: '#/components/schemas/GoogleAppsCardV1Action'
      id: GoogleAppsCardV1SelectionInput
      description: >-
        A widget that creates one or more UI items that users can select. For
        example, a dropdown menu or checkboxes. You can use this widget to
        collect data that can be predicted or enumerated. Chat apps can process
        the value of items that users select or input. For details about working
        with form inputs, see [Receive form
        data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
        To collect undefined or abstract data from users, use the TextInput
        widget.
      type: object
    GoogleAppsCardV1CardAction:
      properties:
        onClick:
          $ref: '#/components/schemas/GoogleAppsCardV1OnClick'
          description: The `onClick` action for this action item.
        actionLabel:
          type: string
          description: The label that displays as the action menu item.
      id: GoogleAppsCardV1CardAction
      type: object
      description: >-
        A card action is the action associated with the card. For example, an
        invoice card might include actions such as delete invoice, email
        invoice, or open the invoice in a browser. Not supported by Chat apps.
    CustomEmoji:
      type: object
      id: CustomEmoji
      description: Represents a custom emoji.
      properties:
        uid:
          type: string
          description: Unique key for the custom emoji resource.
    OnClick:
      id: OnClick
      description: An `onclick` action (for example, open a link).
      type: object
      properties:
        openLink:
          $ref: '#/components/schemas/OpenLink'
          description: This `onclick` action triggers an open link action if specified.
        action:
          description: A form action is triggered by this `onclick` action if specified.
          $ref: '#/components/schemas/FormAction'
    GoogleAppsCardV1SuggestionItem:
      properties:
        text:
          description: >-
            The value of a suggested input to a text input field. This is
            equivalent to what users enter themselves.
          type: string
      id: GoogleAppsCardV1SuggestionItem
      type: object
      description: One suggested value that users can enter in a text input field.
    CardHeader:
      properties:
        imageStyle:
          description: The image's type (for example, square border or circular border).
          enumDescriptions:
            - ''
            - Square border.
            - Circular border.
          enum:
            - IMAGE_STYLE_UNSPECIFIED
            - IMAGE
            - AVATAR
          type: string
        imageUrl:
          description: The URL of the image in the card header.
          type: string
        title:
          type: string
          description: >-
            The title must be specified. The header has a fixed height: if both
            a title and subtitle is specified, each takes up one line. If only
            the title is specified, it takes up both lines.
        subtitle:
          description: The subtitle of the card header.
          type: string
      id: CardHeader
      type: object
    EmojiReactionSummary:
      type: object
      properties:
        reactionCount:
          description: The total number of reactions using the associated emoji.
          format: int32
          type: integer
        emoji:
          $ref: '#/components/schemas/Emoji'
          description: Emoji associated with the reactions.
      description: The number of people who reacted to a message with a specific emoji.
      id: EmojiReactionSummary
    Card:
      type: object
      description: >-
        A card is a UI element that can contain UI widgets such as text and
        images.
      properties:
        sections:
          description: Sections are separated by a line divider.
          items:
            $ref: '#/components/schemas/Section'
          type: array
        cardActions:
          description: The actions of this card.
          type: array
          items:
            $ref: '#/components/schemas/CardAction'
        header:
          description: >-
            The header of the card. A header usually contains a title and an
            image.
          $ref: '#/components/schemas/CardHeader'
        name:
          description: Name of the card.
          type: string
      id: Card
    DeletionMetadata:
      id: DeletionMetadata
      description: >-
        Information about a deleted message. A message is deleted when
        `delete_time` is set.
      properties:
        deletionType:
          description: Indicates who deleted the message.
          enum:
            - DELETION_TYPE_UNSPECIFIED
            - CREATOR
            - SPACE_OWNER
            - ADMIN
            - APP_MESSAGE_EXPIRY
            - CREATOR_VIA_APP
            - SPACE_OWNER_VIA_APP
          enumDescriptions:
            - This value is unused.
            - User deleted their own message.
            - The space owner deleted the message.
            - A Google Workspace admin deleted the message.
            - A Chat app deleted its own message when it expired.
            - A Chat app deleted the message on behalf of the user.
            - A Chat app deleted the message on behalf of the space owner.
          type: string
      type: object
    FormAction:
      id: FormAction
      type: object
      description: >-
        A form action describes the behavior when the form is submitted. For
        example, you can invoke Apps Script to handle the form.
      properties:
        parameters:
          items:
            $ref: '#/components/schemas/ActionParameter'
          description: List of action parameters.
          type: array
        actionMethodName:
          type: string
          description: >-
            The method name is used to identify which part of the form triggered
            the form submission. This information is echoed back to the Chat app
            as part of the card click event. You can use the same method name
            for several elements that trigger a common behavior.
    GoogleAppsCardV1Suggestions:
      properties:
        items:
          description: >-
            A list of suggestions used for autocomplete recommendations in text
            input fields.
          items:
            $ref: '#/components/schemas/GoogleAppsCardV1SuggestionItem'
          type: array
      id: GoogleAppsCardV1Suggestions
      type: object
      description: >-
        Suggested values that users can enter. These values appear when users
        click inside the text input field. As users type, the suggested values
        dynamically filter to match what the users have typed. For example, a
        text input field for programming language might suggest Java,
        JavaScript, Python, and C++. When users start typing `Jav`, the list of
        suggestions filters to show `Java` and `JavaScript`. Suggested values
        help guide users to enter values that your app can make sense of. When
        referring to JavaScript, some users might enter `javascript` and others
        `java script`. Suggesting `JavaScript` can standardize how users
        interact with your app. When specified, `TextInput.type` is always
        `SINGLE_LINE`, even if it's set to `MULTIPLE_LINE`.
    Empty:
      id: Empty
      type: object
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      properties: {}
    ImageButton:
      properties:
        iconUrl:
          type: string
          description: The icon specified by a URL.
        name:
          type: string
          description: >-
            The name of this `image_button` that's used for accessibility.
            Default value is provided if this name isn't specified.
        onClick:
          description: The `onclick` action.
          $ref: '#/components/schemas/OnClick'
        icon:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          description: >-
            The icon specified by an `enum` that indices to an icon provided by
            Chat API.
          type: string
          enum:
            - ICON_UNSPECIFIED
            - AIRPLANE
            - BOOKMARK
            - BUS
            - CAR
            - CLOCK
            - CONFIRMATION_NUMBER_ICON
            - DOLLAR
            - DESCRIPTION
            - EMAIL
            - EVENT_PERFORMER
            - EVENT_SEAT
            - FLIGHT_ARRIVAL
            - FLIGHT_DEPARTURE
            - HOTEL
            - HOTEL_ROOM_TYPE
            - INVITE
            - MAP_PIN
            - MEMBERSHIP
            - MULTIPLE_PEOPLE
            - OFFER
            - PERSON
            - PHONE
            - RESTAURANT_ICON
            - SHOPPING_CART
            - STAR
            - STORE
            - TICKET
            - TRAIN
            - VIDEO_CAMERA
            - VIDEO_PLAY
      description: An image button with an `onclick` action.
      type: object
      id: ImageButton
    User:
      type: object
      properties:
        domainId:
          description: Unique identifier of the user's Google Workspace domain.
          type: string
        isAnonymous:
          type: boolean
          description: >-
            Output only. When `true`, the user is deleted or their profile is
            not visible.
          readOnly: true
        name:
          type: string
          description: >-
            Resource name for a Google Chat user. Format: `users/{user}`.
            `users/app` can be used as an alias for the calling app bot user.
            For human users, `{user}` is the same user identifier as: - the
            `{person_id`} for the
            [Person](https://developers.google.com/people/api/rest/v1/people) in
            the People API, where the Person `resource_name` is
            `people/{person_id}`. For example, `users/123456789` in Chat API
            represents the same person as `people/123456789` in People API. -
            the `id` for a
            [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
            in the Admin SDK Directory API.
        displayName:
          readOnly: true
          type: string
          description: Output only. The user's display name.
        type:
          enumDescriptions:
            - Default value for the enum. DO NOT USE.
            - Human user.
            - Chat app user.
          description: User type.
          type: string
          enum:
            - TYPE_UNSPECIFIED
            - HUMAN
            - BOT
      description: A user in Google Chat.
      id: User
    DateInput:
      properties:
        msSinceEpoch:
          type: string
          format: int64
          description: Time since epoch time, in milliseconds.
      id: DateInput
      description: Date input values.
      type: object
  parameters:
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/chat.memberships.readonly: View members in Google Chat conversations.
            https://www.googleapis.com/auth/chat.bot: 'Private Service: https://www.googleapis.com/auth/chat.bot'
            https://www.googleapis.com/auth/chat.messages.reactions.readonly: View reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.messages.create: Compose and send messages in Google Chat
            https://www.googleapis.com/auth/chat.memberships.app: Add and remove itself from conversations in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions.create: Add reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.spaces: >-
              Create conversations and spaces and view or update metadata
              (including history settings) in Google Chat
            https://www.googleapis.com/auth/chat.messages.reactions: View, add, and delete reactions to messages in Google Chat
            https://www.googleapis.com/auth/chat.memberships: View, add, and remove members from conversations in Google Chat
            https://www.googleapis.com/auth/chat.spaces.readonly: View chat and spaces in Google Chat
            https://www.googleapis.com/auth/chat.messages: >-
              View, compose, send, update, and delete messages, and add, view,
              and delete reactions to messages.
            https://www.googleapis.com/auth/chat.import: Import spaces, messages, and memberships into Google Chat.
            https://www.googleapis.com/auth/chat.delete: >-
              Delete conversations and spaces & remove access to associated
              files in Google Chat
            https://www.googleapis.com/auth/chat.messages.readonly: View messages and reactions in Google Chat
            https://www.googleapis.com/auth/chat.spaces.create: Create new conversations in Google Chat
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/spaces/{spacesId}/members/{membersId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/callback'
    get:
      description: >-
        Returns details about a membership. For an example, see [Get a
        membership](https://developers.google.com/chat/api/guides/v1/members/get).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.memberships` or `chat.memberships.readonly`
        authorization scope.
      operationId: chat.spaces.members.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: membersId
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes a membership. For an example, see [Delete a
        membership](https://developers.google.com/chat/api/guides/v1/members/delete).
        Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.memberships` or `chat.memberships.app` authorization
        scope.
      operationId: chat.spaces.members.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships.app
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships.app
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: membersId
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: delete
  /v1/spaces/{spacesId}/members:
    parameters: *ref_1
    post:
      description: >-
        Creates a human membership or app membership for the calling app.
        Creating memberships for other apps isn't supported. For an example, see
        [ Create a
        membership](https://developers.google.com/chat/api/guides/v1/members/create).
        When creating a membership, if the specified member has their
        auto-accept policy turned off, then they're invited, and must accept the
        space invitation before joining. Otherwise, creating a membership adds
        the member directly to the specified space. Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.memberships` (for human membership) or
        `chat.memberships.app` (for app membership) scope. To specify the member
        to add, set the `membership.member.name` in the
        `CreateMembershipRequest`: - To add the calling app to a space or a
        direct message between two human users, use `users/app`. Unable to add
        other apps to the space. - To add a human user, use `users/{user}`,
        where `{user}` is either the `{person_id}` for the
        [person](https://developers.google.com/people/api/rest/v1/people) from
        the People API, or the `id` for the
        [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
        in the Directory API. For example, if the People API `Person`
        `resourceName` is `people/123456789`, you can add the user to the space
        by setting the `membership.member.name` to `users/123456789`.
      operationId: chat.spaces.members.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Membership'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships.app
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships.app
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: insert
    get:
      description: >-
        Lists memberships in a space. For an example, see [List
        memberships](https://developers.google.com/chat/api/guides/v1/members/list).
        Listing memberships with [app
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        lists memberships in spaces that the Chat app has access to, but
        excludes Chat app memberships, including its own. Listing memberships
        with [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        lists memberships in spaces that the authenticated user has access to.
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.memberships` or `chat.memberships.readonly`
        authorization scope.
      operationId: chat.spaces.members.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships
        - Oauth2:
            - https://www.googleapis.com/auth/chat.memberships.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.memberships.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMembershipsResponse'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: query
          name: showInvited
          schema:
            type: boolean
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: select
  /v1/spaces/{spacesId}/messages/{messagesId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes a message. For an example, see [Delete a
        message](https://developers.google.com/chat/api/guides/v1/messages/delete).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.messages` authorization scope.
      operationId: chat.spaces.messages.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: messages
      x-stackQL-verb: delete
    put:
      description: >-
        Updates a message. There's a difference between the `patch` and `update`
        methods. The `patch` method uses a `patch` request while the `update`
        method uses a `put` request. We recommend using the `patch` method. For
        an example, see [Update a
        message](https://developers.google.com/chat/api/guides/v1/messages/update).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.messages` authorization scope.
      operationId: chat.spaces.messages.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: exec
    patch:
      description: >-
        Updates a message. There's a difference between the `patch` and `update`
        methods. The `patch` method uses a `patch` request while the `update`
        method uses a `put` request. We recommend using the `patch` method. For
        an example, see [Update a
        message](https://developers.google.com/chat/api/guides/v1/messages/update).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.messages` authorization scope.
      operationId: chat.spaces.messages.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: exec
    get:
      description: >-
        Returns details about a message. For an example, see [Read a
        message](https://developers.google.com/chat/api/guides/v1/messages/get).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.messages` or `chat.messages.readonly` authorization
        scope. Note: Might return a message from a blocked member or space.
      operationId: chat.spaces.messages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: select
  /v1/spaces/{spacesId}/messages:
    parameters: *ref_1
    post:
      description: >-
        Creates a message. For an example, see [Create a
        message](https://developers.google.com/chat/api/guides/crudl/messages#create_a_message).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Creating a text message supports both [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and [app authentication]
        (https://developers.google.com/chat/api/guides/auth/service-accounts).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.messages` or `chat.messages.create` authorization
        scope. Creating a card message only supports and requires [app
        authentication]
        (https://developers.google.com/chat/api/guides/auth/service-accounts).
        Because Chat provides authentication for
        [webhooks](https://developers.google.com/chat/how-tos/webhooks) as part
        of the URL that's generated when a webhook is registered, webhooks can
        create messages without a service account or user authentication.
      operationId: chat.spaces.messages.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.create
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: query
          name: threadKey
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: messageReplyOption
          schema:
            type: string
        - in: query
          name: messageId
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: insert
    get:
      description: >-
        Lists messages in a space that the caller is a member of, including
        messages from blocked members and spaces. For an example, see [List
        messages](/chat/api/guides/v1/messages/list). Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.messages` or `chat.messages.readonly` authorization scope.
        This method is only supported in spaces that don't allow users from
        outside the Workspace organization to join.
      operationId: chat.spaces.messages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: query
          name: showDeleted
          schema:
            type: boolean
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: select
  /v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the metadata of a message attachment. The attachment data is
        fetched using the [media
        API](https://developers.google.com/chat/api/reference/rest/v1/media/download).
        For an example, see [Get a message
        attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/get).
        Requires [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
      operationId: chat.spaces.messages.attachments.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: path
          name: attachmentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attachments
      x-stackQL-verb: select
  /v1/spaces/{spacesId}/messages/{messagesId}/reactions:
    parameters: *ref_1
    get:
      description: >-
        Lists reactions to a message. For an example, see [List
        reactions](https://developers.google.com/chat/api/guides/v1/reactions/list).
        Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and `chat.messages`, `chat.messages.readonly`,
        `chat.messages.reactions`, or `chat.messages.reactions.readonly` scope.
      operationId: chat.spaces.messages.reactions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReactionsResponse'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: reactions
      x-stackQL-verb: select
    post:
      description: >-
        Creates a reaction and adds it to a message. For an example, see [Create
        a
        reaction](https://developers.google.com/chat/api/guides/v1/reactions/create).
        Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.messages`, `chat.messages.reactions`, or
        `chat.messages.reactions.create` scope. Only unicode emoji are
        supported.
      operationId: chat.spaces.messages.reactions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions.create
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: reactions
      x-stackQL-verb: insert
  /v1/spaces/{spacesId}/messages/{messagesId}/reactions/{reactionsId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes a reaction to a message. For an example, see [Delete a
        reaction](https://developers.google.com/chat/api/guides/v1/reactions/delete).
        Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.messages` or `chat.messages.reactions` scope.
      operationId: chat.spaces.messages.reactions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.reactions
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.reactions
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: path
          name: reactionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: reactions
      x-stackQL-verb: delete
  /v1/spaces/{spacesId}:
    parameters: *ref_1
    patch:
      description: >-
        Updates a space. For an example, see [Update a
        space](https://developers.google.com/chat/api/guides/v1/spaces/update).
        Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.spaces` scope.
      operationId: chat.spaces.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Space'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: spaces
      x-stackQL-verb: exec
    get:
      description: >-
        Returns details about a space. For an example, see [Get a
        space](https://developers.google.com/chat/api/guides/v1/spaces/get).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users).
        [User
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.spaces` or `chat.spaces.readonly` authorization
        scope.
      operationId: chat.spaces.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: spaces
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes a named space. Always performs a cascading delete, which means
        that the space's child resources—like messages posted in the space and
        memberships in the space—are also deleted. For an example, see [Delete a
        space](https://developers.google.com/chat/api/guides/v1/spaces/delete).
        Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        from a user who has permission to delete the space, and the
        `chat.delete` scope.
      operationId: chat.spaces.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.delete
          Oauth2c:
            - https://www.googleapis.com/auth/chat.delete
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: spaces
      x-stackQL-verb: delete
  /v1/spaces:findDirectMessage:
    parameters: *ref_1
    get:
      description: >-
        Returns the existing direct message with the specified user. If no
        direct message space is found, returns a `404 NOT_FOUND` error. For an
        example, see [Find a direct
        message](/chat/api/guides/v1/spaces/find-direct-message). With [user
        authentication](https://developers.google.com/chat/api/guides/auth/users),
        returns the direct message space between the specified user and the
        authenticated user. With [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts),
        returns the direct message space between the specified user and the
        calling Chat app. Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        or [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
      operationId: chat.spaces.findDirectMessage
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      parameters:
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: spaces
      x-stackQL-verb: exec
  /v1/spaces:
    parameters: *ref_1
    post:
      description: >-
        Creates a named space. Spaces grouped by topics or that have guest
        access aren't supported. For an example, see [Create a
        space](https://developers.google.com/chat/api/guides/v1/spaces/create).
        Requires [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.spaces.create` or `chat.spaces` scope.
      operationId: chat.spaces.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Space'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.create
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      parameters:
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: spaces
      x-stackQL-verb: insert
    get:
      description: >-
        Lists spaces the caller is a member of. Group chats and DMs aren't
        listed until the first message is sent. For an example, see [List
        spaces](https://developers.google.com/chat/api/guides/v1/spaces/list).
        Requires
        [authentication](https://developers.google.com/chat/api/guides/auth).
        Fully supports [service account
        authentication](https://developers.google.com/chat/api/guides/auth/service-accounts)
        and [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        requires the `chat.spaces` or `chat.spaces.readonly` authorization
        scope. Lists spaces visible to the caller or authenticated user. Group
        chats and DMs aren't listed until the first message is sent.
      operationId: chat.spaces.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpacesResponse'
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: spaces
      x-stackQL-verb: select
  /v1/spaces:setup:
    parameters: *ref_1
    post:
      description: >-
        Creates a space and adds specified users to it. The calling user is
        automatically added to the space, and shouldn't be specified as a
        membership in the request. For an example, see [Set up a
        space](https://developers.google.com/chat/api/guides/v1/spaces/set-up).
        To specify the human members to add, add memberships with the
        appropriate `member.name` in the `SetUpSpaceRequest`. To add a human
        user, use `users/{user}`, where `{user}` is either the `{person_id}` for
        the [person](https://developers.google.com/people/api/rest/v1/people)
        from the People API, or the `id` for the
        [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
        in the Admin SDK Directory API. For example, if the People API `Person`
        `resourceName` is `people/123456789`, you can add the user to the space
        by including a membership with `users/123456789` as the `member.name`.
        For a space or group chat, if the caller blocks or is blocked by some
        members, then those members aren't added to the created space. To create
        a direct message (DM) between the calling user and another human user,
        specify exactly one membership to represent the human user. If one user
        blocks the other, the request fails and the DM isn't created. To create
        a DM between the calling user and the calling app, set
        `Space.singleUserBotDm` to `true` and don't specify any memberships. You
        can only use this method to set up a DM with the calling app. To add the
        calling app as a member of a space or an existing DM between two human
        users, see [create a
        membership](https://developers.google.com/chat/api/guides/v1/members/create).
        If a DM already exists between two users, even when one user blocks the
        other at the time a request is made, then the existing DM is returned.
        Spaces with threaded replies or guest access aren't supported. Requires
        [user
        authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.spaces.create` or `chat.spaces` scope.
      operationId: chat.spaces.setup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUpSpaceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces
        - Oauth2:
            - https://www.googleapis.com/auth/chat.spaces.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.spaces.create
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
      parameters: []
      x-stackQL-resource: spaces
      x-stackQL-verb: exec
  /v1/media/{mediaId}:
    parameters: *ref_1
    get:
      description: >-
        Downloads media. Download is supported on the URI
        `/v1/media/{+name}?alt=media`.
      operationId: chat.media.download
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.bot
          Oauth2c:
            - https://www.googleapis.com/auth/chat.bot
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: string
      x-stackQL-resource: media
      x-stackQL-verb: exec
  /v1/spaces/{spacesId}/attachments:upload:
    parameters: *ref_1
    post:
      description: >-
        Uploads an attachment. For an example, see [Upload media as a file
        attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/upload).
        Requires user
        [authentication](https://developers.google.com/chat/api/guides/auth/users)
        and the `chat.messages` or `chat.messages.create` authorization scope.
        You can upload attachments up to 200 MB. Certain file types aren't
        supported. For details, see [File types blocked by Google
        Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
      operationId: chat.media.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAttachmentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/chat.import
          Oauth2c:
            - https://www.googleapis.com/auth/chat.import
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages
        - Oauth2:
            - https://www.googleapis.com/auth/chat.messages.create
          Oauth2c:
            - https://www.googleapis.com/auth/chat.messages.create
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadAttachmentResponse'
      parameters:
        - in: path
          name: spacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: media
      x-stackQL-verb: exec
