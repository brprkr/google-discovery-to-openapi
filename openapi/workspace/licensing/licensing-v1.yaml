openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Enterprise License Manager API
  description: >-
    The Google Enterprise License Manager API lets you manage Google Workspace
    and related licenses for all users of a customer that you manage.
  version: v1
  x-discovery-doc-revision: '20230619'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://developers.google.com/admin-sdk/licensing/
servers:
  - url: https://licensing.googleapis.com
components:
  schemas:
    LicenseAssignmentList:
      properties:
        items:
          description: The LicenseAssignments in this page of results.
          items:
            $ref: '#/components/schemas/LicenseAssignment'
          type: array
        kind:
          type: string
          description: Identifies the resource as a collection of LicenseAssignments.
          default: licensing#licenseAssignmentList
        nextPageToken:
          description: >-
            The token that you must submit in a subsequent request to retrieve
            additional license results matching your query parameters. The
            `maxResults` query string is related to the `nextPageToken` since
            `maxResults` determines how many entries are returned on each next
            page.
          type: string
        etag:
          type: string
          description: ETag of the resource.
      type: object
      id: LicenseAssignmentList
    LicenseAssignmentInsert:
      type: object
      description: Representation of a license assignment.
      id: LicenseAssignmentInsert
      properties:
        userId:
          type: string
          description: Email id of the user
          annotations:
            required:
              - licensing.licenseAssignments.insert
    LicenseAssignment:
      type: object
      id: LicenseAssignment
      properties:
        skuName:
          type: string
          description: Display Name of the sku of the product.
        kind:
          description: >-
            Identifies the resource as a LicenseAssignment, which is
            `licensing#licenseAssignment`.
          type: string
          default: licensing#licenseAssignment
        skuId:
          type: string
          annotations:
            required:
              - licensing.licenseAssignments.update
          description: >-
            A product SKU's unique identifier. For more information about
            available SKUs in this version of the API, see Products and SKUs.
        selfLink:
          type: string
          description: Link to this page.
        productId:
          type: string
          annotations:
            required:
              - licensing.licenseAssignments.update
          description: >-
            A product's unique identifier. For more information about products
            in this version of the API, see Product and SKU IDs.
        userId:
          description: >-
            The user's current primary email address. If the user's email
            address changes, use the new email address in your API requests.
            Since a `userId` is subject to change, do not use a `userId` value
            as a key for persistent data. This key could break if the current
            user's email address changes. If the `userId` is suspended, the
            license status changes.
          type: string
          annotations:
            required:
              - licensing.licenseAssignments.update
        etags:
          description: ETag of the resource.
          type: string
        productName:
          type: string
          description: Display Name of the product.
      description: Representation of a license assignment.
    Empty:
      type: object
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
      properties: {}
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/apps.licensing: View and manage G Suite licenses for your domain
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
    patch:
      description: >-
        Reassign a user's product SKU with a different SKU in the same product.
        This method supports patch semantics.
      operationId: licensing.licenseAssignments.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseAssignment'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/apps.licensing
          Oauth2c:
            - https://www.googleapis.com/auth/apps.licensing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAssignment'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
        - in: path
          name: skuId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: license_assignments
      x-stackQL-verb: exec
    get:
      description: Get a specific user's license by product SKU.
      operationId: licensing.licenseAssignments.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/apps.licensing
          Oauth2c:
            - https://www.googleapis.com/auth/apps.licensing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAssignment'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
        - in: path
          name: skuId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: license_assignments
      x-stackQL-verb: select
    delete:
      description: Revoke a license.
      operationId: licensing.licenseAssignments.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/apps.licensing
          Oauth2c:
            - https://www.googleapis.com/auth/apps.licensing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
        - in: path
          name: skuId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: license_assignments
      x-stackQL-verb: delete
    put:
      description: Reassign a user's product SKU with a different SKU in the same product.
      operationId: licensing.licenseAssignments.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseAssignment'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/apps.licensing
          Oauth2c:
            - https://www.googleapis.com/auth/apps.licensing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAssignment'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
        - in: path
          name: skuId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: license_assignments
      x-stackQL-verb: exec
  /apps/licensing/v1/product/{productId}/users:
    parameters: *ref_1
    get:
      description: List all users assigned licenses for a specific product SKU.
      operationId: licensing.licenseAssignments.listForProduct
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/apps.licensing
          Oauth2c:
            - https://www.googleapis.com/auth/apps.licensing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAssignmentList'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
        - in: query
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: license_assignments__for_product
      x-stackQL-verb: select
  /apps/licensing/v1/product/{productId}/sku/{skuId}/user:
    parameters: *ref_1
    post:
      description: Assign a license.
      operationId: licensing.licenseAssignments.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseAssignmentInsert'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/apps.licensing
          Oauth2c:
            - https://www.googleapis.com/auth/apps.licensing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAssignment'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
        - in: path
          name: skuId
          required: true
          schema:
            type: string
      x-stackQL-resource: license_assignments
      x-stackQL-verb: insert
  /apps/licensing/v1/product/{productId}/sku/{skuId}/users:
    parameters: *ref_1
    get:
      description: List all users assigned licenses for a specific product SKU.
      operationId: licensing.licenseAssignments.listForProductAndSku
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/apps.licensing
          Oauth2c:
            - https://www.googleapis.com/auth/apps.licensing
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAssignmentList'
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
        - in: path
          name: skuId
          required: true
          schema:
            type: string
        - in: query
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: license_assignments__for_product_and_sku
      x-stackQL-verb: select
