openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Natural Language API
  description: >-
    Provides natural language understanding technologies, such as sentiment
    analysis, entity recognition, entity sentiment analysis, and other text
    annotations, to developers.
  version: v1
  x-discovery-doc-revision: '20230616'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/natural-language/
servers:
  - url: https://language.googleapis.com
components:
  schemas:
    DependencyEdge:
      properties:
        label:
          type: string
          enum:
            - UNKNOWN
            - ABBREV
            - ACOMP
            - ADVCL
            - ADVMOD
            - AMOD
            - APPOS
            - ATTR
            - AUX
            - AUXPASS
            - CC
            - CCOMP
            - CONJ
            - CSUBJ
            - CSUBJPASS
            - DEP
            - DET
            - DISCOURSE
            - DOBJ
            - EXPL
            - GOESWITH
            - IOBJ
            - MARK
            - MWE
            - MWV
            - NEG
            - NN
            - NPADVMOD
            - NSUBJ
            - NSUBJPASS
            - NUM
            - NUMBER
            - P
            - PARATAXIS
            - PARTMOD
            - PCOMP
            - POBJ
            - POSS
            - POSTNEG
            - PRECOMP
            - PRECONJ
            - PREDET
            - PREF
            - PREP
            - PRONL
            - PRT
            - PS
            - QUANTMOD
            - RCMOD
            - RCMODREL
            - RDROP
            - REF
            - REMNANT
            - REPARANDUM
            - ROOT
            - SNUM
            - SUFF
            - TMOD
            - TOPIC
            - VMOD
            - VOCATIVE
            - XCOMP
            - SUFFIX
            - TITLE
            - ADVPHMOD
            - AUXCAUS
            - AUXVV
            - DTMOD
            - FOREIGN
            - KW
            - LIST
            - NOMC
            - NOMCSUBJ
            - NOMCSUBJPASS
            - NUMC
            - COP
            - DISLOCATED
            - ASP
            - GMOD
            - GOBJ
            - INFMOD
            - MES
            - NCOMP
          description: The parse label for the token.
          enumDescriptions:
            - Unknown
            - Abbreviation modifier
            - Adjectival complement
            - Adverbial clause modifier
            - Adverbial modifier
            - Adjectival modifier of an NP
            - Appositional modifier of an NP
            - Attribute dependent of a copular verb
            - Auxiliary (non-main) verb
            - Passive auxiliary
            - Coordinating conjunction
            - Clausal complement of a verb or adjective
            - Conjunct
            - Clausal subject
            - Clausal passive subject
            - Dependency (unable to determine)
            - Determiner
            - Discourse
            - Direct object
            - Expletive
            - Goes with (part of a word in a text not well edited)
            - Indirect object
            - Marker (word introducing a subordinate clause)
            - Multi-word expression
            - Multi-word verbal expression
            - Negation modifier
            - Noun compound modifier
            - Noun phrase used as an adverbial modifier
            - Nominal subject
            - Passive nominal subject
            - Numeric modifier of a noun
            - Element of compound number
            - Punctuation mark
            - Parataxis relation
            - Participial modifier
            - The complement of a preposition is a clause
            - Object of a preposition
            - Possession modifier
            - Postverbal negative particle
            - Predicate complement
            - Preconjunt
            - Predeterminer
            - Prefix
            - Prepositional modifier
            - The relationship between a verb and verbal morpheme
            - Particle
            - Associative or possessive marker
            - Quantifier phrase modifier
            - Relative clause modifier
            - Complementizer in relative clause
            - Ellipsis without a preceding predicate
            - Referent
            - Remnant
            - Reparandum
            - Root
            - Suffix specifying a unit of number
            - Suffix
            - Temporal modifier
            - Topic marker
            - Clause headed by an infinite form of the verb that modifies a noun
            - Vocative
            - Open clausal complement
            - Name suffix
            - Name title
            - Adverbial phrase modifier
            - Causative auxiliary
            - Helper auxiliary
            - Rentaishi (Prenominal modifier)
            - Foreign words
            - Keyword
            - List for chains of comparable items
            - Nominalized clause
            - Nominalized clausal subject
            - Nominalized clausal passive
            - Compound of numeric modifier
            - Copula
            - Dislocated relation (for fronted/topicalized elements)
            - Aspect marker
            - Genitive modifier
            - Genitive object
            - Infinitival modifier
            - Measure
            - Nominal complement of a noun
        headTokenIndex:
          description: >-
            Represents the head of this token in the dependency tree. This is
            the index of the token which has an arc going to this token. The
            index is the position of the token in the array of tokens returned
            by the API method. If this token is a root token, then the
            `head_token_index` is its own index.
          format: int32
          type: integer
      id: DependencyEdge
      type: object
      description: >-
        Represents dependency parse tree information for a token. (For more
        information on dependency labels, see
        http://www.aclweb.org/anthology/P13-2017
    AnalyzeSentimentResponse:
      properties:
        language:
          type: string
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
        sentences:
          items:
            $ref: '#/components/schemas/Sentence'
          type: array
          description: The sentiment for all the sentences in the document.
        documentSentiment:
          description: The overall sentiment of the input document.
          $ref: '#/components/schemas/Sentiment'
      description: The sentiment analysis response message.
      id: AnalyzeSentimentResponse
      type: object
    AnalyzeSentimentRequest:
      description: The sentiment analysis request message.
      type: object
      properties:
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
        encodingType:
          description: The encoding type used by the API to calculate sentence offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
      id: AnalyzeSentimentRequest
    ClassifyTextResponse:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          description: Categories representing the input document.
          type: array
      type: object
      id: ClassifyTextResponse
      description: The document classification response message.
    AnalyzeEntitiesResponse:
      description: The entity analysis response message.
      type: object
      id: AnalyzeEntitiesResponse
      properties:
        entities:
          items:
            $ref: '#/components/schemas/Entity'
          type: array
          description: The recognized entities in the input document.
        language:
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
          type: string
    ClassifyTextRequest:
      properties:
        classificationModelOptions:
          $ref: '#/components/schemas/ClassificationModelOptions'
          description: >-
            Model options to use for classification. Defaults to v1 options if
            not specified.
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
      description: The document classification request message.
      type: object
      id: ClassifyTextRequest
    AnalyzeEntitySentimentRequest:
      type: object
      description: The entity-level sentiment analysis request message.
      id: AnalyzeEntitySentimentRequest
      properties:
        encodingType:
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
          description: The encoding type used by the API to calculate offsets.
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
    Document:
      properties:
        content:
          type: string
          description: >-
            The content of the input in string format. Cloud audit logging
            exempt since it is based on user data.
        gcsContentUri:
          type: string
          description: >-
            The Google Cloud Storage URI where the file content is located. This
            URI must be of the form: gs://bucket_name/object_name. For more
            details, see https://cloud.google.com/storage/docs/reference-uris.
            NOTE: Cloud Storage object versioning is not supported.
        language:
          type: string
          description: >-
            The language of the document (if not specified, the language is
            automatically detected). Both ISO and BCP-47 language codes are
            accepted. [Language
            Support](https://cloud.google.com/natural-language/docs/languages)
            lists currently supported languages for each API method. If the
            language (either specified by the caller or automatically detected)
            is not supported by the called API method, an `INVALID_ARGUMENT`
            error is returned.
        type:
          description: >-
            Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns
            an `INVALID_ARGUMENT` error.
          type: string
          enumDescriptions:
            - The content type is not specified.
            - Plain text
            - HTML
          enum:
            - TYPE_UNSPECIFIED
            - PLAIN_TEXT
            - HTML
      id: Document
      description: Represents the input to API methods.
      type: object
    V2Model:
      type: object
      description: Options for the V2 model.
      id: V2Model
      properties:
        contentCategoriesVersion:
          description: The content categories used for classification.
          enum:
            - CONTENT_CATEGORIES_VERSION_UNSPECIFIED
            - V1
            - V2
          type: string
          enumDescriptions:
            - >-
              If `ContentCategoriesVersion` is not specified, this option will
              default to `V1`.
            - Legacy content categories of our initial launch in 2017.
            - Updated content categories in 2022.
    EntityMention:
      description: >-
        Represents a mention for an entity in the text. Currently, proper noun
        mentions are supported.
      type: object
      id: EntityMention
      properties:
        type:
          description: The type of the entity mention.
          enumDescriptions:
            - Unknown
            - Proper name
            - Common noun (or noun compound)
          enum:
            - TYPE_UNKNOWN
            - PROPER
            - COMMON
          type: string
        sentiment:
          $ref: '#/components/schemas/Sentiment'
          description: >-
            For calls to AnalyzeEntitySentiment or if
            AnnotateTextRequest.Features.extract_entity_sentiment is set to
            true, this field will contain the sentiment expressed for this
            mention of the entity in the provided document.
        text:
          description: The mention text.
          $ref: '#/components/schemas/TextSpan'
    Sentiment:
      type: object
      id: Sentiment
      properties:
        score:
          description: >-
            Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
            sentiment).
          type: number
          format: float
        magnitude:
          type: number
          format: float
          description: >-
            A non-negative number in the [0, +inf) range, which represents the
            absolute magnitude of sentiment regardless of score (positive or
            negative).
      description: >-
        Represents the feeling associated with the entire text or entities in
        the text.
    Features:
      type: object
      description: >-
        All available features for sentiment, syntax, and semantic analysis.
        Setting each one to true will enable that specific analysis for the
        input.
      properties:
        extractSyntax:
          type: boolean
          description: Extract syntax information.
        classifyText:
          description: Classify the full document into categories.
          type: boolean
        moderateText:
          description: Moderate the document for harmful and sensitive categories.
          type: boolean
        classificationModelOptions:
          $ref: '#/components/schemas/ClassificationModelOptions'
          description: >-
            The model options to use for classification. Defaults to v1 options
            if not specified. Only used if `classify_text` is set to true.
        extractDocumentSentiment:
          type: boolean
          description: Extract document-level sentiment.
        extractEntities:
          type: boolean
          description: Extract entities.
        extractEntitySentiment:
          type: boolean
          description: Extract entities and their associated sentiment.
      id: Features
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      properties:
        details:
          type: array
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
        code:
          format: int32
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      type: object
      id: Status
    AnnotateTextRequest:
      properties:
        document:
          description: Required. Input document.
          $ref: '#/components/schemas/Document'
        features:
          description: Required. The enabled features.
          $ref: '#/components/schemas/Features'
        encodingType:
          type: string
          description: The encoding type used by the API to calculate offsets.
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
      description: >-
        The request message for the text annotation API, which can perform
        multiple analysis types (sentiment, entities, and syntax) in one call.
      type: object
      id: AnnotateTextRequest
    Sentence:
      id: Sentence
      type: object
      properties:
        text:
          description: The sentence text.
          $ref: '#/components/schemas/TextSpan'
        sentiment:
          description: >-
            For calls to AnalyzeSentiment or if
            AnnotateTextRequest.Features.extract_document_sentiment is set to
            true, this field will contain the sentiment for the sentence.
          $ref: '#/components/schemas/Sentiment'
      description: Represents a sentence in the input document.
    AnnotateTextResponse:
      type: object
      properties:
        sentences:
          items:
            $ref: '#/components/schemas/Sentence'
          description: >-
            Sentences in the input document. Populated if the user enables
            AnnotateTextRequest.Features.extract_syntax.
          type: array
        documentSentiment:
          $ref: '#/components/schemas/Sentiment'
          description: >-
            The overall sentiment for the document. Populated if the user
            enables AnnotateTextRequest.Features.extract_document_sentiment.
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          description: Categories identified in the input document.
        moderationCategories:
          description: Harmful and sensitive categories identified in the input document.
          type: array
          items:
            $ref: '#/components/schemas/ClassificationCategory'
        entities:
          description: >-
            Entities, along with their semantic information, in the input
            document. Populated if the user enables
            AnnotateTextRequest.Features.extract_entities.
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        language:
          type: string
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
        tokens:
          type: array
          description: >-
            Tokens, along with their syntactic information, in the input
            document. Populated if the user enables
            AnnotateTextRequest.Features.extract_syntax.
          items:
            $ref: '#/components/schemas/Token'
      description: The text annotations response message.
      id: AnnotateTextResponse
    ModerateTextRequest:
      id: ModerateTextRequest
      description: The document moderation request message.
      properties:
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
      type: object
    Entity:
      id: Entity
      properties:
        sentiment:
          description: >-
            For calls to AnalyzeEntitySentiment or if
            AnnotateTextRequest.Features.extract_entity_sentiment is set to
            true, this field will contain the aggregate sentiment expressed for
            this entity in the provided document.
          $ref: '#/components/schemas/Sentiment'
        name:
          description: The representative name for the entity.
          type: string
        type:
          type: string
          description: The entity type.
          enum:
            - UNKNOWN
            - PERSON
            - LOCATION
            - ORGANIZATION
            - EVENT
            - WORK_OF_ART
            - CONSUMER_GOOD
            - OTHER
            - PHONE_NUMBER
            - ADDRESS
            - DATE
            - NUMBER
            - PRICE
          enumDescriptions:
            - Unknown
            - Person
            - Location
            - Organization
            - Event
            - Artwork
            - Consumer product
            - Other types of entities
            - >-
              Phone number The metadata lists the phone number, formatted
              according to local convention, plus whichever additional elements
              appear in the text: * `number` - the actual number, broken down
              into sections as per local convention * `national_prefix` -
              country code, if detected * `area_code` - region or area code, if
              detected * `extension` - phone extension (to be dialed after
              connection), if detected
            - >-
              Address The metadata identifies the street number and locality
              plus whichever additional elements appear in the text: *
              `street_number` - street number * `locality` - city or town *
              `street_name` - street/route name, if detected * `postal_code` -
              postal code, if detected * `country` - country, if detected< *
              `broad_region` - administrative area, such as the state, if
              detected * `narrow_region` - smaller administrative area, such as
              county, if detected * `sublocality` - used in Asian addresses to
              demark a district within a city, if detected
            - >-
              Date The metadata identifies the components of the date: * `year`
              - four digit year, if detected * `month` - two digit month number,
              if detected * `day` - two digit day number, if detected
            - Number The metadata is the number itself.
            - Price The metadata identifies the `value` and `currency`.
        metadata:
          description: >-
            Metadata associated with the entity. For most entity types, the
            metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph
            MID (`mid`), if they are available. For the metadata associated with
            other entity types, see the Type table below.
          type: object
          additionalProperties:
            type: string
        mentions:
          type: array
          description: >-
            The mentions of this entity in the input document. The API currently
            supports proper noun mentions.
          items:
            $ref: '#/components/schemas/EntityMention'
        salience:
          description: >-
            The salience score associated with the entity in the [0, 1.0] range.
            The salience score for an entity provides information about the
            importance or centrality of that entity to the entire document text.
            Scores closer to 0 are less salient, while scores closer to 1.0 are
            highly salient.
          type: number
          format: float
      type: object
      description: >-
        Represents a phrase in the text that is a known entity, such as a
        person, an organization, or location. The API associates information,
        such as salience and mentions, with entities.
    ClassificationCategory:
      properties:
        name:
          type: string
          description: The name of the category representing the document.
        confidence:
          format: float
          type: number
          description: >-
            The classifier's confidence of the category. Number represents how
            certain the classifier is that this category represents the given
            text.
      id: ClassificationCategory
      description: Represents a category returned from the text classifier.
      type: object
    ClassificationModelOptions:
      properties:
        v2Model:
          description: >-
            Setting this field will use the V2 model with the appropriate
            content categories version. The V2 model is a better performing
            model.
          $ref: '#/components/schemas/V2Model'
        v1Model:
          $ref: '#/components/schemas/V1Model'
          description: >-
            Setting this field will use the V1 model and V1 content categories
            version. The V1 model is a legacy model; support for this will be
            discontinued in the future.
      id: ClassificationModelOptions
      description: Model options available for classification requests.
      type: object
    AnalyzeEntitiesRequest:
      properties:
        document:
          description: Required. Input document.
          $ref: '#/components/schemas/Document'
        encodingType:
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
          description: The encoding type used by the API to calculate offsets.
      id: AnalyzeEntitiesRequest
      type: object
      description: The entity analysis request message.
    ModerateTextResponse:
      description: The document moderation response message.
      properties:
        moderationCategories:
          type: array
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          description: Harmful and sensitive categories representing the input document.
      type: object
      id: ModerateTextResponse
    TextSpan:
      description: Represents an output piece of text.
      id: TextSpan
      properties:
        beginOffset:
          description: >-
            The API calculates the beginning offset of the content in the
            original document according to the EncodingType specified in the API
            request.
          type: integer
          format: int32
        content:
          type: string
          description: The content of the output text.
      type: object
    AnalyzeSyntaxRequest:
      type: object
      properties:
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
        encodingType:
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
          description: The encoding type used by the API to calculate offsets.
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
      description: The syntax analysis request message.
      id: AnalyzeSyntaxRequest
    AnalyzeEntitySentimentResponse:
      type: object
      id: AnalyzeEntitySentimentResponse
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
          description: >-
            The recognized entities in the input document with associated
            sentiments.
        language:
          type: string
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
      description: The entity-level sentiment analysis response message.
    Token:
      properties:
        dependencyEdge:
          $ref: '#/components/schemas/DependencyEdge'
          description: Dependency tree parse for this token.
        partOfSpeech:
          description: Parts of speech tag for this token.
          $ref: '#/components/schemas/PartOfSpeech'
        text:
          description: The token text.
          $ref: '#/components/schemas/TextSpan'
        lemma:
          type: string
          description: >-
            [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the
            token.
      id: Token
      description: Represents the smallest syntactic building block of the text.
      type: object
    V1Model:
      description: Options for the V1 model.
      id: V1Model
      properties: {}
      type: object
    AnalyzeSyntaxResponse:
      description: The syntax analysis response message.
      properties:
        sentences:
          items:
            $ref: '#/components/schemas/Sentence'
          description: Sentences in the input document.
          type: array
        tokens:
          items:
            $ref: '#/components/schemas/Token'
          description: >-
            Tokens, along with their syntactic information, in the input
            document.
          type: array
        language:
          type: string
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
      type: object
      id: AnalyzeSyntaxResponse
    PartOfSpeech:
      properties:
        tag:
          enum:
            - UNKNOWN
            - ADJ
            - ADP
            - ADV
            - CONJ
            - DET
            - NOUN
            - NUM
            - PRON
            - PRT
            - PUNCT
            - VERB
            - X
            - AFFIX
          description: The part of speech tag.
          enumDescriptions:
            - Unknown
            - Adjective
            - Adposition (preposition and postposition)
            - Adverb
            - Conjunction
            - Determiner
            - Noun (common and proper)
            - Cardinal number
            - Pronoun
            - Particle or other function word
            - Punctuation
            - Verb (all tenses and modes)
            - 'Other: foreign words, typos, abbreviations'
            - Affix
          type: string
        person:
          type: string
          description: The grammatical person.
          enum:
            - PERSON_UNKNOWN
            - FIRST
            - SECOND
            - THIRD
            - REFLEXIVE_PERSON
          enumDescriptions:
            - >-
              Person is not applicable in the analyzed language or is not
              predicted.
            - First
            - Second
            - Third
            - Reflexive
        gender:
          description: The grammatical gender.
          type: string
          enum:
            - GENDER_UNKNOWN
            - FEMININE
            - MASCULINE
            - NEUTER
          enumDescriptions:
            - >-
              Gender is not applicable in the analyzed language or is not
              predicted.
            - Feminine
            - Masculine
            - Neuter
        tense:
          type: string
          description: The grammatical tense.
          enum:
            - TENSE_UNKNOWN
            - CONDITIONAL_TENSE
            - FUTURE
            - PAST
            - PRESENT
            - IMPERFECT
            - PLUPERFECT
          enumDescriptions:
            - >-
              Tense is not applicable in the analyzed language or is not
              predicted.
            - Conditional
            - Future
            - Past
            - Present
            - Imperfect
            - Pluperfect
        number:
          type: string
          description: The grammatical number.
          enum:
            - NUMBER_UNKNOWN
            - SINGULAR
            - PLURAL
            - DUAL
          enumDescriptions:
            - >-
              Number is not applicable in the analyzed language or is not
              predicted.
            - Singular
            - Plural
            - Dual
        case:
          enum:
            - CASE_UNKNOWN
            - ACCUSATIVE
            - ADVERBIAL
            - COMPLEMENTIVE
            - DATIVE
            - GENITIVE
            - INSTRUMENTAL
            - LOCATIVE
            - NOMINATIVE
            - OBLIQUE
            - PARTITIVE
            - PREPOSITIONAL
            - REFLEXIVE_CASE
            - RELATIVE_CASE
            - VOCATIVE
          type: string
          enumDescriptions:
            - >-
              Case is not applicable in the analyzed language or is not
              predicted.
            - Accusative
            - Adverbial
            - Complementive
            - Dative
            - Genitive
            - Instrumental
            - Locative
            - Nominative
            - Oblique
            - Partitive
            - Prepositional
            - Reflexive
            - Relative
            - Vocative
          description: The grammatical case.
        voice:
          enum:
            - VOICE_UNKNOWN
            - ACTIVE
            - CAUSATIVE
            - PASSIVE
          type: string
          description: The grammatical voice.
          enumDescriptions:
            - >-
              Voice is not applicable in the analyzed language or is not
              predicted.
            - Active
            - Causative
            - Passive
        aspect:
          type: string
          description: The grammatical aspect.
          enum:
            - ASPECT_UNKNOWN
            - PERFECTIVE
            - IMPERFECTIVE
            - PROGRESSIVE
          enumDescriptions:
            - >-
              Aspect is not applicable in the analyzed language or is not
              predicted.
            - Perfective
            - Imperfective
            - Progressive
        mood:
          enum:
            - MOOD_UNKNOWN
            - CONDITIONAL_MOOD
            - IMPERATIVE
            - INDICATIVE
            - INTERROGATIVE
            - JUSSIVE
            - SUBJUNCTIVE
          type: string
          description: The grammatical mood.
          enumDescriptions:
            - >-
              Mood is not applicable in the analyzed language or is not
              predicted.
            - Conditional
            - Imperative
            - Indicative
            - Interrogative
            - Jussive
            - Subjunctive
        form:
          description: The grammatical form.
          type: string
          enumDescriptions:
            - >-
              Form is not applicable in the analyzed language or is not
              predicted.
            - Adnomial
            - Auxiliary
            - Complementizer
            - Final ending
            - Gerund
            - Realis
            - Irrealis
            - Short form
            - Long form
            - Order form
            - Specific form
          enum:
            - FORM_UNKNOWN
            - ADNOMIAL
            - AUXILIARY
            - COMPLEMENTIZER
            - FINAL_ENDING
            - GERUND
            - REALIS
            - IRREALIS
            - SHORT
            - LONG
            - ORDER
            - SPECIFIC
        proper:
          enum:
            - PROPER_UNKNOWN
            - PROPER
            - NOT_PROPER
          enumDescriptions:
            - >-
              Proper is not applicable in the analyzed language or is not
              predicted.
            - Proper
            - Not proper
          type: string
          description: The grammatical properness.
        reciprocity:
          description: The grammatical reciprocity.
          enumDescriptions:
            - >-
              Reciprocity is not applicable in the analyzed language or is not
              predicted.
            - Reciprocal
            - Non-reciprocal
          type: string
          enum:
            - RECIPROCITY_UNKNOWN
            - RECIPROCAL
            - NON_RECIPROCAL
      type: object
      id: PartOfSpeech
      description: >-
        Represents part of speech information for a token. Parts of speech are
        as defined in
        http://www.lrec-conf.org/proceedings/lrec2012/pdf/274_Paper.pdf
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-language: >-
              Apply machine learning models to reveal the structure and meaning
              of text
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/documents:analyzeSentiment:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/uploadType'
    post:
      description: Analyzes the sentiment of the provided text.
      operationId: language.documents.analyzeSentiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeSentimentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeSentimentResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-verb: exec
  /v1/documents:analyzeEntities:
    parameters: *ref_1
    post:
      description: >-
        Finds named entities (currently proper names and common nouns) in the
        text along with entity types, salience, mentions for each entity, and
        other properties.
      operationId: language.documents.analyzeEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeEntitiesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeEntitiesResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-verb: exec
  /v1/documents:annotateText:
    parameters: *ref_1
    post:
      description: >-
        A convenience method that provides all the features that
        analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one
        call.
      operationId: language.documents.annotateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotateTextRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotateTextResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-verb: exec
  /v1/documents:analyzeEntitySentiment:
    parameters: *ref_1
    post:
      description: >-
        Finds entities, similar to AnalyzeEntities in the text and analyzes
        sentiment associated with each entity and its mentions.
      operationId: language.documents.analyzeEntitySentiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeEntitySentimentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeEntitySentimentResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-verb: exec
  /v1/documents:moderateText:
    parameters: *ref_1
    post:
      description: Moderates a document for harmful and sensitive categories.
      operationId: language.documents.moderateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModerateTextRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerateTextResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-verb: exec
  /v1/documents:classifyText:
    parameters: *ref_1
    post:
      description: Classifies a document into categories.
      operationId: language.documents.classifyText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassifyTextRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassifyTextResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-verb: exec
  /v1/documents:analyzeSyntax:
    parameters: *ref_1
    post:
      description: >-
        Analyzes the syntax of the text and provides sentence boundaries and
        tokenization along with part of speech tags, dependency trees, and other
        properties.
      operationId: language.documents.analyzeSyntax
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeSyntaxRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeSyntaxResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-verb: exec
