openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Batch API
  description: An API to manage the running of batch jobs on Google Cloud Platform.
  version: v1
  x-discovery-doc-revision: '20230618'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/batch/
servers:
  - url: https://batch.googleapis.com
components:
  schemas:
    ListLocationsResponse:
      type: object
      description: The response message for Locations.ListLocations.
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: >-
            A list of locations that matches the specified filter in the
            request.
        nextPageToken:
          type: string
          description: The standard List next-page token.
      id: ListLocationsResponse
    Task:
      properties:
        name:
          type: string
          description: >-
            Task name. The name is generated from the parent TaskGroup name and
            'id' field. For example:
            "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01".
        status:
          description: Task Status.
          $ref: '#/components/schemas/TaskStatus'
      description: A Cloud Batch task.
      type: object
      id: Task
    AgentTask:
      id: AgentTask
      properties:
        taskSource:
          description: TaskSource represents the source of the task.
          type: string
          enumDescriptions:
            - Unspecified task source.
            - >-
              The AgentTask from this source is generated by Batch server. E.g.
              all the VMActions are from this source. When Batch Agent execute
              AgentTask from BATCH_INTERNAL, it will log stdout/err with
              "batch_agent_logs" log name.
            - >-
              The AgentTask from this source is provided by Batch users. When
              Batch Agent execute AgentTask from USER, it will log stdout/err
              with "batch_task_logs" log name.
          enum:
            - TASK_SOURCE_UNSPECIFIED
            - BATCH_INTERNAL
            - USER
        task:
          description: Task name.
          type: string
        reachedBarrier:
          type: string
          description: The highest barrier reached by all tasks in the task's TaskGroup.
          format: int64
        agentTaskSpec:
          $ref: '#/components/schemas/AgentTaskSpec'
          description: >-
            AgentTaskSpec is the taskSpec representation between Agent and CLH
            communication. This field will replace the TaskSpec field above in
            future to have a better separation between user-facaing API and
            internal API.
        intendedState:
          enumDescriptions:
            - Unspecified state.
            - Assigned state (includes running and finished).
            - The agent should cancel the execution of this task.
            - Delete task from agent storage, stop reporting its state.
          enum:
            - INTENDED_STATE_UNSPECIFIED
            - ASSIGNED
            - CANCELLED
            - DELETED
          description: The intended state of the task.
          type: string
        spec:
          description: >-
            Task Spec. This field will be replaced by agent_task_spec below in
            future.
          $ref: '#/components/schemas/TaskSpec'
        status:
          $ref: '#/components/schemas/TaskStatus'
          description: Task status.
      description: >-
        TODO(b/182501497) The message needs to be redefined when the Agent API
        server updates data in storage per the backend design.
      type: object
    AttachedDisk:
      description: >-
        A new or an existing persistent disk (PD) or a local ssd attached to a
        VM instance.
      id: AttachedDisk
      type: object
      properties:
        newDisk:
          $ref: '#/components/schemas/Disk'
        deviceName:
          description: >-
            Device name that the guest operating system will see. It is used by
            Runnable.volumes field to mount disks. So please specify the
            device_name if you want Batch to help mount the disk, and it should
            match the device_name field in volumes.
          type: string
        existingDisk:
          type: string
          description: Name of an existing PD.
    InstanceStatus:
      description: VM instance status.
      id: InstanceStatus
      properties:
        machineType:
          description: The Compute Engine machine type.
          type: string
        bootDisk:
          $ref: '#/components/schemas/Disk'
          description: The VM boot disk.
        taskPack:
          description: The max number of tasks can be assigned to this instance type.
          format: int64
          type: string
        provisioningModel:
          enum:
            - PROVISIONING_MODEL_UNSPECIFIED
            - STANDARD
            - SPOT
            - PREEMPTIBLE
          enumDescriptions:
            - Unspecified.
            - Standard VM.
            - SPOT VM.
            - >-
              Preemptible VM (PVM). Above SPOT VM is the preferable model for
              preemptible VM instances: the old preemptible VM model (indicated
              by this field) is the older model, and has been migrated to use
              the SPOT model as the underlying technology. This old model will
              still be supported.
          description: The VM instance provisioning model.
          type: string
      type: object
    AgentInfo:
      description: VM Agent Info.
      id: AgentInfo
      type: object
      properties:
        tasks:
          type: array
          description: Task Info.
          items:
            $ref: '#/components/schemas/AgentTaskInfo'
        jobId:
          description: The assigned Job ID
          type: string
        taskGroupId:
          description: The assigned task group ID.
          type: string
        state:
          enumDescriptions:
            - Unspecified state.
            - The agent is starting on the VM instance.
            - >-
              The agent is running. The agent in the RUNNING state can never go
              back to the STARTING state.
            - The agent has stopped, either on request or due to a failure.
          type: string
          description: Agent state.
          enum:
            - AGENT_STATE_UNSPECIFIED
            - AGENT_STARTING
            - AGENT_RUNNING
            - AGENT_STOPPED
        reportTime:
          format: google-datetime
          type: string
          description: When the AgentInfo is generated.
    TaskSpec:
      properties:
        computeResource:
          description: ComputeResource requirements.
          $ref: '#/components/schemas/ComputeResource'
        runnables:
          items:
            $ref: '#/components/schemas/Runnable'
          type: array
          description: >-
            The sequence of scripts or containers to run for this Task. Each
            Task using this TaskSpec executes its list of runnables in order.
            The Task succeeds if all of its runnables either exit with a zero
            status or any that exit with a non-zero status have the
            ignore_exit_status flag. Background runnables are killed
            automatically (if they have not already exited) a short time after
            all foreground runnables have completed. Even though this is likely
            to result in a non-zero exit status for the background runnable,
            these automatic kills are not treated as Task failures.
        environments:
          additionalProperties:
            type: string
          type: object
          description: 'Deprecated: please use environment(non-plural) instead.'
        maxRetryCount:
          type: integer
          description: >-
            Maximum number of retries on failures. The default, 0, which means
            never retry. The valid value range is [0, 10].
          format: int32
        lifecyclePolicies:
          description: >-
            Lifecycle management schema when any task in a task group is failed.
            Currently we only support one lifecycle policy. When the lifecycle
            policy condition is met, the action in the policy will execute. If
            task execution result does not meet with the defined lifecycle
            policy, we consider it as the default policy. Default policy means
            if the exit code is 0, exit task. If task ends with non-zero exit
            code, retry the task with max_retry_count.
          items:
            $ref: '#/components/schemas/LifecyclePolicy'
          type: array
        volumes:
          items:
            $ref: '#/components/schemas/Volume'
          description: Volumes to mount before running Tasks using this TaskSpec.
          type: array
        environment:
          $ref: '#/components/schemas/Environment'
          description: Environment variables to set before running the Task.
        maxRunDuration:
          description: >-
            Maximum duration the task should run. The task will be killed and
            marked as FAILED if over this limit.
          format: google-duration
          type: string
      type: object
      id: TaskSpec
      description: Spec of a task
    Script:
      description: Script runnable.
      id: Script
      properties:
        text:
          description: >-
            Shell script text. To specify an interpreter, please add a `#!\n` at
            the beginning of the text.(For example, to execute the script using
            bash, `#!/bin/bash\n` should be added. To execute the script
            using`Python3`, `#!/usr/bin/env python3\n` should be added.)
            Otherwise, the script will by default be excuted by `/bin/sh`.
          type: string
        path:
          type: string
          description: >-
            Script file path on the host VM. To specify an interpreter, please
            add a `#!`(also known as [shebang
            line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first
            line of the file.(For example, to execute the script using bash,
            `#!/bin/bash` should be the first line of the file. To execute the
            script using`Python3`, `#!/usr/bin/env python3` should be the first
            line of the file.) Otherwise, the file will by default be excuted by
            `/bin/sh`.
      type: object
    LocationPolicy:
      id: LocationPolicy
      properties:
        allowedLocations:
          items:
            type: string
          type: array
          description: >-
            A list of allowed location names represented by internal URLs. Each
            location can be a region or a zone. Only one region or multiple
            zones in one region is supported now. For example,
            ["regions/us-central1"] allow VMs in any zones in region
            us-central1. ["zones/us-central1-a", "zones/us-central1-c"] only
            allow VMs in zones us-central1-a and us-central1-c. All locations
            end up in different regions would cause errors. For example,
            ["regions/us-central1", "zones/us-central1-a",
            "zones/us-central1-b", "zones/us-west1-a"] contains 2 regions
            "us-central1" and "us-west1". An error is expected in this case.
      type: object
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      properties: {}
      id: Empty
      type: object
    Job:
      id: Job
      type: object
      description: The Cloud Batch Job description.
      properties:
        logsPolicy:
          description: Log preservation policy for the Job.
          $ref: '#/components/schemas/LogsPolicy'
        uid:
          readOnly: true
          description: >-
            Output only. A system generated unique ID (in UUID4 format) for the
            Job.
          type: string
        taskGroups:
          type: array
          description: >-
            Required. TaskGroups in the Job. Only one TaskGroup is supported
            now.
          items:
            $ref: '#/components/schemas/TaskGroup'
        name:
          type: string
          description: >-
            Output only. Job name. For example:
            "projects/123456/locations/us-central1/jobs/job01".
          readOnly: true
        allocationPolicy:
          $ref: '#/components/schemas/AllocationPolicy'
          description: Compute resource allocation for all TaskGroups in the Job.
        priority:
          description: >-
            Priority of the Job. The valid value range is [0, 100). Default
            value is 0. Higher value indicates higher priority. A job with
            higher priority value is more likely to run earlier if all other
            requirements are satisfied.
          type: string
          format: int64
        updateTime:
          readOnly: true
          format: google-datetime
          description: Output only. The last time the Job was updated.
          type: string
        labels:
          type: object
          description: >-
            Labels for the Job. Labels could be user provided or system
            generated. For example, "labels": { "department": "finance",
            "environment": "test" } You can assign up to 64 labels. [Google
            Compute Engine label
            restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
            apply. Label names that start with "goog-" or "google-" are
            reserved.
          additionalProperties:
            type: string
        createTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. When the Job was created.
        status:
          $ref: '#/components/schemas/JobStatus'
          readOnly: true
          description: Output only. Job status. It is read only for users.
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/JobNotification'
          description: Notification configurations.
    AgentKMSEnvMap:
      type: object
      description: >-
        AgentKMSEnvMap contains the encrypted key/value pair to be used in the
        environment on the Agent side.
      properties:
        cipherText:
          description: The value of the cipherText response from the `encrypt` method.
          type: string
        keyName:
          type: string
          description: >-
            The name of the KMS key that will be used to decrypt the cipher
            text.
      id: AgentKMSEnvMap
    Message:
      description: >-
        Message details. Describe the attribute that a message should have.
        Without specified message attributes, no message will be sent by
        default.
      id: Message
      properties:
        type:
          enumDescriptions:
            - Unspecified.
            - Notify users that the job state has changed.
            - Notify users that the task state has changed.
          enum:
            - TYPE_UNSPECIFIED
            - JOB_STATE_CHANGED
            - TASK_STATE_CHANGED
          type: string
          description: The message type.
        newJobState:
          enum:
            - STATE_UNSPECIFIED
            - QUEUED
            - SCHEDULED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - DELETION_IN_PROGRESS
          enumDescriptions:
            - Job state unspecified.
            - >-
              Job is admitted (validated and persisted) and waiting for
              resources.
            - >-
              Job is scheduled to run as soon as resource allocation is ready.
              The resource allocation may happen at a later time but with a high
              chance to succeed.
            - >-
              Resource allocation has been successful. At least one Task in the
              Job is RUNNING.
            - All Tasks in the Job have finished successfully.
            - At least one Task in the Job has failed.
            - >-
              The Job will be deleted, but has not been deleted yet. Typically
              this is because resources used by the Job are still being cleaned
              up.
          type: string
          description: The new job state.
        newTaskState:
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - UNEXECUTED
          enumDescriptions:
            - Unknown state.
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
            - The Task has not been executed when the Job finishes.
          type: string
          description: The new task state.
      type: object
    AllocationPolicy:
      type: object
      id: AllocationPolicy
      properties:
        instances:
          type: array
          items:
            $ref: '#/components/schemas/InstancePolicyOrTemplate'
          description: >-
            Describe instances that can be created by this AllocationPolicy.
            Only instances[0] is supported now.
        labels:
          description: >-
            Labels applied to all VM instances and other resources created by
            AllocationPolicy. Labels could be user provided or system generated.
            You can assign up to 64 labels. [Google Compute Engine label
            restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
            apply. Label names that start with "goog-" or "google-" are
            reserved.
          type: object
          additionalProperties:
            type: string
        network:
          $ref: '#/components/schemas/NetworkPolicy'
          description: The network policy.
        location:
          $ref: '#/components/schemas/LocationPolicy'
          description: Location where compute resources should be allocated for the Job.
        serviceAccount:
          $ref: '#/components/schemas/ServiceAccount'
          description: Service account that VMs will run as.
        placement:
          description: The placement policy.
          $ref: '#/components/schemas/PlacementPolicy'
      description: >-
        A Job's resource allocation policy describes when, where, and how
        compute resources should be allocated for the Job.
    GCS:
      properties:
        remotePath:
          description: >-
            Remote path, either a bucket name or a subdirectory of a bucket,
            e.g.: bucket_name, bucket_name/subdirectory/
          type: string
      id: GCS
      description: Represents a Google Cloud Storage volume.
      type: object
    InstancePolicy:
      type: object
      properties:
        accelerators:
          items:
            $ref: '#/components/schemas/Accelerator'
          type: array
          description: The accelerators attached to each VM instance.
        machineType:
          description: The Compute Engine machine type.
          type: string
        provisioningModel:
          enum:
            - PROVISIONING_MODEL_UNSPECIFIED
            - STANDARD
            - SPOT
            - PREEMPTIBLE
          enumDescriptions:
            - Unspecified.
            - Standard VM.
            - SPOT VM.
            - >-
              Preemptible VM (PVM). Above SPOT VM is the preferable model for
              preemptible VM instances: the old preemptible VM model (indicated
              by this field) is the older model, and has been migrated to use
              the SPOT model as the underlying technology. This old model will
              still be supported.
          type: string
          description: The provisioning model.
        disks:
          type: array
          description: >-
            Non-boot disks to be attached for each VM created by this
            InstancePolicy. New disks will be deleted when the VM is deleted.
          items:
            $ref: '#/components/schemas/AttachedDisk'
        minCpuPlatform:
          description: >-
            The minimum CPU platform. See
            https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
          type: string
        bootDisk:
          $ref: '#/components/schemas/Disk'
          description: >-
            Boot disk to be created and attached to each VM by this
            InstancePolicy. Boot disk will be deleted when the VM is deleted.
            Batch API now only supports booting from image.
      description: >-
        InstancePolicy describes an instance type and resources attached to each
        VM created by this InstancePolicy.
      id: InstancePolicy
    ComputeResource:
      type: object
      description: Compute resource requirements
      id: ComputeResource
      properties:
        cpuMilli:
          type: string
          format: int64
          description: The milliCPU count.
        memoryMib:
          type: string
          description: Memory in MiB.
          format: int64
        bootDiskMib:
          format: int64
          type: string
          description: Extra boot disk size in MiB for each task.
    TaskGroup:
      type: object
      id: TaskGroup
      description: A TaskGroup defines one or more Tasks that all share the same TaskSpec.
      properties:
        taskCountPerNode:
          format: int64
          type: string
          description: >-
            Max number of tasks that can be run on a VM at the same time. If not
            specified, the system will decide a value based on available compute
            resources on a VM and task requirements.
        schedulingPolicy:
          enum:
            - SCHEDULING_POLICY_UNSPECIFIED
            - AS_SOON_AS_POSSIBLE
            - IN_ORDER
          enumDescriptions:
            - Unspecified.
            - >-
              Run Tasks as soon as resources are available. Tasks might be
              executed in parallel depending on parallelism and task_count
              values.
            - Run Tasks sequentially with increased task index.
          type: string
          description: >-
            Scheduling policy for Tasks in the TaskGroup. The default value is
            AS_SOON_AS_POSSIBLE.
        name:
          description: >-
            Output only. TaskGroup name. The system generates this field based
            on parent Job name. For example:
            "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
          readOnly: true
          type: string
        parallelism:
          type: string
          description: >-
            Max number of tasks that can run in parallel. Default to
            min(task_count, 1000). Field parallelism must be 1 if the
            scheduling_policy is IN_ORDER.
          format: int64
        taskSpec:
          description: Required. Tasks in the group share the same task spec.
          $ref: '#/components/schemas/TaskSpec'
        taskEnvironments:
          items:
            $ref: '#/components/schemas/Environment'
          description: >-
            An array of environment variable mappings, which are passed to Tasks
            with matching indices. If task_environments is used then task_count
            should not be specified in the request (and will be ignored). Task
            count will be the length of task_environments. Tasks get a
            BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in
            addition to any environment variables set in task_environments,
            specifying the number of Tasks in the Task's parent TaskGroup, and
            the specific Task's index in the TaskGroup (0 through
            BATCH_TASK_COUNT - 1).
          type: array
        taskCount:
          type: string
          format: int64
          description: Number of Tasks in the TaskGroup. Default is 1.
        permissiveSsh:
          type: boolean
          description: >-
            When true, Batch will configure SSH to allow passwordless login
            between VMs running the Batch tasks in the same TaskGroup.
        requireHostsFile:
          type: boolean
          description: >-
            When true, Batch will populate a file with a list of all VMs
            assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment
            variable to the path of that file. Defaults to false.
    OperationMetadata:
      properties:
        target:
          type: string
          readOnly: true
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        requestedCancellation:
          readOnly: true
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have successfully been cancelled
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          type: boolean
        statusMessage:
          type: string
          readOnly: true
          description: Output only. Human-readable status of the operation, if any.
        apiVersion:
          description: Output only. API version used to start the operation.
          type: string
          readOnly: true
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          format: google-datetime
          type: string
        endTime:
          format: google-datetime
          readOnly: true
          type: string
          description: Output only. The time the operation finished running.
      id: OperationMetadata
      type: object
      description: Represents the metadata of the long-running operation.
    AgentMetadata:
      properties:
        imageVersion:
          type: string
          description: image version for the VM that this agent is installed on.
        creationTime:
          format: google-datetime
          description: When the VM agent started. Use agent_startup_time instead.
          type: string
        osRelease:
          description: parsed contents of /etc/os-release
          additionalProperties:
            type: string
          type: object
        instance:
          type: string
          description: GCP instance name (go/instance-name).
        instancePreemptionNoticeReceived:
          description: If the GCP instance has received preemption notice.
          type: boolean
        version:
          type: string
          description: agent binary version running on VM
        creator:
          type: string
          description: >-
            Full name of the entity that created this vm. For MIG, this path is:
            projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The
            value is retrieved from the vm metadata key of "created-by".
        zone:
          description: Agent zone.
          type: string
        instanceId:
          description: GCP instance ID (go/instance-id).
          type: string
          format: uint64
      id: AgentMetadata
      description: VM Agent Metadata.
      type: object
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      id: CancelOperationRequest
      type: object
    ListTasksResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: Next page token.
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
        tasks:
          items:
            $ref: '#/components/schemas/Task'
          description: Tasks.
          type: array
      description: ListTasks Response.
      id: ListTasksResponse
    AgentScript:
      properties:
        path:
          type: string
          description: >-
            Script file path on the host VM. To specify an interpreter, please
            add a `#!`(also known as [shebang
            line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first
            line of the file.(For example, to execute the script using bash,
            `#!/bin/bash` should be the first line of the file. To execute the
            script using`Python3`, `#!/usr/bin/env python3` should be the first
            line of the file.) Otherwise, the file will by default be excuted by
            `/bin/sh`.
        text:
          type: string
          description: >-
            Shell script text. To specify an interpreter, please add a `#!\n` at
            the beginning of the text.(For example, to execute the script using
            bash, `#!/bin/bash\n` should be added. To execute the script
            using`Python3`, `#!/usr/bin/env python3\n` should be added.)
            Otherwise, the script will by default be excuted by `/bin/sh`.
      description: Script runnable representation on the agent side.
      type: object
      id: AgentScript
    TaskStatus:
      properties:
        statusEvents:
          type: array
          items:
            $ref: '#/components/schemas/StatusEvent'
          description: Detailed info about why the state is reached.
        state:
          enumDescriptions:
            - Unknown state.
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
            - The Task has not been executed when the Job finishes.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - UNEXECUTED
          type: string
          description: Task state
      type: object
      id: TaskStatus
      description: Status of a task
    AgentEnvironment:
      properties:
        secretVariables:
          description: >-
            A map of environment variable names to Secret Manager secret names.
            The VM will access the named secrets to set the value of each
            environment variable.
          type: object
          additionalProperties:
            type: string
        encryptedVariables:
          $ref: '#/components/schemas/AgentKMSEnvMap'
          description: >-
            An encrypted JSON dictionary where the key/value pairs correspond to
            environment variable names and their values.
        variables:
          type: object
          description: A map of environment variable names to values.
          additionalProperties:
            type: string
      description: >-
        AgentEnvironment is the Environment representation between Agent and CLH
        communication. The environment is used in both task level and agent
        level.
      type: object
      id: AgentEnvironment
    TaskExecution:
      type: object
      description: >-
        This Task Execution field includes detail information for task execution
        procedures, based on StatusEvent types.
      properties:
        exitCode:
          description: >-
            When task is completed as the status of FAILED or SUCCEEDED, exit
            code is for one task execution result, default is 0 as success.
          format: int32
          type: integer
      id: TaskExecution
    StatusEvent:
      type: object
      id: StatusEvent
      description: Status event
      properties:
        eventTime:
          description: The time this event occurred.
          type: string
          format: google-datetime
        type:
          description: Type of the event.
          type: string
        description:
          description: Description of the event.
          type: string
        taskState:
          type: string
          description: Task State
          enumDescriptions:
            - Unknown state.
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
            - The Task has not been executed when the Job finishes.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - UNEXECUTED
        taskExecution:
          description: Task Execution
          $ref: '#/components/schemas/TaskExecution'
    TaskGroupStatus:
      type: object
      id: TaskGroupStatus
      description: Aggregated task status for a TaskGroup.
      properties:
        instances:
          description: Status of instances allocated for the TaskGroup.
          type: array
          items:
            $ref: '#/components/schemas/InstanceStatus'
        counts:
          type: object
          description: >-
            Count of task in each state in the TaskGroup. The map key is task
            state name.
          additionalProperties:
            type: string
            format: int64
    PlacementPolicy:
      description: >-
        PlacementPolicy describes a group placement policy for the VMs
        controlled by this AllocationPolicy.
      id: PlacementPolicy
      properties:
        maxDistance:
          description: >-
            When specified, causes the job to fail if more than max_distance
            logical switches are required between VMs. Batch uses the most
            compact possible placement of VMs even when max_distance is not
            specified. An explicit max_distance makes that level of compactness
            a strict requirement. Not yet implemented
          format: int64
          type: string
        collocation:
          description: >-
            UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED
            when you want VMs to be located close to each other for low network
            latency between the VMs. No placement policy will be generated when
            collocation is UNSPECIFIED.
          type: string
      type: object
    ReportAgentStateResponse:
      id: ReportAgentStateResponse
      type: object
      properties:
        minReportInterval:
          type: string
          format: google-duration
          description: Minimum report interval override
        tasks:
          description: Tasks assigned to the agent
          type: array
          items:
            $ref: '#/components/schemas/AgentTask'
        defaultReportInterval:
          format: google-duration
          type: string
          description: Default report interval override
      description: Response to ReportAgentStateRequest.
    Operation:
      id: Operation
      type: object
      properties:
        name:
          type: string
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: >-
            The normal response of the operation in case of success. If the
            original method returns no data on success, such as `Delete`, the
            response is `google.protobuf.Empty`. If the original method is
            standard `Get`/`Create`/`Update`, the response should be the
            resource. For other methods, the response should have the type
            `XxxResponse`, where `Xxx` is the original method name. For example,
            if the original method name is `TakeSnapshot()`, the inferred
            response type is `TakeSnapshotResponse`.
          type: object
        done:
          type: boolean
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
    AgentTimingInfo:
      type: object
      id: AgentTimingInfo
      properties:
        agentStartupTime:
          description: Agent startup time
          format: google-datetime
          type: string
        bootTime:
          type: string
          format: google-datetime
          description: Boot timestamp of the VM OS
        scriptStartupTime:
          description: Startup time of the Batch VM script.
          format: google-datetime
          type: string
      description: VM timing information
    Container:
      id: Container
      description: Container runnable.
      type: object
      properties:
        imageUri:
          type: string
          description: The URI to pull the container image from.
        blockExternalNetwork:
          type: boolean
          description: >-
            If set to true, external network access to and from container will
            be blocked, containers that are with block_external_network as true
            can still communicate with each other, network cannot be specified
            in the `container.options` field.
        entrypoint:
          description: Overrides the `ENTRYPOINT` specified in the container.
          type: string
        commands:
          type: array
          description: >-
            Overrides the `CMD` specified in the container. If there is an
            ENTRYPOINT (either in the container image or with the entrypoint
            field below) then commands are appended as arguments to the
            ENTRYPOINT.
          items:
            type: string
        volumes:
          description: >-
            Volumes to mount (bind mount) from the host machine files or
            directories into the container, formatted to match docker run's
            --volume option, e.g. /foo:/bar, or /foo:/bar:ro
          type: array
          items:
            type: string
        username:
          description: >-
            Optional username for logging in to a docker registry. If username
            matches `projects/*/secrets/*/versions/*` then Batch will read the
            username from the Secret Manager.
          type: string
        password:
          description: >-
            Optional password for logging in to a docker registry. If password
            matches `projects/*/secrets/*/versions/*` then Batch will read the
            password from the Secret Manager;
          type: string
        options:
          type: string
          description: >-
            Arbitrary additional options to include in the "docker run" command
            when running this container, e.g. "--network host".
    Volume:
      type: object
      description: Volume describes a volume and parameters for it to be mounted to a VM.
      properties:
        mountOptions:
          description: >-
            For Google Cloud Storage (GCS), mount options are the options
            supported by the gcsfuse tool
            (https://github.com/GoogleCloudPlatform/gcsfuse). For existing
            persistent disks, mount options provided by the mount command
            (https://man7.org/linux/man-pages/man8/mount.8.html) except writing
            are supported. This is due to restrictions of multi-writer mode
            (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms).
            For other attached disks and Network File System (NFS), mount
            options are these supported by the mount command
            (https://man7.org/linux/man-pages/man8/mount.8.html).
          items:
            type: string
          type: array
        gcs:
          $ref: '#/components/schemas/GCS'
          description: A Google Cloud Storage (GCS) volume.
        deviceName:
          description: >-
            Device name of an attached disk volume, which should align with a
            device_name specified by
            job.allocation_policy.instances[0].policy.disks[i].device_name or
            defined by the given instance template in
            job.allocation_policy.instances[0].instance_template.
          type: string
        nfs:
          $ref: '#/components/schemas/NFS'
          description: >-
            A Network File System (NFS) volume. For example, a Filestore file
            share.
        mountPath:
          type: string
          description: The mount path for the volume, e.g. /mnt/disks/share.
      id: Volume
    ServiceAccount:
      type: object
      id: ServiceAccount
      properties:
        email:
          type: string
          description: >-
            Email address of the service account. If not specified, the default
            Compute Engine service account for the project will be used. If
            instance template is being used, the service account has to be
            specified in the instance template and it has to match the email
            field here.
        scopes:
          items:
            type: string
          description: >-
            List of scopes to be enabled for this service account on the VM, in
            addition to the cloud-platform API scope that will be added by
            default.
          type: array
      description: Carries information about a Google Cloud service account.
    AgentTaskSpec:
      description: >-
        AgentTaskSpec is the user's TaskSpec representation between Agent and
        CLH communication.
      id: AgentTaskSpec
      properties:
        maxRunDuration:
          format: google-duration
          description: >-
            Maximum duration the task should run. The task will be killed and
            marked as FAILED if over this limit.
          type: string
        environment:
          description: Environment variables to set before running the Task.
          $ref: '#/components/schemas/AgentEnvironment'
        runnables:
          items:
            $ref: '#/components/schemas/AgentTaskRunnable'
          description: AgentTaskRunnable is runanbles that will be executed on the agent.
          type: array
      type: object
    LogsPolicy:
      type: object
      description: >-
        LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will
        be preserved.
      properties:
        logsPath:
          type: string
          description: >-
            The path to which logs are saved when the destination = PATH. This
            can be a local file path on the VM, or under the mount point of a
            Persistent Disk or Filestore, or a Cloud Storage path.
        destination:
          type: string
          enum:
            - DESTINATION_UNSPECIFIED
            - CLOUD_LOGGING
            - PATH
          description: Where logs should be saved.
          enumDescriptions:
            - Logs are not preserved.
            - Logs are streamed to Cloud Logging.
            - Logs are saved to a file path.
      id: LogsPolicy
    NetworkInterface:
      id: NetworkInterface
      properties:
        network:
          type: string
          description: >-
            The URL of an existing network resource. You can specify the network
            as a full or partial URL. For example, the following are all valid
            URLs: *
            https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
            * projects/{project}/global/networks/{network} *
            global/networks/{network}
        noExternalIpAddress:
          type: boolean
          description: >-
            Default is false (with an external IP address). Required if no
            external public IP address is attached to the VM. If no external
            public IP address, additional configuration is required to allow the
            VM to access Google Services. See
            https://cloud.google.com/vpc/docs/configure-private-google-access
            and https://cloud.google.com/nat/docs/gce-example#create-nat for
            more information.
        subnetwork:
          description: >-
            The URL of an existing subnetwork resource in the network. You can
            specify the subnetwork as a full or partial URL. For example, the
            following are all valid URLs: *
            https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}
            * projects/{project}/regions/{region}/subnetworks/{subnetwork} *
            regions/{region}/subnetworks/{subnetwork}
          type: string
      type: object
      description: A network interface.
    JobNotification:
      properties:
        message:
          $ref: '#/components/schemas/Message'
          description: >-
            The attribute requirements of messages to be sent to this Pub/Sub
            topic. Without this field, no message will be sent.
        pubsubTopic:
          description: >-
            The Pub/Sub topic where notifications like the job state changes
            will be published. This topic exist in the same project as the job
            and billings will be charged to this project. If not specified, no
            Pub/Sub messages will be sent. Topic format:
            `projects/{project}/topics/{topic}`.
          type: string
      type: object
      description: Notification configurations.
      id: JobNotification
    ListOperationsResponse:
      id: ListOperationsResponse
      properties:
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
        nextPageToken:
          description: The standard List next-page token.
          type: string
      type: object
      description: The response message for Operations.ListOperations.
    Environment:
      id: Environment
      type: object
      properties:
        secretVariables:
          additionalProperties:
            type: string
          type: object
          description: >-
            A map of environment variable names to Secret Manager secret names.
            The VM will access the named secrets to set the value of each
            environment variable.
        variables:
          type: object
          description: A map of environment variable names to values.
          additionalProperties:
            type: string
        encryptedVariables:
          $ref: '#/components/schemas/KMSEnvMap'
          description: >-
            An encrypted JSON dictionary where the key/value pairs correspond to
            environment variable names and their values.
      description: >-
        An Environment describes a collection of environment variables to set
        when executing Tasks.
    NetworkPolicy:
      properties:
        networkInterfaces:
          description: Network configurations.
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
      id: NetworkPolicy
      type: object
      description: NetworkPolicy describes VM instance network configurations.
    KMSEnvMap:
      type: object
      id: KMSEnvMap
      properties:
        cipherText:
          type: string
          description: The value of the cipherText response from the `encrypt` method.
        keyName:
          type: string
          description: >-
            The name of the KMS key that will be used to decrypt the cipher
            text.
    ActionCondition:
      description: Conditions for actions to deal with task failures.
      properties:
        exitCodes:
          type: array
          description: >-
            Exit codes of a task execution. If there are more than 1 exit codes,
            when task executes with any of the exit code in the list, the
            condition is met and the action will be executed.
          items:
            type: integer
            format: int32
      id: ActionCondition
      type: object
    Barrier:
      id: Barrier
      description: Barrier runnable blocks until all tasks in a taskgroup reach it.
      type: object
      properties:
        name:
          type: string
          description: >-
            Barriers are identified by their index in runnable list. Names are
            not required, but if present should be an identifier.
    Accelerator:
      type: object
      description: >-
        Accelerator describes Compute Engine accelerators to be attached to the
        VM.
      id: Accelerator
      properties:
        type:
          description: >-
            The accelerator type. For example, "nvidia-tesla-t4". See `gcloud
            compute accelerator-types list`.
          type: string
        count:
          description: The number of accelerators of this type.
          type: string
          format: int64
        installGpuDrivers:
          type: boolean
          description: 'Deprecated: please use instances[0].install_gpu_drivers instead.'
    Runnable:
      id: Runnable
      properties:
        alwaysRun:
          description: >-
            By default, after a Runnable fails, no further Runnable are
            executed. This flag indicates that this Runnable must be run even if
            the Task has already failed. This is useful for Runnables that copy
            output files off of the VM or for debugging. The always_run flag
            does not override the Task's overall max_run_duration. If the
            max_run_duration has expired then no further Runnables will execute,
            not even always_run Runnables.
          type: boolean
        background:
          type: boolean
          description: >-
            This flag allows a Runnable to continue running in the background
            while the Task executes subsequent Runnables. This is useful to
            provide services to other Runnables (or to provide debugging support
            tools like SSH servers).
        timeout:
          type: string
          format: google-duration
          description: Timeout for this Runnable.
        ignoreExitStatus:
          description: >-
            Normally, a non-zero exit status causes the Task to fail. This flag
            allows execution of other Runnables to continue instead.
          type: boolean
        labels:
          description: Labels for this Runnable.
          type: object
          additionalProperties:
            type: string
        script:
          description: Script runnable.
          $ref: '#/components/schemas/Script'
        environment:
          $ref: '#/components/schemas/Environment'
          description: >-
            Environment variables for this Runnable (overrides variables set for
            the whole Task or TaskGroup).
        container:
          $ref: '#/components/schemas/Container'
          description: Container runnable.
        barrier:
          description: Barrier runnable.
          $ref: '#/components/schemas/Barrier'
      type: object
      description: >-
        Runnable describes instructions for executing a specific script or
        container as part of a Task.
    ListJobsResponse:
      id: ListJobsResponse
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
          description: Jobs.
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
        nextPageToken:
          description: Next page token.
          type: string
      type: object
      description: ListJob Response.
    ReportAgentStateRequest:
      type: object
      properties:
        metadata:
          description: Agent metadata.
          $ref: '#/components/schemas/AgentMetadata'
        agentTimingInfo:
          $ref: '#/components/schemas/AgentTimingInfo'
          description: Agent timing info.
        agentInfo:
          $ref: '#/components/schemas/AgentInfo'
          description: Agent info.
      description: >-
        Request to report agent's state. The Request itself implies the agent is
        healthy.
      id: ReportAgentStateRequest
    LifecyclePolicy:
      properties:
        actionCondition:
          description: >-
            Conditions that decide why a task failure is dealt with a specific
            action.
          $ref: '#/components/schemas/ActionCondition'
        action:
          type: string
          enumDescriptions:
            - Action unspecified.
            - Action that tasks in the group will be scheduled to re-execute.
            - Action that tasks in the group will be stopped immediately.
          description: >-
            Action to execute when ActionCondition is true. When RETRY_TASK is
            specified, we will retry failed tasks if we notice any exit code
            match and fail tasks if no match is found. Likewise, when FAIL_TASK
            is specified, we will fail tasks if we notice any exit code match
            and retry tasks if no match is found.
          enum:
            - ACTION_UNSPECIFIED
            - RETRY_TASK
            - FAIL_TASK
      description: >-
        LifecyclePolicy describes how to deal with task failures based on
        different conditions.
      id: LifecyclePolicy
      type: object
    Status:
      properties:
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
        code:
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      id: Status
      type: object
    AgentContainer:
      description: Container runnable representation on the agent side.
      type: object
      id: AgentContainer
      properties:
        options:
          description: >-
            Arbitrary additional options to include in the "docker run" command
            when running this container, e.g. "--network host".
          type: string
        imageUri:
          description: The URI to pull the container image from.
          type: string
        volumes:
          type: array
          items:
            type: string
          description: >-
            Volumes to mount (bind mount) from the host machine files or
            directories into the container, formatted to match docker run's
            --volume option, e.g. /foo:/bar, or /foo:/bar:ro
        commands:
          type: array
          description: >-
            Overrides the `CMD` specified in the container. If there is an
            ENTRYPOINT (either in the container image or with the entrypoint
            field below) then commands are appended as arguments to the
            ENTRYPOINT.
          items:
            type: string
        entrypoint:
          description: Overrides the `ENTRYPOINT` specified in the container.
          type: string
    InstancePolicyOrTemplate:
      type: object
      id: InstancePolicyOrTemplate
      properties:
        policy:
          $ref: '#/components/schemas/InstancePolicy'
          description: InstancePolicy.
        installGpuDrivers:
          type: boolean
          description: >-
            Set this field true if users want Batch to help fetch drivers from a
            third party location and install them for GPUs specified in
            policy.accelerators or instance_template on their behalf. Default is
            false.
        instanceTemplate:
          description: >-
            Name of an instance template used to create VMs. Named the field as
            'instance_template' instead of 'template' to avoid c++ keyword
            conflict.
          type: string
      description: Either an InstancePolicy or an instance template.
    AgentTaskInfo:
      id: AgentTaskInfo
      properties:
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
          description: >-
            The status of the Task. If we need agent specific fields we should
            fork the public TaskStatus into an agent specific one. Or add them
            below.
        runnable:
          type: string
          format: int64
          description: >-
            The highest index of a runnable started by the agent for this task.
            The runnables are indexed from 1. Value 0 is undefined.
        taskId:
          type: string
          description: ID of the Task
      type: object
      description: Task Info
    AgentTaskRunnable:
      properties:
        alwaysRun:
          description: >-
            By default, after a Runnable fails, no further Runnable are
            executed. This flag indicates that this Runnable must be run even if
            the Task has already failed. This is useful for Runnables that copy
            output files off of the VM or for debugging. The always_run flag
            does not override the Task's overall max_run_duration. If the
            max_run_duration has expired then no further Runnables will execute,
            not even always_run Runnables.
          type: boolean
        container:
          $ref: '#/components/schemas/AgentContainer'
          description: Container runnable.
        environment:
          $ref: '#/components/schemas/AgentEnvironment'
          description: >-
            Environment variables for this Runnable (overrides variables set for
            the whole Task or TaskGroup).
        background:
          type: boolean
          description: >-
            This flag allows a Runnable to continue running in the background
            while the Task executes subsequent Runnables. This is useful to
            provide services to other Runnables (or to provide debugging support
            tools like SSH servers).
        ignoreExitStatus:
          type: boolean
          description: >-
            Normally, a non-zero exit status causes the Task to fail. This flag
            allows execution of other Runnables to continue instead.
        script:
          $ref: '#/components/schemas/AgentScript'
          description: Script runnable.
        timeout:
          format: google-duration
          description: Timeout for this Runnable.
          type: string
      id: AgentTaskRunnable
      type: object
      description: >-
        AgentTaskRunnable is the Runnable representation between Agent and CLH
        communication.
    NFS:
      description: Represents an NFS volume.
      properties:
        remotePath:
          type: string
          description: Remote source path exported from the NFS, e.g., "/share".
        server:
          type: string
          description: The IP address of the NFS.
      type: object
      id: NFS
    Location:
      description: A resource that represents a Google Cloud location.
      id: Location
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        labels:
          additionalProperties:
            type: string
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        metadata:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
    JobStatus:
      id: JobStatus
      description: Job status.
      type: object
      properties:
        taskGroups:
          additionalProperties:
            $ref: '#/components/schemas/TaskGroupStatus'
          description: >-
            Aggregated task status for each TaskGroup in the Job. The map key is
            TaskGroup ID.
          type: object
        statusEvents:
          description: Job status events
          items:
            $ref: '#/components/schemas/StatusEvent'
          type: array
        state:
          description: Job state
          enum:
            - STATE_UNSPECIFIED
            - QUEUED
            - SCHEDULED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - DELETION_IN_PROGRESS
          enumDescriptions:
            - Job state unspecified.
            - >-
              Job is admitted (validated and persisted) and waiting for
              resources.
            - >-
              Job is scheduled to run as soon as resource allocation is ready.
              The resource allocation may happen at a later time but with a high
              chance to succeed.
            - >-
              Resource allocation has been successful. At least one Task in the
              Job is RUNNING.
            - All Tasks in the Job have finished successfully.
            - At least one Task in the Job has failed.
            - >-
              The Job will be deleted, but has not been deleted yet. Typically
              this is because resources used by the Job are still being cleaned
              up.
          type: string
        runDuration:
          type: string
          description: The duration of time that the Job spent in status RUNNING.
          format: google-duration
    Disk:
      type: object
      description: >-
        A new persistent disk or a local ssd. A VM can only have one local SSD
        setting but multiple local SSD partitions. See
        https://cloud.google.com/compute/docs/disks#pdspecs and
        https://cloud.google.com/compute/docs/disks#localssds.
      id: Disk
      properties:
        diskInterface:
          type: string
          description: >-
            Local SSDs are available through both "SCSI" and "NVMe" interfaces.
            If not indicated, "NVMe" will be the default one for local ssds. We
            only support "SCSI" for persistent disks now.
        snapshot:
          description: >-
            Name of a snapshot used as the data source. Snapshot is not
            supported as boot disk now.
          type: string
        type:
          type: string
          description: >-
            Disk type as shown in `gcloud compute disk-types list`. For example,
            local SSD uses type "local-ssd". Persistent disks and boot disks use
            "pd-balanced", "pd-extreme", "pd-ssd" or "pd-standard".
        image:
          description: >-
            Name of a public or custom image used as the data source. For
            example, the following are all valid URLs: * Specify the image by
            its family name:
            projects/{project}/global/images/family/{image_family} * Specify the
            image version: projects/{project}/global/images/{image_version} You
            can also use Batch customized image in short names. The following
            image values are supported for a boot disk: * "batch-debian": use
            Batch Debian images. * "batch-centos": use Batch CentOS images. *
            "batch-cos": use Batch Container-Optimized images. *
            "batch-hpc-centos": use Batch HPC CentOS images.
          type: string
        sizeGb:
          type: string
          format: int64
          description: >-
            Disk size in GB. For persistent disk, this field is ignored if
            `data_source` is `image` or `snapshot`. For local SSD, size_gb
            should be a multiple of 375GB, otherwise, the final size will be the
            next greater multiple of 375 GB. For boot disk, Batch will calculate
            the boot disk size based on source image and task requirements if
            you do not speicify the size. If both this field and the
            boot_disk_mib field in task spec's compute_resource are defined,
            Batch will only honor this field.
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks/{tasksId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
    get:
      description: Return a single Task.
      operationId: batch.projects.locations.jobs.taskGroups.tasks.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: path
          name: taskGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: tasksId
          required: true
          schema:
            type: string
      x-stackQL-resource: tasks
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks:
    parameters: *ref_1
    get:
      description: List Tasks associated with a job.
      operationId: batch.projects.locations.jobs.taskGroups.tasks.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTasksResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: path
          name: taskGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: tasks
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/jobs:
    parameters: *ref_1
    post:
      description: Create a Job.
      operationId: batch.projects.locations.jobs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: jobId
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-verb: insert
    get:
      description: List all Jobs for a project within a region.
      operationId: batch.projects.locations.jobs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: jobs
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:
    parameters: *ref_1
    get:
      description: Get a Job specified by its resource name.
      operationId: batch.projects.locations.jobs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-verb: select
    delete:
      description: Delete a Job.
      operationId: batch.projects.locations.jobs.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: query
          name: reason
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/state:report:
    parameters: *ref_1
    post:
      description: Report agent's state, e.g. agent status and tasks information
      operationId: batch.projects.locations.state.report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportAgentStateRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportAgentStateResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: state
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: batch.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: batch.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: batch.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: batch.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: batch.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: batch.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
