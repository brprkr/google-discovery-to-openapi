openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Asset API
  description: >-
    The Cloud Asset API manages the history and inventory of Google Cloud
    resources.
  version: v1p1beta1
  x-discovery-doc-revision: '20230609'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/asset-inventory/docs/quickstart
servers:
  - url: https://cloudasset.googleapis.com
components:
  schemas:
    GoogleIdentityAccesscontextmanagerV1MethodSelector:
      description: An allowed method or permission of a service specified in ApiOperation.
      type: object
      id: GoogleIdentityAccesscontextmanagerV1MethodSelector
      properties:
        permission:
          type: string
          description: >-
            Value for `permission` should be a valid Cloud IAM permission for
            the corresponding `service_name` in ApiOperation.
        method:
          type: string
          description: >-
            Value for `method` should be a valid method name for the
            corresponding `service_name` in ApiOperation. If `*` used as value
            for `method`, then ALL methods and permissions are allowed.
    GoogleIdentityAccesscontextmanagerV1BasicLevel:
      description: '`BasicLevel` is an `AccessLevel` using a set of recommended features.'
      id: GoogleIdentityAccesscontextmanagerV1BasicLevel
      type: object
      properties:
        combiningFunction:
          type: string
          enum:
            - AND
            - OR
          enumDescriptions:
            - All `Conditions` must be true for the `BasicLevel` to be true.
            - >-
              If at least one `Condition` is true, then the `BasicLevel` is
              true.
          description: >-
            How the `conditions` list should be combined to determine if a
            request is granted this `AccessLevel`. If AND is used, each
            `Condition` in `conditions` must be satisfied for the `AccessLevel`
            to be applied. If OR is used, at least one `Condition` in
            `conditions` must be satisfied for the `AccessLevel` to be applied.
            Default behavior is AND.
        conditions:
          description: >-
            Required. A list of requirements for the `AccessLevel` to be
            granted.
          items:
            $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1Condition'
          type: array
    SearchAllIamPoliciesResponse:
      description: Search all IAM policies response.
      id: SearchAllIamPoliciesResponse
      type: object
      properties:
        results:
          type: array
          description: >-
            A list of IAM policies that match the search query. Related
            information such as the associated resource is returned along with
            the policy.
          items:
            $ref: '#/components/schemas/IamPolicySearchResult'
        nextPageToken:
          type: string
          description: >-
            Set if there are more results than those appearing in this response;
            to get the next set of results, call this method again, using this
            value as the `page_token`.
    GoogleIdentityAccesscontextmanagerV1CustomLevel:
      description: >-
        `CustomLevel` is an `AccessLevel` using the Cloud Common Expression
        Language to represent the necessary conditions for the level to apply to
        a request. See CEL spec at: https://github.com/google/cel-spec
      type: object
      id: GoogleIdentityAccesscontextmanagerV1CustomLevel
      properties:
        expr:
          $ref: '#/components/schemas/Expr'
          description: Required. A Cloud CEL expression evaluating to a boolean.
    GoogleCloudAssetV1p7beta1RelationshipAttributes:
      type: object
      id: GoogleCloudAssetV1p7beta1RelationshipAttributes
      description: >-
        The relationship attributes which include `type`,
        `source_resource_type`, `target_resource_type` and `action`.
      properties:
        sourceResourceType:
          type: string
          description: 'The source asset type. Example: `compute.googleapis.com/Instance`'
        action:
          type: string
          description: The detail of the relationship, e.g. `contains`, `attaches`
        type:
          type: string
          description: >-
            The unique identifier of the relationship type. Example:
            `INSTANCE_TO_INSTANCEGROUP`
        targetResourceType:
          type: string
          description: 'The target asset type. Example: `compute.googleapis.com/Disk`'
    GoogleIdentityAccesscontextmanagerV1EgressFrom:
      properties:
        identities:
          description: >-
            A list of identities that are allowed access through this
            [EgressPolicy]. Should be in the format of email address. The email
            address should represent individual user or service account only.
          type: array
          items:
            type: string
        identityType:
          enum:
            - IDENTITY_TYPE_UNSPECIFIED
            - ANY_IDENTITY
            - ANY_USER_ACCOUNT
            - ANY_SERVICE_ACCOUNT
          type: string
          description: >-
            Specifies the type of identities that are allowed access to outside
            the perimeter. If left unspecified, then members of `identities`
            field will be allowed access.
          enumDescriptions:
            - No blanket identity group specified.
            - Authorize access from all identities outside the perimeter.
            - Authorize access from all human users outside the perimeter.
            - Authorize access from all service accounts outside the perimeter.
      type: object
      description: >-
        Defines the conditions under which an EgressPolicy matches a request.
        Conditions based on information about the source of the request. Note
        that if the destination of the request is also protected by a
        ServicePerimeter, then that ServicePerimeter must have an IngressPolicy
        which allows access in order for this request to succeed.
      id: GoogleIdentityAccesscontextmanagerV1EgressFrom
    GoogleCloudOrgpolicyV1Policy:
      properties:
        restoreDefault:
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV1RestoreDefault'
          description: >-
            Restores the default behavior of the constraint; independent of
            `Constraint` type.
        constraint:
          type: string
          description: >-
            The name of the `Constraint` the `Policy` is configuring, for
            example, `constraints/serviceuser.services`. A [list of available
            constraints](/resource-manager/docs/organization-policy/org-policy-constraints)
            is available. Immutable after creation.
        etag:
          description: >-
            An opaque tag indicating the current version of the `Policy`, used
            for concurrency control. When the `Policy` is returned from either a
            `GetPolicy` or a `ListOrgPolicy` request, this `etag` indicates the
            version of the current `Policy` to use when executing a
            read-modify-write loop. When the `Policy` is returned from a
            `GetEffectivePolicy` request, the `etag` will be unset. When the
            `Policy` is used in a `SetOrgPolicy` method, use the `etag` value
            that was returned from a `GetOrgPolicy` request as part of a
            read-modify-write loop for concurrency control. Not setting the
            `etag`in a `SetOrgPolicy` request will result in an unconditional
            write of the `Policy`.
          format: byte
          type: string
        booleanPolicy:
          description: >-
            For boolean `Constraints`, whether to enforce the `Constraint` or
            not.
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV1BooleanPolicy'
        updateTime:
          description: >-
            The time stamp the `Policy` was previously updated. This is set by
            the server, not specified by the caller, and represents the last
            time a call to `SetOrgPolicy` was made for that `Policy`. Any value
            set by the client will be ignored.
          type: string
          format: google-datetime
        listPolicy:
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV1ListPolicy'
          description: List of values either allowed or disallowed.
        version:
          description: Version of the `Policy`. Default version is 0;
          format: int32
          type: integer
      description: >-
        Defines a Cloud Organization `Policy` which is used to specify
        `Constraints` for configurations of Cloud Platform resources.
      id: GoogleCloudOrgpolicyV1Policy
      type: object
    GoogleCloudOrgpolicyV1BooleanPolicy:
      id: GoogleCloudOrgpolicyV1BooleanPolicy
      description: >-
        Used in `policy_type` to specify how `boolean_policy` will behave at
        this resource.
      properties:
        enforced:
          description: >-
            If `true`, then the `Policy` is enforced. If `false`, then any
            configuration is acceptable. Suppose you have a `Constraint`
            `constraints/compute.disableSerialPortAccess` with
            `constraint_default` set to `ALLOW`. A `Policy` for that
            `Constraint` exhibits the following behavior: - If the `Policy` at
            this resource has enforced set to `false`, serial port connection
            attempts will be allowed. - If the `Policy` at this resource has
            enforced set to `true`, serial port connection attempts will be
            refused. - If the `Policy` at this resource is `RestoreDefault`,
            serial port connection attempts will be allowed. - If no `Policy` is
            set at this resource or anywhere higher in the resource hierarchy,
            serial port connection attempts will be allowed. - If no `Policy` is
            set at this resource, but one exists higher in the resource
            hierarchy, the behavior is as if the`Policy` were set at this
            resource. The following examples demonstrate the different possible
            layerings: Example 1 (nearest `Constraint` wins):
            `organizations/foo` has a `Policy` with: {enforced: false}
            `projects/bar` has no `Policy` set. The constraint at `projects/bar`
            and `organizations/foo` will not be enforced. Example 2 (enforcement
            gets replaced): `organizations/foo` has a `Policy` with: {enforced:
            false} `projects/bar` has a `Policy` with: {enforced: true} The
            constraint at `organizations/foo` is not enforced. The constraint at
            `projects/bar` is enforced. Example 3 (RestoreDefault):
            `organizations/foo` has a `Policy` with: {enforced: true}
            `projects/bar` has a `Policy` with: {RestoreDefault: {}} The
            constraint at `organizations/foo` is enforced. The constraint at
            `projects/bar` is not enforced, because `constraint_default` for the
            `Constraint` is `ALLOW`.
          type: boolean
      type: object
    GoogleIdentityAccesscontextmanagerV1IngressFrom:
      description: >-
        Defines the conditions under which an IngressPolicy matches a request.
        Conditions are based on information about the source of the request. The
        request must satisfy what is defined in `sources` AND identity related
        fields in order to match.
      id: GoogleIdentityAccesscontextmanagerV1IngressFrom
      properties:
        identities:
          items:
            type: string
          description: >-
            A list of identities that are allowed access through this ingress
            policy. Should be in the format of email address. The email address
            should represent individual user or service account only.
          type: array
        sources:
          type: array
          items:
            $ref: >-
              #/components/schemas/GoogleIdentityAccesscontextmanagerV1IngressSource
          description: Sources that this IngressPolicy authorizes access from.
        identityType:
          enumDescriptions:
            - No blanket identity group specified.
            - Authorize access from all identities outside the perimeter.
            - Authorize access from all human users outside the perimeter.
            - Authorize access from all service accounts outside the perimeter.
          type: string
          description: >-
            Specifies the type of identities that are allowed access from
            outside the perimeter. If left unspecified, then members of
            `identities` field will be allowed access.
          enum:
            - IDENTITY_TYPE_UNSPECIFIED
            - ANY_IDENTITY
            - ANY_USER_ACCOUNT
            - ANY_SERVICE_ACCOUNT
      type: object
    GoogleIdentityAccesscontextmanagerV1IngressTo:
      properties:
        operations:
          description: >-
            A list of ApiOperations allowed to be performed by the sources
            specified in corresponding IngressFrom in this ServicePerimeter.
          type: array
          items:
            $ref: >-
              #/components/schemas/GoogleIdentityAccesscontextmanagerV1ApiOperation
        resources:
          items:
            type: string
          type: array
          description: >-
            A list of resources, currently only projects in the form
            `projects/`, protected by this ServicePerimeter that are allowed to
            be accessed by sources defined in the corresponding IngressFrom. If
            a single `*` is specified, then access to all resources inside the
            perimeter are allowed.
      type: object
      id: GoogleIdentityAccesscontextmanagerV1IngressTo
      description: >-
        Defines the conditions under which an IngressPolicy matches a request.
        Conditions are based on information about the ApiOperation intended to
        be performed on the target resource of the request. The request must
        satisfy what is defined in `operations` AND `resources` in order to
        match.
    AuditLogConfig:
      id: AuditLogConfig
      properties:
        exemptedMembers:
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
        logType:
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          type: string
          description: The log type that this config enables.
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      type: object
    GoogleIdentityAccesscontextmanagerV1AccessPolicy:
      type: object
      properties:
        name:
          description: >-
            Output only. Resource name of the `AccessPolicy`. Format:
            `accessPolicies/{access_policy}`
          type: string
        parent:
          description: >-
            Required. The parent of this `AccessPolicy` in the Cloud Resource
            Hierarchy. Currently immutable once created. Format:
            `organizations/{organization_id}`
          type: string
        etag:
          description: >-
            Output only. An opaque identifier for the current version of the
            `AccessPolicy`. This will always be a strongly validated etag,
            meaning that two Access Polices will be identical if and only if
            their etags are identical. Clients should not expect this to be in
            any specific format.
          type: string
        title:
          type: string
          description: Required. Human readable title. Does not affect behavior.
        scopes:
          type: array
          description: >-
            The scopes of a policy define which resources an ACM policy can
            restrict, and where ACM resources can be referenced. For example, a
            policy with scopes=["folders/123"] has the following behavior: -
            vpcsc perimeters can only restrict projects within folders/123 -
            access levels can only be referenced by resources within
            folders/123. If empty, there are no limitations on which resources
            can be restricted by an ACM policy, and there are no limitations on
            where ACM resources can be referenced. Only one policy can include a
            given scope (attempting to create a second policy which includes
            "folders/123" will result in an error). Currently, scopes cannot be
            modified after a policy is created. Currently, policies can only
            have a single scope. Format: list of `folders/{folder_number}` or
            `projects/{project_number}`
          items:
            type: string
      description: >-
        `AccessPolicy` is a container for `AccessLevels` (which define the
        necessary attributes to use Google Cloud services) and
        `ServicePerimeters` (which define regions of services able to freely
        pass data within a perimeter). An access policy is globally visible
        within an organization, and the restrictions it specifies apply to all
        projects within an organization.
      id: GoogleIdentityAccesscontextmanagerV1AccessPolicy
    GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig:
      type: object
      id: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
      description: >-
        `ServicePerimeterConfig` specifies a set of Google Cloud resources that
        describe specific Service Perimeter configuration.
      properties:
        egressPolicies:
          items:
            $ref: >-
              #/components/schemas/GoogleIdentityAccesscontextmanagerV1EgressPolicy
          description: >-
            List of EgressPolicies to apply to the perimeter. A perimeter may
            have multiple EgressPolicies, each of which is evaluated separately.
            Access is granted if any EgressPolicy grants it. Must be empty for a
            perimeter bridge.
          type: array
        restrictedServices:
          description: >-
            Google Cloud services that are subject to the Service Perimeter
            restrictions. For example, if `storage.googleapis.com` is specified,
            access to the storage buckets inside the perimeter must meet the
            perimeter's access restrictions.
          items:
            type: string
          type: array
        accessLevels:
          items:
            type: string
          type: array
          description: >-
            A list of `AccessLevel` resource names that allow resources within
            the `ServicePerimeter` to be accessed from the internet.
            `AccessLevels` listed must be in the same policy as this
            `ServicePerimeter`. Referencing a nonexistent `AccessLevel` is a
            syntax error. If no `AccessLevel` names are listed, resources within
            the perimeter can only be accessed via Google Cloud calls with
            request origins within the perimeter. Example:
            `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`. For Service
            Perimeter Bridge, must be empty.
        resources:
          items:
            type: string
          type: array
          description: >-
            A list of Google Cloud resources that are inside of the service
            perimeter. Currently only projects and VPCs are allowed. Project
            format: `projects/{project_number}` VPC network format:
            `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.
        vpcAccessibleServices:
          $ref: >-
            #/components/schemas/GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices
          description: Configuration for APIs allowed within Perimeter.
        ingressPolicies:
          items:
            $ref: >-
              #/components/schemas/GoogleIdentityAccesscontextmanagerV1IngressPolicy
          description: >-
            List of IngressPolicies to apply to the perimeter. A perimeter may
            have multiple IngressPolicies, each of which is evaluated
            separately. Access is granted if any Ingress Policy grants it. Must
            be empty for a perimeter bridge.
          type: array
    AuditConfig:
      type: object
      id: AuditConfig
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted. Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        `jose@example.com` from DATA_READ logging, and `aliya@example.com` from
        DATA_WRITE logging.
      properties:
        service:
          type: string
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
        auditLogConfigs:
          items:
            $ref: '#/components/schemas/AuditLogConfig'
          description: The configuration for logging of each type of permission.
          type: array
    GoogleCloudOrgpolicyV1ListPolicy:
      id: GoogleCloudOrgpolicyV1ListPolicy
      properties:
        suggestedValue:
          description: >-
            Optional. The Google Cloud Console will try to default to a
            configuration that matches the value specified in this `Policy`. If
            `suggested_value` is not set, it will inherit the value specified
            higher in the hierarchy, unless `inherit_from_parent` is `false`.
          type: string
        allValues:
          type: string
          enumDescriptions:
            - Indicates that allowed_values or denied_values must be set.
            - A policy with this set allows all values.
            - A policy with this set denies all values.
          description: The policy all_values state.
          enum:
            - ALL_VALUES_UNSPECIFIED
            - ALLOW
            - DENY
        allowedValues:
          items:
            type: string
          description: >-
            List of values allowed at this resource. Can only be set if
            `all_values` is set to `ALL_VALUES_UNSPECIFIED`.
          type: array
        deniedValues:
          description: >-
            List of values denied at this resource. Can only be set if
            `all_values` is set to `ALL_VALUES_UNSPECIFIED`.
          type: array
          items:
            type: string
        inheritFromParent:
          description: >-
            Determines the inheritance behavior for this `Policy`. By default, a
            `ListPolicy` set at a resource supersedes any `Policy` set anywhere
            up the resource hierarchy. However, if `inherit_from_parent` is set
            to `true`, then the values from the effective `Policy` of the parent
            resource are inherited, meaning the values set in this `Policy` are
            added to the values inherited up the hierarchy. Setting `Policy`
            hierarchies that inherit both allowed values and denied values isn't
            recommended in most circumstances to keep the configuration simple
            and understandable. However, it is possible to set a `Policy` with
            `allowed_values` set that inherits a `Policy` with `denied_values`
            set. In this case, the values that are allowed must be in
            `allowed_values` and not present in `denied_values`. For example,
            suppose you have a `Constraint` `constraints/serviceuser.services`,
            which has a `constraint_type` of `list_constraint`, and with
            `constraint_default` set to `ALLOW`. Suppose that at the
            Organization level, a `Policy` is applied that restricts the allowed
            API activations to {`E1`, `E2`}. Then, if a `Policy` is applied to a
            project below the Organization that has `inherit_from_parent` set to
            `false` and field all_values set to DENY, then an attempt to
            activate any API will be denied. The following examples demonstrate
            different possible layerings for `projects/bar` parented by
            `organizations/foo`: Example 1 (no inherited values):
            `organizations/foo` has a `Policy` with values: {allowed_values:
            "E1" allowed_values:"E2"} `projects/bar` has `inherit_from_parent`
            `false` and values: {allowed_values: "E3" allowed_values: "E4"} The
            accepted values at `organizations/foo` are `E1`, `E2`. The accepted
            values at `projects/bar` are `E3`, and `E4`. Example 2 (inherited
            values): `organizations/foo` has a `Policy` with values:
            {allowed_values: "E1" allowed_values:"E2"} `projects/bar` has a
            `Policy` with values: {value: "E3" value: "E4" inherit_from_parent:
            true} The accepted values at `organizations/foo` are `E1`, `E2`. The
            accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`.
            Example 3 (inheriting both allowed and denied values):
            `organizations/foo` has a `Policy` with values: {allowed_values:
            "E1" allowed_values: "E2"} `projects/bar` has a `Policy` with:
            {denied_values: "E1"} The accepted values at `organizations/foo` are
            `E1`, `E2`. The value accepted at `projects/bar` is `E2`. Example 4
            (RestoreDefault): `organizations/foo` has a `Policy` with values:
            {allowed_values: "E1" allowed_values:"E2"} `projects/bar` has a
            `Policy` with values: {RestoreDefault: {}} The accepted values at
            `organizations/foo` are `E1`, `E2`. The accepted values at
            `projects/bar` are either all or none depending on the value of
            `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 5
            (no policy inherits parent policy): `organizations/foo` has no
            `Policy` set. `projects/bar` has no `Policy` set. The accepted
            values at both levels are either all or none depending on the value
            of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example
            6 (ListConstraint allowing all): `organizations/foo` has a `Policy`
            with values: {allowed_values: "E1" allowed_values: "E2"}
            `projects/bar` has a `Policy` with: {all: ALLOW} The accepted values
            at `organizations/foo` are `E1`, E2`. Any value is accepted at
            `projects/bar`. Example 7 (ListConstraint allowing none):
            `organizations/foo` has a `Policy` with values: {allowed_values:
            "E1" allowed_values: "E2"} `projects/bar` has a `Policy` with: {all:
            DENY} The accepted values at `organizations/foo` are `E1`, E2`. No
            value is accepted at `projects/bar`. Example 10 (allowed and denied
            subtrees of Resource Manager hierarchy): Given the following
            resource hierarchy O1->{F1, F2}; F1->{P1}; F2->{P2, P3},
            `organizations/foo` has a `Policy` with values: {allowed_values:
            "under:organizations/O1"} `projects/bar` has a `Policy` with:
            {allowed_values: "under:projects/P3"} {denied_values:
            "under:folders/F2"} The accepted values at `organizations/foo` are
            `organizations/O1`, `folders/F1`, `folders/F2`, `projects/P1`,
            `projects/P2`, `projects/P3`. The accepted values at `projects/bar`
            are `organizations/O1`, `folders/F1`, `projects/P1`.
          type: boolean
      description: >-
        Used in `policy_type` to specify how `list_policy` behaves at this
        resource. `ListPolicy` can define specific values and subtrees of Cloud
        Resource Manager resource hierarchy (`Organizations`, `Folders`,
        `Projects`) that are allowed or denied by setting the `allowed_values`
        and `denied_values` fields. This is achieved by using the `under:` and
        optional `is:` prefixes. The `under:` prefix is used to denote resource
        subtree values. The `is:` prefix is used to denote specific values, and
        is required only if the value contains a ":". Values prefixed with "is:"
        are treated the same as values with no prefix. Ancestry subtrees must be
        in one of the following formats: - "projects/", e.g.
        "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" -
        "organizations/", e.g. "organizations/1234" The `supports_under` field
        of the associated `Constraint` defines whether ancestry prefixes can be
        used. You can set `allowed_values` and `denied_values` in the same
        `Policy` if `all_values` is `ALL_VALUES_UNSPECIFIED`. `ALLOW` or `DENY`
        are used to allow or deny all values. If `all_values` is set to either
        `ALLOW` or `DENY`, `allowed_values` and `denied_values` must be unset.
      type: object
    GoogleIdentityAccesscontextmanagerV1ApiOperation:
      properties:
        methodSelectors:
          type: array
          description: >-
            API methods or permissions to allow. Method or permission must
            belong to the service specified by `service_name` field. A single
            MethodSelector entry with `*` specified for the `method` field will
            allow all methods AND permissions for the service specified in
            `service_name`.
          items:
            $ref: >-
              #/components/schemas/GoogleIdentityAccesscontextmanagerV1MethodSelector
        serviceName:
          type: string
          description: >-
            The name of the API whose methods or permissions the IngressPolicy
            or EgressPolicy want to allow. A single ApiOperation with
            `service_name` field set to `*` will allow all methods AND
            permissions for all services.
      id: GoogleIdentityAccesscontextmanagerV1ApiOperation
      description: Identification for an API Operation.
      type: object
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      properties:
        expression:
          type: string
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
        title:
          type: string
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
      type: object
    GoogleIdentityAccesscontextmanagerV1IngressSource:
      id: GoogleIdentityAccesscontextmanagerV1IngressSource
      type: object
      properties:
        resource:
          description: >-
            A Google Cloud resource that is allowed to ingress the perimeter.
            Requests from these resources will be allowed to access perimeter
            data. Currently only projects and VPCs are allowed. Project format:
            `projects/{project_number}` VPC network format:
            `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.
            The project may be in any Google Cloud organization, not just the
            organization that the perimeter is defined in. `*` is not allowed,
            the case of allowing all Google Cloud resources only is not
            supported.
          type: string
        accessLevel:
          description: >-
            An AccessLevel resource name that allow resources within the
            ServicePerimeters to be accessed from the internet. AccessLevels
            listed must be in the same policy as this ServicePerimeter.
            Referencing a nonexistent AccessLevel will cause an error. If no
            AccessLevel names are listed, resources within the perimeter can
            only be accessed via Google Cloud calls with request origins within
            the perimeter. Example:
            `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL`. If a single `*` is
            specified for `access_level`, then all IngressSources will be
            allowed.
          type: string
      description: The source that IngressPolicy authorizes access from.
    GoogleIdentityAccesscontextmanagerV1AccessLevel:
      id: GoogleIdentityAccesscontextmanagerV1AccessLevel
      type: object
      description: >-
        An `AccessLevel` is a label that can be applied to requests to Google
        Cloud services, along with a list of requirements necessary for the
        label to be applied.
      properties:
        name:
          description: >-
            Resource name for the `AccessLevel`. Format:
            `accessPolicies/{access_policy}/accessLevels/{access_level}`. The
            `access_level` component must begin with a letter, followed by
            alphanumeric characters or `_`. Its maximum length is 50 characters.
            After you create an `AccessLevel`, you cannot change its `name`.
          type: string
        custom:
          $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1CustomLevel'
          description: A `CustomLevel` written in the Common Expression Language.
        description:
          description: >-
            Description of the `AccessLevel` and its use. Does not affect
            behavior.
          type: string
        title:
          description: Human readable title. Must be unique within the Policy.
          type: string
        basic:
          $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1BasicLevel'
          description: A `BasicLevel` composed of `Conditions`.
    GoogleCloudOrgpolicyV1RestoreDefault:
      id: GoogleCloudOrgpolicyV1RestoreDefault
      properties: {}
      type: object
      description: >-
        Ignores policies set above this resource and restores the
        `constraint_default` enforcement behavior of the specific `Constraint`
        at this resource. Suppose that `constraint_default` is set to `ALLOW`
        for the `Constraint` `constraints/serviceuser.services`. Suppose that
        organization foo.com sets a `Policy` at their Organization resource node
        that restricts the allowed service activations to deny all service
        activations. They could then set a `Policy` with the `policy_type`
        `restore_default` on several experimental projects, restoring the
        `constraint_default` enforcement of the `Constraint` for only those
        projects, allowing those projects to have all services activated.
    GoogleIdentityAccesscontextmanagerV1DevicePolicy:
      properties:
        requireCorpOwned:
          type: boolean
          description: Whether the device needs to be corp owned.
        osConstraints:
          type: array
          description: >-
            Allowed OS versions, an empty list allows all types and all
            versions.
          items:
            $ref: >-
              #/components/schemas/GoogleIdentityAccesscontextmanagerV1OsConstraint
        allowedDeviceManagementLevels:
          items:
            enum:
              - MANAGEMENT_UNSPECIFIED
              - NONE
              - BASIC
              - COMPLETE
            type: string
            enumDescriptions:
              - The device's management level is not specified or not known.
              - The device is not managed.
              - >-
                Basic management is enabled, which is generally limited to
                monitoring and wiping the corporate account.
              - >-
                Complete device management. This includes more thorough
                monitoring and the ability to directly manage the device (such
                as remote wiping). This can be enabled through the Android
                Enterprise Platform.
          type: array
          description: >-
            Allowed device management levels, an empty list allows all
            management levels.
        requireScreenlock:
          type: boolean
          description: >-
            Whether or not screenlock is required for the DevicePolicy to be
            true. Defaults to `false`.
        requireAdminApproval:
          type: boolean
          description: Whether the device needs to be approved by the customer admin.
        allowedEncryptionStatuses:
          type: array
          description: Allowed encryptions statuses, an empty list allows all statuses.
          items:
            enum:
              - ENCRYPTION_UNSPECIFIED
              - ENCRYPTION_UNSUPPORTED
              - UNENCRYPTED
              - ENCRYPTED
            enumDescriptions:
              - >-
                The encryption status of the device is not specified or not
                known.
              - The device does not support encryption.
              - The device supports encryption, but is currently unencrypted.
              - The device is encrypted.
            type: string
      id: GoogleIdentityAccesscontextmanagerV1DevicePolicy
      type: object
      description: >-
        `DevicePolicy` specifies device specific restrictions necessary to
        acquire a given access level. A `DevicePolicy` specifies requirements
        for requests from devices to be granted access levels, it does not do
        any enforcement on the device. `DevicePolicy` acts as an AND over all
        specified fields, and each repeated field is an OR over its elements.
        Any unset fields are ignored. For example, if the proto is { os_type :
        DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED},
        then the DevicePolicy will be true for requests originating from
        encrypted Linux desktops and encrypted Windows desktops.
    GoogleIdentityAccesscontextmanagerV1EgressTo:
      id: GoogleIdentityAccesscontextmanagerV1EgressTo
      description: >-
        Defines the conditions under which an EgressPolicy matches a request.
        Conditions are based on information about the ApiOperation intended to
        be performed on the `resources` specified. Note that if the destination
        of the request is also protected by a ServicePerimeter, then that
        ServicePerimeter must have an IngressPolicy which allows access in order
        for this request to succeed. The request must match `operations` AND
        `resources` fields in order to be allowed egress out of the perimeter.
      properties:
        resources:
          description: >-
            A list of resources, currently only projects in the form
            `projects/`, that are allowed to be accessed by sources defined in
            the corresponding EgressFrom. A request matches if it contains a
            resource in this list. If `*` is specified for `resources`, then
            this EgressTo rule will authorize access to all resources outside
            the perimeter.
          items:
            type: string
          type: array
        operations:
          items:
            $ref: >-
              #/components/schemas/GoogleIdentityAccesscontextmanagerV1ApiOperation
          type: array
          description: >-
            A list of ApiOperations allowed to be performed by the sources
            specified in the corresponding EgressFrom. A request matches if it
            uses an operation/service in this list.
        externalResources:
          type: array
          items:
            type: string
          description: >-
            A list of external resources that are allowed to be accessed. Only
            AWS and Azure resources are supported. For Amazon S3, the supported
            format is s3://BUCKET_NAME. For Azure Storage, the supported format
            is azure://myaccount.blob.core.windows.net/CONTAINER_NAME. A request
            matches if it contains an external resource in this list (Example:
            s3://bucket/path). Currently '*' is not allowed.
      type: object
    Permissions:
      description: IAM permissions.
      id: Permissions
      properties:
        permissions:
          items:
            type: string
          type: array
          description: >-
            A list of permissions. Example permission string:
            "compute.disk.get".
      type: object
    GoogleCloudAssetV1p7beta1Asset:
      properties:
        accessPolicy:
          $ref: >-
            #/components/schemas/GoogleIdentityAccesscontextmanagerV1AccessPolicy
          description: >-
            Please also refer to the [access policy user
            guide](https://cloud.google.com/access-context-manager/docs/overview#access-policies).
        servicePerimeter:
          description: >-
            Please also refer to the [service perimeter user
            guide](https://cloud.google.com/vpc-service-controls/docs/overview).
          $ref: >-
            #/components/schemas/GoogleIdentityAccesscontextmanagerV1ServicePerimeter
        orgPolicy:
          description: >-
            A representation of an [organization
            policy](https://cloud.google.com/resource-manager/docs/organization-policy/overview#organization_policy).
            There can be more than one organization policy with different
            constraints set on a given resource.
          items:
            $ref: '#/components/schemas/GoogleCloudOrgpolicyV1Policy'
          type: array
        name:
          type: string
          description: >-
            The full name of the asset. Example:
            `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`
            See [Resource
            names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
            for more information.
        resource:
          $ref: '#/components/schemas/GoogleCloudAssetV1p7beta1Resource'
          description: A representation of the resource.
        ancestors:
          type: array
          description: >-
            The ancestry path of an asset in Google Cloud [resource
            hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy),
            represented as a list of relative resource names. An ancestry path
            starts with the closest ancestor in the hierarchy and ends at root.
            If the asset is a project, folder, or organization, the ancestry
            path starts from the asset itself. Example: `["projects/123456789",
            "folders/5432", "organizations/1234"]`
          items:
            type: string
        iamPolicy:
          $ref: '#/components/schemas/Policy'
          description: >-
            A representation of the IAM policy set on a Google Cloud resource.
            There can be a maximum of one IAM policy set on any given resource.
            In addition, IAM policies inherit their granted access scope from
            any policies set on parent resources in the resource hierarchy.
            Therefore, the effectively policy is the union of both the policy
            set on this resource and each policy set on all of the resource's
            ancestry resource levels in the hierarchy. See [this
            topic](https://cloud.google.com/iam/help/allow-policies/inheritance)
            for more information.
        relatedAssets:
          $ref: '#/components/schemas/GoogleCloudAssetV1p7beta1RelatedAssets'
          description: >-
            The related assets of the asset of one relationship type. One asset
            only represents one type of relationship.
        assetType:
          type: string
          description: >-
            The type of the asset. Example: `compute.googleapis.com/Disk` See
            [Supported asset
            types](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
            for more information.
        accessLevel:
          description: >-
            Please also refer to the [access level user
            guide](https://cloud.google.com/access-context-manager/docs/overview#access-levels).
          $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1AccessLevel'
        updateTime:
          description: >-
            The last update timestamp of an asset. update_time is updated when
            create/update/delete operation is performed.
          type: string
          format: google-datetime
      description: >-
        An asset in Google Cloud. An asset can be any resource in the Google
        Cloud [resource
        hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy),
        a resource outside the Google Cloud resource hierarchy (such as Google
        Kubernetes Engine clusters and objects), or a policy (e.g. IAM policy).
        See [Supported asset
        types](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
        for more information.
      id: GoogleCloudAssetV1p7beta1Asset
      type: object
    Policy:
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          format: int32
          type: integer
        bindings:
          items:
            $ref: '#/components/schemas/Binding'
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          format: byte
          type: string
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
    Binding:
      description: Associates `members`, or principals, with a `role`.
      id: Binding
      properties:
        role:
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          type: string
        members:
          items:
            type: string
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding.
          type: array
        condition:
          $ref: '#/components/schemas/Expr'
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
      type: object
    GoogleIdentityAccesscontextmanagerV1IngressPolicy:
      description: >-
        Policy for ingress into ServicePerimeter. IngressPolicies match requests
        based on `ingress_from` and `ingress_to` stanzas. For an ingress policy
        to match, both the `ingress_from` and `ingress_to` stanzas must be
        matched. If an IngressPolicy matches a request, the request is allowed
        through the perimeter boundary from outside the perimeter. For example,
        access from the internet can be allowed either based on an AccessLevel
        or, for traffic hosted on Google Cloud, the project of the source
        network. For access from private networks, using the project of the
        hosting network is required. Individual ingress policies can be limited
        by restricting which services and/or actions they match using the
        `ingress_to` field.
      type: object
      properties:
        ingressTo:
          description: >-
            Defines the conditions on the ApiOperation and request destination
            that cause this IngressPolicy to apply.
          $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1IngressTo'
        ingressFrom:
          description: >-
            Defines the conditions on the source of a request causing this
            IngressPolicy to apply.
          $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1IngressFrom'
      id: GoogleIdentityAccesscontextmanagerV1IngressPolicy
    IamPolicySearchResult:
      id: IamPolicySearchResult
      type: object
      description: The result for an IAM policy search.
      properties:
        project:
          description: >-
            The project that the associated Google Cloud resource belongs to, in
            the form of `projects/{project_number}`. If an IAM policy is set on
            a resource -- such as a Compute Engine instance or a Cloud Storage
            bucket -- the project field will indicate the project that contains
            the resource. If an IAM policy is set on a folder or orgnization,
            the project field will be empty.
          type: string
        policy:
          $ref: '#/components/schemas/Policy'
          description: >-
            The IAM policy attached to the specified resource. Note that the
            original IAM policy can contain multiple bindings. This only
            contains the bindings that match the given query. For queries that
            don't contain a constraint on policies (e.g. an empty query), this
            contains all the bindings.
        explanation:
          description: >-
            Explanation about the IAM policy search result. It contains
            additional information that explains why the search result matches
            the query.
          $ref: '#/components/schemas/Explanation'
        resource:
          description: >-
            The [full resource
            name](https://cloud.google.com/apis/design/resource_names#full_resource_name)
            of the resource associated with this IAM policy.
          type: string
    GoogleIdentityAccesscontextmanagerV1OsConstraint:
      type: object
      properties:
        requireVerifiedChromeOs:
          description: >-
            Only allows requests from devices with a verified Chrome OS.
            Verifications includes requirements that the device is
            enterprise-managed, conformant to domain policies, and the caller
            has permission to call the API targeted by the request.
          type: boolean
        osType:
          type: string
          enumDescriptions:
            - The operating system of the device is not specified or not known.
            - A desktop Mac operating system.
            - A desktop Windows operating system.
            - A desktop Linux operating system.
            - A desktop ChromeOS operating system.
            - An Android operating system.
            - An iOS operating system.
          description: Required. The allowed OS type.
          enum:
            - OS_UNSPECIFIED
            - DESKTOP_MAC
            - DESKTOP_WINDOWS
            - DESKTOP_LINUX
            - DESKTOP_CHROME_OS
            - ANDROID
            - IOS
        minimumVersion:
          description: >-
            The minimum allowed OS version. If not set, any version of this OS
            satisfies the constraint. Format: `"major.minor.patch"`. Examples:
            `"10.5.301"`, `"9.2.1"`.
          type: string
      id: GoogleIdentityAccesscontextmanagerV1OsConstraint
      description: A restriction on the OS type and version of devices making requests.
    GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices:
      description: >-
        Specifies how APIs are allowed to communicate within the Service
        Perimeter.
      type: object
      id: GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices
      properties:
        enableRestriction:
          type: boolean
          description: >-
            Whether to restrict API calls within the Service Perimeter to the
            list of APIs specified in 'allowed_services'.
        allowedServices:
          description: >-
            The list of APIs usable within the Service Perimeter. Must be empty
            unless 'enable_restriction' is True. You can specify a list of
            individual services, as well as include the 'RESTRICTED-SERVICES'
            value, which automatically includes all of the services protected by
            the perimeter.
          type: array
          items:
            type: string
    Explanation:
      description: Explanation about the IAM policy search result.
      type: object
      id: Explanation
      properties:
        matchedPermissions:
          additionalProperties:
            $ref: '#/components/schemas/Permissions'
          type: object
          description: >-
            The map from roles to their included permission matching the
            permission query (e.g. containing `policy.role.permissions:`).
            Example role string: "roles/compute.instanceAdmin". The roles can
            also be found in the returned `policy` bindings. Note that the map
            is populated only if requesting with a permission query.
    AnalyzeIamPolicyLongrunningMetadata:
      properties:
        createTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The time the operation was created.
      type: object
      id: AnalyzeIamPolicyLongrunningMetadata
      description: >-
        Represents the metadata of the longrunning operation for the
        AnalyzeIamPolicyLongrunning RPC.
    StandardResourceMetadata:
      description: The standard metadata of a cloud resource.
      id: StandardResourceMetadata
      type: object
      properties:
        name:
          type: string
          description: >-
            The full resource name. For example:
            `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
            See [Resource
            Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
            for more information.
        description:
          type: string
          description: >-
            One or more paragraphs of text description of this resource. Maximum
            length could be up to 1M bytes.
        additionalAttributes:
          description: >-
            Additional searchable attributes of this resource. Informational
            only. The exact set of attributes is subject to change. For example:
            project id, DNS name etc.
          type: array
          items:
            type: string
        assetType:
          description: >-
            The type of this resource. For example:
            "compute.googleapis.com/Disk".
          type: string
        displayName:
          description: The display name of this resource.
          type: string
        labels:
          description: >-
            Labels associated with this resource. See [Labelling and grouping
            Google Cloud
            resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources)
            for more information.
          additionalProperties:
            type: string
          type: object
        networkTags:
          type: array
          description: >-
            Network tags associated with this resource. Like labels, network
            tags are a type of annotations used to group Google Cloud resources.
            See [Labelling Google Cloud
            resources](lhttps://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources)
            for more information.
          items:
            type: string
        location:
          type: string
          description: >-
            Location can be "global", regional like "us-east1", or zonal like
            "us-west1-b".
        project:
          description: >-
            The project that this resource belongs to, in the form of
            `projects/{project_number}`.
          type: string
    SearchAllResourcesResponse:
      description: Search all resources response.
      id: SearchAllResourcesResponse
      type: object
      properties:
        results:
          description: A list of resource that match the search query.
          type: array
          items:
            $ref: '#/components/schemas/StandardResourceMetadata'
        nextPageToken:
          description: >-
            If there are more results than those appearing in this response,
            then `next_page_token` is included. To get the next set of results,
            call this method again using the value of `next_page_token` as
            `page_token`.
          type: string
    GoogleIdentityAccesscontextmanagerV1EgressPolicy:
      description: >-
        Policy for egress from perimeter. EgressPolicies match requests based on
        `egress_from` and `egress_to` stanzas. For an EgressPolicy to match,
        both `egress_from` and `egress_to` stanzas must be matched. If an
        EgressPolicy matches a request, the request is allowed to span the
        ServicePerimeter boundary. For example, an EgressPolicy can be used to
        allow VMs on networks within the ServicePerimeter to access a defined
        set of projects outside the perimeter in certain contexts (e.g. to read
        data from a Cloud Storage bucket or query against a BigQuery dataset).
        EgressPolicies are concerned with the *resources* that a request relates
        as well as the API services and API actions being used. They do not
        related to the direction of data movement. More detailed documentation
        for this concept can be found in the descriptions of EgressFrom and
        EgressTo.
      type: object
      id: GoogleIdentityAccesscontextmanagerV1EgressPolicy
      properties:
        egressTo:
          description: >-
            Defines the conditions on the ApiOperation and destination resources
            that cause this EgressPolicy to apply.
          $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1EgressTo'
        egressFrom:
          description: >-
            Defines conditions on the source of a request causing this
            EgressPolicy to apply.
          $ref: '#/components/schemas/GoogleIdentityAccesscontextmanagerV1EgressFrom'
    GoogleCloudAssetV1p7beta1Resource:
      description: A representation of a Google Cloud resource.
      id: GoogleCloudAssetV1p7beta1Resource
      type: object
      properties:
        location:
          type: string
          description: >-
            The location of the resource in Google Cloud, such as its zone and
            region. For more information, see
            https://cloud.google.com/about/locations/.
        parent:
          description: >-
            The full name of the immediate parent of this resource. See
            [Resource
            Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
            for more information. For Google Cloud assets, this value is the
            parent resource defined in the [IAM policy
            hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy).
            Example:
            `//cloudresourcemanager.googleapis.com/projects/my_project_123` For
            third-party assets, this field may be set differently.
          type: string
        resourceUrl:
          type: string
          description: >-
            The REST URL for accessing the resource. An HTTP `GET` request using
            this URL returns the resource itself. Example:
            `https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123`
            This value is unspecified for resources without a REST API.
        version:
          description: 'The API version. Example: `v1`'
          type: string
        discoveryName:
          type: string
          description: >-
            The JSON schema name listed in the discovery document. Example:
            `Project` This value is unspecified for resources that do not have
            an API based on a discovery document, such as Cloud Bigtable.
        discoveryDocumentUri:
          type: string
          description: >-
            The URL of the discovery document containing the resource's JSON
            schema. Example:
            `https://www.googleapis.com/discovery/v1/apis/compute/v1/rest` This
            value is unspecified for resources that do not have an API based on
            a discovery document, such as Cloud Bigtable.
        data:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
          description: >-
            The content of the resource, in which some sensitive fields are
            removed and may not be present.
    GoogleIdentityAccesscontextmanagerV1ServicePerimeter:
      properties:
        status:
          description: >-
            Current ServicePerimeter configuration. Specifies sets of resources,
            restricted services and access levels that determine perimeter
            content and boundaries.
          $ref: >-
            #/components/schemas/GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
        description:
          description: >-
            Description of the `ServicePerimeter` and its use. Does not affect
            behavior.
          type: string
        spec:
          $ref: >-
            #/components/schemas/GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
          description: >-
            Proposed (or dry run) ServicePerimeter configuration. This
            configuration allows to specify and test ServicePerimeter
            configuration without enforcing actual access restrictions. Only
            allowed to be set when the "use_explicit_dry_run_spec" flag is set.
        useExplicitDryRunSpec:
          description: >-
            Use explicit dry run spec flag. Ordinarily, a dry-run spec
            implicitly exists for all Service Perimeters, and that spec is
            identical to the status for those Service Perimeters. When this flag
            is set, it inhibits the generation of the implicit spec, thereby
            allowing the user to explicitly provide a configuration ("spec") to
            use in a dry-run version of the Service Perimeter. This allows the
            user to test changes to the enforced config ("status") without
            actually enforcing them. This testing is done through analyzing the
            differences between currently enforced and suggested restrictions.
            use_explicit_dry_run_spec must bet set to True if any of the fields
            in the spec are set to non-default values.
          type: boolean
        name:
          type: string
          description: >-
            Resource name for the `ServicePerimeter`. Format:
            `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`.
            The `service_perimeter` component must begin with a letter, followed
            by alphanumeric characters or `_`. After you create a
            `ServicePerimeter`, you cannot change its `name`.
        title:
          type: string
          description: Human readable title. Must be unique within the Policy.
        perimeterType:
          type: string
          enumDescriptions:
            - >-
              Regular Perimeter. When no value is specified, the perimeter uses
              this type.
            - Perimeter Bridge.
          enum:
            - PERIMETER_TYPE_REGULAR
            - PERIMETER_TYPE_BRIDGE
          description: >-
            Perimeter type indicator. A single project or VPC network is allowed
            to be a member of single regular perimeter, but multiple service
            perimeter bridges. A project cannot be a included in a perimeter
            bridge without being included in regular perimeter. For perimeter
            bridges, the restricted service list as well as access level lists
            must be empty.
      type: object
      id: GoogleIdentityAccesscontextmanagerV1ServicePerimeter
      description: >-
        `ServicePerimeter` describes a set of Google Cloud resources which can
        freely import and export data amongst themselves, but not export outside
        of the `ServicePerimeter`. If a request with a source within this
        `ServicePerimeter` has a target outside of the `ServicePerimeter`, the
        request will be blocked. Otherwise the request is allowed. There are two
        types of Service Perimeter - Regular and Bridge. Regular Service
        Perimeters cannot overlap, a single Google Cloud project or VPC network
        can only belong to a single regular Service Perimeter. Service Perimeter
        Bridges can contain only Google Cloud projects as members, a single
        Google Cloud project may belong to multiple Service Perimeter Bridges.
    AnalyzeIamPolicyLongrunningResponse:
      id: AnalyzeIamPolicyLongrunningResponse
      properties: {}
      description: A response message for AssetService.AnalyzeIamPolicyLongrunning.
      type: object
    GoogleIdentityAccesscontextmanagerV1Condition:
      description: >-
        A condition necessary for an `AccessLevel` to be granted. The Condition
        is an AND over its fields. So a Condition is true if: 1) the request IP
        is from one of the listed subnetworks AND 2) the originating device
        complies with the listed device policy AND 3) all listed access levels
        are granted AND 4) the request was sent at a time allowed by the
        DateTimeRestriction.
      id: GoogleIdentityAccesscontextmanagerV1Condition
      type: object
      properties:
        ipSubnetworks:
          description: >-
            CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note
            that for a CIDR IP address block, the specified IP address portion
            must be properly truncated (i.e. all the host bits must be zero) or
            the input is considered malformed. For example, "192.0.2.0/24" is
            accepted but "192.0.2.1/24" is not. Similarly, for IPv6,
            "2001:db8::/32" is accepted whereas "2001:db8::1/32" is not. The
            originating IP of a request must be in one of the listed subnets in
            order for this Condition to be true. If empty, all IP addresses are
            allowed.
          items:
            type: string
          type: array
        regions:
          type: array
          items:
            type: string
          description: >-
            The request must originate from one of the provided
            countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
        members:
          type: array
          items:
            type: string
          description: >-
            The request must be made by one of the provided user or service
            accounts. Groups are not supported. Syntax: `user:{emailid}`
            `serviceAccount:{emailid}` If not specified, a request may come from
            any user.
        requiredAccessLevels:
          description: >-
            A list of other access levels defined in the same `Policy`,
            referenced by resource name. Referencing an `AccessLevel` which does
            not exist is an error. All access levels listed must be granted for
            the Condition to be true. Example:
            "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
          items:
            type: string
          type: array
        negate:
          description: >-
            Whether to negate the Condition. If true, the Condition becomes a
            NAND over its non-empty fields, each field must be false for the
            Condition overall to be satisfied. Defaults to false.
          type: boolean
        devicePolicy:
          $ref: >-
            #/components/schemas/GoogleIdentityAccesscontextmanagerV1DevicePolicy
          description: >-
            Device specific restrictions, all restrictions must hold for the
            Condition to be true. If not specified, all devices are allowed.
    GoogleCloudAssetV1p7beta1RelatedAssets:
      description: The detailed related assets with the `relationship_type`.
      type: object
      properties:
        relationshipAttributes:
          $ref: '#/components/schemas/GoogleCloudAssetV1p7beta1RelationshipAttributes'
          description: The detailed relation attributes.
        assets:
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudAssetV1p7beta1RelatedAsset'
          description: The peer resources of the relationship.
      id: GoogleCloudAssetV1p7beta1RelatedAssets
    GoogleCloudAssetV1p7beta1RelatedAsset:
      id: GoogleCloudAssetV1p7beta1RelatedAsset
      type: object
      description: >-
        An asset identify in Google Cloud which contains its name, type and
        ancestors. An asset can be any resource in the Google Cloud [resource
        hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy),
        a resource outside the Google Cloud resource hierarchy (such as Google
        Kubernetes Engine clusters and objects), or a policy (e.g. IAM policy).
        See [Supported asset
        types](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
        for more information.
      properties:
        assetType:
          description: >-
            The type of the asset. Example: `compute.googleapis.com/Disk` See
            [Supported asset
            types](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
            for more information.
          type: string
        asset:
          description: >-
            The full name of the asset. Example:
            `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`
            See [Resource
            names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
            for more information.
          type: string
        ancestors:
          description: >-
            The ancestors of an asset in Google Cloud [resource
            hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy),
            represented as a list of relative resource names. An ancestry path
            starts with the closest ancestor in the hierarchy and ends at root.
            Example: `["projects/123456789", "folders/5432",
            "organizations/1234"]`
          items:
            type: string
          type: array
  parameters:
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1p1beta1/{scope}/iamPolicies:
    parameters: &ref_1
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/prettyPrint'
    get:
      description: >-
        Searches all the IAM policies within a given accessible Resource Manager
        scope (project/folder/organization). This RPC gives callers especially
        administrators the ability to search all the IAM policies within a
        scope, even if they don't have `.getIamPolicy` permission of all the IAM
        policies. Callers should have `cloud.assets.SearchAllIamPolicies`
        permission on the requested scope, otherwise the request will be
        rejected.
      operationId: cloudasset.iamPolicies.searchAll
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAllIamPoliciesResponse'
      parameters:
        - in: path
          name: scope
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
      x-stackQL-resource: iam_policies
      x-stackQL-verb: exec
  /v1p1beta1/{scope}/resources:
    parameters: *ref_1
    get:
      description: >-
        Searches all the resources within a given accessible Resource Manager
        scope (project/folder/organization). This RPC gives callers especially
        administrators the ability to search all the resources within a scope,
        even if they don't have `.get` permission of all the resources. Callers
        should have `cloud.assets.SearchAllResources` permission on the
        requested scope, otherwise the request will be rejected.
      operationId: cloudasset.resources.searchAll
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAllResourcesResponse'
      parameters:
        - in: path
          name: scope
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: assetTypes
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: resources
      x-stackQL-verb: exec
