openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Service Directory API
  description: >-
    Service Directory is a platform for discovering, publishing, and connecting
    services. 
  version: v1beta1
  x-discovery-doc-revision: '20230618'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/service-directory
servers:
  - url: https://servicedirectory.googleapis.com
components:
  schemas:
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      properties:
        permissions:
          type: array
          items:
            type: string
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
      description: Response message for `TestIamPermissions` method.
      type: object
    Location:
      description: A resource that represents a Google Cloud location.
      id: Location
      type: object
      properties:
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
    ListEndpointsResponse:
      id: ListEndpointsResponse
      type: object
      properties:
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
        endpoints:
          type: array
          description: The list of endpoints.
          items:
            $ref: '#/components/schemas/Endpoint'
      description: The response message for RegistrationService.ListEndpoints.
    GetPolicyOptions:
      properties:
        requestedPolicyVersion:
          format: int32
          type: integer
          description: >-
            Optional. The maximum policy version that will be used to format the
            policy. Valid values are 0, 1, and 3. Requests specifying an invalid
            value will be rejected. Requests for policies with any conditional
            role bindings must specify version 3. Policies with no conditional
            role bindings may specify any valid value or leave the field unset.
            The policy in the response might use the policy version that you
            specified, or it might use a lower policy version. For example, if
            you specify version 3, but the policy has no conditional role
            bindings, the response uses version 1. To learn which resources
            support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
      description: Encapsulates settings provided to GetIamPolicy.
      id: GetPolicyOptions
      type: object
    GetIamPolicyRequest:
      properties:
        options:
          description: >-
            OPTIONAL: A `GetPolicyOptions` object for specifying options to
            `GetIamPolicy`.
          $ref: '#/components/schemas/GetPolicyOptions'
      type: object
      id: GetIamPolicyRequest
      description: Request message for `GetIamPolicy` method.
    ListServicesResponse:
      id: ListServicesResponse
      properties:
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
        services:
          type: array
          description: The list of services.
          items:
            $ref: '#/components/schemas/Service'
      description: The response message for RegistrationService.ListServices.
      type: object
    Policy:
      properties:
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
          format: byte
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
      type: object
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
    ListNamespacesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
        namespaces:
          type: array
          items:
            $ref: '#/components/schemas/Namespace'
          description: The list of namespaces.
      id: ListNamespacesResponse
      description: The response message for RegistrationService.ListNamespaces.
    Namespace:
      description: >-
        A container for services. Namespaces allow administrators to group
        services together and define permissions for a collection of services.
      properties:
        name:
          type: string
          description: >-
            Immutable. The resource name for the namespace in the format
            `projects/*/locations/*/namespaces/*`.
        updateTime:
          readOnly: true
          description: Output only. The timestamp when the namespace was last updated.
          format: google-datetime
          type: string
        uid:
          readOnly: true
          type: string
          description: >-
            Output only. A globally unique identifier (in UUID4 format) for this
            namespace.
        createTime:
          description: Output only. The timestamp when the namespace was created.
          format: google-datetime
          type: string
          readOnly: true
        labels:
          description: >-
            Optional. Resource labels associated with this namespace. No more
            than 64 user labels can be associated with a given resource. Label
            keys and values can be no longer than 63 characters.
          type: object
          additionalProperties:
            type: string
      id: Namespace
      type: object
    Service:
      id: Service
      properties:
        endpoints:
          items:
            $ref: '#/components/schemas/Endpoint'
          readOnly: true
          description: >-
            Output only. Endpoints associated with this service. Returned on
            LookupService.ResolveService. Control plane clients should use
            RegistrationService.ListEndpoints.
          type: array
        uid:
          readOnly: true
          type: string
          description: >-
            Output only. A globally unique identifier (in UUID4 format) for this
            service.
        metadata:
          description: >-
            Optional. Metadata for the service. This data can be consumed by
            service clients. Restrictions: * The entire metadata dictionary may
            contain up to 2000 characters, spread accoss all key-value pairs.
            Metadata that goes beyond this limit are rejected * Valid metadata
            keys have two segments: an optional prefix and name, separated by a
            slash (/). The name segment is required and must be 63 characters or
            less, beginning and ending with an alphanumeric character
            ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
            alphanumerics between. The prefix is optional. If specified, the
            prefix must be a DNS subdomain: a series of DNS labels separated by
            dots (.), not longer than 253 characters in total, followed by a
            slash (/). Metadata that fails to meet these requirements are
            rejected Note: This field is equivalent to the `annotations` field
            in the v1 API. They have the same syntax and read/write to the same
            location in Service Directory.
          additionalProperties:
            type: string
          type: object
        updateTime:
          description: >-
            Output only. The timestamp when the service was last updated. Note:
            endpoints being created/deleted/updated within the service are not
            considered service updates for the purpose of this timestamp.
          format: google-datetime
          type: string
          readOnly: true
        name:
          description: >-
            Immutable. The resource name for the service in the format
            `projects/*/locations/*/namespaces/*/services/*`.
          type: string
        createTime:
          format: google-datetime
          readOnly: true
          description: Output only. The timestamp when the service was created.
          type: string
      type: object
      description: >-
        An individual service. A service contains a name and optional metadata.
        A service must exist before endpoints can be added to it.
    Endpoint:
      type: object
      properties:
        network:
          description: >-
            Immutable. The Google Compute Engine network (VPC) of the endpoint
            in the format `projects//locations/global/networks/*`. The project
            must be specified by project number (project id is rejected).
            Incorrectly formatted networks are rejected, but no other validation
            is performed on this field (ex. network or project existence,
            reachability, or permissions).
          type: string
        name:
          description: >-
            Immutable. The resource name for the endpoint in the format
            `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
          type: string
        createTime:
          description: Output only. The timestamp when the endpoint was created.
          type: string
          format: google-datetime
          readOnly: true
        address:
          description: >-
            Optional. An IPv4 or IPv6 address. Service Directory rejects bad
            addresses like: * `8.8.8` * `8.8.8.8:53` * `test:bad:address` *
            `[::1]` * `[::1]:8080` Limited to 45 characters.
          type: string
        metadata:
          type: object
          description: >-
            Optional. Metadata for the endpoint. This data can be consumed by
            service clients. Restrictions: * The entire metadata dictionary may
            contain up to 512 characters, spread accoss all key-value pairs.
            Metadata that goes beyond this limit are rejected * Valid metadata
            keys have two segments: an optional prefix and name, separated by a
            slash (/). The name segment is required and must be 63 characters or
            less, beginning and ending with an alphanumeric character
            ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and
            alphanumerics between. The prefix is optional. If specified, the
            prefix must be a DNS subdomain: a series of DNS labels separated by
            dots (.), not longer than 253 characters in total, followed by a
            slash (/). Metadata that fails to meet these requirements are
            rejected Note: This field is equivalent to the `annotations` field
            in the v1 API. They have the same syntax and read/write to the same
            location in Service Directory.
          additionalProperties:
            type: string
        port:
          format: int32
          type: integer
          description: Optional. Service Directory rejects values outside of `[0, 65535]`.
        updateTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The timestamp when the endpoint was last updated.
        uid:
          readOnly: true
          type: string
          description: >-
            Output only. A globally unique identifier (in UUID4 format) for this
            endpoint.
      description: >-
        An individual endpoint that provides a service. The service must already
        exist to create an endpoint.
      id: Endpoint
    Binding:
      description: Associates `members`, or principals, with a `role`.
      id: Binding
      properties:
        members:
          items:
            type: string
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding.
          type: array
        condition:
          $ref: '#/components/schemas/Expr'
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        role:
          type: string
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`.
      type: object
    Expr:
      type: object
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      properties:
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        expression:
          type: string
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          type: string
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
    ListLocationsResponse:
      properties:
        locations:
          items:
            $ref: '#/components/schemas/Location'
          type: array
          description: >-
            A list of locations that matches the specified filter in the
            request.
        nextPageToken:
          description: The standard List next-page token.
          type: string
      description: The response message for Locations.ListLocations.
      id: ListLocationsResponse
      type: object
    TestIamPermissionsRequest:
      type: object
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          items:
            type: string
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
      id: TestIamPermissionsRequest
    ResolveServiceResponse:
      properties:
        service:
          $ref: '#/components/schemas/Service'
      type: object
      id: ResolveServiceResponse
      description: The response message for LookupService.ResolveService.
    ResolveServiceRequest:
      id: ResolveServiceRequest
      type: object
      description: >-
        The request message for LookupService.ResolveService. Looks up a service
        by its name, returns the service and its endpoints.
      properties:
        endpointFilter:
          type: string
          description: >-
            Optional. The filter applied to the endpoints of the resolved
            service. General `filter` string syntax: ` ()` * `` can be `name`,
            `address`, `port`, or `metadata.` for map field * `` can be `<`,
            `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:` means `HAS`, and is
            roughly the same as `=` * `` must be the same data type as field *
            `` can be `AND`, `OR`, `NOT` Examples of valid filters: *
            `metadata.owner` returns endpoints that have a annotation with the
            key `owner`, this is the same as `metadata:owner` *
            `metadata.protocol=gRPC` returns endpoints that have key/value
            `protocol=gRPC` * `address=192.108.1.105` returns endpoints that
            have this address * `port>8080` returns endpoints that have port
            number larger than 8080 *
            `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c`
            returns endpoints that have name that is alphabetically later than
            the string, so "endpoint-e" is returned but "endpoint-a" is not *
            `name=projects/my-project/locations/us-central1/namespaces/my-namespace/services/my-service/endpoints/ep-1`
            returns the endpoint that has an endpoint_id equal to `ep-1` *
            `metadata.owner!=sd AND metadata.foo=bar` returns endpoints that
            have `owner` in annotation key but value is not `sd` AND have
            key/value `foo=bar` * `doesnotexist.foo=bar` returns an empty list.
            Note that endpoint doesn't have a field called "doesnotexist". Since
            the filter does not match any endpoint, it returns no results For
            more information about filtering, see [API
            Filtering](https://aip.dev/160).
        maxEndpoints:
          type: integer
          format: int32
          description: >-
            Optional. The maximum number of endpoints to return. Defaults to 25.
            Maximum is 100. If a value less than one is specified, the Default
            is used. If a value greater than the Maximum is specified, the
            Maximum is used.
    Empty:
      id: Empty
      properties: {}
      type: object
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      id: SetIamPolicyRequest
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
    get:
      description: Gets a namespace.
      operationId: servicedirectory.projects.locations.namespaces.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: namespaces
      x-stackQL-verb: select
    patch:
      description: Updates a namespace.
      operationId: servicedirectory.projects.locations.namespaces.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: namespaces
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes a namespace. This also deletes all services and endpoints in the
        namespace.
      operationId: servicedirectory.projects.locations.namespaces.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: namespaces
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces:
    parameters: *ref_1
    post:
      description: Creates a namespace, and returns the new namespace.
      operationId: servicedirectory.projects.locations.namespaces.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: namespaceId
          schema:
            type: string
      x-stackQL-resource: namespaces
      x-stackQL-verb: insert
    get:
      description: Lists all namespaces.
      operationId: servicedirectory.projects.locations.namespaces.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespacesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: namespaces
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Tests IAM permissions for a resource (namespace, service or service
        workload only).
      operationId: servicedirectory.projects.locations.namespaces.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: namespaces_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the IAM Policy for a resource
      operationId: servicedirectory.projects.locations.namespaces.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: namespaces_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the IAM Policy for a resource
      operationId: servicedirectory.projects.locations.namespaces.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: namespaces_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}/endpoints/{endpointsId}:
    parameters: *ref_1
    delete:
      description: Deletes an endpoint.
      operationId: servicedirectory.projects.locations.namespaces.services.endpoints.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: endpointsId
          required: true
          schema:
            type: string
      x-stackQL-resource: endpoints
      x-stackQL-verb: delete
    get:
      description: Gets an endpoint.
      operationId: servicedirectory.projects.locations.namespaces.services.endpoints.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: endpointsId
          required: true
          schema:
            type: string
      x-stackQL-resource: endpoints
      x-stackQL-verb: select
    patch:
      description: Updates an endpoint.
      operationId: servicedirectory.projects.locations.namespaces.services.endpoints.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoint'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: endpointsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: endpoints
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}/endpoints:
    parameters: *ref_1
    get:
      description: Lists all endpoints.
      operationId: servicedirectory.projects.locations.namespaces.services.endpoints.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEndpointsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: endpoints
      x-stackQL-verb: select
    post:
      description: Creates an endpoint, and returns the new endpoint.
      operationId: servicedirectory.projects.locations.namespaces.services.endpoints.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoint'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: endpointId
          schema:
            type: string
      x-stackQL-resource: endpoints
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:
    parameters: *ref_1
    patch:
      description: Updates a service.
      operationId: servicedirectory.projects.locations.namespaces.services.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes a service. This also deletes all endpoints associated with the
        service.
      operationId: servicedirectory.projects.locations.namespaces.services.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: delete
    get:
      description: Gets a service.
      operationId: servicedirectory.projects.locations.namespaces.services.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the IAM Policy for a resource
      operationId: servicedirectory.projects.locations.namespaces.services.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:resolve:
    parameters: *ref_1
    post:
      description: >-
        Returns a service and its associated endpoints. Resolving a service is
        not considered an active developer method.
      operationId: servicedirectory.projects.locations.namespaces.services.resolve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveServiceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveServiceResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the IAM Policy for a resource
      operationId: servicedirectory.projects.locations.namespaces.services.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services:
    parameters: *ref_1
    get:
      description: Lists all services belonging to a namespace.
      operationId: servicedirectory.projects.locations.namespaces.services.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServicesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: services
      x-stackQL-verb: select
    post:
      description: Creates a service, and returns the new service.
      operationId: servicedirectory.projects.locations.namespaces.services.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: query
          name: serviceId
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Tests IAM permissions for a resource (namespace, service or service
        workload only).
      operationId: >-
        servicedirectory.projects.locations.namespaces.services.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/serviceWorkloads/{serviceWorkloadsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the IAM Policy for a resource
      operationId: >-
        servicedirectory.projects.locations.namespaces.serviceWorkloads.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: serviceWorkloadsId
          required: true
          schema:
            type: string
      x-stackQL-resource: service_workloads_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/serviceWorkloads/{serviceWorkloadsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Tests IAM permissions for a resource (namespace, service or service
        workload only).
      operationId: >-
        servicedirectory.projects.locations.namespaces.serviceWorkloads.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: serviceWorkloadsId
          required: true
          schema:
            type: string
      x-stackQL-resource: service_workloads_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/serviceWorkloads/{serviceWorkloadsId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the IAM Policy for a resource
      operationId: >-
        servicedirectory.projects.locations.namespaces.serviceWorkloads.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: serviceWorkloadsId
          required: true
          schema:
            type: string
      x-stackQL-resource: service_workloads_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/workloads/{workloadsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Tests IAM permissions for a resource (namespace, service or service
        workload only).
      operationId: >-
        servicedirectory.projects.locations.namespaces.workloads.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: workloadsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workloads_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/workloads/{workloadsId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the IAM Policy for a resource
      operationId: servicedirectory.projects.locations.namespaces.workloads.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: workloadsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workloads_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/workloads/{workloadsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the IAM Policy for a resource
      operationId: servicedirectory.projects.locations.namespaces.workloads.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: namespacesId
          required: true
          schema:
            type: string
        - in: path
          name: workloadsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workloads_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: servicedirectory.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: servicedirectory.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
