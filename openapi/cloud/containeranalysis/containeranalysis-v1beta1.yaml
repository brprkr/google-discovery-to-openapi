openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Container Analysis API
  description: >-
    An implementation of the Grafeas API, which stores, and enables querying and
    retrieval of critical metadata about all of your software artifacts.
  version: v1beta1
  x-discovery-doc-revision: '20230612'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/container-analysis/api/reference/rest/
servers:
  - url: https://containeranalysis.googleapis.com
components:
  schemas:
    GrafeasV1beta1DiscoveryDetails:
      type: object
      description: Details of a discovery occurrence.
      properties:
        discovered:
          $ref: '#/components/schemas/Discovered'
          description: Required. Analysis status for the discovered resource.
      id: GrafeasV1beta1DiscoveryDetails
    ContaineranalysisGoogleDevtoolsCloudbuildV1Results:
      type: object
      description: Artifacts created by the build pipeline.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
      properties:
        pythonPackages:
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
          description: >-
            Python artifacts uploaded to Artifact Registry at the end of the
            build.
        artifactTiming:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: Time to push all non-container artifacts to Cloud Storage.
        images:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
          description: Container images that were built as a part of the build.
          type: array
        npmPackages:
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
          description: Npm packages uploaded to Artifact Registry at the end of the build.
        buildStepImages:
          items:
            type: string
          type: array
          description: >-
            List of build step digests, in the order corresponding to build step
            indices.
        mavenArtifacts:
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
          description: >-
            Maven artifacts uploaded to Artifact Registry at the end of the
            build.
        buildStepOutputs:
          items:
            format: byte
            type: string
          type: array
          description: >-
            List of build step outputs, produced by builder images, in the order
            corresponding to build step indices. [Cloud
            Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
            can produce this output by writing to `$BUILDER_OUTPUT/output`. Only
            the first 4KB of data is stored.
        numArtifacts:
          description: >-
            Number of non-container artifacts uploaded to Cloud Storage. Only
            populated when artifacts are uploaded to Cloud Storage.
          type: string
          format: int64
        artifactManifest:
          description: >-
            Path to the artifact manifest for non-container artifacts uploaded
            to Cloud Storage. Only populated when artifacts are uploaded to
            Cloud Storage.
          type: string
    Signature:
      type: object
      id: Signature
      description: >-
        Verifiers (e.g. Kritis implementations) MUST verify signatures with
        respect to the trust anchors defined in policy (e.g. a Kritis policy).
        Typically this means that the verifier has been configured with a map
        from `public_key_id` to public key material (and any required
        parameters, e.g. signing algorithm). In particular, verification
        implementations MUST NOT treat the signature `public_key_id` as anything
        more than a key lookup hint. The `public_key_id` DOES NOT validate or
        authenticate a public key; it only provides a mechanism for quickly
        selecting a public key ALREADY CONFIGURED on the verifier through a
        trusted channel. Verification implementations MUST reject signatures in
        any of the following circumstances: * The `public_key_id` is not
        recognized by the verifier. * The public key that `public_key_id` refers
        to does not verify the signature with respect to the payload. The
        `signature` contents SHOULD NOT be "attached" (where the payload is
        included with the serialized `signature` bytes). Verifiers MUST ignore
        any "attached" payload and only verify signatures with respect to
        explicitly provided payload (e.g. a `payload` field on the proto message
        that holds this Signature, or the canonical serialization of the proto
        message that holds this signature).
      properties:
        publicKeyId:
          type: string
          description: >-
            The identifier for the public key that verifies this signature. *
            The `public_key_id` is required. * The `public_key_id` SHOULD be an
            RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD
            be an immutable reference, such as a cryptographic digest. Examples
            of valid `public_key_id`s: OpenPGP V4 public key fingerprint: *
            "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See
            https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for
            more details on this scheme. RFC6920 digest-named
            SubjectPublicKeyInfo (digest of the DER serialization): *
            "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" *
            "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
        signature:
          description: >-
            The content of the signature, an opaque bytestring. The payload that
            this signature verifies MUST be unambiguously provided with the
            Signature during verification. A wrapper message might provide the
            payload explicitly. Alternatively, a message might have a canonical
            serialization that can always be unambiguously computed to derive
            the payload.
          type: string
          format: byte
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
      type: object
      description: Optional arguments to enable specific features of builds.
      properties:
        sourceProvenanceHash:
          type: array
          description: Requested hash for SourceProvenance.
          items:
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              - Use a sha512 hash.
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
            type: string
        requestedVerifyOption:
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
          enum:
            - NOT_VERIFIED
            - VERIFIED
          description: Requested verifiability options.
          type: string
        env:
          items:
            type: string
          type: array
          description: >-
            A list of global environment variable definitions that will exist
            for all build steps in this build. If a variable is defined in both
            globally and in a build step, the variable will use the build step
            value. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
        dynamicSubstitutions:
          type: boolean
          description: >-
            Option to specify whether or not to apply bash style string
            operations to the substitutions. NOTE: this is always enabled for
            triggered builds and cannot be overridden in the build configuration
            file.
        volumes:
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
          description: >-
            Global list of volumes to mount for ALL build steps Each volume is
            created as an empty volume prior to starting the build process. Upon
            completion of the build, volumes and their contents are discarded.
            Global volume names and paths cannot conflict with the volumes
            defined a build step. Using a global volume in a build with only one
            step is not valid as it is indicative of a build request with an
            incorrect configuration.
        logging:
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
          type: string
          description: >-
            Option to specify the logging mode, which determines if and where
            build logs are stored.
          enumDescriptions:
            - >-
              The service determines the logging mode. The default is `LEGACY`.
              Do not rely on the default logging behavior as it may change in
              the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - >-
              Build logs are stored in Cloud Logging. Selecting this option will
              not allow [logs
              streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
            - Turn off all logging. No build logs will be captured.
        secretEnv:
          items:
            type: string
          description: >-
            A list of global environment variables, which are encrypted using a
            Cloud Key Management Service crypto key. These values must be
            specified in the build's `Secret`. These variables will be available
            to all build steps in this build.
          type: array
        pool:
          description: >-
            Optional. Specification for execution on a `WorkerPool`. See
            [running builds in a private
            pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
            for more information.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
        defaultLogsBucketBehavior:
          type: string
          description: Optional. Option to specify how default logs buckets are setup.
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          enumDescriptions:
            - Unspecified.
            - >-
              Bucket is located in user-owned project in the same region as the
              build. The builder service account must have access to create and
              write to GCS buckets in the build project.
        machineType:
          type: string
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
          description: Compute Engine machine type on which to run the build.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
        workerPool:
          description: This field deprecated; please use `pool.name` instead.
          type: string
        diskSizeGb:
          type: string
          description: >-
            Requested disk size for the VM that runs the build. Note that this
            is *NOT* "disk free"; some of the space will be used by the
            operating system and build utilities. Also note that this is the
            minimum disk size that will be allocated for the build -- the build
            may run with a larger disk than requested. At present, the maximum
            disk size is 2000GB; builds that request more than the maximum are
            rejected with an error.
          format: int64
        substitutionOption:
          type: string
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          description: >-
            Option to specify behavior when there is an error in the
            substitution checks. NOTE: this is always set to ALLOW_LOOSE for
            triggered builds and cannot be overridden in the build configuration
            file.
          enumDescriptions:
            - >-
              Fails the build if error in substitutions checks, like missing a
              substitution in the template or in the map.
            - Do not fail the build if error in substitutions checks.
        logStreamingOption:
          type: string
          description: Option to define build log streaming behavior to Cloud Storage.
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Cloud Storage.
            - >-
              Build logs should not be streamed to Cloud Storage; they will be
              written when the build is completed.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep:
      description: A step in the build pipeline.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
      properties:
        allowExitCodes:
          items:
            type: integer
            format: int32
          type: array
          description: >-
            Allow this build step to fail without failing the entire build if
            and only if the exit code is one of the specified codes. If
            allow_failure is also specified, this field will take precedence.
        dir:
          description: >-
            Working directory to use when running this step's container. If this
            value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's
            working directory, in which case the contents of the path may not be
            persisted across build step executions, unless a `volume` for that
            path is specified. If the build specifies a `RepoSource` with `dir`
            and a step with a `dir`, which specifies an absolute path, the
            `RepoSource` `dir` is ignored for the step's execution.
          type: string
        name:
          type: string
          description: >-
            Required. The name of the container image that will run this
            particular build step. If the image is available in the host's
            Docker daemon's cache, it will be run directly. If not, the host
            will attempt to pull the image first, using the builder service
            account's credentials if necessary. The Docker daemon's cache will
            already have the latest versions of all of the officially supported
            build steps
            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
            The Docker daemon will also have cached many of the layers for some
            popular images, like "ubuntu", "debian", but they will be refreshed
            at the time you attempt to use them. If you built an image in a
            previous build step, it will be stored in the host's Docker daemon's
            cache and is available to use as the name for a later build step.
        pullTiming:
          description: >-
            Output only. Stores timing information for pulling this build step's
            builder image only.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
        allowFailure:
          description: >-
            Allow this build step to fail without failing the entire build. If
            false, the entire build will fail if this step fails. Otherwise, the
            build will succeed, but this step will still have a failure status.
            Error information will be reported in the failure_detail field.
          type: boolean
        volumes:
          description: >-
            List of volumes to mount into the build step. Each volume is created
            as an empty volume prior to execution of the build step. Upon
            completion of the build, volumes and their contents are discarded.
            Using a named volume in only one step is not valid as it is
            indicative of a build request with an incorrect configuration.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
          type: array
        timing:
          readOnly: true
          description: >-
            Output only. Stores timing information for executing this build
            step.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        env:
          type: array
          description: >-
            A list of environment variable definitions to be used when running a
            step. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
          items:
            type: string
        secretEnv:
          type: array
          items:
            type: string
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key Management Service crypto key. These values must be specified in
            the build's `Secret`.
        script:
          type: string
          description: >-
            A shell script to be executed in the step. When script is provided,
            the user cannot specify the entrypoint or args.
        entrypoint:
          type: string
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint. If unset, the image's default entrypoint is used.
        status:
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          type: string
          readOnly: true
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          description: >-
            Output only. Status of the build step. At this time, build step
            status is only updated on build completion; step status is not
            updated in real-time as the build progresses.
        id:
          type: string
          description: >-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
        args:
          description: >-
            A list of arguments that will be presented to the step when it is
            started. If the image used to run the step's container has an
            entrypoint, the `args` are used as arguments to that entrypoint. If
            the image does not define an entrypoint, the first element in args
            is used as the entrypoint, and the remainder will be used as
            arguments.
          type: array
          items:
            type: string
        timeout:
          type: string
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no time limit and will be allowed to continue to run until
            either it completes or the build itself times out.
          format: google-duration
        exitCode:
          format: int32
          description: Output only. Return code from running the step.
          type: integer
          readOnly: true
        waitFor:
          type: array
          items:
            type: string
          description: >-
            The ID(s) of the step(s) that this build step depends on. This build
            step will not start until all the build steps in `wait_for` have
            completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have
            completed successfully.
      type: object
    GenericSignedAttestation:
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          description: >-
            One or more signatures over `serialized_payload`. Verifier
            implementations should consider this attestation message verified if
            at least one `signature` verifies `serialized_payload`. See
            `Signature` in common.proto for more details on signature structure
            and verification.
          type: array
        contentType:
          enumDescriptions:
            - '`ContentType` is not set.'
            - >-
              Atomic format attestation signature. See
              https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md
              The payload extracted in `plaintext` is a JSON blob conforming to
              the linked schema.
          description: >-
            Type (for example schema) of the attestation payload that was
            signed. The verifier must ensure that the provided type is one that
            the verifier supports, and that the attestation payload is a valid
            instantiation of that type (for example by validating a JSON
            schema).
          type: string
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - SIMPLE_SIGNING_JSON
        serializedPayload:
          type: string
          description: >-
            The serialized payload that is verified by one or more `signatures`.
            The encoding and semantic meaning of this payload must match what is
            set in `content_type`.
          format: byte
      description: >-
        An attestation wrapper that uses the Grafeas `Signature` message. This
        attestation must define the `serialized_payload` that the `signatures`
        verify and any metadata necessary to interpret that plaintext. The
        signatures should always be over the `serialized_payload` bytestring.
      type: object
      id: GenericSignedAttestation
    GrafeasV1beta1PackageDetails:
      description: Details of a package occurrence.
      properties:
        installation:
          description: Required. Where the package was installed.
          $ref: '#/components/schemas/Installation'
      id: GrafeasV1beta1PackageDetails
      type: object
    Layer:
      type: object
      id: Layer
      properties:
        directive:
          description: >-
            Required. The recovered Dockerfile directive used to construct this
            layer.
          enumDescriptions:
            - Default value for unsupported/missing directive.
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
          type: string
          enum:
            - DIRECTIVE_UNSPECIFIED
            - MAINTAINER
            - RUN
            - CMD
            - LABEL
            - EXPOSE
            - ENV
            - ADD
            - COPY
            - ENTRYPOINT
            - VOLUME
            - USER
            - WORKDIR
            - ARG
            - ONBUILD
            - STOPSIGNAL
            - HEALTHCHECK
            - SHELL
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
      description: Layer holds metadata specific to a layer of a Docker image.
    SBOMReferenceOccurrence:
      properties:
        payloadType:
          description: >-
            The kind of payload that SbomReferenceIntotoPayload takes. Since
            it's in the intoto format, this value is expected to be
            'application/vnd.in-toto+json'.
          type: string
        payload:
          description: The actual payload that contains the SBOM reference data.
          $ref: '#/components/schemas/SbomReferenceIntotoPayload'
        signatures:
          description: The signatures over the payload.
          type: array
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
      type: object
      id: SBOMReferenceOccurrence
      description: >-
        The occurrence representing an SBOM reference as applied to a specific
        resource. The occurrence follows the DSSE specification. See
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for
        more details.
    BatchCreateNotesRequest:
      properties:
        notes:
          type: object
          description: >-
            Required. The notes to create, the key is expected to be the note
            ID. Max allowed length is 1000.
          additionalProperties:
            $ref: '#/components/schemas/Note'
      id: BatchCreateNotesRequest
      type: object
      description: Request to create notes in batch.
    DocumentNote:
      id: DocumentNote
      properties:
        dataLicence:
          description: >-
            Compliance with the SPDX specification includes populating the SPDX
            fields therein with data related to such fields ("SPDX-Metadata")
          type: string
        spdxVersion:
          type: string
          description: >-
            Provide a reference number that can be used to understand how to
            parse and interpret the rest of the file
      type: object
      description: >-
        DocumentNote represents an SPDX Document Creation Information section:
        https://spdx.github.io/spdx-spec/v2.3/document-creation-information/
    AliasContext:
      properties:
        name:
          description: The alias name.
          type: string
        kind:
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - >-
              Used to specify non-standard aliases. For example, if a Git repo
              has a ref named "refs/foo/bar".
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          description: The alias kind.
          type: string
      id: AliasContext
      type: object
      description: An alias to a repo revision.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
      description: >-
        Npm package to upload to Artifact Registry upon successful completion of
        all build steps.
      properties:
        repository:
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in
            the workspace specified by path will be zipped and uploaded to
            Artifact Registry with this location as a prefix.
          type: string
        packagePath:
          type: string
          description: Path to the package.json. e.g. workspace/path/to/package
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
      type: object
      properties:
        dir:
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
          type: string
        revision:
          description: >-
            The revision to fetch from the Git repository such as a branch, a
            tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to
            fetch the revision from the Git repository; therefore make sure that
            the string you provide for `revision` is parsable by the command.
            For information on string values accepted by `git fetch`, see
            https://git-scm.com/docs/gitrevisions#_specifying_revisions. For
            information on `git fetch`, see https://git-scm.com/docs/git-fetch.
          type: string
        url:
          description: >-
            Location of the Git repo to build. This will be used as a `git
            remote`, see https://git-scm.com/docs/git-remote.
          type: string
      description: Location of the source in any accessible Git repository.
    GeneratePackagesSummaryRequest:
      properties: {}
      type: object
      id: GeneratePackagesSummaryRequest
      description: >-
        GeneratePackagesSummaryRequest is the request body for the
        GeneratePackagesSummary API method. It just takes a single name
        argument, referring to the resource.
    TestIamPermissionsResponse:
      properties:
        permissions:
          items:
            type: string
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
      id: TestIamPermissionsResponse
      type: object
      description: Response message for `TestIamPermissions` method.
    GrafeasV1beta1DeploymentDetails:
      description: Details of a deployment occurrence.
      properties:
        deployment:
          $ref: '#/components/schemas/Deployment'
          description: Required. Deployment history for the resource.
      id: GrafeasV1beta1DeploymentDetails
      type: object
    License:
      properties:
        expression:
          description: >-
            Often a single license can be used to represent the licensing terms.
            Sometimes it is necessary to include a choice of one or more
            licenses or some combination of license identifiers. Examples:
            "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later
            WITH Bison-exception-2.2".
          type: string
        comments:
          description: Comments
          type: string
      type: object
      id: License
      description: License information.
    Vulnerability:
      properties:
        cvssVersion:
          description: CVSS version used to populate cvss_score and severity.
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          type: string
        cvssScore:
          description: The CVSS score for this vulnerability.
          format: float
          type: number
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
          description: Note provider assigned impact of the vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        details:
          type: array
          description: >-
            All information about the package to specifically identify this
            vulnerability. One entry per (version range and cpe_uri) the package
            vulnerability has manifested in.
          items:
            $ref: '#/components/schemas/Detail'
        cvssV3:
          description: The full description of the CVSS for version 3.
          $ref: '#/components/schemas/CVSSv3'
        windowsDetails:
          type: array
          items:
            $ref: '#/components/schemas/WindowsDetail'
          description: >-
            Windows details get their own format because the information format
            and model don't match a normal detail. Specifically Windows updates
            are done as patches, thus Windows vulnerabilities really are a
            missing package, rather than a package being at an incorrect
            version.
        cwe:
          items:
            type: string
          description: >-
            A list of CWE for this vulnerability. For details, see:
            https://cwe.mitre.org/index.html
          type: array
        cvssV2:
          $ref: '#/components/schemas/CVSS'
          description: The full description of the CVSS for version 2.
        sourceUpdateTime:
          type: string
          description: >-
            The time this information was last changed at the source. This is an
            upstream timestamp from the underlying information source - e.g.
            Ubuntu security tracker.
          format: google-datetime
      id: Vulnerability
      description: >-
        Vulnerability provides metadata about a security vulnerability in a
        Note.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage:
      description: >-
        Python package to upload to Artifact Registry upon successful completion
        of all build steps. A package can encapsulate multiple objects to be
        uploaded to a single repository.
      properties:
        repository:
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the
            workspace matching any path pattern will be uploaded to Artifact
            Registry with this location as a prefix.
          type: string
        paths:
          description: >-
            Path globs used to match files in the build's workspace. For Python/
            Twine, this is usually `dist/*`, and sometimes additionally an
            `.asc` file.
          items:
            type: string
          type: array
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
      type: object
    DocumentOccurrence:
      properties:
        documentComment:
          description: >-
            A field for creators of the SPDX file content to provide comments to
            the consumers of the SPDX document
          type: string
        creatorComment:
          description: >-
            A field for creators of the SPDX file to provide general comments
            about the creation of the SPDX file or any other relevant comment
            not included in the other fields
          type: string
        licenseListVersion:
          description: >-
            A field for creators of the SPDX file to provide the version of the
            SPDX License List used when the SPDX file was created
          type: string
        creators:
          type: array
          items:
            type: string
          description: >-
            Identify who (or what, in the case of a tool) created the SPDX file.
            If the SPDX file was created by an individual, indicate the person's
            name
        externalDocumentRefs:
          description: >-
            Identify any external SPDX documents referenced within this SPDX
            document
          type: array
          items:
            type: string
        createTime:
          type: string
          description: >-
            Identify when the SPDX file was originally created. The date is to
            be specified according to combined date and time in UTC format as
            specified in ISO 8601 standard
          format: google-datetime
        title:
          description: Identify name of this document as designated by creator
          type: string
        namespace:
          type: string
          description: >-
            Provide an SPDX document specific namespace as a unique absolute
            Uniform Resource Identifier (URI) as specified in RFC-3986, with the
            exception of the ‘#’ delimiter
        id:
          type: string
          description: >-
            Identify the current SPDX document which may be referenced in
            relationships by other files, packages internally and documents
            externally
      id: DocumentOccurrence
      description: >-
        DocumentOccurrence represents an SPDX Document Creation Information
        section:
        https://spdx.github.io/spdx-spec/v2.3/document-creation-information/
      type: object
    Command:
      type: object
      id: Command
      properties:
        name:
          description: >-
            Required. Name of the command, as presented on the command line, or
            if the command is packaged as a Docker container, as presented to
            `docker pull`.
          type: string
        id:
          description: >-
            Optional unique identifier for this command, used in wait_for to
            reference this command as a dependency.
          type: string
        env:
          type: array
          items:
            type: string
          description: Environment variables set before running this command.
        args:
          type: array
          description: Command-line arguments used when executing this command.
          items:
            type: string
        dir:
          description: >-
            Working directory (relative to project source root) used when
            running this command.
          type: string
        waitFor:
          items:
            type: string
          description: The ID(s) of the command(s) that this command depends on.
          type: array
      description: Command describes a step performed as part of the build pipeline.
    Basis:
      properties:
        resourceUrl:
          description: >-
            Required. Immutable. The resource_url for the resource representing
            the basis of associated occurrence images.
          type: string
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
          description: Required. Immutable. The fingerprint of the base image.
      description: >-
        Basis describes the base image portion (Note) of the DockerImage
        relationship. Linked occurrences are derived from this or an equivalent
        image via: FROM Or an equivalent reference, e.g. a tag of the
        resource_url.
      id: Basis
      type: object
    GitSourceContext:
      type: object
      description: >-
        A GitSourceContext denotes a particular revision in a third party Git
        repository (e.g., GitHub).
      properties:
        url:
          type: string
          description: Git repository URL.
        revisionId:
          type: string
          description: Git commit hash.
      id: GitSourceContext
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
      description: >-
        BuildApproval describes a build's approval configuration, state, and
        result.
      properties:
        config:
          description: Output only. Configuration for manual approval of this build.
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
        result:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
          description: Output only. Result of manual approval for this Build.
          readOnly: true
        state:
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          description: Output only. The state of this build's approval.
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
          type: string
          readOnly: true
    Details:
      description: Details of an attestation occurrence.
      type: object
      properties:
        attestation:
          $ref: '#/components/schemas/Attestation'
          description: Required. Attestation for the resource.
      id: Details
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
      properties:
        pushTiming:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
        uri:
          description: URI of the uploaded npm package.
          type: string
        fileHashes:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
          description: Hash types and values of the npm package.
      description: >-
        An npm package uploaded to Artifact Registry using the NpmPackage
        directive.
      type: object
    KnowledgeBase:
      id: KnowledgeBase
      properties:
        url:
          description: >-
            A link to the KB in the Windows update catalog -
            https://www.catalog.update.microsoft.com/
          type: string
        name:
          description: The KB name (generally of the form KB[0-9]+ i.e. KB123456).
          type: string
      type: object
    SBOMReferenceNote:
      properties:
        format:
          description: The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
          type: string
        version:
          description: >-
            The version of the format that the SBOM takes. E.g. if the format is
            spdx, the version may be 2.3.
          type: string
      id: SBOMReferenceNote
      description: The note representing an SBOM reference.
      type: object
    Binding:
      type: object
      properties:
        members:
          items:
            type: string
          type: array
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding.
        condition:
          $ref: '#/components/schemas/Expr'
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        role:
          type: string
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`.
      description: Associates `members`, or principals, with a `role`.
      id: Binding
    Product:
      description: >-
        Product contains information about a product and how to uniquely
        identify it.
      type: object
      properties:
        genericUri:
          type: string
          description: >-
            Contains a URI which is vendor-specific. Example: The artifact
            repository URL of an image.
        name:
          description: Name of the product.
          type: string
        id:
          description: >-
            Token that identifies a product so that it can be referred to from
            other parts in the document. There is no predefined format as long
            as it uniquely identifies a group in the context of the current
            document.
          type: string
      id: Product
    GetPolicyOptions:
      properties:
        requestedPolicyVersion:
          type: integer
          description: >-
            Optional. The maximum policy version that will be used to format the
            policy. Valid values are 0, 1, and 3. Requests specifying an invalid
            value will be rejected. Requests for policies with any conditional
            role bindings must specify version 3. Policies with no conditional
            role bindings may specify any valid value or leave the field unset.
            The policy in the response might use the policy version that you
            specified, or it might use a lower policy version. For example, if
            you specify version 3, but the policy has no conditional role
            bindings, the response uses version 1. To learn which resources
            support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          format: int32
      id: GetPolicyOptions
      type: object
      description: Encapsulates settings provided to GetIamPolicy.
    SbomReferenceIntotoPayload:
      id: SbomReferenceIntotoPayload
      properties:
        _type:
          type: string
          description: Identifier for the schema of the Statement.
        subject:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
          description: >-
            Set of software artifacts that the attestation applies to. Each
            element represents a single software artifact.
        predicateType:
          type: string
          description: URI identifying the type of the Predicate.
        predicate:
          $ref: '#/components/schemas/SbomReferenceIntotoPredicate'
          description: >-
            Additional parameters of the Predicate. Includes the actual data
            about the SBOM.
      type: object
      description: >-
        The actual payload that contains the SBOM Reference data. The payload
        follows the intoto statement specification. See
        https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md
        for more details.
    GetIamPolicyRequest:
      id: GetIamPolicyRequest
      properties:
        options:
          $ref: '#/components/schemas/GetPolicyOptions'
          description: >-
            OPTIONAL: A `GetPolicyOptions` object for specifying options to
            `GetIamPolicy`.
      type: object
      description: Request message for `GetIamPolicy` method.
    Occurrence:
      description: An instance of an analysis type that has been found on a resource.
      id: Occurrence
      properties:
        vulnerability:
          $ref: '#/components/schemas/GrafeasV1beta1VulnerabilityDetails'
          description: Describes a security vulnerability.
        sbomReference:
          $ref: '#/components/schemas/SBOMReferenceOccurrence'
          description: Describes a specific SBOM reference occurrences.
        attestation:
          description: Describes an attestation of an artifact.
          $ref: '#/components/schemas/Details'
        createTime:
          type: string
          description: Output only. The time this occurrence was created.
          format: google-datetime
        resource:
          description: Required. Immutable. The resource for which the occurrence applies.
          $ref: '#/components/schemas/Resource'
        updateTime:
          type: string
          format: google-datetime
          description: Output only. The time this occurrence was last updated.
        discovered:
          $ref: '#/components/schemas/GrafeasV1beta1DiscoveryDetails'
          description: Describes when a resource was discovered.
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: https://github.com/secure-systems-lab/dsse
        intoto:
          description: Describes a specific in-toto link.
          $ref: '#/components/schemas/GrafeasV1beta1IntotoDetails'
        remediation:
          type: string
          description: A description of actions that can be taken to remedy the note.
        noteName:
          type: string
          description: >-
            Required. Immutable. The analysis note associated with this
            occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
            This field can be used as a filter in list requests.
        derivedImage:
          $ref: '#/components/schemas/GrafeasV1beta1ImageDetails'
          description: >-
            Describes how this resource derives from the basis in the associated
            note.
        spdxPackage:
          $ref: '#/components/schemas/PackageInfoOccurrence'
          description: Describes a specific SPDX Package.
        spdxFile:
          description: Describes a specific SPDX File.
          $ref: '#/components/schemas/FileOccurrence'
        sbom:
          description: Describes a specific software bill of materials document.
          $ref: '#/components/schemas/DocumentOccurrence'
        installation:
          $ref: '#/components/schemas/GrafeasV1beta1PackageDetails'
          description: Describes the installation of a package on the linked resource.
        kind:
          description: >-
            Output only. This explicitly denotes which of the occurrence details
            are specified. This field can be used as a filter in list requests.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - INTOTO
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an in-toto link.
            - This represents a software bill of materials.
            - This represents an SPDX Package.
            - This represents an SPDX File.
            - This represents an SPDX Relationship.
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          type: string
        deployment:
          $ref: '#/components/schemas/GrafeasV1beta1DeploymentDetails'
          description: Describes the deployment of an artifact on a runtime.
        name:
          description: >-
            Output only. The name of the occurrence in the form of
            `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
          type: string
        spdxRelationship:
          description: Describes a specific SPDX Relationship.
          $ref: '#/components/schemas/RelationshipOccurrence'
        build:
          $ref: '#/components/schemas/GrafeasV1beta1BuildDetails'
          description: Describes a verifiable build.
      type: object
    Distribution:
      id: Distribution
      description: >-
        This represents a particular channel of distribution for a given
        package. E.g., Debian's jessie-backports dpkg mirror.
      properties:
        architecture:
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          description: >-
            The CPU architecture for which packages in this distribution channel
            were built.
        cpeUri:
          description: >-
            Required. The cpe_uri in [CPE
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package.
          type: string
        latestVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            The latest available version of this package in this distribution
            channel.
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
        description:
          description: The distribution channel-specific description of this package.
          type: string
        maintainer:
          description: A freeform string denoting the maintainer of this package.
          type: string
      type: object
    ListNotesResponse:
      properties:
        nextPageToken:
          type: string
          description: >-
            The next pagination token in the list response. It should be used as
            `page_token` for the following request. An empty value means no more
            results.
        notes:
          description: The notes requested.
          items:
            $ref: '#/components/schemas/Note'
          type: array
      description: Response for listing notes.
      id: ListNotesResponse
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact:
      properties:
        version:
          type: string
          description: >-
            Maven `version` value used when uploading the artifact to Artifact
            Registry.
        repository:
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the
            workspace specified by path will be uploaded to Artifact Registry
            with this location as a prefix.
          type: string
        path:
          type: string
          description: >-
            Path to an artifact in the build's workspace to be uploaded to
            Artifact Registry. This can be either an absolute path, e.g.
            /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path
            from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
        groupId:
          description: >-
            Maven `groupId` value used when uploading the artifact to Artifact
            Registry.
          type: string
        artifactId:
          description: >-
            Maven `artifactId` value used when uploading the artifact to
            Artifact Registry.
          type: string
      type: object
      description: >-
        A Maven artifact to upload to Artifact Registry upon successful
        completion of all build steps.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
    RelationshipNote:
      type: object
      properties:
        type:
          enum:
            - RELATIONSHIP_TYPE_UNSPECIFIED
            - DESCRIBES
            - DESCRIBED_BY
            - CONTAINS
            - CONTAINED_BY
            - DEPENDS_ON
            - DEPENDENCY_OF
            - DEPENDENCY_MANIFEST_OF
            - BUILD_DEPENDENCY_OF
            - DEV_DEPENDENCY_OF
            - OPTIONAL_DEPENDENCY_OF
            - PROVIDED_DEPENDENCY_OF
            - TEST_DEPENDENCY_OF
            - RUNTIME_DEPENDENCY_OF
            - EXAMPLE_OF
            - GENERATES
            - GENERATED_FROM
            - ANCESTOR_OF
            - DESCENDANT_OF
            - VARIANT_OF
            - DISTRIBUTION_ARTIFACT
            - PATCH_FOR
            - PATCH_APPLIED
            - COPY_OF
            - FILE_ADDED
            - FILE_DELETED
            - FILE_MODIFIED
            - EXPANDED_FROM_ARCHIVE
            - DYNAMIC_LINK
            - STATIC_LINK
            - DATA_FILE_OF
            - TEST_CASE_OF
            - BUILD_TOOL_OF
            - DEV_TOOL_OF
            - TEST_OF
            - TEST_TOOL_OF
            - DOCUMENTATION_OF
            - OPTIONAL_COMPONENT_OF
            - METAFILE_OF
            - PACKAGE_OF
            - AMENDS
            - PREREQUISITE_FOR
            - HAS_PREREQUISITE
            - OTHER
          enumDescriptions:
            - Unspecified
            - Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A
            - Is to be used when SPDXRef-A is described by SPDXREF-Document
            - Is to be used when SPDXRef-A contains SPDXRef-B
            - Is to be used when SPDXRef-A is contained by SPDXRef-B
            - Is to be used when SPDXRef-A depends on SPDXRef-B
            - Is to be used when SPDXRef-A is dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a manifest file that lists a set
              of dependencies for SPDXRef-B
            - Is to be used when SPDXRef-A is a build dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a development dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an optional dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a to be provided dependency of
              SPDXRef-B
            - Is to be used when SPDXRef-A is a test dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a dependency required for the
              execution of SPDXRef-B
            - Is to be used when SPDXRef-A is an example of SPDXRef-B
            - Is to be used when SPDXRef-A generates SPDXRef-B
            - Is to be used when SPDXRef-A was generated from SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an ancestor (same lineage but
              pre-dates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a descendant of (same lineage but
              postdates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a variant of (same lineage but not
              clear which came first) SPDXRef-B
            - >-
              Is to be used when distributing SPDXRef-A requires that SPDXRef-B
              also be distributed
            - >-
              Is to be used when SPDXRef-A is a patch file for (to be applied
              to) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a patch file that has been applied
              to SPDXRef-B
            - Is to be used when SPDXRef-A is an exact copy of SPDXRef-B
            - Is to be used when SPDXRef-A is a file that was added to SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was deleted from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was modified from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is expanded from the archive
              SPDXRef-B
            - Is to be used when SPDXRef-A dynamically links to SPDXRef-B
            - Is to be used when SPDXRef-A statically links to SPDXRef-B
            - Is to be used when SPDXRef-A is a data file used in SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a test case used in testing
              SPDXRef-B
            - Is to be used when SPDXRef-A is used to build SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a development tool for
              SPDXRef-B
            - Is to be used when SPDXRef-A is used for testing SPDXRef-B
            - Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B
            - Is to be used when SPDXRef-A provides documentation of SPDXRef-B
            - Is to be used when SPDXRef-A is an optional component of SPDXRef-B
            - Is to be used when SPDXRef-A is a metafile of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a package as part of
              SPDXRef-B
            - >-
              Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX
              information in SPDXRef-B
            - Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B
            - Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B
            - >-
              Is to be used for a relationship which has not been defined in the
              formal SPDX specification. A description of the relationship
              should be included in the Relationship comments field
          type: string
          description: The type of relationship between the source and target SPDX elements
      id: RelationshipNote
      description: >-
        RelationshipNote represents an SPDX Relationship section:
        https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
    Build:
      id: Build
      type: object
      description: >-
        Note holding the version of the provider's builder and the signature of
        the provenance message in the build details occurrence.
      properties:
        builderVersion:
          type: string
          description: >-
            Required. Immutable. Version of the builder which produced this
            build.
        signature:
          description: >-
            Signature of the build in occurrences pointing to this build note
            containing build details.
          $ref: '#/components/schemas/BuildSignature'
    SourceContext:
      id: SourceContext
      type: object
      properties:
        gerrit:
          description: A SourceContext referring to a Gerrit project.
          $ref: '#/components/schemas/GerritSourceContext'
        cloudRepo:
          description: >-
            A SourceContext referring to a revision in a Google Cloud Source
            Repo.
          $ref: '#/components/schemas/CloudRepoSourceContext'
        git:
          description: >-
            A SourceContext referring to any third party Git repo (e.g.,
            GitHub).
          $ref: '#/components/schemas/GitSourceContext'
        labels:
          description: Labels with user defined metadata.
          additionalProperties:
            type: string
          type: object
      description: >-
        A SourceContext is a reference to a tree of files. A SourceContext
        together with a path point to a unique revision of a single file or
        directory.
    ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes:
      description: >-
        Container message for hashes of byte content of files, used in
        SourceProvenance messages to verify integrity of source input to the
        build.
      properties:
        fileHash:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
          description: Collection of file hashes.
          type: array
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
    ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret:
      description: >-
        Pairs a secret environment variable with a SecretVersion in Secret
        Manager.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
      properties:
        env:
          description: >-
            Environment variable name to associate with the secret. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step.
          type: string
        versionName:
          type: string
          description: >-
            Resource name of the SecretVersion. In format:
            projects/*/secrets/*/versions/*
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource:
      properties:
        object:
          type: string
          description: >-
            Cloud Storage object containing the source. This object must be a
            zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing
            source to build.
        generation:
          format: int64
          type: string
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
        bucket:
          description: >-
            Cloud Storage bucket containing the source (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
      description: Location of the source in an archive file in Cloud Storage.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
    Hash:
      type: object
      id: Hash
      description: Container message for hash values.
      properties:
        type:
          enumDescriptions:
            - Unknown.
            - A SHA-256 hash.
            - >-
              Dirhash of a Go module's source code which is then hex-encoded.
              See b/244466565 and
              https://github.com/in-toto/attestation/pull/108.
            - A SHA-512 hash.
          description: Required. The type of hash that was performed.
          type: string
          enum:
            - HASH_TYPE_UNSPECIFIED
            - SHA256
            - GO_MODULE_H1
            - SHA512
        value:
          format: byte
          description: Required. The hash value.
          type: string
    ListOccurrencesResponse:
      properties:
        nextPageToken:
          type: string
          description: >-
            The next pagination token in the list response. It should be used as
            `page_token` for the following request. An empty value means no more
            results.
        occurrences:
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The occurrences requested.
          type: array
      description: Response for listing occurrences.
      id: ListOccurrencesResponse
      type: object
    Link:
      properties:
        command:
          items:
            type: string
          type: array
          description: >-
            This field contains the full command executed for the step. This can
            also be empty if links are generated for operations that aren't
            directly mapped to a specific command. Each term in the command is
            an independent string in the list. An example of a command in the
            in-toto metadata field is: "command": ["git", "clone",
            "https://github.com/in-toto/demo-project.git"]
        products:
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1beta1IntotoArtifact'
          description: >-
            Products are the supply chain artifacts generated as a result of the
            step. The structure is identical to that of materials.
        byproducts:
          description: >-
            ByProducts are data generated as part of a software supply chain
            step, but are not the actual result of the step.
          $ref: '#/components/schemas/ByProducts'
        environment:
          $ref: '#/components/schemas/Environment'
          description: >-
            This is a field that can be used to capture information about the
            environment. It is suggested for this field to contain information
            that details environment variables, filesystem information, and the
            present working directory. The recommended structure of this field
            is: "environment": { "custom_values": { "variables": "",
            "filesystem": "", "workdir": "", "": "..." } }
        materials:
          description: >-
            Materials are the supply chain artifacts that go into the step and
            are used for the operation performed. The key of the map is the path
            of the artifact and the structure contains the recorded hash
            information. An example is: "materials": [ { "resource_uri":
            "foo/bar", "hashes": { "sha256": "ebebf...", : } } ]
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1beta1IntotoArtifact'
      id: Link
      description: This corresponds to an in-toto link.
      type: object
    Environment:
      type: object
      description: >-
        Defines an object for the environment field in in-toto links. The
        suggested fields are "variables", "filesystem", and "workdir".
      properties:
        customValues:
          additionalProperties:
            type: string
          type: object
      id: Environment
    BatchCreateNotesResponse:
      type: object
      description: Response for creating notes in batch.
      properties:
        notes:
          description: The notes that were created.
          type: array
          items:
            $ref: '#/components/schemas/Note'
      id: BatchCreateNotesResponse
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects:
      properties:
        timing:
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for pushing all artifact
            objects.
        location:
          type: string
          description: >-
            Cloud Storage bucket and optional object path, in the form
            "gs://bucket/path/to/somewhere/". (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Files in the workspace matching any path pattern will be uploaded to
            Cloud Storage with this location as a prefix.
        paths:
          items:
            type: string
          type: array
          description: Path globs used to match files in the build's workspace.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
      description: >-
        Files in the workspace to upload to Cloud Storage upon successful
        completion of all build steps.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
      description: >-
        Artifacts produced by a build that should be uploaded upon successful
        completion of all build steps.
      properties:
        objects:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
          description: >-
            A list of objects to be uploaded to Cloud Storage upon successful
            completion of all build steps. Files in the workspace matching
            specified paths globs will be uploaded to the specified Cloud
            Storage location using the builder service account's credentials.
            The location and generation of the uploaded objects will be stored
            in the Build resource's results field. If any objects fail to be
            pushed, the build is marked FAILURE.
        pythonPackages:
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
          description: >-
            A list of Python packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. The build service account
            credentials will be used to perform the upload. If any objects fail
            to be pushed, the build is marked FAILURE.
        images:
          items:
            type: string
          type: array
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images will be pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the Build resource's results field. If any of the images
            fail to be pushed, the build is marked FAILURE.
        mavenArtifacts:
          type: array
          description: >-
            A list of Maven artifacts to be uploaded to Artifact Registry upon
            successful completion of all build steps. Artifacts in the workspace
            matching specified paths globs will be uploaded to the specified
            Artifact Registry repository using the builder service account's
            credentials. If any artifacts fail to be pushed, the build is marked
            FAILURE.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
        npmPackages:
          description: >-
            A list of npm packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. Npm packages in the
            specified paths will be uploaded to the specified Artifact Registry
            repository using the builder service account's credentials. If any
            packages fail to be pushed, the build is marked FAILURE.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
          type: array
      type: object
    TestIamPermissionsRequest:
      type: object
      properties:
        permissions:
          items:
            type: string
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
      description: Request message for `TestIamPermissions` method.
      id: TestIamPermissionsRequest
    SigningKey:
      description: >-
        This defines the format used to record keys used in the software supply
        chain. An in-toto link is attested using one or more keys defined in the
        in-toto layout. An example of this is: { "key_id":
        "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...",
        "key_type": "rsa", "public_key_value": "-----BEGIN PUBLIC
        KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-pss-sha256" }
        The format for in-toto's key definition can be found in section 4.2 of
        the in-toto specification.
      type: object
      id: SigningKey
      properties:
        publicKeyValue:
          type: string
          description: This field contains the actual public key.
        keyScheme:
          type: string
          description: >-
            This field contains the corresponding signature scheme. Eg:
            "rsassa-pss-sha256".
        keyId:
          type: string
          description: key_id is an identifier for the signing key.
        keyType:
          description: >-
            This field identifies the specific signing method. Eg: "rsa",
            "ed25519", and "ecdsa".
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption:
      type: object
      description: >-
        Details about how a build should be executed on a `WorkerPool`. See
        [running builds in a private
        pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
        for more information.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
      properties:
        name:
          description: >-
            The `WorkerPool` resource to execute the build on. You must have
            `cloudbuild.workerpools.use` on the project hosting the WorkerPool.
            Format
            projects/{project}/locations/{location}/workerPools/{workerPoolId}
          type: string
    GrafeasV1beta1BuildDetails:
      type: object
      id: GrafeasV1beta1BuildDetails
      description: Details of a build occurrence.
      properties:
        provenance:
          $ref: '#/components/schemas/BuildProvenance'
          description: Required. The actual provenance for the build.
        provenanceBytes:
          type: string
          description: >-
            Serialized JSON representation of the provenance, used in generating
            the build signature in the corresponding build note. After verifying
            the signature, `provenance_bytes` can be unmarshalled and compared
            to the provenance to confirm that it is unchanged. A base64-encoded
            string representation of the provenance bytes is used for the
            signature in order to interoperate with openssl which expects this
            format for signature verification. The serialized form is captured
            both to avoid ambiguity in how the provenance is marshalled to json
            as well to prevent incompatibilities with future changes.
    GrafeasV1beta1ImageDetails:
      id: GrafeasV1beta1ImageDetails
      type: object
      description: Details of an image occurrence.
      properties:
        derivedImage:
          description: Required. Immutable. The child image derived from the base image.
          $ref: '#/components/schemas/Derived'
    Deployable:
      properties:
        resourceUri:
          items:
            type: string
          type: array
          description: Required. Resource URI for the artifact being deployed.
      description: An artifact that can be deployed in some runtime.
      id: Deployable
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secret:
      properties:
        secretEnv:
          type: object
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
          additionalProperties:
            format: byte
            type: string
        kmsKeyName:
          description: Cloud KMS key name to use to decrypt these envs.
          type: string
      description: >-
        Pairs a set of secret environment variables containing encrypted values
        with the Cloud KMS key to use to decrypt the value. Note: Use
        `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with
        `secret`. For instructions see:
        https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
      type: object
    CVSSv3:
      properties:
        baseScore:
          format: float
          type: number
          description: The base score is a function of the base metric scores.
        exploitabilityScore:
          type: number
          format: float
        availabilityImpact:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        scope:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        attackComplexity:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
          type: string
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
        attackVector:
          type: string
          description: >-
            Base Metrics Represents the intrinsic characteristics of a
            vulnerability that are constant over time and across user
            environments.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
        privilegesRequired:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
        integrityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
        impactScore:
          type: number
          format: float
        userInteraction:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
      id: CVSSv3
      type: object
      description: >-
        Deprecated. Common Vulnerability Scoring System version 3. For details,
        see https://www.first.org/cvss/specification-document
    Volume:
      id: Volume
      type: object
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps in order to persist files across build step execution. Next ID: 3
      properties:
        path:
          description: >-
            Path at which to mount the volume. Paths must be absolute and cannot
            conflict with other volume paths on the same build step or with
            certain reserved volume paths.
          type: string
        name:
          type: string
          description: >-
            Name of the volume to mount. Volume names must be unique per build
            step and must be valid names for Docker volumes. Each named volume
            must be used by at least two build steps.
    PackageInfoNote:
      properties:
        version:
          description: Identify the version of the package
          type: string
        summaryDescription:
          description: A short description of the package
          type: string
        filesLicenseInfo:
          type: array
          items:
            type: string
          description: >-
            Contain the license the SPDX file creator has concluded as governing
            the This field is to contain a list of all licenses found in the
            package. The relationship between licenses (i.e., conjunctive,
            disjunctive) is not specified in this field – it is simply a listing
            of all licenses found
        downloadLocation:
          type: string
          description: >-
            This section identifies the download Universal Resource Locator
            (URL), or a specific location within a version control system (VCS)
            for the package at the time that the SPDX file was created
        attribution:
          type: string
          description: >-
            A place for the SPDX data creator to record, at the package level,
            acknowledgements that may be needed to be communicated in some
            contexts
        supplier:
          type: string
          description: >-
            Identify the actual distribution source for the package/directory
            identified in the SPDX file
        title:
          description: >-
            Identify the full name of the package as given by the Package
            Originator
          type: string
        licenseDeclared:
          $ref: '#/components/schemas/License'
          description: >-
            List the licenses that have been declared by the authors of the
            package
        detailedDescription:
          description: A more detailed description of the package
          type: string
        packageType:
          description: 'The type of package: OS, MAVEN, GO, GO_STDLIB, etc.'
          type: string
        homePage:
          type: string
          description: >-
            Provide a place for the SPDX file creator to record a web site that
            serves as the package's home page
        originator:
          description: >-
            If the package identified in the SPDX file originated from a
            different person or organization than identified as Package
            Supplier, this field identifies from where or whom the package
            originally came
          type: string
        verificationCode:
          type: string
          description: >-
            This field provides an independently reproducible mechanism
            identifying specific contents of a package based on the actual files
            (except the SPDX file itself, if it is included in the package) that
            make up each package and that correlates to the data in this SPDX
            file
        copyright:
          description: >-
            Identify the copyright holders of the package, as well as any dates
            present
          type: string
        analyzed:
          type: boolean
          description: >-
            Indicates whether the file content of this package has been
            available for or subjected to analysis when creating the SPDX
            document
        checksum:
          description: >-
            Provide an independently reproducible mechanism that permits unique
            identification of a specific package that correlates to the data in
            this SPDX file
          type: string
        externalRefs:
          items:
            $ref: '#/components/schemas/ExternalRef'
          description: ExternalRef
          type: array
      id: PackageInfoNote
      type: object
      description: >-
        PackageInfoNote represents an SPDX Package Information section:
        https://spdx.github.io/spdx-spec/3-package-information/
    VulnerabilityOccurrencesSummary:
      type: object
      id: VulnerabilityOccurrencesSummary
      description: >-
        A summary of how many vulnerability occurrences there are per resource
        and severity type.
      properties:
        counts:
          description: >-
            A listing by resource of the number of fixable and total
            vulnerabilities.
          type: array
          items:
            $ref: '#/components/schemas/FixableTotalByDigest'
    VulnerabilityLocation:
      description: The location of the vulnerability.
      id: VulnerabilityLocation
      properties:
        version:
          description: Required. The version of the package being described.
          $ref: '#/components/schemas/Version'
        package:
          type: string
          description: Required. The package being described.
        cpeUri:
          description: >-
            Required. The CPE URI in [cpe
            format](https://cpe.mitre.org/specification/) format. Examples
            include distro or storage location for vulnerable jar.
          type: string
      type: object
    Hint:
      description: >-
        This submessage provides human-readable hints about the purpose of the
        authority. Because the name of a note acts as its resource reference, it
        is important to disambiguate the canonical name of the Note (which might
        be a UUID for security purposes) from "readable" names more suitable for
        debug output. Note that these hints should not be used to look up
        authorities in security sensitive contexts, such as when looking up
        attestations to verify.
      properties:
        humanReadableName:
          description: >-
            Required. The human readable name of this attestation authority, for
            example "qa".
          type: string
      id: Hint
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage:
      type: object
      properties:
        pushTiming:
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for pushing the specified
            image.
        name:
          description: >-
            Name used to push the container image to Google Container Registry,
            as presented to `docker push`.
          type: string
        digest:
          type: string
          description: Docker Registry 2.0 digest.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
      description: An image built by the pipeline.
    Expr:
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      id: Expr
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        description:
          type: string
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
        title:
          type: string
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
    Location:
      description: >-
        An occurrence of a particular package installation found within a
        system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
      properties:
        path:
          description: >-
            The path from which we gathered that this package/version is
            installed.
          type: string
        version:
          $ref: '#/components/schemas/Version'
          description: Deprecated. The version installed at this location.
        cpeUri:
          type: string
          description: >-
            Deprecated. The CPE URI in [CPE
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package.
      id: Location
      type: object
    AnalysisCompleted:
      id: AnalysisCompleted
      properties:
        analysisType:
          type: array
          items:
            type: string
      type: object
      description: >-
        Indicates which analysis completed successfully. Multiple types of
        analysis can be performed on a single resource.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
      properties:
        storageSource:
          description: If provided, get the source from this location in Cloud Storage.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
        gitSource:
          description: If provided, get the source from this Git repository.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
        storageSourceManifest:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
          description: >-
            If provided, get the source from this manifest in Cloud Storage.
            This feature is in Preview; see description
            [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
        repoSource:
          description: >-
            If provided, get the source from this location in a Cloud Source
            Repository.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
      description: Location of the source in a supported storage service.
    Envelope:
      description: >-
        MUST match
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto.
        An authenticated message of arbitrary type.
      properties:
        payloadType:
          type: string
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
        payload:
          type: string
          format: byte
      type: object
      id: Envelope
    Policy:
      id: Policy
      type: object
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      properties:
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          format: byte
          type: string
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          format: int32
          type: integer
        bindings:
          type: array
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          items:
            $ref: '#/components/schemas/Binding'
    Assessment:
      type: object
      id: Assessment
      description: >-
        Assessment provides all information that is related to a single
        vulnerability for this product.
      properties:
        relatedUris:
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: >-
            Holds a list of references associated with this vulnerability item
            and assessment. These uris have additional information about the
            vulnerability and the assessment itself. E.g. Link to a document
            which details how this assessment concluded the state of this
            vulnerability.
        shortDescription:
          type: string
          description: A one sentence description of this Vex.
        impacts:
          description: >-
            Contains information about the impact of this vulnerability, this
            will change with time.
          type: array
          items:
            type: string
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          description: Provides the state of this Vulnerability assessment.
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - >-
              It is not known yet whether these versions are or are not affected
              by the vulnerability. However, it is still under investigation.
        justification:
          $ref: '#/components/schemas/Justification'
          description: >-
            Justification provides the justification when the state of the
            assessment if NOT_AFFECTED.
        remediations:
          type: array
          description: >-
            Specifies details on how to handle (and presumably, fix) a
            vulnerability.
          items:
            $ref: '#/components/schemas/Remediation'
        longDescription:
          type: string
          description: A detailed description of this Vex.
        cve:
          type: string
          description: >-
            Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
            tracking number for the vulnerability.
    ArtifactRule:
      id: ArtifactRule
      type: object
      properties:
        artifactRule:
          items:
            type: string
          type: array
      description: Defines an object to declare an in-toto artifact rule
    ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret:
      description: >-
        Pairs a set of secret environment variables mapped to encrypted values
        with the Cloud KMS key to use to decrypt the value.
      properties:
        envMap:
          type: object
          additionalProperties:
            format: byte
            type: string
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
        kmsKeyName:
          type: string
          description: >-
            Resource name of Cloud KMS crypto key to decrypt the encrypted
            value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets:
      description: Secrets and secret environment variables.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
      properties:
        secretManager:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
          type: array
          description: >-
            Secrets in Secret Manager and associated secret environment
            variable.
        inline:
          description: >-
            Secrets encrypted with KMS key and the associated secret environment
            variable.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
    Subject:
      properties:
        name:
          type: string
          description: >-
            Identifier to distinguish this artifact from others within the
            subject.
        digest:
          additionalProperties:
            type: string
          type: object
          description: >-
            `"": ""` Algorithms can be e.g. sha256, sha512 See
            https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
      id: Subject
      description: >-
        Set of software artifacts that the attestation applies to. Each element
        represents a single software artifact.
      type: object
    Package:
      id: Package
      description: Package represents a particular package version.
      properties:
        digest:
          description: >-
            Hash value, typically a file digest, that allows unique
            identification a specific package.
          type: array
          items:
            $ref: '#/components/schemas/Digest'
        distribution:
          description: The various channels by which a package is distributed.
          items:
            $ref: '#/components/schemas/Distribution'
          type: array
        version:
          description: The version of the package.
          $ref: '#/components/schemas/Version'
        url:
          description: The homepage for this package.
          type: string
        cpeUri:
          description: >-
            The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)
            denoting the package manager version distributing a package. The
            cpe_uri will be blank for language packages.
          type: string
        maintainer:
          type: string
          description: A freeform text denoting the maintainer of this package.
        packageType:
          description: >-
            The type of package; whether native or non native (e.g., ruby gems,
            node.js packages, etc.).
          type: string
        description:
          type: string
          description: The description of this package.
        architecture:
          description: >-
            The CPU architecture for which packages in this distribution channel
            were built. Architecture will be blank for language packages.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          type: string
        name:
          description: Required. Immutable. The name of the package.
          type: string
        license:
          $ref: '#/components/schemas/License'
          description: Licenses that have been declared by the authors of the package.
      type: object
    TimeSpan:
      id: TimeSpan
      properties:
        startTime:
          format: google-datetime
          description: Start of time span.
          type: string
        endTime:
          description: End of time span.
          type: string
          format: google-datetime
      type: object
      description: 'Start and end times for a build execution phase. Next ID: 3'
    Artifact:
      type: object
      id: Artifact
      properties:
        id:
          description: >-
            Artifact ID, if any; for container images, this will be a URL by
            digest like `gcr.io/projectID/imagename@sha256:123456`.
          type: string
        names:
          type: array
          description: >-
            Related artifact names. This may be the path to a binary or jar
            file, or in the case of a container build, the name used to push the
            container image to Google Container Registry, as presented to
            `docker push`. Note that a single Artifact ID can have multiple
            names, for example if two tags are applied to one image.
          items:
            type: string
        checksum:
          description: >-
            Hash or checksum value of a binary, or Docker Registry 2.0 digest of
            a container.
          type: string
      description: Artifact describes a build product.
    ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan:
      properties:
        endTime:
          format: google-datetime
          description: End of time span.
          type: string
        startTime:
          format: google-datetime
          description: Start of time span.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
      type: object
      description: Start and end times for a build execution phase.
    Digest:
      type: object
      description: Digest information.
      id: Digest
      properties:
        algo:
          description: '`SHA1`, `SHA512` etc.'
          type: string
        digestBytes:
          format: byte
          type: string
          description: Value of the digest.
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest:
      properties:
        object:
          type: string
          description: >-
            Cloud Storage object containing the source manifest. This object
            must be a JSON file.
        generation:
          type: string
          format: int64
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
        bucket:
          type: string
          description: >-
            Cloud Storage bucket containing the source manifest (see [Bucket
            Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
      description: >-
        Location of the source manifest in Cloud Storage. This feature is in
        Preview; see description
        [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
    PackageIssue:
      type: object
      properties:
        affectedLocation:
          $ref: '#/components/schemas/VulnerabilityLocation'
          description: Required. The location of the vulnerability.
        packageType:
          description: The type of package (e.g. OS, MAVEN, GO).
          type: string
        severityName:
          type: string
          description: >-
            Deprecated, use Details.effective_severity instead The severity
            (e.g., distro assigned severity) for this vulnerability.
        fixedLocation:
          $ref: '#/components/schemas/VulnerabilityLocation'
          description: The location of the available fix for vulnerability.
        effectiveSeverity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: >-
            Output only. The distro or language system assigned severity for
            this vulnerability when that is available and note provider assigned
            severity when it is not available.
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          readOnly: true
      id: PackageIssue
      description: >-
        This message wraps a location affected by a vulnerability and its
        associated fix (if one is available).
    FileNote:
      id: FileNote
      properties:
        fileType:
          enumDescriptions:
            - Unspecified
            - The file is human readable source code (.c, .html, etc.)
            - >-
              The file is a compiled object, target image or binary executable
              (.o, .a, etc.)
            - The file represents an archive (.tar, .jar, etc.)
            - >-
              The file is associated with a specific application type (MIME type
              of application/*)
            - >-
              The file is associated with an audio file (MIME type of audio/* ,
              e.g. .mp3)
            - >-
              The file is associated with an picture image file (MIME type of
              image/*, e.g., .jpg, .gif)
            - The file is human readable text file (MIME type of text/*)
            - >-
              The file is associated with a video file type (MIME type of
              video/*)
            - The file serves as documentation
            - The file is an SPDX document
            - >-
              The file doesn't fit into the above categories (generated
              artifacts, data files, etc.)
          enum:
            - FILE_TYPE_UNSPECIFIED
            - SOURCE
            - BINARY
            - ARCHIVE
            - APPLICATION
            - AUDIO
            - IMAGE
            - TEXT
            - VIDEO
            - DOCUMENTATION
            - SPDX
            - OTHER
          description: This field provides information about the type of file identified
          type: string
        title:
          type: string
          description: >-
            Identify the full path and filename that corresponds to the file
            information in this section
        checksum:
          items:
            type: string
          type: array
          description: >-
            Provide a unique identifier to match analysis information on each
            specific file in a package
      description: >-
        FileNote represents an SPDX File Information section:
        https://spdx.github.io/spdx-spec/4-file-information/
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      id: GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata
      type: object
      description: >-
        Metadata for all operations used and required for all operations that
        created by Container Analysis Providers
      properties:
        endTime:
          format: google-datetime
          type: string
          description: >-
            Output only. The time that this operation was marked completed or
            failed.
        createTime:
          description: Output only. The time this operation was created.
          type: string
          format: google-datetime
    ContaineranalysisGoogleDevtoolsCloudbuildV1Hash:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
      properties:
        value:
          format: byte
          type: string
          description: The hash value.
        type:
          description: The type of hash that was performed.
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
            - Use a sha512 hash.
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
          type: string
      description: Container message for hash values.
    CVSS:
      description: >-
        Common Vulnerability Scoring System. This message is compatible with
        CVSS v2 and v3. For CVSS v2 details, see
        https://www.first.org/cvss/v2/guide CVSS v2 calculator:
        https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3
        details, see https://www.first.org/cvss/specification-document CVSS v3
        calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
      id: CVSS
      properties:
        availabilityImpact:
          description: Defined in CVSS v3, CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
        attackComplexity:
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
          description: Defined in CVSS v3, CVSS v2
          type: string
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
        attackVector:
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
          type: string
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          description: >-
            Base Metrics Represents the intrinsic characteristics of a
            vulnerability that are constant over time and across user
            environments. Defined in CVSS v3, CVSS v2
        exploitabilityScore:
          type: number
          format: float
        authentication:
          description: Defined in CVSS v2
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
          enumDescriptions:
            - Defined in CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
          type: string
        baseScore:
          description: The base score is a function of the base metric scores.
          type: number
          format: float
        impactScore:
          type: number
          format: float
        scope:
          type: string
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          enumDescriptions:
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
          description: Defined in CVSS v3
        userInteraction:
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          enumDescriptions:
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
          description: Defined in CVSS v3
          type: string
        privilegesRequired:
          description: Defined in CVSS v3
          enumDescriptions:
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
          type: string
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
          description: Defined in CVSS v3, CVSS v2
          type: string
        integrityImpact:
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          description: Defined in CVSS v3, CVSS v2
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Volume:
      properties:
        path:
          type: string
          description: >-
            Path at which to mount the volume. Paths must be absolute and cannot
            conflict with other volume paths on the same build step or with
            certain reserved volume paths.
        name:
          description: >-
            Name of the volume to mount. Volume names must be unique per build
            step and must be valid names for Docker volumes. Each named volume
            must be used by at least two build steps.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
      type: object
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps in order to persist files across build step execution.
    Attestation:
      description: >-
        Occurrence that represents a single "attestation". The authenticity of
        an attestation can be verified using the attached signature. If the
        verifier trusts the public key of the signer, then verifying the
        signature is sufficient to establish trust. In this circumstance, the
        authority to which this attestation is attached is primarily useful for
        look-up (how to find this attestation if you already know the authority
        and artifact to be verified) and intent (which authority was this
        attestation intended to sign for).
      type: object
      properties:
        genericSignedAttestation:
          $ref: '#/components/schemas/GenericSignedAttestation'
        pgpSignedAttestation:
          description: A PGP signed attestation.
          $ref: '#/components/schemas/PgpSignedAttestation'
      id: Attestation
    PackagesSummaryResponse:
      properties:
        licensesSummary:
          items:
            $ref: '#/components/schemas/LicensesSummary'
          description: A listing by license name of each of the licenses and their counts.
          type: array
        resourceUrl:
          type: string
          description: >-
            The unique URL of the image or the container for which this summary
            applies.
      description: A summary of the packages found within the given resource.
      id: PackagesSummaryResponse
      type: object
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      type: object
      id: SetIamPolicyRequest
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
    Empty:
      id: Empty
      properties: {}
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
    ListNoteOccurrencesResponse:
      properties:
        occurrences:
          type: array
          description: The occurrences attached to the specified note.
          items:
            $ref: '#/components/schemas/Occurrence'
        nextPageToken:
          type: string
          description: Token to provide to skip to a particular spot in the list.
      id: ListNoteOccurrencesResponse
      type: object
      description: Response for listing occurrences for a note.
    CloudRepoSourceContext:
      properties:
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        repoId:
          description: The ID of the repo.
          $ref: '#/components/schemas/RepoId'
        revisionId:
          description: A revision ID.
          type: string
      type: object
      id: CloudRepoSourceContext
      description: >-
        A CloudRepoSourceContext denotes a particular revision in a Google Cloud
        Source Repo.
    BuildStep:
      id: BuildStep
      type: object
      description: 'A step in the build pipeline. Next ID: 20'
      properties:
        secretEnv:
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key Management Service crypto key. These values must be specified in
            the build's `Secret`.
          items:
            type: string
          type: array
        status:
          type: string
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build has been received and is being queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          description: >-
            Output only. Status of the build step. At this time, build step
            status is only updated on build completion; step status is not
            updated in real-time as the build progresses.
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/Volume'
          description: >-
            List of volumes to mount into the build step. Each volume is created
            as an empty volume prior to execution of the build step. Upon
            completion of the build, volumes and their contents are discarded.
            Using a named volume in only one step is not valid as it is
            indicative of a build request with an incorrect configuration.
        allowExitCodes:
          type: array
          description: >-
            Allow this build step to fail without failing the entire build if
            and only if the exit code is one of the specified codes. If
            allow_failure is also specified, this field will take precedence.
          items:
            type: integer
            format: int32
        name:
          description: >-
            Required. The name of the container image that will run this
            particular build step. If the image is available in the host's
            Docker daemon's cache, it will be run directly. If not, the host
            will attempt to pull the image first, using the builder service
            account's credentials if necessary. The Docker daemon's cache will
            already have the latest versions of all of the officially supported
            build steps
            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
            The Docker daemon will also have cached many of the layers for some
            popular images, like "ubuntu", "debian", but they will be refreshed
            at the time you attempt to use them. If you built an image in a
            previous build step, it will be stored in the host's Docker daemon's
            cache and is available to use as the name for a later build step.
          type: string
        id:
          description: >-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
          type: string
        timeout:
          format: google-duration
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no time limit and will be allowed to continue to run until
            either it completes or the build itself times out.
          type: string
        entrypoint:
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint. If unset, the image's default entrypoint is used.
          type: string
        waitFor:
          description: >-
            The ID(s) of the step(s) that this build step depends on. This build
            step will not start until all the build steps in `wait_for` have
            completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have
            completed successfully.
          type: array
          items:
            type: string
        env:
          items:
            type: string
          description: >-
            A list of environment variable definitions to be used when running a
            step. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
          type: array
        script:
          description: >-
            A shell script to be executed in the step. When script is provided,
            the user cannot specify the entrypoint or args.
          type: string
        pullTiming:
          description: >-
            Output only. Stores timing information for pulling this build step's
            builder image only.
          $ref: '#/components/schemas/TimeSpan'
        allowFailure:
          type: boolean
          description: >-
            Allow this build step to fail without failing the entire build. If
            false, the entire build will fail if this step fails. Otherwise, the
            build will succeed, but this step will still have a failure status.
            Error information will be reported in the failure_detail field.
        exitCode:
          description: Output only. Return code from running the step.
          type: integer
          format: int32
        timing:
          description: >-
            Output only. Stores timing information for executing this build
            step.
          $ref: '#/components/schemas/TimeSpan'
        args:
          items:
            type: string
          type: array
          description: >-
            A list of arguments that will be presented to the step when it is
            started. If the image used to run the step's container has an
            entrypoint, the `args` are used as arguments to that entrypoint. If
            the image does not define an entrypoint, the first element in args
            is used as the entrypoint, and the remainder will be used as
            arguments.
        dir:
          description: >-
            Working directory to use when running this step's container. If this
            value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's
            working directory, in which case the contents of the path may not be
            persisted across build step executions, unless a `volume` for that
            path is specified. If the build specifies a `RepoSource` with `dir`
            and a step with a `dir`, which specifies an absolute path, the
            `RepoSource` `dir` is ignored for the step's execution.
          type: string
    ExternalRef:
      id: ExternalRef
      description: >-
        An External Reference allows a Package to reference an external source
        of additional information, metadata, enumerations, asset identifiers, or
        downloadable content believed to be relevant to the Package
      type: object
      properties:
        locator:
          description: >-
            The unique string with no spaces necessary to access the
            package-specific information, metadata, or content within the target
            location
          type: string
        category:
          description: >-
            An External Reference allows a Package to reference an external
            source of additional information, metadata, enumerations, asset
            identifiers, or downloadable content believed to be relevant to the
            Package
          enumDescriptions:
            - Unspecified
            - Security (e.g. cpe22Type, cpe23Type)
            - Package Manager (e.g. maven-central, npm, nuget, bower, purl)
            - Persistent-Id (e.g. swh)
            - Other
          type: string
          enum:
            - CATEGORY_UNSPECIFIED
            - SECURITY
            - PACKAGE_MANAGER
            - PERSISTENT_ID
            - OTHER
        comment:
          description: >-
            Human-readable information about the purpose and target of the
            reference
          type: string
        type:
          description: Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
          type: string
    Source:
      description: Source describes the location of the source used for the build.
      properties:
        fileHashes:
          description: >-
            Hash(es) of the build source, which can be used to verify that the
            original source integrity was maintained in the build. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (.tar.gz), the FileHash
            will be for the single path to that file.
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          type: object
        artifactStorageSourceUri:
          description: >-
            If provided, the input binary artifacts for the build came from this
            location.
          type: string
        context:
          $ref: '#/components/schemas/SourceContext'
          description: >-
            If provided, the source code used for the build came from this
            location.
        additionalContexts:
          description: >-
            If provided, some of the source code used for the build may be found
            in these locations, in the case where the source repository had
            multiple remotes or submodules. This list will not include the
            context specified in the context field.
          items:
            $ref: '#/components/schemas/SourceContext'
          type: array
      type: object
      id: Source
    ByProducts:
      description: >-
        Defines an object for the byproducts field in in-toto links. The
        suggested fields are "stderr", "stdout", and "return-value".
      type: object
      properties:
        customValues:
          type: object
          additionalProperties:
            type: string
      id: ByProducts
    FileHashes:
      description: >-
        Container message for hashes of byte content of files, used in source
        messages to verify integrity of source input to the build.
      properties:
        fileHash:
          type: array
          items:
            $ref: '#/components/schemas/Hash'
          description: Required. Collection of file hashes.
      id: FileHashes
      type: object
    PackageInfoOccurrence:
      properties:
        licenseConcluded:
          description: >-
            package or alternative values, if the governing license cannot be
            determined
          $ref: '#/components/schemas/License'
        version:
          description: Output only. Identify the version of the package
          readOnly: true
          type: string
        comment:
          type: string
          description: >-
            A place for the SPDX file creator to record any general comments
            about the package being described
        id:
          type: string
          description: >-
            Uniquely identify any element in an SPDX document which may be
            referenced by other elements
        homePage:
          description: >-
            Output only. Provide a place for the SPDX file creator to record a
            web site that serves as the package's home page
          readOnly: true
          type: string
        filename:
          description: >-
            Provide the actual file name of the package, or path of the
            directory being treated as a package
          type: string
        sourceInfo:
          type: string
          description: >-
            Provide a place for the SPDX file creator to record any relevant
            background information or additional comments about the origin of
            the package
        summaryDescription:
          readOnly: true
          description: Output only. A short description of the package
          type: string
        packageType:
          type: string
          readOnly: true
          description: 'Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.'
        title:
          description: >-
            Output only. Identify the full name of the package as given by the
            Package Originator
          type: string
          readOnly: true
      description: >-
        PackageInfoOccurrence represents an SPDX Package Information section:
        https://spdx.github.io/spdx-spec/3-package-information/
      type: object
      id: PackageInfoOccurrence
    FileOccurrence:
      type: object
      properties:
        filesLicenseInfo:
          items:
            type: string
          description: >-
            This field contains the license information actually found in the
            file, if any
          type: array
        comment:
          type: string
          description: >-
            This field provides a place for the SPDX file creator to record any
            general comments about the file
        notice:
          type: string
          description: >-
            This field provides a place for the SPDX file creator to record
            license notices or other such related notices found in the file
        copyright:
          type: string
          description: >-
            Identify the copyright holder of the file, as well as any dates
            present
        attributions:
          description: >-
            This field provides a place for the SPDX data creator to record, at
            the file level, acknowledgements that may be needed to be
            communicated in some contexts
          type: array
          items:
            type: string
        licenseConcluded:
          description: >-
            This field contains the license the SPDX file creator has concluded
            as governing the file or alternative values if the governing license
            cannot be determined
          $ref: '#/components/schemas/License'
        contributors:
          items:
            type: string
          type: array
          description: >-
            This field provides a place for the SPDX file creator to record file
            contributors
        id:
          description: >-
            Uniquely identify any element in an SPDX document which may be
            referenced by other elements
          type: string
      description: >-
        FileOccurrence represents an SPDX File Information section:
        https://spdx.github.io/spdx-spec/4-file-information/
      id: FileOccurrence
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
      properties:
        text:
          type: string
          description: Explanation of the warning generated.
        priority:
          description: The priority for this warning.
          type: string
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
      type: object
      description: A non-fatal problem encountered during the execution of the build.
    BatchCreateOccurrencesResponse:
      type: object
      properties:
        occurrences:
          description: The occurrences that were created.
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
      description: Response for creating occurrences in batch.
      id: BatchCreateOccurrencesResponse
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
      properties:
        comment:
          description: Optional. An optional comment for this manual approval result.
          type: string
        approverAccount:
          type: string
          description: >-
            Output only. Email of the user that called the ApproveBuild API to
            approve or reject a build at the time that the API was called.
          readOnly: true
        approvalTime:
          description: Output only. The time when the approval decision was made.
          readOnly: true
          type: string
          format: google-datetime
        decision:
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
          type: string
          description: Required. The decision of this manual approval.
        url:
          type: string
          description: >-
            Optional. An optional URL tied to this manual approval result. This
            field is essentially the same as comment, except that it will be
            rendered by the UI differently. An example use case is a link to an
            external job that approved this Build.
      description: >-
        ApprovalResult describes the decision and associated metadata of a
        manual approval of a build.
    GrafeasV1beta1IntotoDetails:
      properties:
        signed:
          $ref: '#/components/schemas/Link'
        signatures:
          items:
            $ref: '#/components/schemas/GrafeasV1beta1IntotoSignature'
          type: array
      type: object
      description: >-
        This corresponds to a signed in-toto link - it is made up of one or more
        signatures and the in-toto link itself. This is used for occurrences of
        a Grafeas in-toto note.
      id: GrafeasV1beta1IntotoDetails
    Derived:
      id: Derived
      description: >-
        Derived describes the derived image portion (Occurrence) of the
        DockerImage relationship. This image would be produced from a Dockerfile
        with FROM .
      properties:
        fingerprint:
          description: Required. The fingerprint of the derived image.
          $ref: '#/components/schemas/Fingerprint'
        distance:
          description: >-
            Output only. The number of layers by which this image differs from
            the associated image basis.
          type: integer
          format: int32
        baseResourceUrl:
          type: string
          description: >-
            Output only. This contains the base image URL for the derived image
            occurrence.
        layerInfo:
          items:
            $ref: '#/components/schemas/Layer'
          description: >-
            This contains layer-specific metadata, if populated it has length
            "distance" and is ordered with [distance] being the layer
            immediately following the base image and [1] being the final layer.
          type: array
      type: object
    Publisher:
      id: Publisher
      type: object
      properties:
        issuingAuthority:
          type: string
          description: >-
            Provides information about the authority of the issuing party to
            release the document, in particular, the party's constituency and
            responsibilities or other obligations.
        publisherNamespace:
          description: >-
            The context or namespace. Contains a URL which is under control of
            the issuing party and can be used as a globally unique identifier
            for that issuing party. Example: https://csaf.io
          type: string
        name:
          type: string
          description: 'Name of the publisher. Examples: ''Google'', ''Google Cloud Platform''.'
      description: Publisher contains information about the publisher of this Note.
    Resource:
      id: Resource
      properties:
        name:
          description: >-
            Deprecated, do not use. Use uri instead. The name of the resource.
            For example, the name of a Docker image - "Debian".
          type: string
        contentHash:
          description: >-
            Deprecated, do not use. Use uri instead. The hash of the resource
            content. For example, the Docker digest.
          $ref: '#/components/schemas/Hash'
        uri:
          type: string
          description: >-
            Required. The unique URI of the resource. For example,
            `https://gcr.io/project/image@sha256:foo` for a Docker image.
      type: object
      description: An entity that can have metadata. For example, a Docker image.
    ProjectRepoId:
      properties:
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
        projectId:
          type: string
          description: The ID of the project.
      id: ProjectRepoId
      description: >-
        Selects a repo using a Google Cloud Platform project ID (e.g.,
        winged-cargo-31) and a repo name within that project.
      type: object
    PgpSignedAttestation:
      id: PgpSignedAttestation
      description: >-
        An attestation wrapper with a PGP-compatible signature. This message
        only supports `ATTACHED` signatures, where the payload that is signed is
        included alongside the signature itself in the same file.
      type: object
      properties:
        pgpKeyId:
          description: >-
            The cryptographic fingerprint of the key used to generate the
            signature, as output by, e.g. `gpg --list-keys`. This should be the
            version 4, full 160-bit fingerprint, expressed as a 40 character
            hexadecimal string. See
            https://tools.ietf.org/html/rfc4880#section-12.2 for details.
            Implementations may choose to acknowledge "LONG", "SHORT", or other
            abbreviated key IDs, but only the full fingerprint is guaranteed to
            work. In gpg, the full fingerprint can be retrieved from the `fpr`
            field returned when calling --list-keys with --with-colons. For
            example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \
            --list-keys attester@example.com tru::1:1513631572:0:3:1:5
            pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ```
            Above, the fingerprint is
            `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
          type: string
        contentType:
          description: >-
            Type (for example schema) of the attestation payload that was
            signed. The verifier must ensure that the provided type is one that
            the verifier supports, and that the attestation payload is a valid
            instantiation of that type (for example by validating a JSON
            schema).
          type: string
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - SIMPLE_SIGNING_JSON
          enumDescriptions:
            - '`ContentType` is not set.'
            - >-
              Atomic format attestation signature. See
              https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md
              The payload extracted from `signature` is a JSON blob conforming
              to the linked schema.
        signature:
          type: string
          description: >-
            Required. The raw content of the signature, as output by GNU Privacy
            Guard (GPG) or equivalent. Since this message only supports attached
            signatures, the payload that was signed must be attached. While the
            signature format supported is dependent on the verification
            implementation, currently only ASCII-armored (`--armor` to gpg),
            non-clearsigned (`--sign` rather than `--clearsign` to gpg) are
            supported. Concretely, `gpg --sign --armor --output=signature.gpg
            payload.json` will create the signature content expected in this
            field in `signature.gpg` for the `payload.json` attestation payload.
    Deployment:
      properties:
        address:
          description: Address of the runtime element hosting this deployment.
          type: string
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
        config:
          description: Configuration used to create this deployment.
          type: string
        platform:
          type: string
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          description: Platform hosting this deployment.
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
        undeployTime:
          format: google-datetime
          type: string
          description: End of the lifetime of this deployment.
        deployTime:
          description: Required. Beginning of the lifetime of this deployment.
          format: google-datetime
          type: string
        resourceUri:
          description: >-
            Output only. Resource URI for the artifact being deployed taken from
            the deployable field with the same name.
          items:
            type: string
          type: array
      type: object
      id: Deployment
      description: The period during which some deployable was active in a runtime.
    EnvelopeSignature:
      id: EnvelopeSignature
      type: object
      properties:
        sig:
          type: string
          format: byte
        keyid:
          type: string
    Discovered:
      id: Discovered
      description: Provides information about the analysis status of a discovered resource.
      properties:
        continuousAnalysis:
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          type: string
          description: Whether the resource is continuously analyzed.
        analysisStatus:
          description: The status of discovery for the resource.
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - >-
              Analysis has finished unsuccessfully, the analysis itself is in a
              bad state.
            - The resource is known not to be supported
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          type: string
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
        analysisError:
          items:
            $ref: '#/components/schemas/Status'
          type: array
          description: >-
            Indicates any errors encountered during analysis of a resource.
            There could be 0 or more of these errors.
        analysisStatusError:
          description: >-
            When an error is encountered this will contain a LocalizedMessage
            under details to show to the user. The LocalizedMessage is output
            only and populated by the API.
          $ref: '#/components/schemas/Status'
        lastAnalysisTime:
          description: >-
            The last time continuous analysis was done for this resource.
            Deprecated, do not use.
          type: string
          format: google-datetime
      type: object
    WindowsDetail:
      id: WindowsDetail
      properties:
        fixingKbs:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeBase'
          description: >-
            Required. The names of the KBs which have hotfixes to mitigate this
            vulnerability. Note that there may be multiple hotfixes (and thus
            multiple KBs) that mitigate a given vulnerability. Currently any
            listed kb's presence is considered a fix.
        description:
          description: The description of the vulnerability.
          type: string
        cpeUri:
          description: >-
            Required. The CPE URI in [cpe
            format](https://cpe.mitre.org/specification/) in which the
            vulnerability manifests. Examples include distro or storage location
            for vulnerable jar.
          type: string
        name:
          type: string
          description: Required. The name of the vulnerability.
      type: object
    BuildSignature:
      type: object
      properties:
        publicKey:
          description: >-
            Public key of the builder which can be used to verify that the
            related findings are valid and unchanged. If `key_type` is empty,
            this defaults to PEM encoded public keys. This field may be empty if
            `key_id` references an external key. For Cloud Build based
            signatures, this is a PEM encoded public key. To verify the Cloud
            Build signature, place the contents of this field into a file
            (public.pem). The signature field is base64-decoded into its binary
            representation in signature.bin, and the provenance bytes from
            `BuildDetails` are base64-decoded into a binary representation in
            signed.bin. OpenSSL can then verify the signature: `openssl sha256
            -verify public.pem -signature signature.bin signed.bin`
          type: string
        keyId:
          description: >-
            An ID for the key used to sign. This could be either an ID for the
            key stored in `public_key` (such as the ID or fingerprint for a PGP
            key, or the CN for a cert), or a reference to an external key (such
            as a reference to a key in Cloud Key Management Service).
          type: string
        signature:
          description: >-
            Required. Signature of the related `BuildProvenance`. In JSON, this
            is base-64 encoded.
          type: string
          format: byte
        keyType:
          description: >-
            The type of the key, either stored in `public_key` or referenced in
            `key_id`.
          type: string
          enum:
            - KEY_TYPE_UNSPECIFIED
            - PGP_ASCII_ARMORED
            - PKIX_PEM
          enumDescriptions:
            - '`KeyType` is not set.'
            - '`PGP ASCII Armored` public key.'
            - '`PKIX PEM` public key.'
      id: BuildSignature
      description: Message encapsulating the signature of the verified build.
    GrafeasV1beta1IntotoArtifact:
      properties:
        hashes:
          $ref: '#/components/schemas/ArtifactHashes'
        resourceUri:
          type: string
      id: GrafeasV1beta1IntotoArtifact
      type: object
    GrafeasV1beta1VulnerabilityDetails:
      properties:
        longDescription:
          type: string
          description: Output only. A detailed description of this vulnerability.
        cvssScore:
          type: number
          format: float
          description: >-
            Output only. The CVSS score of this vulnerability. CVSS score is on
            a scale of 0-10 where 0 indicates low severity and 10 indicates high
            severity.
        packageIssue:
          description: >-
            Required. The set of affected locations and their fixes (if
            available) within the associated resource.
          type: array
          items:
            $ref: '#/components/schemas/PackageIssue'
        cvssV3:
          $ref: '#/components/schemas/CVSS'
          description: The cvss v3 score for the vulnerability.
        cvssVersion:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          description: Output only. CVSS version used to populate cvss_score and severity.
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
        shortDescription:
          type: string
          description: Output only. A one sentence description of this vulnerability.
        type:
          type: string
          description: >-
            The type of package; whether native or non native(ruby gems, node.js
            packages etc)
        relatedUrls:
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: Output only. URLs related to this vulnerability.
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
          description: >-
            Output only. The note provider assigned Severity of the
            vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        vexAssessment:
          $ref: '#/components/schemas/VexAssessment'
        cvssV2:
          description: The cvss v2 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        effectiveSeverity:
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: >-
            The distro assigned severity for this vulnerability when it is
            available, and note provider assigned severity when distro has not
            yet assigned a severity for this vulnerability. When there are
            multiple PackageIssues for this vulnerability, they can have
            different effective severities because some might be provided by the
            distro while others are provided by the language ecosystem for a
            language pack. For this reason, it is advised to use the effective
            severity on the PackageIssue level. In the case where multiple
            PackageIssues have differing effective severities, this field should
            be the highest severity for any of the PackageIssues.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
      id: GrafeasV1beta1VulnerabilityDetails
      type: object
      description: Details of a vulnerability Occurrence.
    VulnerabilityAssessmentNote:
      description: >-
        A single VulnerabilityAssessmentNote represents one particular product's
        vulnerability assessment for one CVE.
      id: VulnerabilityAssessmentNote
      properties:
        languageCode:
          type: string
          description: >-
            Identifies the language used by this document, corresponding to IETF
            BCP 47 / RFC 5646.
        assessment:
          description: Represents a vulnerability assessment for the product.
          $ref: '#/components/schemas/Assessment'
        publisher:
          description: Publisher details of this Note.
          $ref: '#/components/schemas/Publisher'
        longDescription:
          description: A detailed description of this Vex.
          type: string
        product:
          $ref: '#/components/schemas/Product'
          description: The product affected by this vex.
        title:
          type: string
          description: The title of the note. E.g. `Vex-Debian-11.4`
        shortDescription:
          type: string
          description: A one sentence description of this Vex.
      type: object
    FixableTotalByDigest:
      type: object
      properties:
        fixableCount:
          type: string
          description: The number of fixable vulnerabilities associated with this resource.
          format: int64
        resource:
          description: The affected resource.
          $ref: '#/components/schemas/Resource'
        totalCount:
          description: The total number of vulnerabilities associated with this resource.
          type: string
          format: int64
        severity:
          description: >-
            The severity for this count. SEVERITY_UNSPECIFIED indicates total
            across all severities.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
      id: FixableTotalByDigest
      description: Per resource and severity counts of fixable and total vulnerabilities.
    BatchCreateOccurrencesRequest:
      id: BatchCreateOccurrencesRequest
      properties:
        occurrences:
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
          description: Required. The occurrences to create. Max allowed length is 1000.
      type: object
      description: Request to create occurrences in batch.
    VexAssessment:
      description: >-
        VexAssessment provides all publisher provided Vex information that is
        related to this vulnerability.
      properties:
        remediations:
          type: array
          description: >-
            Specifies details on how to handle (and presumably, fix) a
            vulnerability.
          items:
            $ref: '#/components/schemas/Remediation'
        cve:
          description: >-
            Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
            tracking number for the vulnerability.
          type: string
        state:
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          type: string
          description: Provides the state of this Vulnerability assessment.
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - >-
              It is not known yet whether these versions are or are not affected
              by the vulnerability. However, it is still under investigation.
        relatedUris:
          type: array
          description: >-
            Holds a list of references associated with this vulnerability item
            and assessment.
          items:
            $ref: '#/components/schemas/RelatedUrl'
        impacts:
          description: >-
            Contains information about the impact of this vulnerability, this
            will change with time.
          items:
            type: string
          type: array
        justification:
          description: >-
            Justification provides the justification when the state of the
            assessment if NOT_AFFECTED.
          $ref: '#/components/schemas/Justification'
        noteName:
          description: >-
            The VulnerabilityAssessment note from which this VexAssessment was
            generated. This will be of the form:
            `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
          type: string
      type: object
      id: VexAssessment
    Justification:
      type: object
      id: Justification
      properties:
        details:
          description: Additional details on why this justification was chosen.
          type: string
        justificationType:
          type: string
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
          description: The justification type for this vulnerability.
          enumDescriptions:
            - JUSTIFICATION_TYPE_UNSPECIFIED.
            - The vulnerable component is not present in the product.
            - >-
              The vulnerable code is not present. Typically this case occurs
              when source code is configured or built in a way that excludes the
              vulnerable code.
            - >-
              The vulnerable code can not be executed. Typically this case
              occurs when the product includes the vulnerable code but does not
              call or use the vulnerable code.
            - >-
              The vulnerable code cannot be controlled by an attacker to exploit
              the vulnerability.
            - >-
              The product includes built-in protections or features that prevent
              exploitation of the vulnerability. These built-in protections
              cannot be subverted by the attacker and cannot be configured or
              disabled by the user. These mitigations completely prevent
              exploitation based on known attack vectors.
      description: >-
        Justification provides the justification when the state of the
        assessment if NOT_AFFECTED.
    BuildProvenance:
      properties:
        startTime:
          description: Time at which execution of the build was started.
          format: google-datetime
          type: string
        creator:
          type: string
          description: >-
            E-mail address of the user who initiated this build. Note that this
            was the user's e-mail address at the time the build was initiated;
            this address may not represent the same end-user for all time.
        logsUri:
          description: URI where any logs for this provenance were written.
          type: string
        projectId:
          type: string
          description: ID of the project.
        sourceProvenance:
          description: Details of the Source input to the build.
          $ref: '#/components/schemas/Source'
        buildOptions:
          type: object
          description: >-
            Special options applied to this build. This is a catch-all field
            where build providers can enter any desired additional details.
          additionalProperties:
            type: string
        endTime:
          format: google-datetime
          type: string
          description: Time at which execution of the build was finished.
        builderVersion:
          description: Version string of the builder at the time this build was executed.
          type: string
        id:
          type: string
          description: Required. Unique identifier of the build.
        createTime:
          type: string
          description: Time at which the build was created.
          format: google-datetime
        commands:
          items:
            $ref: '#/components/schemas/Command'
          type: array
          description: Commands requested by the build.
        builtArtifacts:
          description: Output of the build.
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
        triggerId:
          description: >-
            Trigger identifier if the build was triggered automatically; empty
            if not.
          type: string
      description: >-
        Provenance of a build. Contains all information needed to verify the
        full details about the build from source to completion.
      type: object
      id: BuildProvenance
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig:
      type: object
      description: ApprovalConfig describes configuration for manual approval of a build.
      properties:
        approvalRequired:
          type: boolean
          description: >-
            Whether or not approval is needed. If this is set on a build, it
            will become pending when created, and will need to be explicitly
            approved to start.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
    InToto:
      type: object
      description: >-
        This contains the fields corresponding to the definition of a software
        supply chain step in an in-toto layout. This information goes into a
        Grafeas note.
      properties:
        stepName:
          type: string
          description: This field identifies the name of the step in the supply chain.
        expectedMaterials:
          description: >-
            The following fields contain in-toto artifact rules identifying the
            artifacts that enter this supply chain step, and exit the supply
            chain step, i.e. materials and products of the step.
          type: array
          items:
            $ref: '#/components/schemas/ArtifactRule'
        expectedCommand:
          type: array
          items:
            type: string
          description: This field contains the expected command used to perform the step.
        signingKeys:
          description: >-
            This field contains the public keys that can be used to verify the
            signatures on the step metadata.
          items:
            $ref: '#/components/schemas/SigningKey'
          type: array
        threshold:
          format: int64
          type: string
          description: >-
            This field contains a value that indicates the minimum number of
            keys that need to be used to sign the step's in-toto link.
        expectedProducts:
          type: array
          items:
            $ref: '#/components/schemas/ArtifactRule'
      id: InToto
    Installation:
      type: object
      description: >-
        This represents how a particular software package may be installed on a
        system.
      id: Installation
      properties:
        location:
          description: >-
            All of the places within the filesystem versions of this package
            have been found.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        architecture:
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
          description: >-
            Output only. The CPU architecture for which packages in this
            distribution channel were built. Architecture will be blank for
            language packages.
          readOnly: true
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
        cpeUri:
          readOnly: true
          type: string
          description: >-
            Output only. The cpe_uri in [CPE
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package. The cpe_uri will be blank
            for language packages.
        packageType:
          description: >-
            Output only. The type of package; whether native or non native
            (e.g., ruby gems, node.js packages, etc.).
          readOnly: true
          type: string
        version:
          readOnly: true
          $ref: '#/components/schemas/Version'
          description: Output only. The version of the package.
        name:
          type: string
          description: Required. Output only. The name of the installed package.
          readOnly: true
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
    ArtifactHashes:
      properties:
        sha256:
          type: string
      id: ArtifactHashes
      type: object
      description: Defines a hash object for use in Materials and Products.
    RelationshipOccurrence:
      description: >-
        RelationshipOccurrence represents an SPDX Relationship section:
        https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
      properties:
        type:
          readOnly: true
          description: >-
            Output only. The type of relationship between the source and target
            SPDX elements
          type: string
          enumDescriptions:
            - Unspecified
            - Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A
            - Is to be used when SPDXRef-A is described by SPDXREF-Document
            - Is to be used when SPDXRef-A contains SPDXRef-B
            - Is to be used when SPDXRef-A is contained by SPDXRef-B
            - Is to be used when SPDXRef-A depends on SPDXRef-B
            - Is to be used when SPDXRef-A is dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a manifest file that lists a set
              of dependencies for SPDXRef-B
            - Is to be used when SPDXRef-A is a build dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a development dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an optional dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a to be provided dependency of
              SPDXRef-B
            - Is to be used when SPDXRef-A is a test dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a dependency required for the
              execution of SPDXRef-B
            - Is to be used when SPDXRef-A is an example of SPDXRef-B
            - Is to be used when SPDXRef-A generates SPDXRef-B
            - Is to be used when SPDXRef-A was generated from SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an ancestor (same lineage but
              pre-dates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a descendant of (same lineage but
              postdates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a variant of (same lineage but not
              clear which came first) SPDXRef-B
            - >-
              Is to be used when distributing SPDXRef-A requires that SPDXRef-B
              also be distributed
            - >-
              Is to be used when SPDXRef-A is a patch file for (to be applied
              to) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a patch file that has been applied
              to SPDXRef-B
            - Is to be used when SPDXRef-A is an exact copy of SPDXRef-B
            - Is to be used when SPDXRef-A is a file that was added to SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was deleted from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was modified from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is expanded from the archive
              SPDXRef-B
            - Is to be used when SPDXRef-A dynamically links to SPDXRef-B
            - Is to be used when SPDXRef-A statically links to SPDXRef-B
            - Is to be used when SPDXRef-A is a data file used in SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a test case used in testing
              SPDXRef-B
            - Is to be used when SPDXRef-A is used to build SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a development tool for
              SPDXRef-B
            - Is to be used when SPDXRef-A is used for testing SPDXRef-B
            - Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B
            - Is to be used when SPDXRef-A provides documentation of SPDXRef-B
            - Is to be used when SPDXRef-A is an optional component of SPDXRef-B
            - Is to be used when SPDXRef-A is a metafile of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a package as part of
              SPDXRef-B
            - >-
              Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX
              information in SPDXRef-B
            - Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B
            - Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B
            - >-
              Is to be used for a relationship which has not been defined in the
              formal SPDX specification. A description of the relationship
              should be included in the Relationship comments field
          enum:
            - RELATIONSHIP_TYPE_UNSPECIFIED
            - DESCRIBES
            - DESCRIBED_BY
            - CONTAINS
            - CONTAINED_BY
            - DEPENDS_ON
            - DEPENDENCY_OF
            - DEPENDENCY_MANIFEST_OF
            - BUILD_DEPENDENCY_OF
            - DEV_DEPENDENCY_OF
            - OPTIONAL_DEPENDENCY_OF
            - PROVIDED_DEPENDENCY_OF
            - TEST_DEPENDENCY_OF
            - RUNTIME_DEPENDENCY_OF
            - EXAMPLE_OF
            - GENERATES
            - GENERATED_FROM
            - ANCESTOR_OF
            - DESCENDANT_OF
            - VARIANT_OF
            - DISTRIBUTION_ARTIFACT
            - PATCH_FOR
            - PATCH_APPLIED
            - COPY_OF
            - FILE_ADDED
            - FILE_DELETED
            - FILE_MODIFIED
            - EXPANDED_FROM_ARCHIVE
            - DYNAMIC_LINK
            - STATIC_LINK
            - DATA_FILE_OF
            - TEST_CASE_OF
            - BUILD_TOOL_OF
            - DEV_TOOL_OF
            - TEST_OF
            - TEST_TOOL_OF
            - DOCUMENTATION_OF
            - OPTIONAL_COMPONENT_OF
            - METAFILE_OF
            - PACKAGE_OF
            - AMENDS
            - PREREQUISITE_FOR
            - HAS_PREREQUISITE
            - OTHER
        source:
          type: string
          description: >-
            Also referred to as SPDXRef-A The source SPDX element (file,
            package, etc)
        target:
          type: string
          description: >-
            Also referred to as SPDXRef-B The target SPDC element (file,
            package, etc) In cases where there are "known unknowns", the use of
            the keyword NOASSERTION can be used The keywords NONE can be used to
            indicate that an SPDX element (package/file/snippet) has no other
            elements connected by some relationship to it
        comment:
          description: >-
            A place for the SPDX file creator to record any general comments
            about the relationship
          type: string
      type: object
      id: RelationshipOccurrence
    Note:
      type: object
      properties:
        kind:
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an in-toto link.
            - This represents a software bill of materials.
            - This represents an SPDX Package.
            - This represents an SPDX File.
            - This represents an SPDX Relationship.
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          type: string
          description: >-
            Output only. The type of analysis. This field can be used as a
            filter in list requests.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - INTOTO
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
        longDescription:
          description: A detailed description of this note.
          type: string
        package:
          description: A note describing a package hosted by various package managers.
          $ref: '#/components/schemas/Package'
        build:
          $ref: '#/components/schemas/Build'
          description: A note describing build provenance for a verifiable build.
        createTime:
          format: google-datetime
          type: string
          description: >-
            Output only. The time this note was created. This field can be used
            as a filter in list requests.
        shortDescription:
          description: A one sentence description of this note.
          type: string
        sbomReference:
          description: A note describing an SBOM reference.
          $ref: '#/components/schemas/SBOMReferenceNote'
        name:
          description: >-
            Output only. The name of the note in the form of
            `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
          type: string
        expirationTime:
          format: google-datetime
          description: Time of expiration for this note. Empty if note does not expire.
          type: string
        intoto:
          $ref: '#/components/schemas/InToto'
          description: A note describing an in-toto link.
        spdxRelationship:
          $ref: '#/components/schemas/RelationshipNote'
          description: A note describing an SPDX File.
        deployable:
          description: A note describing something that can be deployed.
          $ref: '#/components/schemas/Deployable'
        spdxFile:
          description: A note describing an SPDX File.
          $ref: '#/components/schemas/FileNote'
        vulnerability:
          $ref: '#/components/schemas/Vulnerability'
          description: A note describing a package vulnerability.
        attestationAuthority:
          $ref: '#/components/schemas/Authority'
          description: A note describing an attestation role.
        updateTime:
          type: string
          format: google-datetime
          description: >-
            Output only. The time this note was last updated. This field can be
            used as a filter in list requests.
        vulnerabilityAssessment:
          description: A note describing a vulnerability assessment.
          $ref: '#/components/schemas/VulnerabilityAssessmentNote'
        relatedUrl:
          description: URLs associated with this note.
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
        relatedNoteNames:
          items:
            type: string
          description: Other notes related to this note.
          type: array
        discovery:
          description: A note describing the initial analysis of a resource.
          $ref: '#/components/schemas/Discovery'
        spdxPackage:
          $ref: '#/components/schemas/PackageInfoNote'
          description: A note describing an SPDX Package.
        sbom:
          description: A note describing a software bill of materials.
          $ref: '#/components/schemas/DocumentNote'
        baseImage:
          description: A note describing a base image.
          $ref: '#/components/schemas/Basis'
      id: Note
      description: A type of analysis that can be done for a resource.
    Detail:
      properties:
        minAffectedVersion:
          description: The min version of the package in which the vulnerability exists.
          $ref: '#/components/schemas/Version'
        source:
          description: The source from which the information in this Detail was obtained.
          type: string
        description:
          description: A vendor-specific description of this note.
          type: string
        isObsolete:
          type: boolean
          description: >-
            Whether this detail is obsolete. Occurrences are expected not to
            point to obsolete details.
        fixedLocation:
          description: The fix for this specific package version.
          $ref: '#/components/schemas/VulnerabilityLocation'
        severityName:
          type: string
          description: 'The severity (eg: distro assigned severity) for this vulnerability.'
        maxAffectedVersion:
          $ref: '#/components/schemas/Version'
          description: The max version of the package in which the vulnerability exists.
        packageType:
          description: >-
            The type of package; whether native or non native(ruby gems, node.js
            packages etc).
          type: string
        cpeUri:
          type: string
          description: >-
            Required. The CPE URI in [cpe
            format](https://cpe.mitre.org/specification/) in which the
            vulnerability manifests. Examples include distro or storage location
            for vulnerable jar.
        vendor:
          type: string
          description: The name of the vendor of the product.
        package:
          description: Required. The name of the package where the vulnerability was found.
          type: string
        sourceUpdateTime:
          type: string
          description: >-
            The time this information was last changed at the source. This is an
            upstream timestamp from the underlying information source - e.g.
            Ubuntu security tracker.
          format: google-datetime
      type: object
      description: >-
        Identifies all appearances of this vulnerability in the package for a
        specific distro/location. For example: glibc in
        cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
      id: Detail
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo:
      properties:
        detail:
          type: string
          description: Explains the failure issue in more detail using hard-coded text.
        type:
          description: The name of the failure.
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
      description: A fatal problem encountered during the execution of the build.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Build:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Build
      description: >-
        A build resource in the Cloud Build API. At a high level, a `Build`
        describes where to find source code, how to build it (for example, the
        builder image to run on the source), and where to store the built
        artifacts. Fields can include the following variables, which will be
        expanded when the build is created: - $PROJECT_ID: the project ID of the
        build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION:
        the location/region of the build. - $BUILD_ID: the autogenerated ID of
        the build. - $REPO_NAME: the source repository name specified by
        RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. -
        $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or
        $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the
        specified branch or tag. - $SHORT_SHA: first 7 characters of
        $REVISION_ID or $COMMIT_SHA.
      properties:
        buildTriggerId:
          description: >-
            Output only. The ID of the `BuildTrigger` that triggered this build,
            if it was triggered automatically.
          readOnly: true
          type: string
        name:
          description: >-
            Output only. The 'Build' name with format:
            `projects/{project}/locations/{location}/builds/{build}`, where
            {build} is a unique identifier generated by the service.
          readOnly: true
          type: string
        options:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
          description: Special options for this build.
        serviceAccount:
          description: >-
            IAM service account whose credentials will be used at build runtime.
            Must be of the format
            `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be
            email address or uniqueId of the service account. 
          type: string
        id:
          type: string
          description: Output only. Unique identifier of the build.
          readOnly: true
        timing:
          description: >-
            Output only. Stores timing information for phases of the build.
            Valid keys are: * BUILD: time to execute all build steps. * PUSH:
            time to push all artifacts including docker images and non docker
            artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time
            to set up build. If the build does not specify source or images,
            these keys will not be included.
          type: object
          readOnly: true
          additionalProperties:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        queueTtl:
          format: google-duration
          description: >-
            TTL in queue for this build. If provided and the build is enqueued
            longer than this value, the build will expire and the build status
            will be `EXPIRED`. The TTL starts ticking from create_time.
          type: string
        createTime:
          readOnly: true
          description: >-
            Output only. Time at which the request to create the build was
            received.
          format: google-datetime
          type: string
        projectId:
          description: Output only. ID of the project.
          readOnly: true
          type: string
        source:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Source
          description: The location of the source files to build.
        steps:
          description: Required. The operations to be performed on the workspace.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
        timeout:
          format: google-duration
          type: string
          description: >-
            Amount of time that this build should be allowed to run, to second
            granularity. If this amount of time elapses, work on the build will
            cease and the build status will be `TIMEOUT`. `timeout` starts
            ticking from `startTime`. Default time is 60 minutes.
        results:
          description: Output only. Results of the build.
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Results
        failureInfo:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
          description: >-
            Output only. Contains information about the build when
            status=FAILURE.
          readOnly: true
        images:
          items:
            type: string
          type: array
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images are pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the `Build` resource's results field. If any of the images
            fail to be pushed, the build status is marked `FAILURE`.
        warnings:
          description: >-
            Output only. Non-fatal problems encountered during the execution of
            the build.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
          readOnly: true
          type: array
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions data for `Build` resource.
          type: object
        finishTime:
          readOnly: true
          format: google-datetime
          type: string
          description: >-
            Output only. Time at which execution of the build was finished. The
            difference between finish_time and start_time is the duration of the
            build's execution.
        artifacts:
          description: >-
            Artifacts produced by the build that should be uploaded upon
            successful completion of all build steps.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
        status:
          type: string
          description: Output only. Status of the build.
          readOnly: true
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
        tags:
          description: Tags for annotation of a `Build`. These are not docker tags.
          items:
            type: string
          type: array
        logUrl:
          type: string
          readOnly: true
          description: Output only. URL to logs for this build in Google Cloud Console.
        sourceProvenance:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
          description: Output only. A permanent fixed identifier for source.
          readOnly: true
        secrets:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
          type: array
          description: >-
            Secrets to decrypt using Cloud Key Management Service. Note: Secret
            Manager is the recommended technique for managing sensitive data
            with Cloud Build. Use `available_secrets` to configure builds to
            access secrets from Secret Manager. For instructions, see:
            https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
        logsBucket:
          type: string
          description: >-
            Cloud Storage bucket where logs should be written (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Logs file names will be of the format
            `${logs_bucket}/log-${build_id}.txt`.
        startTime:
          type: string
          description: Output only. Time at which execution of the build was started.
          format: google-datetime
          readOnly: true
        statusDetail:
          readOnly: true
          description: Output only. Customer-readable message about the current status.
          type: string
        availableSecrets:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
          description: Secrets and secret environment variables.
        approval:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
          readOnly: true
          description: >-
            Output only. Describes this build's approval configuration, status,
            and result.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
      properties:
        fileHashes:
          description: Hash types and values of the Maven Artifact.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
        uri:
          type: string
          description: URI of the uploaded artifact.
        pushTiming:
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
      description: A Maven artifact uploaded using the MavenArtifact directive.
    GrafeasV1beta1IntotoSignature:
      type: object
      properties:
        sig:
          type: string
        keyid:
          type: string
      description: A signature object consists of the KeyID used and the signature itself.
      id: GrafeasV1beta1IntotoSignature
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
      description: >-
        Provenance of the source. Ways to find the original source, or verify
        that some source was used for this build.
      properties:
        fileHashes:
          readOnly: true
          description: >-
            Output only. Hash(es) of the build source, which can be used to
            verify that the original source integrity was maintained in the
            build. Note that `FileHashes` will only be populated if
            `BuildOptions` has requested a `SourceProvenanceHash`. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (`.tar.gz`), the `FileHash`
            will be for the single path to that file.
          additionalProperties:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
          type: object
        resolvedStorageSource:
          description: >-
            A copy of the build's `source.storage_source`, if exists, with any
            generations resolved.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
        resolvedStorageSourceManifest:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
          description: >-
            A copy of the build's `source.storage_source_manifest`, if exists,
            with any revisions resolved. This feature is in Preview.
        resolvedRepoSource:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
          description: >-
            A copy of the build's `source.repo_source`, if exists, with any
            revisions resolved.
    ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource:
      properties:
        branchName:
          description: >-
            Regex matching branches to build. The syntax of the regular
            expressions accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
          type: string
        substitutions:
          additionalProperties:
            type: string
          type: object
          description: >-
            Substitutions to use in a triggered build. Should only be used with
            RunBuildTrigger
        repoName:
          description: Name of the Cloud Source Repository.
          type: string
        projectId:
          description: >-
            ID of the project that owns the Cloud Source Repository. If omitted,
            the project ID requesting the build is assumed.
          type: string
        tagName:
          type: string
          description: >-
            Regex matching tags to build. The syntax of the regular expressions
            accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
        invertRegex:
          description: >-
            Only trigger a build if the revision regex does NOT match the
            revision regex.
          type: boolean
        dir:
          type: string
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
        commitSha:
          type: string
          description: Explicit commit SHA to build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
      type: object
      description: Location of the source in a Google Cloud Source Repository.
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
      type: object
      id: Status
    Authority:
      properties:
        hint:
          description: Hint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/Hint'
      id: Authority
      type: object
      description: >-
        Note kind that represents a logical attestation "role" or "authority".
        For example, an organization might have one `Authority` for "QA" and one
        for "build". This note is intended to act strictly as a grouping
        mechanism for the attached occurrences (Attestations). This grouping
        mechanism also provides a security boundary, since IAM ACLs gate the
        ability for a principle to attach an occurrence to a given note. It also
        provides a single point of lookup to find all attached attestation
        occurrences, even if they don't all live in the same project.
    GerritSourceContext:
      description: A SourceContext referring to a Gerrit project.
      type: object
      id: GerritSourceContext
      properties:
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        revisionId:
          type: string
          description: A revision (commit) ID.
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        gerritProject:
          type: string
          description: >-
            The full project name within the host. Projects may be nested, so
            "project/subproject" is a valid project name. The "repo name" is the
            hostURI/project.
    Version:
      properties:
        kind:
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          type: string
          description: >-
            Required. Distinguishes between sentinel MIN/MAX versions and normal
            versions.
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
        epoch:
          format: int32
          type: integer
          description: Used to correct mistakes in the version numbering scheme.
        revision:
          description: The iteration of the package build from the above version.
          type: string
        inclusive:
          description: >-
            Whether this version is specifying part of an inclusive range.
            Grafeas does not have the capability to specify version ranges;
            instead we have fields that specify start version and end versions.
            At times this is insufficient - we also need to specify whether the
            version is included in the range or is excluded from the range. This
            boolean is expected to be set to true when the version is included
            in a range.
          type: boolean
        name:
          type: string
          description: >-
            Required only when version kind is NORMAL. The main part of the
            version name.
      type: object
      id: Version
      description: Version contains structured information about the version of a package.
    RepoId:
      type: object
      properties:
        projectRepoId:
          description: A combination of a project ID and a repo name.
          $ref: '#/components/schemas/ProjectRepoId'
        uid:
          type: string
          description: A server-assigned, globally unique identifier.
      id: RepoId
      description: A unique identifier for a Cloud Repo.
    RelatedUrl:
      properties:
        label:
          description: Label to describe usage of the URL.
          type: string
        url:
          type: string
          description: Specific URL associated with the resource.
      id: RelatedUrl
      type: object
      description: Metadata for any related URL information.
    LicensesSummary:
      properties:
        license:
          description: >-
            The license of the package. Note that the format of this value is
            not guaranteed. It may be nil, an empty string, a boolean value (A |
            B), a differently formed boolean value (A OR B), etc...
          type: string
        count:
          type: string
          description: The number of fixable vulnerabilities associated with this resource.
          format: int64
      description: Per license count
      id: LicensesSummary
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
      properties:
        uri:
          description: URI of the uploaded artifact.
          type: string
        pushTiming:
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        fileHashes:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
          description: Hash types and values of the Python Artifact.
      description: Artifact uploaded using the PythonPackage directive.
    SbomReferenceIntotoPredicate:
      properties:
        referrerId:
          type: string
          description: The person or system referring this predicate to the consumer.
        digest:
          description: A map of algorithm to digest of the contents of the SBOM.
          additionalProperties:
            type: string
          type: object
        mimeType:
          description: The mime type of the SBOM.
          type: string
        location:
          type: string
          description: The location of the SBOM.
      type: object
      description: A predicate which describes the SBOM being referenced.
      id: SbomReferenceIntotoPredicate
    Discovery:
      description: >-
        A note that indicates a type of analysis a provider would perform. This
        note exists in a provider's project. A `Discovery` occurrence is created
        in a consumer's project at the start of analysis.
      properties:
        analysisKind:
          description: >-
            Required. Immutable. The kind of analysis that is handled by this
            discovery.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an in-toto link.
            - This represents a software bill of materials.
            - This represents an SPDX Package.
            - This represents an SPDX File.
            - This represents an SPDX Relationship.
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          type: string
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - INTOTO
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
      id: Discovery
      type: object
    Remediation:
      id: Remediation
      properties:
        remediationUri:
          description: Contains the URL where to obtain the remediation.
          $ref: '#/components/schemas/RelatedUrl'
        remediationType:
          enumDescriptions:
            - No remediation type specified.
            - A MITIGATION is available.
            - No fix is planned.
            - Not available.
            - A vendor fix is available.
            - A workaround is available.
          description: The type of remediation that can be applied.
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
          type: string
        details:
          description: >-
            Contains a comprehensive human-readable discussion of the
            remediation.
          type: string
      description: >-
        Specifies details on how to handle (and presumably, fix) a
        vulnerability.
      type: object
    Fingerprint:
      description: A set of properties that uniquely identify a given Docker image.
      type: object
      properties:
        v2Name:
          description: >-
            Output only. The name of the image's v2 blobs computed via: [bottom]
            := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the
            name of the final blob is kept.
          type: string
        v1Name:
          description: >-
            Required. The layer ID of the final layer in the Docker image's v1
            representation.
          type: string
        v2Blob:
          items:
            type: string
          type: array
          description: Required. The ordered list of v2 blobs that represent a given image.
      id: Fingerprint
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1beta1/projects/{projectsId}/notes/{notesId}/occurrences:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/alt'
    get:
      description: >-
        Lists occurrences referencing the specified note. Provider projects can
        use this method to get all occurrences across consumer projects
        referencing the specified note.
      operationId: containeranalysis.projects.notes.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/notes/{notesId}:
    parameters: *ref_1
    get:
      description: Gets the specified note.
      operationId: containeranalysis.projects.notes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: select
    patch:
      description: Updates the specified note.
      operationId: containeranalysis.projects.notes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: exec
    delete:
      description: Deletes the specified note.
      operationId: containeranalysis.projects.notes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/notes:batchCreate:
    parameters: *ref_1
    post:
      description: Creates new notes in batch.
      operationId: containeranalysis.projects.notes.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateNotesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/notes/{notesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a note or an occurrence resource.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/notes/{notesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified note or occurrence.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or an occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/notes/{notesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or
        occurrence. Requires list permission on the project (for example,
        `containeranalysis.notes.list`). The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/notes:
    parameters: *ref_1
    get:
      description: Lists notes for the specified project.
      operationId: containeranalysis.projects.notes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: notes
      x-stackQL-verb: select
    post:
      description: Creates a new note.
      operationId: containeranalysis.projects.notes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: noteId
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/resources/{resourcesId}:generatePackagesSummary:
    parameters: *ref_1
    post:
      description: Gets a summary of the packages within a given resource.
      operationId: containeranalysis.projects.resources.generatePackagesSummary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneratePackagesSummaryRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagesSummaryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: resourcesId
          required: true
          schema:
            type: string
      x-stackQL-resource: resources
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a note or an occurrence resource.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/occurrences:batchCreate:
    parameters: *ref_1
    post:
      description: Creates new occurrences in batch.
      operationId: containeranalysis.projects.occurrences.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateOccurrencesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/occurrences/{occurrencesId}:
    parameters: *ref_1
    patch:
      description: Updates the specified occurrence.
      operationId: containeranalysis.projects.occurrences.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: exec
    get:
      description: Gets the specified occurrence.
      operationId: containeranalysis.projects.occurrences.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes the specified occurrence. For example, use this method to delete
        an occurrence when the occurrence is no longer applicable for the given
        resource.
      operationId: containeranalysis.projects.occurrences.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/occurrences:
    parameters: *ref_1
    post:
      description: Creates a new occurrence.
      operationId: containeranalysis.projects.occurrences.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: insert
    get:
      description: Lists occurrences for the specified project.
      operationId: containeranalysis.projects.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified note or occurrence.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or an occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/occurrences:vulnerabilitySummary:
    parameters: *ref_1
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityOccurrencesSummary'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences__vulnerability_summary
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/occurrences/{occurrencesId}/notes:
    parameters: *ref_1
    get:
      description: >-
        Gets the note attached to the specified occurrence. Consumer projects
        can use this method to get a note that belongs to a provider project.
      operationId: containeranalysis.projects.occurrences.getNotes
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences__notes
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or
        occurrence. Requires list permission on the project (for example,
        `containeranalysis.notes.list`). The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
