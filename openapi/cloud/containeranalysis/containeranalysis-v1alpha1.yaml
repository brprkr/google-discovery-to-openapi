openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Container Analysis API
  description: >-
    An implementation of the Grafeas API, which stores, and enables querying and
    retrieval of critical metadata about all of your software artifacts.
  version: v1alpha1
  x-discovery-doc-revision: '20230612'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/container-analysis/api/reference/rest/
servers:
  - url: https://containeranalysis.googleapis.com
components:
  schemas:
    GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId:
      description: >-
        Selects a repo using a Google Cloud Platform project ID (e.g.,
        winged-cargo-31) and a repo name within that project.
      type: object
      properties:
        repoName:
          type: string
          description: The name of the repo. Leave empty for the default repo.
        projectId:
          description: The ID of the project.
          type: string
      id: GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId
    DocumentNote:
      description: >-
        DocumentNote represents an SPDX Document Creation Infromation section:
        https://spdx.github.io/spdx-spec/2-document-creation-information/
      properties:
        dataLicence:
          description: >-
            Compliance with the SPDX specification includes populating the SPDX
            fields therein with data related to such fields ("SPDX-Metadata")
          type: string
        spdxVersion:
          description: >-
            Provide a reference number that can be used to understand how to
            parse and interpret the rest of the file
          type: string
      id: DocumentNote
      type: object
    FileOccurrence:
      properties:
        id:
          description: >-
            Uniquely identify any element in an SPDX document which may be
            referenced by other elements
          type: string
        licenseConcluded:
          description: >-
            This field contains the license the SPDX file creator has concluded
            as governing the file or alternative values if the governing license
            cannot be determined
          $ref: '#/components/schemas/License'
        notice:
          description: >-
            This field provides a place for the SPDX file creator to record
            license notices or other such related notices found in the file
          type: string
        comment:
          description: >-
            This field provides a place for the SPDX file creator to record any
            general comments about the file
          type: string
        contributors:
          description: >-
            This field provides a place for the SPDX file creator to record file
            contributors
          items:
            type: string
          type: array
        filesLicenseInfo:
          items:
            type: string
          type: array
          description: >-
            This field contains the license information actually found in the
            file, if any
        copyright:
          type: string
          description: >-
            Identify the copyright holder of the file, as well as any dates
            present
        attributions:
          description: >-
            This field provides a place for the SPDX data creator to record, at
            the file level, acknowledgements that may be needed to be
            communicated in some contexts
          items:
            type: string
          type: array
      description: >-
        FileOccurrence represents an SPDX File Information section:
        https://spdx.github.io/spdx-spec/4-file-information/
      id: FileOccurrence
      type: object
    License:
      id: License
      description: License information.
      properties:
        comments:
          type: string
          description: Comments
        expression:
          type: string
          description: >-
            Often a single license can be used to represent the licensing terms.
            Sometimes it is necessary to include a choice of one or more
            licenses or some combination of license identifiers. Examples:
            "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later
            WITH Bison-exception-2.2".
      type: object
    Deployable:
      properties:
        resourceUri:
          description: Resource URI for the artifact being deployed.
          items:
            type: string
          type: array
      description: An artifact that can be deployed in some runtime.
      type: object
      id: Deployable
    Subject:
      type: object
      id: Subject
      properties:
        digest:
          description: >-
            "": "" Algorithms can be e.g. sha256, sha512 See
            https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
          additionalProperties:
            type: string
          type: object
        name:
          description: name is the name of the Subject used here
          type: string
      description: Subject refers to the subject of the intoto statement
    InTotoStatement:
      properties:
        slsaProvenanceZeroTwo:
          description: SLSA 0.2 provenance.
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
        provenance:
          description: Generic Grafeas provenance.
          $ref: '#/components/schemas/InTotoProvenance'
        _type:
          type: string
          description: Always "https://in-toto.io/Statement/v0.1".
        predicateType:
          description: '"https://slsa.dev/provenance/v0.1" for SlsaProvenance.'
          type: string
        slsaProvenance:
          description: SLSA 0.1 provenance.
          $ref: '#/components/schemas/SlsaProvenance'
        subject:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
          description: subject is the subjects of the intoto statement
      type: object
      id: InTotoStatement
      description: >-
        Spec defined at
        https://github.com/in-toto/attestation/tree/main/spec#statement The
        serialized InTotoStatement will be stored as Envelope.payload.
        Envelope.payloadType is always "application/vnd.in-toto+json".
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder:
      id: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder
      type: object
      description: >-
        Identifies the entity that executed the recipe, which is trusted to have
        correctly performed the operation and populated this provenance.
      properties:
        id:
          description: URI indicating the builderâ€™s identity.
          type: string
    DSSEAttestationOccurrence:
      description: An occurrence describing an attestation on a resource
      type: object
      properties:
        statement:
          $ref: '#/components/schemas/InTotoStatement'
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: >-
            If doing something security critical, make sure to verify the
            signatures in this metadata.
      id: DSSEAttestationOccurrence
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
      description: >-
        Provenance of the source. Ways to find the original source, or verify
        that some source was used for this build.
      properties:
        fileHashes:
          type: object
          readOnly: true
          description: >-
            Output only. Hash(es) of the build source, which can be used to
            verify that the original source integrity was maintained in the
            build. Note that `FileHashes` will only be populated if
            `BuildOptions` has requested a `SourceProvenanceHash`. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (`.tar.gz`), the `FileHash`
            will be for the single path to that file.
          additionalProperties:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
        resolvedRepoSource:
          description: >-
            A copy of the build's `source.repo_source`, if exists, with any
            revisions resolved.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
        resolvedStorageSource:
          description: >-
            A copy of the build's `source.storage_source`, if exists, with any
            generations resolved.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
        resolvedStorageSourceManifest:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
          description: >-
            A copy of the build's `source.storage_source_manifest`, if exists,
            with any revisions resolved. This feature is in Preview.
      type: object
    SlsaBuilder:
      properties:
        id:
          description: id is the id of the slsa provenance builder
          type: string
      type: object
      id: SlsaBuilder
      description: SlsaBuilder encapsulates the identity of the builder of this provenance.
    StorageSource:
      type: object
      properties:
        bucket:
          type: string
          description: >-
            Google Cloud Storage bucket containing source (see [Bucket Name
            Requirements]
            (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
        generation:
          type: string
          description: Google Cloud Storage generation for the object.
          format: int64
        object:
          type: string
          description: Google Cloud Storage object containing source.
      description: >-
        StorageSource describes the location of the source in an archive file in
        Google Cloud Storage.
      id: StorageSource
    PackageIssue:
      properties:
        packageType:
          description: The type of package (e.g. OS, MAVEN, GO).
          type: string
        severityName:
          type: string
        affectedLocation:
          $ref: '#/components/schemas/VulnerabilityLocation'
          description: The location of the vulnerability.
        effectiveSeverity:
          description: >-
            Output only. The distro or language system assigned severity for
            this vulnerability when that is available and note provider assigned
            severity when distro or language system has not yet assigned a
            severity for this vulnerability.
          readOnly: true
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown Impact
            - Minimal Impact
            - Low Impact
            - Medium Impact
            - High Impact
            - Critical Impact
          type: string
        fixedLocation:
          description: The location of the available fix for vulnerability.
          $ref: '#/components/schemas/VulnerabilityLocation'
      description: >-
        This message wraps a location affected by a vulnerability and its
        associated fix (if one is available).
      type: object
      id: PackageIssue
    Location:
      type: object
      description: >-
        An occurrence of a particular package installation found within a
        system's filesystem. e.g. glibc was found in /var/lib/dpkg/status
      id: Location
      properties:
        path:
          type: string
          description: >-
            The path from which we gathered that this package/version is
            installed.
        version:
          $ref: '#/components/schemas/Version'
          description: Deprecated. The version installed at this location.
        cpeUri:
          description: >-
            Deprecated. The cpe_uri in [cpe
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package.
          type: string
    SBOMReferenceOccurrence:
      properties:
        payload:
          $ref: '#/components/schemas/SbomReferenceIntotoPayload'
          description: The actual payload that contains the SBOM reference data.
        payloadType:
          type: string
          description: >-
            The kind of payload that SbomReferenceIntotoPayload takes. Since
            it's in the intoto format, this value is expected to be
            'application/vnd.in-toto+json'.
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          description: The signatures over the payload.
          type: array
      description: >-
        The occurrence representing an SBOM reference as applied to a specific
        resource. The occurrence follows the DSSE specification. See
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for
        more details.
      type: object
      id: SBOMReferenceOccurrence
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      id: GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata
      properties:
        endTime:
          format: google-datetime
          description: >-
            Output only. The time that this operation was marked completed or
            failed.
          type: string
        createTime:
          format: google-datetime
          description: Output only. The time this operation was created.
          type: string
      type: object
      description: >-
        Metadata for all operations used and required for all operations that
        created by Container Analysis Providers
    GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext:
      type: object
      properties:
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasContext
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        revisionId:
          type: string
          description: A revision (commit) ID.
        gerritProject:
          description: >-
            The full project name within the host. Projects may be nested, so
            "project/subproject" is a valid project name. The "repo name" is the
            hostURI/project.
          type: string
      description: A SourceContext referring to a Gerrit project.
      id: GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext
    SlsaMetadata:
      type: object
      id: SlsaMetadata
      description: Other properties of the build.
      properties:
        completeness:
          description: >-
            Indicates that the builder claims certain fields in this message to
            be complete.
          $ref: '#/components/schemas/SlsaCompleteness'
        buildStartedOn:
          description: The timestamp of when the build started.
          type: string
          format: google-datetime
        reproducible:
          type: boolean
          description: >-
            If true, the builder claims that running the recipe on materials
            will produce bit-for-bit identical output.
        buildInvocationId:
          type: string
          description: >-
            Identifies the particular build invocation, which can be useful for
            finding associated logs or other ad-hoc analysis. The value SHOULD
            be globally unique, per in-toto Provenance spec.
        buildFinishedOn:
          description: The timestamp of when the build completed.
          type: string
          format: google-datetime
    ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan:
      properties:
        endTime:
          type: string
          format: google-datetime
          description: End of time span.
        startTime:
          format: google-datetime
          description: Start of time span.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
      description: Start and end times for a build execution phase.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact:
      properties:
        pushTiming:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
          readOnly: true
        fileHashes:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
          description: Hash types and values of the Maven Artifact.
        uri:
          type: string
          description: URI of the uploaded artifact.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
      type: object
      description: A Maven artifact uploaded using the MavenArtifact directive.
    ComplianceVersion:
      description: >-
        Describes the CIS benchmark version that is applicable to a given OS and
        os version.
      properties:
        cpeUri:
          type: string
          description: >-
            The CPE URI (https://cpe.mitre.org/specification/) this benchmark is
            applicable to.
        version:
          type: string
          description: >-
            The version of the benchmark. This is set to the version of the
            OS-specific CIS document the benchmark is defined in.
        benchmarkDocument:
          description: >-
            The name of the document that defines this benchmark, e.g. "CIS
            Container-Optimized OS".
          type: string
      type: object
      id: ComplianceVersion
    AttestationAuthorityHint:
      type: object
      description: >-
        This submessage provides human-readable hints about the purpose of the
        AttestationAuthority. Because the name of a Note acts as its resource
        reference, it is important to disambiguate the canonical name of the
        Note (which might be a UUID for security purposes) from "readable" names
        more suitable for debug output. Note that these hints should NOT be used
        to look up AttestationAuthorities in security sensitive contexts, such
        as when looking up Attestations to verify.
      id: AttestationAuthorityHint
      properties:
        humanReadableName:
          type: string
          description: >-
            The human readable name of this Attestation Authority, for example
            "qa".
    BuildDetails:
      id: BuildDetails
      type: object
      description: Message encapsulating build provenance details.
      properties:
        intotoStatement:
          description: >-
            In-toto Statement representation as defined in spec. The
            intoto_statement can contain any type of provenance. The serialized
            payload of the statement can be stored and signed in the
            Occurrence's envelope.
          $ref: '#/components/schemas/InTotoStatement'
        provenance:
          $ref: '#/components/schemas/BuildProvenance'
          description: The actual provenance
        intotoProvenance:
          description: >-
            Deprecated. See InTotoStatement for the replacement. In-toto
            Provenance representation as defined in spec.
          $ref: '#/components/schemas/InTotoProvenance'
        provenanceBytes:
          type: string
          description: >-
            Serialized JSON representation of the provenance, used in generating
            the `BuildSignature` in the corresponding Result. After verifying
            the signature, `provenance_bytes` can be unmarshalled and compared
            to the provenance to confirm that it is unchanged. A base64-encoded
            string representation of the provenance bytes is used for the
            signature in order to interoperate with openssl which expects this
            format for signature verification. The serialized form is captured
            both to avoid ambiguity in how the provenance is marshalled to json
            as well to prevent incompatibilities with future changes.
    VulnerabilityLocation:
      description: The location of the vulnerability
      id: VulnerabilityLocation
      type: object
      properties:
        fileLocation:
          description: The file location at which this package was found.
          items:
            $ref: '#/components/schemas/FileLocation'
          type: array
        package:
          type: string
          description: The package being described.
        cpeUri:
          description: >-
            The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)
            format. Examples include distro or storage location for vulnerable
            jar. This field can be used as a filter in list requests.
          type: string
        version:
          $ref: '#/components/schemas/Version'
          description: >-
            The version of the package being described. This field can be used
            as a filter in list requests.
    CreateOperationRequest:
      id: CreateOperationRequest
      description: Request for creating an operation
      type: object
      properties:
        operationId:
          type: string
          description: The ID to use for this operation.
        operation:
          description: The operation to create.
          $ref: '#/components/schemas/Operation'
    FileHashes:
      properties:
        fileHash:
          description: Collection of file hashes.
          items:
            $ref: '#/components/schemas/Hash'
          type: array
      description: >-
        Container message for hashes of byte content of files, used in Source
        messages to verify integrity of source input to the build.
      type: object
      id: FileHashes
    GoogleDevtoolsContaineranalysisV1alpha1RepoId:
      properties:
        uid:
          description: A server-assigned, globally unique identifier.
          type: string
        projectRepoId:
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId
          description: A combination of a project ID and a repo name.
      id: GoogleDevtoolsContaineranalysisV1alpha1RepoId
      type: object
      description: A unique identifier for a Cloud Repo.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Results:
      description: Artifacts created by the build pipeline.
      type: object
      properties:
        npmPackages:
          type: array
          description: Npm packages uploaded to Artifact Registry at the end of the build.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
        mavenArtifacts:
          type: array
          description: >-
            Maven artifacts uploaded to Artifact Registry at the end of the
            build.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
        buildStepImages:
          type: array
          items:
            type: string
          description: >-
            List of build step digests, in the order corresponding to build step
            indices.
        buildStepOutputs:
          type: array
          description: >-
            List of build step outputs, produced by builder images, in the order
            corresponding to build step indices. [Cloud
            Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
            can produce this output by writing to `$BUILDER_OUTPUT/output`. Only
            the first 4KB of data is stored.
          items:
            type: string
            format: byte
        artifactManifest:
          description: >-
            Path to the artifact manifest for non-container artifacts uploaded
            to Cloud Storage. Only populated when artifacts are uploaded to
            Cloud Storage.
          type: string
        artifactTiming:
          description: Time to push all non-container artifacts to Cloud Storage.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        images:
          description: Container images that were built as a part of the build.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
          type: array
        pythonPackages:
          description: >-
            Python artifacts uploaded to Artifact Registry at the end of the
            build.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
        numArtifacts:
          format: int64
          type: string
          description: >-
            Number of non-container artifacts uploaded to Cloud Storage. Only
            populated when artifacts are uploaded to Cloud Storage.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
    SbomReferenceIntotoPredicate:
      description: A predicate which describes the SBOM being referenced.
      type: object
      properties:
        location:
          description: The location of the SBOM.
          type: string
        referrerId:
          description: The person or system referring this predicate to the consumer.
          type: string
        digest:
          description: A map of algorithm to digest of the contents of the SBOM.
          additionalProperties:
            type: string
          type: object
        mimeType:
          description: The mime type of the SBOM.
          type: string
      id: SbomReferenceIntotoPredicate
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
      description: >-
        Python package to upload to Artifact Registry upon successful completion
        of all build steps. A package can encapsulate multiple objects to be
        uploaded to a single repository.
      type: object
      properties:
        paths:
          type: array
          description: >-
            Path globs used to match files in the build's workspace. For Python/
            Twine, this is usually `dist/*`, and sometimes additionally an
            `.asc` file.
          items:
            type: string
        repository:
          type: string
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the
            workspace matching any path pattern will be uploaded to Artifact
            Registry with this location as a prefix.
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial:
      properties:
        uri:
          description: The method by which this artifact was referenced during the build.
          type: string
        digest:
          type: object
          additionalProperties:
            type: string
          description: >-
            Collection of cryptographic digests for the contents of this
            artifact.
      type: object
      description: >-
        The collection of artifacts that influenced the build including sources,
        dependencies, build tools, base images, and so on.
      id: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval:
      type: object
      properties:
        config:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
          readOnly: true
          description: Output only. Configuration for manual approval of this build.
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          description: Output only. The state of this build's approval.
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
          readOnly: true
        result:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
          readOnly: true
          description: Output only. Result of manual approval for this Build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
      description: >-
        BuildApproval describes a build's approval configuration, state, and
        result.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage:
      properties:
        repository:
          type: string
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in
            the workspace specified by path will be zipped and uploaded to
            Artifact Registry with this location as a prefix.
        packagePath:
          description: Path to the package.json. e.g. workspace/path/to/package
          type: string
      description: >-
        Npm package to upload to Artifact Registry upon successful completion of
        all build steps.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
      type: object
    Derived:
      id: Derived
      properties:
        distance:
          description: >-
            Output only. The number of layers by which this image differs from
            the associated image basis.
          type: integer
          format: uint32
        layerInfo:
          description: >-
            This contains layer-specific metadata, if populated it has length
            "distance" and is ordered with [distance] being the layer
            immediately following the base image and [1] being the final layer.
          type: array
          items:
            $ref: '#/components/schemas/Layer'
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
          description: The fingerprint of the derived image.
        baseResourceUrl:
          description: >-
            Output only. This contains the base image URL for the derived image
            occurrence.
          type: string
      description: >-
        Derived describes the derived image portion (Occurrence) of the
        DockerImage relationship. This image would be produced from a Dockerfile
        with FROM .
      type: object
    BuilderConfig:
      properties:
        id:
          type: string
      type: object
      id: BuilderConfig
    VexAssessment:
      properties:
        noteName:
          type: string
          description: >-
            The VulnerabilityAssessment note from which this VexAssessment was
            generated. This will be of the form:
            `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
        cve:
          description: >-
            Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
            tracking number for the vulnerability.
          type: string
        state:
          description: Provides the state of this Vulnerability assessment.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - >-
              It is not known yet whether these versions are or are not affected
              by the vulnerability. However, it is still under investigation.
        justification:
          description: >-
            Justification provides the justification when the state of the
            assessment if NOT_AFFECTED.
          $ref: '#/components/schemas/Justification'
        remediations:
          items:
            $ref: '#/components/schemas/Remediation'
          type: array
          description: >-
            Specifies details on how to handle (and presumably, fix) a
            vulnerability.
        impacts:
          items:
            type: string
          description: >-
            Contains information about the impact of this vulnerability, this
            will change with time.
          type: array
        relatedUris:
          type: array
          items:
            $ref: '#/components/schemas/URI'
          description: >-
            Holds a list of references associated with this vulnerability item
            and assessment. These uris have additional information about the
            vulnerability and the assessment itself. E.g. Link to a document
            which details how this assessment concluded the state of this
            vulnerability.
      id: VexAssessment
      description: >-
        VexAssessment provides all publisher provided Vex information that is
        related to this vulnerability.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Volume:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
      properties:
        name:
          type: string
          description: >-
            Name of the volume to mount. Volume names must be unique per build
            step and must be valid names for Docker volumes. Each named volume
            must be used by at least two build steps.
        path:
          type: string
          description: >-
            Path at which to mount the volume. Paths must be absolute and cannot
            conflict with other volume paths on the same build step or with
            certain reserved volume paths.
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps in order to persist files across build step execution.
      type: object
    ListOccurrencesResponse:
      properties:
        occurrences:
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The occurrences requested.
          type: array
        nextPageToken:
          description: >-
            The next pagination token in the list response. It should be used as
            `page_token` for the following request. An empty value means no more
            results.
          type: string
      type: object
      description: Response including listed active occurrences.
      id: ListOccurrencesResponse
    Artifact:
      id: Artifact
      type: object
      description: Artifact describes a build product.
      properties:
        checksum:
          description: >-
            Hash or checksum value of a binary, or Docker Registry 2.0 digest of
            a container.
          type: string
        name:
          description: >-
            Name of the artifact. This may be the path to a binary or jar file,
            or in the case of a container build, the name used to push the
            container image to Google Container Registry, as presented to
            `docker push`. This field is deprecated in favor of the plural
            `names` field; it continues to exist here to allow existing
            BuildProvenance serialized to json in
            google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes
            to deserialize back into proto.
          type: string
        names:
          description: >-
            Related artifact names. This may be the path to a binary or jar
            file, or in the case of a container build, the name used to push the
            container image to Google Container Registry, as presented to
            `docker push`. Note that a single Artifact ID can have multiple
            names, for example if two tags are applied to one image.
          type: array
          items:
            type: string
        id:
          type: string
          description: >-
            Artifact ID, if any; for container images, this will be a URL by
            digest like gcr.io/projectID/imagename@sha256:123456
    UpgradeOccurrence:
      id: UpgradeOccurrence
      type: object
      description: >-
        An Upgrade Occurrence represents that a specific resource_url could
        install a specific upgrade. This presence is supplied via local sources
        (i.e. it is present in the mirror and the running system has noticed its
        availability).
      properties:
        package:
          description: Required - The package this Upgrade is for.
          type: string
        distribution:
          description: >-
            Metadata about the upgrade for available for the specific operating
            system for the resource_url. This allows efficient filtering, as
            well as making it easier to use the occurrence.
          $ref: '#/components/schemas/UpgradeDistribution'
        parsedVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            Required - The version of the package in a machine + human readable
            form.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact:
      description: >-
        A Maven artifact to upload to Artifact Registry upon successful
        completion of all build steps.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
      properties:
        repository:
          type: string
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the
            workspace specified by path will be uploaded to Artifact Registry
            with this location as a prefix.
        groupId:
          description: >-
            Maven `groupId` value used when uploading the artifact to Artifact
            Registry.
          type: string
        path:
          type: string
          description: >-
            Path to an artifact in the build's workspace to be uploaded to
            Artifact Registry. This can be either an absolute path, e.g.
            /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path
            from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
        version:
          description: >-
            Maven `version` value used when uploading the artifact to Artifact
            Registry.
          type: string
        artifactId:
          description: >-
            Maven `artifactId` value used when uploading the artifact to
            Artifact Registry.
          type: string
    TimeSpan:
      type: object
      description: 'Start and end times for a build execution phase. Next ID: 3'
      properties:
        endTime:
          format: google-datetime
          type: string
          description: End of time span.
        startTime:
          description: Start of time span.
          format: google-datetime
          type: string
      id: TimeSpan
    Resource:
      description: ' Resource is an entity that can have metadata. E.g., a Docker image.'
      type: object
      properties:
        contentHash:
          description: The hash of the resource content. E.g., the Docker digest.
          $ref: '#/components/schemas/Hash'
        name:
          type: string
          description: >-
            The name of the resource. E.g., the name of a Docker image -
            "Debian".
        uri:
          type: string
          description: >-
            The unique URI of the resource. E.g.,
            "https://gcr.io/project/image@sha256:foo" for a Docker image.
      id: Resource
    GetIamPolicyRequest:
      type: object
      properties:
        options:
          description: >-
            OPTIONAL: A `GetPolicyOptions` object for specifying options to
            `GetIamPolicy`.
          $ref: '#/components/schemas/GetPolicyOptions'
      description: Request message for `GetIamPolicy` method.
      id: GetIamPolicyRequest
    Source:
      description: Source describes the location of the source used for the build.
      id: Source
      type: object
      properties:
        storageSource:
          $ref: '#/components/schemas/StorageSource'
          description: >-
            If provided, get the source from this location in Google Cloud
            Storage.
        fileHashes:
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          description: >-
            Hash(es) of the build source, which can be used to verify that the
            original source integrity was maintained in the build. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (.tar.gz), the FileHash
            will be for the single path to that file.
          type: object
        repoSource:
          description: If provided, get source from this location in a Cloud Repo.
          $ref: '#/components/schemas/RepoSource'
        additionalContexts:
          type: array
          description: >-
            If provided, some of the source code used for the build may be found
            in these locations, in the case where the source repository had
            multiple remotes or submodules. This list will not include the
            context specified in the context field.
          items:
            $ref: >-
              #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SourceContext
        artifactStorageSource:
          $ref: '#/components/schemas/StorageSource'
          description: >-
            If provided, the input binary artifacts for the build came from this
            location.
        context:
          description: >-
            If provided, the source code used for the build came from this
            location.
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SourceContext
    Layer:
      properties:
        directive:
          enumDescriptions:
            - Default value for unsupported/missing directive
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/reference/builder/#copy
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
            - https://docs.docker.com/engine/reference/builder/
          enum:
            - DIRECTIVE_UNSPECIFIED
            - MAINTAINER
            - RUN
            - CMD
            - LABEL
            - EXPOSE
            - ENV
            - ADD
            - COPY
            - ENTRYPOINT
            - VOLUME
            - USER
            - WORKDIR
            - ARG
            - ONBUILD
            - STOPSIGNAL
            - HEALTHCHECK
            - SHELL
          description: The recovered Dockerfile directive used to construct this layer.
          type: string
        arguments:
          type: string
          description: The recovered arguments to the Dockerfile directive.
      type: object
      description: Layer holds metadata specific to a layer of a Docker image.
      id: Layer
    ListNotesResponse:
      properties:
        nextPageToken:
          type: string
          description: >-
            The next pagination token in the list response. It should be used as
            page_token for the following request. An empty value means no more
            result.
        notes:
          items:
            $ref: '#/components/schemas/Note'
          description: The occurrences requested
          type: array
      id: ListNotesResponse
      description: Response including listed notes.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
      description: >-
        Location of the source manifest in Cloud Storage. This feature is in
        Preview; see description
        [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      properties:
        bucket:
          type: string
          description: >-
            Cloud Storage bucket containing the source manifest (see [Bucket
            Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
        generation:
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
          format: int64
          type: string
        object:
          description: >-
            Cloud Storage object containing the source manifest. This object
            must be a JSON file.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions:
      properties:
        logStreamingOption:
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Cloud Storage.
            - >-
              Build logs should not be streamed to Cloud Storage; they will be
              written when the build is completed.
          type: string
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
          description: Option to define build log streaming behavior to Cloud Storage.
        pool:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
          description: >-
            Optional. Specification for execution on a `WorkerPool`. See
            [running builds in a private
            pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
            for more information.
        substitutionOption:
          type: string
          description: >-
            Option to specify behavior when there is an error in the
            substitution checks. NOTE: this is always set to ALLOW_LOOSE for
            triggered builds and cannot be overridden in the build configuration
            file.
          enumDescriptions:
            - >-
              Fails the build if error in substitutions checks, like missing a
              substitution in the template or in the map.
            - Do not fail the build if error in substitutions checks.
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
        defaultLogsBucketBehavior:
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          enumDescriptions:
            - Unspecified.
            - >-
              Bucket is located in user-owned project in the same region as the
              build. The builder service account must have access to create and
              write to GCS buckets in the build project.
          description: Optional. Option to specify how default logs buckets are setup.
          type: string
        sourceProvenanceHash:
          items:
            type: string
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              - Use a sha512 hash.
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
          description: Requested hash for SourceProvenance.
          type: array
        volumes:
          type: array
          description: >-
            Global list of volumes to mount for ALL build steps Each volume is
            created as an empty volume prior to starting the build process. Upon
            completion of the build, volumes and their contents are discarded.
            Global volume names and paths cannot conflict with the volumes
            defined a build step. Using a global volume in a build with only one
            step is not valid as it is indicative of a build request with an
            incorrect configuration.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
        diskSizeGb:
          type: string
          description: >-
            Requested disk size for the VM that runs the build. Note that this
            is *NOT* "disk free"; some of the space will be used by the
            operating system and build utilities. Also note that this is the
            minimum disk size that will be allocated for the build -- the build
            may run with a larger disk than requested. At present, the maximum
            disk size is 2000GB; builds that request more than the maximum are
            rejected with an error.
          format: int64
        env:
          description: >-
            A list of global environment variable definitions that will exist
            for all build steps in this build. If a variable is defined in both
            globally and in a build step, the variable will use the build step
            value. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        secretEnv:
          type: array
          items:
            type: string
          description: >-
            A list of global environment variables, which are encrypted using a
            Cloud Key Management Service crypto key. These values must be
            specified in the build's `Secret`. These variables will be available
            to all build steps in this build.
        machineType:
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
          type: string
          description: Compute Engine machine type on which to run the build.
        logging:
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
          type: string
          description: >-
            Option to specify the logging mode, which determines if and where
            build logs are stored.
          enumDescriptions:
            - >-
              The service determines the logging mode. The default is `LEGACY`.
              Do not rely on the default logging behavior as it may change in
              the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - >-
              Build logs are stored in Cloud Logging. Selecting this option will
              not allow [logs
              streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
            - Turn off all logging. No build logs will be captured.
        requestedVerifyOption:
          description: Requested verifiability options.
          enum:
            - NOT_VERIFIED
            - VERIFIED
          type: string
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
        dynamicSubstitutions:
          type: boolean
          description: >-
            Option to specify whether or not to apply bash style string
            operations to the substitutions. NOTE: this is always enabled for
            triggered builds and cannot be overridden in the build configuration
            file.
        workerPool:
          description: This field deprecated; please use `pool.name` instead.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
      type: object
      description: Optional arguments to enable specific features of builds.
    ExternalRef:
      id: ExternalRef
      type: object
      properties:
        type:
          type: string
          description: Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)
        locator:
          type: string
          description: >-
            The unique string with no spaces necessary to access the
            package-specific information, metadata, or content within the target
            location
        category:
          description: >-
            An External Reference allows a Package to reference an external
            source of additional information, metadata, enumerations, asset
            identifiers, or downloadable content believed to be relevant to the
            Package
          enum:
            - CATEGORY_UNSPECIFIED
            - SECURITY
            - PACKAGE_MANAGER
            - PERSISTENT_ID
            - OTHER
          type: string
          enumDescriptions:
            - Unspecified
            - Security (e.g. cpe22Type, cpe23Type)
            - Package Manager (e.g. maven-central, npm, nuget, bower, purl)
            - Persistent-Id (e.g. swh)
            - Other
        comment:
          description: >-
            Human-readable information about the purpose and target of the
            reference
          type: string
      description: >-
        An External Reference allows a Package to reference an external source
        of additional information, metadata, enumerations, asset identifiers, or
        downloadable content believed to be relevant to the Package
    AttestationAuthority:
      description: >-
        Note kind that represents a logical attestation "role" or "authority".
        For example, an organization might have one `AttestationAuthority` for
        "QA" and one for "build". This Note is intended to act strictly as a
        grouping mechanism for the attached Occurrences (Attestations). This
        grouping mechanism also provides a security boundary, since IAM ACLs
        gate the ability for a principle to attach an Occurrence to a given
        Note. It also provides a single point of lookup to find all attached
        Attestation Occurrences, even if they don't all live in the same
        project.
      properties:
        hint:
          $ref: '#/components/schemas/AttestationAuthorityHint'
      type: object
      id: AttestationAuthority
    Recipe:
      description: >-
        Steps taken to build the artifact. For a TaskRun, typically each
        container corresponds to one step in the recipe.
      properties:
        arguments:
          type: array
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          description: >-
            Collection of all external inputs that influenced the build on top
            of recipe.definedInMaterial and recipe.entryPoint. For example, if
            the recipe type were "make", then this might be the flags passed to
            make aside from the target, which is captured in recipe.entryPoint.
        entryPoint:
          description: >-
            String identifying the entry point into the build. This is often a
            path to a configuration file and/or a target label within that file.
            The syntax and meaning are defined by recipe.type. For example, if
            the recipe type were "make", then this would reference the directory
            in which to run make as well as which target to use.
          type: string
        environment:
          description: >-
            Any other builder-controlled inputs necessary for correctly
            evaluating the recipe. Usually only needed for reproducing the build
            but not evaluated as part of policy.
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          type: array
        definedInMaterial:
          format: int64
          type: string
          description: >-
            Index in materials containing the recipe steps that are not implied
            by recipe.type. For example, if the recipe type were "make", then
            this would point to the source containing the Makefile, not the make
            program itself. Set to -1 if the recipe doesn't come from a
            material, as zero is default unset value for int64.
        type:
          type: string
          description: >-
            URI indicating what type of recipe was performed. It determines the
            meaning of recipe.entryPoint, recipe.arguments, recipe.environment,
            and materials.
      id: Recipe
      type: object
    UpdateOperationRequest:
      type: object
      properties:
        operation:
          description: The operation to create.
          $ref: '#/components/schemas/Operation'
        updateMask:
          description: The fields to update.
          type: string
          format: google-fieldmask
      id: UpdateOperationRequest
      description: Request for updating an existing operation
    Assessment:
      description: >-
        Assessment provides all information that is related to a single
        vulnerability for this product.
      id: Assessment
      properties:
        state:
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - >-
              It is not known yet whether these versions are or are not affected
              by the vulnerability. However, it is still under investigation.
          description: Provides the state of this Vulnerability assessment.
          type: string
        shortDescription:
          description: A one sentence description of this Vex.
          type: string
        justification:
          description: >-
            Justification provides the justification when the state of the
            assessment if NOT_AFFECTED.
          $ref: '#/components/schemas/Justification'
        cve:
          type: string
          description: >-
            Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
            tracking number for the vulnerability.
        impacts:
          type: array
          description: >-
            Contains information about the impact of this vulnerability, this
            will change with time.
          items:
            type: string
        relatedUris:
          items:
            $ref: '#/components/schemas/URI'
          type: array
          description: >-
            Holds a list of references associated with this vulnerability item
            and assessment. These uris have additional information about the
            vulnerability and the assessment itself. E.g. Link to a document
            which details how this assessment concluded the state of this
            vulnerability.
        longDescription:
          type: string
          description: A detailed description of this Vex.
        remediations:
          type: array
          description: >-
            Specifies details on how to handle (and presumably, fix) a
            vulnerability.
          items:
            $ref: '#/components/schemas/Remediation'
      type: object
    ListNoteOccurrencesResponse:
      properties:
        nextPageToken:
          type: string
          description: Token to receive the next page of notes.
        occurrences:
          type: array
          description: The occurrences attached to the specified note.
          items:
            $ref: '#/components/schemas/Occurrence'
      id: ListNoteOccurrencesResponse
      type: object
      description: Response including listed occurrences for a note.
    ComplianceOccurrence:
      id: ComplianceOccurrence
      properties:
        nonCompliantFiles:
          items:
            $ref: '#/components/schemas/NonCompliantFile'
          description: A list of files which are violating compliance checks.
          type: array
        nonComplianceReason:
          description: The reason for non compliance of these files.
          type: string
      type: object
      description: >-
        An indication that the compliance checks in the associated
        ComplianceNote were not satisfied for particular resources or a
        specified reason.
    Command:
      id: Command
      description: Command describes a step performed as part of the build pipeline.
      properties:
        env:
          description: Environment variables set before running this Command.
          type: array
          items:
            type: string
        dir:
          description: >-
            Working directory (relative to project source root) used when
            running this Command.
          type: string
        name:
          description: >-
            Name of the command, as presented on the command line, or if the
            command is packaged as a Docker container, as presented to `docker
            pull`.
          type: string
        args:
          description: Command-line arguments used when executing this Command.
          items:
            type: string
          type: array
        waitFor:
          items:
            type: string
          description: The ID(s) of the Command(s) that this Command depends on.
          type: array
        id:
          type: string
          description: >-
            Optional unique identifier for this Command, used in wait_for to
            reference this Command as a dependency.
      type: object
    TestIamPermissionsRequest:
      properties:
        permissions:
          type: array
          items:
            type: string
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
      description: Request message for `TestIamPermissions` method.
      id: TestIamPermissionsRequest
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata:
      type: object
      description: Other properties of the build.
      id: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata
      properties:
        completeness:
          description: >-
            Indicates that the builder claims certain fields in this message to
            be complete.
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness
        buildFinishedOn:
          type: string
          format: google-datetime
          description: The timestamp of when the build completed.
        buildStartedOn:
          description: The timestamp of when the build started.
          format: google-datetime
          type: string
        buildInvocationId:
          description: >-
            Identifies this particular build invocation, which can be useful for
            finding associated logs or other ad-hoc analysis.
          type: string
        reproducible:
          type: boolean
          description: >-
            If true, the builder claims that running invocation on materials
            will produce bit-for-bit identical output.
    BuildSignature:
      type: object
      properties:
        keyId:
          description: >-
            An Id for the key used to sign. This could be either an Id for the
            key stored in `public_key` (such as the Id or fingerprint for a PGP
            key, or the CN for a cert), or a reference to an external key (such
            as a reference to a key in Cloud Key Management Service).
          type: string
        signature:
          description: >-
            Signature of the related `BuildProvenance`, encoded in a base64
            string.
          type: string
        publicKey:
          type: string
          description: >-
            Public key of the builder which can be used to verify that the
            related findings are valid and unchanged. If `key_type` is empty,
            this defaults to PEM encoded public keys. This field may be empty if
            `key_id` references an external key. For Cloud Build based
            signatures, this is a PEM encoded public key. To verify the Cloud
            Build signature, place the contents of this field into a file
            (public.pem). The signature field is base64-decoded into its binary
            representation in signature.bin, and the provenance bytes from
            `BuildDetails` are base64-decoded into a binary representation in
            signed.bin. OpenSSL can then verify the signature: `openssl sha256
            -verify public.pem -signature signature.bin signed.bin`
        keyType:
          type: string
          enum:
            - KEY_TYPE_UNSPECIFIED
            - PGP_ASCII_ARMORED
            - PKIX_PEM
          enumDescriptions:
            - '`KeyType` is not set.'
            - '`PGP ASCII Armored` public key.'
            - '`PKIX PEM` public key.'
          description: >-
            The type of the key, either stored in `public_key` or referenced in
            `key_id`
      description: Message encapsulating the signature of the verified build.
      id: BuildSignature
    ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret:
      type: object
      description: >-
        Pairs a secret environment variable with a SecretVersion in Secret
        Manager.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
      properties:
        versionName:
          description: >-
            Resource name of the SecretVersion. In format:
            projects/*/secrets/*/versions/*
          type: string
        env:
          description: >-
            Environment variable name to associate with the secret. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step.
          type: string
    Note:
      properties:
        updateTime:
          type: string
          format: google-datetime
          description: >-
            Output only. The time this note was last updated. This field can be
            used as a filter in list requests.
        relatedUrl:
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: URLs associated with this note
          type: array
        deployable:
          description: A note describing something that can be deployed.
          $ref: '#/components/schemas/Deployable'
        name:
          type: string
          description: >-
            The name of the note in the form
            "projects/{provider_project_id}/notes/{NOTE_ID}"
        vulnerabilityAssessment:
          $ref: '#/components/schemas/VulnerabilityAssessmentNote'
          description: A note describing a vulnerability assessment.
        spdxPackage:
          description: A note describing an SPDX Package.
          $ref: '#/components/schemas/PackageInfoNote'
        spdxRelationship:
          description: A note describing a relationship between SPDX elements.
          $ref: '#/components/schemas/RelationshipNote'
        expirationTime:
          format: google-datetime
          type: string
          description: Time of expiration for this note, null if note does not expire.
        buildType:
          description: Build provenance type for a verifiable build.
          $ref: '#/components/schemas/BuildType'
        sbomReference:
          description: A note describing a reference to an SBOM.
          $ref: '#/components/schemas/SBOMReferenceNote'
        compliance:
          description: A note describing a compliance check.
          $ref: '#/components/schemas/ComplianceNote'
        createTime:
          description: >-
            Output only. The time this note was created. This field can be used
            as a filter in list requests.
          format: google-datetime
          type: string
        package:
          $ref: '#/components/schemas/Package'
          description: A note describing a package hosted by various package managers.
        shortDescription:
          description: A one sentence description of this `Note`.
          type: string
        discovery:
          $ref: '#/components/schemas/Discovery'
          description: A note describing a provider/analysis type.
        kind:
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
            - COMPLIANCE
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
          enumDescriptions:
            - Unknown
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available software upgrade.
            - >-
              This represents a compliance check that can be applied to a
              resource.
            - This represents a software bill of materials.
            - This represents an SPDX Package.
            - This represents an SPDX File.
            - This represents an SPDX Relationship.
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents a reference to an SBOM.
          description: >-
            Output only. This explicitly denotes which kind of note is
            specified. This field can be used as a filter in list requests.
        vulnerabilityType:
          $ref: '#/components/schemas/VulnerabilityType'
          description: A package vulnerability type of note.
        baseImage:
          $ref: '#/components/schemas/Basis'
          description: A note describing a base image.
        dsseAttestation:
          description: A note describing a dsse attestation note.
          $ref: '#/components/schemas/DSSEAttestationNote'
        spdxFile:
          description: A note describing an SPDX File.
          $ref: '#/components/schemas/FileNote'
        upgrade:
          $ref: '#/components/schemas/UpgradeNote'
          description: A note describing an upgrade.
        attestationAuthority:
          description: A note describing an attestation role.
          $ref: '#/components/schemas/AttestationAuthority'
        longDescription:
          type: string
          description: A detailed description of this `Note`.
        sbom:
          description: A note describing a software bill of materials.
          $ref: '#/components/schemas/DocumentNote'
      type: object
      description: Provides a detailed description of a `Note`.
      id: Note
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
      description: Artifact uploaded using the PythonPackage directive.
      properties:
        fileHashes:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
          description: Hash types and values of the Python Artifact.
        pushTiming:
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
        uri:
          description: URI of the uploaded artifact.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
      type: object
      description: >-
        Details about how a build should be executed on a `WorkerPool`. See
        [running builds in a private
        pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
        for more information.
      properties:
        name:
          type: string
          description: >-
            The `WorkerPool` resource to execute the build on. You must have
            `cloudbuild.workerpools.use` on the project hosting the WorkerPool.
            Format
            projects/{project}/locations/{location}/workerPools/{workerPoolId}
    GoogleDevtoolsContaineranalysisV1alpha1SourceContext:
      description: >-
        A SourceContext is a reference to a tree of files. A SourceContext
        together with a path point to a unique revision of a single file or
        directory.
      properties:
        gerrit:
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext
          description: A SourceContext referring to a Gerrit project.
        git:
          description: >-
            A SourceContext referring to any third party Git repo (e.g.,
            GitHub).
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext
        cloudRepo:
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext
          description: >-
            A SourceContext referring to a revision in a Google Cloud Source
            Repo.
        labels:
          additionalProperties:
            type: string
          type: object
          description: Labels with user defined metadata.
      type: object
      id: GoogleDevtoolsContaineranalysisV1alpha1SourceContext
    SetIamPolicyRequest:
      type: object
      id: SetIamPolicyRequest
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
      description: Request message for `SetIamPolicy` method.
    PackageInfoOccurrence:
      id: PackageInfoOccurrence
      type: object
      properties:
        id:
          description: >-
            Uniquely identify any element in an SPDX document which may be
            referenced by other elements
          type: string
        version:
          readOnly: true
          description: Output only. Identify the version of the package
          type: string
        summaryDescription:
          description: Output only. A short description of the package
          readOnly: true
          type: string
        comment:
          description: >-
            A place for the SPDX file creator to record any general comments
            about the package being described
          type: string
        title:
          description: >-
            Output only. Identify the full name of the package as given by the
            Package Originator
          readOnly: true
          type: string
        packageType:
          type: string
          readOnly: true
          description: 'Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.'
        filename:
          type: string
          description: >-
            Provide the actual file name of the package, or path of the
            directory being treated as a package
        homePage:
          readOnly: true
          type: string
          description: >-
            Output only. Provide a place for the SPDX file creator to record a
            web site that serves as the package's home page
        sourceInfo:
          description: >-
            Provide a place for the SPDX file creator to record any relevant
            background information or additional comments about the origin of
            the package
          type: string
        licenseConcluded:
          description: >-
            package or alternative values, if the governing license cannot be
            determined
          $ref: '#/components/schemas/License'
      description: >-
        PackageInfoOccurrence represents an SPDX Package Information section:
        https://spdx.github.io/spdx-spec/3-package-information/
    Attestation:
      description: >-
        Occurrence that represents a single "attestation". The authenticity of
        an Attestation can be verified using the attached signature. If the
        verifier trusts the public key of the signer, then verifying the
        signature is sufficient to establish trust. In this circumstance, the
        AttestationAuthority to which this Attestation is attached is primarily
        useful for look-up (how to find this Attestation if you already know the
        Authority and artifact to be verified) and intent (which authority was
        this attestation intended to sign for).
      id: Attestation
      properties:
        pgpSignedAttestation:
          $ref: '#/components/schemas/PgpSignedAttestation'
      type: object
    Policy:
      properties:
        etag:
          format: byte
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
        bindings:
          items:
            $ref: '#/components/schemas/Binding'
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
        version:
          format: int32
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
      id: Policy
      type: object
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
    PgpSignedAttestation:
      type: object
      properties:
        pgpKeyId:
          type: string
          description: >-
            The cryptographic fingerprint of the key used to generate the
            signature, as output by, e.g. `gpg --list-keys`. This should be the
            version 4, full 160-bit fingerprint, expressed as a 40 character
            hexadecimal string. See
            https://tools.ietf.org/html/rfc4880#section-12.2 for details.
            Implementations may choose to acknowledge "LONG", "SHORT", or other
            abbreviated key IDs, but only the full fingerprint is guaranteed to
            work. In gpg, the full fingerprint can be retrieved from the `fpr`
            field returned when calling --list-keys with --with-colons. For
            example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \
            --list-keys attester@example.com tru::1:1513631572:0:3:1:5
            pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ```
            Above, the fingerprint is
            `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
        signature:
          description: >-
            The raw content of the signature, as output by GNU Privacy Guard
            (GPG) or equivalent. Since this message only supports attached
            signatures, the payload that was signed must be attached. While the
            signature format supported is dependent on the verification
            implementation, currently only ASCII-armored (`--armor` to gpg),
            non-clearsigned (`--sign` rather than `--clearsign` to gpg) are
            supported. Concretely, `gpg --sign --armor --output=signature.gpg
            payload.json` will create the signature content expected in this
            field in `signature.gpg` for the `payload.json` attestation payload.
          type: string
        contentType:
          enumDescriptions:
            - '`ContentType` is not set.'
            - >-
              Atomic format attestation signature. See
              https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md
              The payload extracted from `signature` is a JSON blob conforming
              to the linked schema.
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - SIMPLE_SIGNING_JSON
          description: >-
            Type (for example schema) of the attestation payload that was
            signed. The verifier must ensure that the provided type is one that
            the verifier supports, and that the attestation payload is a valid
            instantiation of that type (for example by validating a JSON
            schema).
          type: string
      description: >-
        An attestation wrapper with a PGP-compatible signature. This message
        only supports `ATTACHED` signatures, where the payload that is signed is
        included alongside the signature itself in the same file.
      id: PgpSignedAttestation
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
      type: object
      description: Secrets and secret environment variables.
      properties:
        secretManager:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
          type: array
          description: >-
            Secrets in Secret Manager and associated secret environment
            variable.
        inline:
          description: >-
            Secrets encrypted with KMS key and the associated secret environment
            variable.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
          type: array
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
      type: object
      properties:
        mavenArtifacts:
          description: >-
            A list of Maven artifacts to be uploaded to Artifact Registry upon
            successful completion of all build steps. Artifacts in the workspace
            matching specified paths globs will be uploaded to the specified
            Artifact Registry repository using the builder service account's
            credentials. If any artifacts fail to be pushed, the build is marked
            FAILURE.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
        pythonPackages:
          type: array
          description: >-
            A list of Python packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. The build service account
            credentials will be used to perform the upload. If any objects fail
            to be pushed, the build is marked FAILURE.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
        images:
          type: array
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images will be pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the Build resource's results field. If any of the images
            fail to be pushed, the build is marked FAILURE.
          items:
            type: string
        npmPackages:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
          description: >-
            A list of npm packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. Npm packages in the
            specified paths will be uploaded to the specified Artifact Registry
            repository using the builder service account's credentials. If any
            packages fail to be pushed, the build is marked FAILURE.
          type: array
        objects:
          description: >-
            A list of objects to be uploaded to Cloud Storage upon successful
            completion of all build steps. Files in the workspace matching
            specified paths globs will be uploaded to the specified Cloud
            Storage location using the builder service account's credentials.
            The location and generation of the uploaded objects will be stored
            in the Build resource's results field. If any objects fail to be
            pushed, the build is marked FAILURE.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
      description: >-
        Artifacts produced by a build that should be uploaded upon successful
        completion of all build steps.
    NonCompliantFile:
      id: NonCompliantFile
      properties:
        displayCommand:
          description: Command to display the non-compliant files.
          type: string
        path:
          description: >-
            display_command is a single command that can be used to display a
            list of non compliant files. When there is no such command, we can
            also iterate a list of non compliant file using 'path'. Empty if
            `display_command` is set.
          type: string
        reason:
          type: string
          description: Explains why a file is non compliant for a CIS check.
      type: object
      description: Details about files that caused a compliance check to fail.
    SlsaProvenance:
      id: SlsaProvenance
      description: SlsaProvenance is the slsa provenance as defined by the slsa spec.
      properties:
        metadata:
          description: metadata is the metadata of the provenance
          $ref: '#/components/schemas/SlsaMetadata'
        materials:
          type: array
          description: >-
            The collection of artifacts that influenced the build including
            sources, dependencies, build tools, base images, and so on. This is
            considered to be incomplete unless metadata.completeness.materials
            is true. Unset or null is equivalent to empty.
          items:
            $ref: '#/components/schemas/Material'
        recipe:
          description: >-
            Identifies the configuration used for the build. When combined with
            materials, this SHOULD fully describe the build, such that
            re-running this recipe results in bit-for-bit identical output (if
            the build is reproducible).
          $ref: '#/components/schemas/SlsaRecipe'
        builder:
          $ref: '#/components/schemas/SlsaBuilder'
          description: builder is the builder of this provenance
      type: object
    ScanConfig:
      type: object
      properties:
        description:
          type: string
          description: >-
            Output only. A human-readable description of what the `ScanConfig`
            does.
        createTime:
          format: google-datetime
          description: Output only. The time this scan config was created.
          type: string
        name:
          description: >-
            Output only. The name of the ScanConfig in the form
            â€œprojects/{project_id}/scanConfigs/{scan_config_id}".
          type: string
        updateTime:
          format: google-datetime
          description: Output only. The time this scan config was last updated.
          type: string
        enabled:
          type: boolean
          description: Indicates whether the Scan is enabled.
      description: Indicates various scans and whether they are turned on or off.
      id: ScanConfig
    FileNote:
      type: object
      description: >-
        FileNote represents an SPDX File Information section:
        https://spdx.github.io/spdx-spec/4-file-information/
      properties:
        checksum:
          items:
            type: string
          type: array
          description: >-
            Provide a unique identifier to match analysis information on each
            specific file in a package
        fileType:
          enumDescriptions:
            - Unspecified
            - The file is human readable source code (.c, .html, etc.)
            - >-
              The file is a compiled object, target image or binary executable
              (.o, .a, etc.)
            - The file represents an archive (.tar, .jar, etc.)
            - >-
              The file is associated with a specific application type (MIME type
              of application/*)
            - >-
              The file is associated with an audio file (MIME type of audio/* ,
              e.g. .mp3)
            - >-
              The file is associated with an picture image file (MIME type of
              image/*, e.g., .jpg, .gif)
            - The file is human readable text file (MIME type of text/*)
            - >-
              The file is associated with a video file type (MIME type of
              video/*)
            - The file serves as documentation
            - The file is an SPDX document
            - >-
              The file doesn't fit into the above categories (generated
              artifacts, data files, etc.)
          description: This field provides information about the type of file identified
          enum:
            - FILE_TYPE_UNSPECIFIED
            - SOURCE
            - BINARY
            - ARCHIVE
            - APPLICATION
            - AUDIO
            - IMAGE
            - TEXT
            - VIDEO
            - DOCUMENTATION
            - SPDX
            - OTHER
          type: string
        title:
          description: >-
            Identify the full path and filename that corresponds to the file
            information in this section
          type: string
      id: FileNote
    SlsaCompleteness:
      properties:
        environment:
          description: >-
            If true, the builder claims that recipe.environment is claimed to be
            complete.
          type: boolean
        materials:
          description: >-
            If true, the builder claims that materials are complete, usually
            through some controls to prevent network access. Sometimes called
            "hermetic".
          type: boolean
        arguments:
          description: >-
            If true, the builder claims that recipe.arguments is complete,
            meaning that all external inputs are properly captured in the
            recipe.
          type: boolean
      id: SlsaCompleteness
      type: object
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
    CisBenchmark:
      description: A compliance check that is a CIS benchmark.
      type: object
      id: CisBenchmark
      properties:
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown Impact
            - Minimal Impact
            - Low Impact
            - Medium Impact
            - High Impact
            - Critical Impact
          type: string
          description: The severity level of this CIS benchmark check.
        profileLevel:
          format: int32
          type: integer
          description: The profile level of this CIS benchmark check.
    Metadata:
      description: Other properties of the build.
      type: object
      id: Metadata
      properties:
        buildFinishedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build completed.
        reproducible:
          description: >-
            If true, the builder claims that running the recipe on materials
            will produce bit-for-bit identical output.
          type: boolean
        buildInvocationId:
          description: >-
            Identifies the particular build invocation, which can be useful for
            finding associated logs or other ad-hoc analysis. The value SHOULD
            be globally unique, per in-toto Provenance spec.
          type: string
        buildStartedOn:
          type: string
          description: The timestamp of when the build started.
          format: google-datetime
        completeness:
          description: >-
            Indicates that the builder claims certain fields in this message to
            be complete.
          $ref: '#/components/schemas/Completeness'
    AnalysisCompleted:
      description: >-
        Indicates which analysis completed successfully. Multiple types of
        analysis can be performed on a single resource.
      id: AnalysisCompleted
      type: object
      properties:
        analysisType:
          description: type of analysis that were completed on a resource.
          type: array
          items:
            type: string
    Remediation:
      id: Remediation
      type: object
      description: >-
        Specifies details on how to handle (and presumably, fix) a
        vulnerability.
      properties:
        details:
          type: string
          description: >-
            Contains a comprehensive human-readable discussion of the
            remediation.
        remediationType:
          enumDescriptions:
            - No remediation type specified.
            - A MITIGATION is available.
            - No fix is planned.
            - Not available.
            - A vendor fix is available.
            - A workaround is available.
          description: The type of remediation that can be applied.
          type: string
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
        remediationUri:
          description: Contains the URL where to obtain the remediation.
          $ref: '#/components/schemas/URI'
    EnvelopeSignature:
      properties:
        sig:
          format: byte
          type: string
          description: The signature itself
        keyid:
          description: A reference id to the key being used for signing
          type: string
      id: EnvelopeSignature
      type: object
      description: A DSSE signature
    ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource:
      properties:
        branchName:
          description: >-
            Regex matching branches to build. The syntax of the regular
            expressions accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
          type: string
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        dir:
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
          type: string
        substitutions:
          additionalProperties:
            type: string
          description: >-
            Substitutions to use in a triggered build. Should only be used with
            RunBuildTrigger
          type: object
        repoName:
          description: Name of the Cloud Source Repository.
          type: string
        tagName:
          type: string
          description: >-
            Regex matching tags to build. The syntax of the regular expressions
            accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
        projectId:
          type: string
          description: >-
            ID of the project that owns the Cloud Source Repository. If omitted,
            the project ID requesting the build is assumed.
        invertRegex:
          description: >-
            Only trigger a build if the revision regex does NOT match the
            revision regex.
          type: boolean
      type: object
      description: Location of the source in a Google Cloud Source Repository.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
    Fingerprint:
      type: object
      id: Fingerprint
      properties:
        v2Name:
          type: string
          description: >-
            Output only. The name of the image's v2 blobs computed via: [bottom]
            := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the
            name of the final blob is kept. This field can be used as a filter
            in list requests.
        v2Blob:
          items:
            type: string
          type: array
          description: The ordered list of v2 blobs that represent a given image.
        v1Name:
          description: >-
            The layer-id of the final layer in the Docker image's v1
            representation. This field can be used as a filter in list requests.
          type: string
      description: A set of properties that uniquely identify a given Docker image.
    GetPolicyOptions:
      properties:
        requestedPolicyVersion:
          type: integer
          description: >-
            Optional. The maximum policy version that will be used to format the
            policy. Valid values are 0, 1, and 3. Requests specifying an invalid
            value will be rejected. Requests for policies with any conditional
            role bindings must specify version 3. Policies with no conditional
            role bindings may specify any valid value or leave the field unset.
            The policy in the response might use the policy version that you
            specified, or it might use a lower policy version. For example, if
            you specify version 3, but the policy has no conditional role
            bindings, the response uses version 1. To learn which resources
            support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          format: int32
      type: object
      id: GetPolicyOptions
      description: Encapsulates settings provided to GetIamPolicy.
    Discovered:
      properties:
        cpe:
          type: string
          description: The CPE of the resource being scanned.
        analysisCompleted:
          description: The list of analysis that were completed for a resource.
          $ref: '#/components/schemas/AnalysisCompleted'
        lastScanTime:
          format: google-datetime
          type: string
          description: The last time this resource was scanned.
        archiveTime:
          type: string
          description: >-
            The time occurrences related to this discovery occurrence were
            archived.
          format: google-datetime
        analysisStatus:
          type: string
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - COMPLETE
            - FINISHED_SUCCESS
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          description: The status of discovery for the resource.
          enumDescriptions:
            - Unknown
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has completed
            - Analysis has finished successfully.
            - >-
              Analysis has finished unsuccessfully, the analysis itself is in a
              bad state.
            - The resource is known not to be supported.
        analysisStatusError:
          $ref: '#/components/schemas/Status'
          description: >-
            When an error is encountered this will contain a LocalizedMessage
            under details to show to the user. The LocalizedMessage output only
            and populated by the API.
        continuousAnalysis:
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          enumDescriptions:
            - Unknown
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
          description: Whether the resource is continuously analyzed.
          type: string
        operation:
          $ref: '#/components/schemas/Operation'
          description: >-
            Output only. An operation that indicates the status of the current
            scan. This field is deprecated, do not use.
        analysisError:
          items:
            $ref: '#/components/schemas/Status'
          description: >-
            Indicates any errors encountered during analysis of a resource.
            There could be 0 or more of these errors.
          type: array
      type: object
      description: Provides information about the scan status of a discovered resource.
      id: Discovered
    ContaineranalysisGoogleDevtoolsCloudbuildV1Hash:
      description: Container message for hash values.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
      properties:
        value:
          type: string
          description: The hash value.
          format: byte
        type:
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
            - Use a sha512 hash.
          type: string
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
      type: object
    UpgradeDistribution:
      properties:
        cpeUri:
          description: >-
            Required - The specific operating system this metadata applies to.
            See https://cpe.mitre.org/specification/.
          type: string
        cve:
          items:
            type: string
          type: array
          description: The cve that would be resolved by this upgrade.
        classification:
          description: >-
            The operating system classification of this Upgrade, as specified by
            the upstream operating system upgrade feed.
          type: string
        severity:
          type: string
          description: The severity as specified by the upstream operating system.
      description: >-
        The Upgrade Distribution represents metadata about the Upgrade for each
        operating system (CPE). Some distributions have additional metadata
        around updates, classifying them into various categories and severities.
      type: object
      id: UpgradeDistribution
    Empty:
      properties: {}
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      id: Empty
    GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext:
      properties:
        revisionId:
          type: string
          description: Required. Git commit hash.
        url:
          description: Git repository URL.
          type: string
      description: >-
        A GitSourceContext denotes a particular revision in a third party Git
        repository (e.g., GitHub).
      type: object
      id: GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep:
      properties:
        timeout:
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no time limit and will be allowed to continue to run until
            either it completes or the build itself times out.
          format: google-duration
          type: string
        name:
          type: string
          description: >-
            Required. The name of the container image that will run this
            particular build step. If the image is available in the host's
            Docker daemon's cache, it will be run directly. If not, the host
            will attempt to pull the image first, using the builder service
            account's credentials if necessary. The Docker daemon's cache will
            already have the latest versions of all of the officially supported
            build steps
            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
            The Docker daemon will also have cached many of the layers for some
            popular images, like "ubuntu", "debian", but they will be refreshed
            at the time you attempt to use them. If you built an image in a
            previous build step, it will be stored in the host's Docker daemon's
            cache and is available to use as the name for a later build step.
        dir:
          type: string
          description: >-
            Working directory to use when running this step's container. If this
            value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's
            working directory, in which case the contents of the path may not be
            persisted across build step executions, unless a `volume` for that
            path is specified. If the build specifies a `RepoSource` with `dir`
            and a step with a `dir`, which specifies an absolute path, the
            `RepoSource` `dir` is ignored for the step's execution.
        script:
          type: string
          description: >-
            A shell script to be executed in the step. When script is provided,
            the user cannot specify the entrypoint or args.
        status:
          type: string
          description: >-
            Output only. Status of the build step. At this time, build step
            status is only updated on build completion; step status is not
            updated in real-time as the build progresses.
          readOnly: true
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
        pullTiming:
          description: >-
            Output only. Stores timing information for pulling this build step's
            builder image only.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
        timing:
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for executing this build
            step.
        waitFor:
          items:
            type: string
          type: array
          description: >-
            The ID(s) of the step(s) that this build step depends on. This build
            step will not start until all the build steps in `wait_for` have
            completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have
            completed successfully.
        entrypoint:
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint. If unset, the image's default entrypoint is used.
          type: string
        volumes:
          description: >-
            List of volumes to mount into the build step. Each volume is created
            as an empty volume prior to execution of the build step. Upon
            completion of the build, volumes and their contents are discarded.
            Using a named volume in only one step is not valid as it is
            indicative of a build request with an incorrect configuration.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
        allowExitCodes:
          type: array
          items:
            type: integer
            format: int32
          description: >-
            Allow this build step to fail without failing the entire build if
            and only if the exit code is one of the specified codes. If
            allow_failure is also specified, this field will take precedence.
        env:
          type: array
          items:
            type: string
          description: >-
            A list of environment variable definitions to be used when running a
            step. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
        args:
          items:
            type: string
          description: >-
            A list of arguments that will be presented to the step when it is
            started. If the image used to run the step's container has an
            entrypoint, the `args` are used as arguments to that entrypoint. If
            the image does not define an entrypoint, the first element in args
            is used as the entrypoint, and the remainder will be used as
            arguments.
          type: array
        allowFailure:
          description: >-
            Allow this build step to fail without failing the entire build. If
            false, the entire build will fail if this step fails. Otherwise, the
            build will succeed, but this step will still have a failure status.
            Error information will be reported in the failure_detail field.
          type: boolean
        id:
          type: string
          description: >-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
        exitCode:
          format: int32
          readOnly: true
          type: integer
          description: Output only. Return code from running the step.
        secretEnv:
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key Management Service crypto key. These values must be specified in
            the build's `Secret`.
          type: array
          items:
            type: string
      type: object
      description: A step in the build pipeline.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
    ContaineranalysisGoogleDevtoolsCloudbuildV1Build:
      description: >-
        A build resource in the Cloud Build API. At a high level, a `Build`
        describes where to find source code, how to build it (for example, the
        builder image to run on the source), and where to store the built
        artifacts. Fields can include the following variables, which will be
        expanded when the build is created: - $PROJECT_ID: the project ID of the
        build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION:
        the location/region of the build. - $BUILD_ID: the autogenerated ID of
        the build. - $REPO_NAME: the source repository name specified by
        RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. -
        $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or
        $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the
        specified branch or tag. - $SHORT_SHA: first 7 characters of
        $REVISION_ID or $COMMIT_SHA.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Build
      properties:
        buildTriggerId:
          type: string
          readOnly: true
          description: >-
            Output only. The ID of the `BuildTrigger` that triggered this build,
            if it was triggered automatically.
        finishTime:
          format: google-datetime
          description: >-
            Output only. Time at which execution of the build was finished. The
            difference between finish_time and start_time is the duration of the
            build's execution.
          type: string
          readOnly: true
        status:
          readOnly: true
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          type: string
          description: Output only. Status of the build.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
        startTime:
          format: google-datetime
          readOnly: true
          type: string
          description: Output only. Time at which execution of the build was started.
        id:
          type: string
          description: Output only. Unique identifier of the build.
          readOnly: true
        logUrl:
          type: string
          description: Output only. URL to logs for this build in Google Cloud Console.
          readOnly: true
        failureInfo:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
          description: >-
            Output only. Contains information about the build when
            status=FAILURE.
          readOnly: true
        artifacts:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
          description: >-
            Artifacts produced by the build that should be uploaded upon
            successful completion of all build steps.
        name:
          description: >-
            Output only. The 'Build' name with format:
            `projects/{project}/locations/{location}/builds/{build}`, where
            {build} is a unique identifier generated by the service.
          readOnly: true
          type: string
        source:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Source
          description: The location of the source files to build.
        options:
          description: Special options for this build.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
        steps:
          description: Required. The operations to be performed on the workspace.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
        tags:
          description: Tags for annotation of a `Build`. These are not docker tags.
          items:
            type: string
          type: array
        statusDetail:
          type: string
          readOnly: true
          description: Output only. Customer-readable message about the current status.
        secrets:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
          type: array
          description: >-
            Secrets to decrypt using Cloud Key Management Service. Note: Secret
            Manager is the recommended technique for managing sensitive data
            with Cloud Build. Use `available_secrets` to configure builds to
            access secrets from Secret Manager. For instructions, see:
            https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
        timing:
          readOnly: true
          description: >-
            Output only. Stores timing information for phases of the build.
            Valid keys are: * BUILD: time to execute all build steps. * PUSH:
            time to push all artifacts including docker images and non docker
            artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time
            to set up build. If the build does not specify source or images,
            these keys will not be included.
          additionalProperties:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          type: object
        sourceProvenance:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
          description: Output only. A permanent fixed identifier for source.
          readOnly: true
        substitutions:
          type: object
          additionalProperties:
            type: string
          description: Substitutions data for `Build` resource.
        projectId:
          readOnly: true
          description: Output only. ID of the project.
          type: string
        timeout:
          format: google-duration
          description: >-
            Amount of time that this build should be allowed to run, to second
            granularity. If this amount of time elapses, work on the build will
            cease and the build status will be `TIMEOUT`. `timeout` starts
            ticking from `startTime`. Default time is 60 minutes.
          type: string
        results:
          description: Output only. Results of the build.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Results
          readOnly: true
        serviceAccount:
          type: string
          description: >-
            IAM service account whose credentials will be used at build runtime.
            Must be of the format
            `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be
            email address or uniqueId of the service account. 
        queueTtl:
          description: >-
            TTL in queue for this build. If provided and the build is enqueued
            longer than this value, the build will expire and the build status
            will be `EXPIRED`. The TTL starts ticking from create_time.
          type: string
          format: google-duration
        createTime:
          type: string
          readOnly: true
          description: >-
            Output only. Time at which the request to create the build was
            received.
          format: google-datetime
        logsBucket:
          description: >-
            Cloud Storage bucket where logs should be written (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Logs file names will be of the format
            `${logs_bucket}/log-${build_id}.txt`.
          type: string
        availableSecrets:
          description: Secrets and secret environment variables.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
        warnings:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
          type: array
          description: >-
            Output only. Non-fatal problems encountered during the execution of
            the build.
          readOnly: true
        images:
          type: array
          items:
            type: string
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images are pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the `Build` resource's results field. If any of the images
            fail to be pushed, the build status is marked `FAILURE`.
        approval:
          description: >-
            Output only. Describes this build's approval configuration, status,
            and result.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
          readOnly: true
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource:
      description: Location of the source in an archive file in Cloud Storage.
      properties:
        object:
          type: string
          description: >-
            Cloud Storage object containing the source. This object must be a
            zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing
            source to build.
        bucket:
          type: string
          description: >-
            Cloud Storage bucket containing the source (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
        generation:
          format: int64
          type: string
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
      type: object
    VulnerabilityDetails:
      type: object
      description: >-
        Used by Occurrence to point to where the vulnerability exists and how to
        fix it.
      id: VulnerabilityDetails
      properties:
        effectiveSeverity:
          description: >-
            The distro assigned severity for this vulnerability when that is
            available and note provider assigned severity when distro has not
            yet assigned a severity for this vulnerability. When there are
            multiple package issues for this vulnerability, they can have
            different effective severities because some might come from the
            distro and some might come from installed language packs (e.g. Maven
            JARs or Go binaries). For this reason, it is advised to use the
            effective severity on the PackageIssue level, as this field may
            eventually be deprecated. In the case where multiple PackageIssues
            have different effective severities, the one set here will be the
            highest severity of any of the PackageIssues.
          enumDescriptions:
            - Unknown Impact
            - Minimal Impact
            - Low Impact
            - Medium Impact
            - High Impact
            - Critical Impact
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        packageIssue:
          description: >-
            The set of affected locations and their fixes (if available) within
            the associated resource.
          items:
            $ref: '#/components/schemas/PackageIssue'
          type: array
        type:
          description: >-
            The type of package; whether native or non native(ruby gems, node.js
            packages etc). This may be deprecated in the future because we can
            have multiple PackageIssues with different package types.
          type: string
        cvssV3:
          $ref: '#/components/schemas/CVSS'
          description: The CVSS v3 score of this vulnerability.
        cvssVersion:
          description: Output only. CVSS version used to populate cvss_score and severity.
          type: string
          enumDescriptions:
            - CVSS Version unspecified.
            - CVSS v2.
            - CVSS v3.
          readOnly: true
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
        cvssV2:
          description: The CVSS v2 score of this vulnerability.
          $ref: '#/components/schemas/CVSS'
        vexAssessment:
          description: >-
            VexAssessment provides all publisher provided Vex information that
            is related to this vulnerability for this resource.
          $ref: '#/components/schemas/VexAssessment'
        cvssScore:
          format: float
          description: >-
            Output only. The CVSS score of this vulnerability. CVSS score is on
            a scale of 0-10 where 0 indicates low severity and 10 indicates high
            severity.
          type: number
        severity:
          type: string
          enumDescriptions:
            - Unknown Impact
            - Minimal Impact
            - Low Impact
            - Medium Impact
            - High Impact
            - Critical Impact
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: >-
            Output only. The note provider assigned Severity of the
            vulnerability.
    SeverityCount:
      description: The number of occurrences created for a specific severity.
      properties:
        count:
          type: string
          format: int64
          description: The number of occurrences with the severity.
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: The severity of the occurrences.
          type: string
          enumDescriptions:
            - Unknown Impact
            - Minimal Impact
            - Low Impact
            - Medium Impact
            - High Impact
            - Critical Impact
      id: SeverityCount
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret:
      properties:
        kmsKeyName:
          description: >-
            Resource name of Cloud KMS crypto key to decrypt the encrypted
            value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
          type: string
        envMap:
          additionalProperties:
            format: byte
            type: string
          type: object
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
      description: >-
        Pairs a set of secret environment variables mapped to encrypted values
        with the Cloud KMS key to use to decrypt the value.
    Package:
      type: object
      id: Package
      description: >-
        This represents a particular package that is distributed over various
        channels. e.g. glibc (aka libc6) is distributed by many, at various
        versions.
      properties:
        cpeUri:
          type: string
          description: >-
            The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)
            denoting the package manager version distributing a package. The
            cpe_uri will be blank for language packages.
        architecture:
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          enumDescriptions:
            - Unknown architecture
            - X86 architecture
            - X64 architecture
          type: string
          description: >-
            The CPU architecture for which packages in this distribution channel
            were built. Architecture will be blank for language packages.
        maintainer:
          type: string
          description: A freeform text denoting the maintainer of this package.
        description:
          type: string
          description: The description of this package.
        digest:
          description: >-
            Hash value, typically a file digest, that allows unique
            identification a specific package.
          items:
            $ref: '#/components/schemas/Digest'
          type: array
        distribution:
          items:
            $ref: '#/components/schemas/Distribution'
          description: The various channels by which a package is distributed.
          type: array
        name:
          type: string
          description: The name of the package.
        version:
          description: The version of the package.
          $ref: '#/components/schemas/Version'
        packageType:
          description: >-
            The type of package; whether native or non native (e.g., ruby gems,
            node.js packages, etc.).
          type: string
        url:
          type: string
          description: The homepage for this package.
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
    RelatedUrl:
      properties:
        url:
          description: Specific URL to associate with the note
          type: string
        label:
          description: Label to describe usage of the URL
          type: string
      description: Metadata for any related URL information
      id: RelatedUrl
      type: object
    SlsaProvenanceZeroTwo:
      properties:
        buildConfig:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
          description: Lists the steps in the build.
        materials:
          description: >-
            The collection of artifacts that influenced the build including
            sources, dependencies, build tools, base images, and so on.
          type: array
          items:
            $ref: >-
              #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial
        builder:
          description: >-
            Identifies the entity that executed the recipe, which is trusted to
            have correctly performed the operation and populated this
            provenance.
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder
        invocation:
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation
          description: Identifies the event that kicked off the build.
        buildType:
          description: URI indicating what type of build was performed.
          type: string
        metadata:
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata
          description: Other properties of the build.
      type: object
      id: SlsaProvenanceZeroTwo
      description: >-
        SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa
        spec. See full explanation of fields at slsa.dev/provenance/v0.2.
    SbomReferenceIntotoPayload:
      type: object
      properties:
        predicateType:
          description: URI identifying the type of the Predicate.
          type: string
        _type:
          description: Identifier for the schema of the Statement.
          type: string
        subject:
          type: array
          description: >-
            Set of software artifacts that the attestation applies to. Each
            element represents a single software artifact.
          items:
            $ref: '#/components/schemas/Subject'
        predicate:
          description: >-
            Additional parameters of the Predicate. Includes the actual data
            about the SBOM.
          $ref: '#/components/schemas/SbomReferenceIntotoPredicate'
      description: >-
        The actual payload that contains the SBOM Reference data. The payload
        follows the intoto statement specification. See
        https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md
        for more details.
      id: SbomReferenceIntotoPayload
    Basis:
      type: object
      description: >-
        Basis describes the base image portion (Note) of the DockerImage
        relationship. Linked occurrences are derived from this or an equivalent
        image via: FROM Or an equivalent reference, e.g. a tag of the
        resource_url.
      id: Basis
      properties:
        fingerprint:
          description: The fingerprint of the base image.
          $ref: '#/components/schemas/Fingerprint'
        resourceUrl:
          type: string
          description: >-
            The resource_url for the resource representing the basis of
            associated occurrence images.
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
      description: A non-fatal problem encountered during the execution of the build.
      properties:
        priority:
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
          type: string
          description: The priority for this warning.
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
        text:
          type: string
          description: Explanation of the warning generated.
    Detail:
      description: >-
        Identifies all occurrences of this vulnerability in the package for a
        specific distro/location For example: glibc in
        cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
      id: Detail
      properties:
        minAffectedVersion:
          description: The min version of the package in which the vulnerability exists.
          $ref: '#/components/schemas/Version'
        description:
          type: string
          description: A vendor-specific description of this note.
        cpeUri:
          type: string
          description: >-
            The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)
            in which the vulnerability manifests. Examples include distro or
            storage location for vulnerable jar. This field can be used as a
            filter in list requests.
        package:
          description: >-
            The name of the package where the vulnerability was found. This
            field can be used as a filter in list requests.
          type: string
        severityName:
          type: string
          description: 'The severity (eg: distro assigned severity) for this vulnerability.'
        isObsolete:
          type: boolean
          description: >-
            Whether this Detail is obsolete. Occurrences are expected not to
            point to obsolete details.
        packageType:
          description: >-
            The type of package; whether native or non native(ruby gems, node.js
            packages etc)
          type: string
        source:
          description: The source from which the information in this Detail was obtained.
          type: string
        fixedLocation:
          description: The fix for this specific package version.
          $ref: '#/components/schemas/VulnerabilityLocation'
        maxAffectedVersion:
          $ref: '#/components/schemas/Version'
          description: The max version of the package in which the vulnerability exists.
        vendor:
          description: The vendor of the product. e.g. "google"
          type: string
      type: object
    Binding:
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      properties:
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding.
          items:
            type: string
          type: array
        role:
          type: string
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        condition:
          $ref: '#/components/schemas/Expr'
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes:
      type: object
      properties:
        fileHash:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
          type: array
          description: Collection of file hashes.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
      description: >-
        Container message for hashes of byte content of files, used in
        SourceProvenance messages to verify integrity of source input to the
        build.
    UpgradeNote:
      properties:
        distributions:
          items:
            $ref: '#/components/schemas/UpgradeDistribution'
          description: Metadata about the upgrade for each specific operating system.
          type: array
        package:
          type: string
          description: Required - The package this Upgrade is for.
        version:
          description: >-
            Required - The version of the package in machine + human readable
            form.
          $ref: '#/components/schemas/Version'
      type: object
      id: UpgradeNote
      description: >-
        An Upgrade Note represents a potential upgrade of a package to a given
        version. For each package version combination (i.e. bash 4.0, bash 4.1,
        bash 4.1.2), there will be a Upgrade Note.
    Digest:
      id: Digest
      description: Digest information.
      type: object
      properties:
        digestBytes:
          description: Value of the digest.
          format: byte
          type: string
        algo:
          type: string
          description: '`SHA1`, `SHA512` etc.'
    IdentifierHelper:
      id: IdentifierHelper
      description: >-
        Helps in identifying the underlying product. This should be treated like
        a one-of field. Only one field should be set in this proto. This is a
        workaround because spanner indexes on one-of fields restrict addition
        and deletion of fields.
      properties:
        genericUri:
          type: string
          description: >-
            Contains a URI which is vendor-specific. Example: The artifact
            repository URL of an image.
        field:
          description: The field that is set in the API proto.
          type: string
          enum:
            - IDENTIFIER_HELPER_FIELD_UNSPECIFIED
            - GENERIC_URI
          enumDescriptions:
            - The helper isn't set.
            - The generic_uri one-of field is set.
      type: object
    Completeness:
      properties:
        arguments:
          type: boolean
          description: >-
            If true, the builder claims that recipe.arguments is complete,
            meaning that all external inputs are properly captured in the
            recipe.
        environment:
          type: boolean
          description: >-
            If true, the builder claims that recipe.environment is claimed to be
            complete.
        materials:
          description: >-
            If true, the builder claims that materials are complete, usually
            through some controls to prevent network access. Sometimes called
            "hermetic".
          type: boolean
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
      type: object
      id: Completeness
    VulnerabilityAssessmentNote:
      id: VulnerabilityAssessmentNote
      type: object
      properties:
        longDescription:
          type: string
          description: A detailed description of this Vex.
        assessment:
          $ref: '#/components/schemas/Assessment'
          description: Represents a vulnerability assessment for the product.
        languageCode:
          type: string
          description: >-
            Identifies the language used by this document, corresponding to IETF
            BCP 47 / RFC 5646.
        publisher:
          description: Publisher details of this Note.
          $ref: '#/components/schemas/Publisher'
        product:
          $ref: '#/components/schemas/Product'
          description: The product affected by this vex.
        title:
          description: The title of the note. E.g. `Vex-Debian-11.4`
          type: string
        shortDescription:
          description: A one sentence description of this Vex.
          type: string
      description: >-
        A single VulnerabilityAssessmentNote represents one particular product's
        vulnerability assessment for one CVE. Multiple
        VulnerabilityAssessmentNotes together form a Vex statement. Please
        go/sds-vex-example for a sample Vex statement in the CSAF format.
    GoogleDevtoolsContaineranalysisV1alpha1AliasContext:
      properties:
        name:
          type: string
          description: The alias name.
        kind:
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          type: string
          description: The alias kind.
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - >-
              Used to specify non-standard aliases. For example, if a Git repo
              has a ref named "refs/foo/bar".
      type: object
      id: GoogleDevtoolsContaineranalysisV1alpha1AliasContext
      description: An alias to a repo revision.
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness:
      properties:
        parameters:
          description: If true, the builder claims that invocation.parameters is complete.
          type: boolean
        environment:
          type: boolean
          description: If true, the builder claims that invocation.environment is complete.
        materials:
          description: If true, the builder claims that materials is complete.
          type: boolean
      id: >-
        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness
      type: object
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
    BuildStep:
      description: 'A step in the build pipeline. Next ID: 20'
      id: BuildStep
      type: object
      properties:
        volumes:
          items:
            $ref: '#/components/schemas/Volume'
          description: >-
            List of volumes to mount into the build step. Each volume is created
            as an empty volume prior to execution of the build step. Upon
            completion of the build, volumes and their contents are discarded.
            Using a named volume in only one step is not valid as it is
            indicative of a build request with an incorrect configuration.
          type: array
        allowExitCodes:
          items:
            type: integer
            format: int32
          description: >-
            Allow this build step to fail without failing the entire build if
            and only if the exit code is one of the specified codes. If
            allow_failure is also specified, this field will take precedence.
          type: array
        secretEnv:
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key Management Service crypto key. These values must be specified in
            the build's `Secret`.
          type: array
          items:
            type: string
        entrypoint:
          type: string
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint. If unset, the image's default entrypoint is used.
        timeout:
          type: string
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no time limit and will be allowed to continue to run until
            either it completes or the build itself times out.
          format: google-duration
        waitFor:
          description: >-
            The ID(s) of the step(s) that this build step depends on. This build
            step will not start until all the build steps in `wait_for` have
            completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have
            completed successfully.
          type: array
          items:
            type: string
        args:
          description: >-
            A list of arguments that will be presented to the step when it is
            started. If the image used to run the step's container has an
            entrypoint, the `args` are used as arguments to that entrypoint. If
            the image does not define an entrypoint, the first element in args
            is used as the entrypoint, and the remainder will be used as
            arguments.
          type: array
          items:
            type: string
        script:
          description: >-
            A shell script to be executed in the step. When script is provided,
            the user cannot specify the entrypoint or args.
          type: string
        pullTiming:
          description: >-
            Output only. Stores timing information for pulling this build step's
            builder image only.
          $ref: '#/components/schemas/TimeSpan'
        status:
          type: string
          description: >-
            Output only. Status of the build step. At this time, build step
            status is only updated on build completion; step status is not
            updated in real-time as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build has been received and is being queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
        allowFailure:
          description: >-
            Allow this build step to fail without failing the entire build. If
            false, the entire build will fail if this step fails. Otherwise, the
            build will succeed, but this step will still have a failure status.
            Error information will be reported in the failure_detail field.
          type: boolean
        id:
          description: >-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
          type: string
        exitCode:
          description: Output only. Return code from running the step.
          type: integer
          format: int32
        timing:
          description: >-
            Output only. Stores timing information for executing this build
            step.
          $ref: '#/components/schemas/TimeSpan'
        env:
          description: >-
            A list of environment variable definitions to be used when running a
            step. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        dir:
          description: >-
            Working directory to use when running this step's container. If this
            value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's
            working directory, in which case the contents of the path may not be
            persisted across build step executions, unless a `volume` for that
            path is specified. If the build specifies a `RepoSource` with `dir`
            and a step with a `dir`, which specifies an absolute path, the
            `RepoSource` `dir` is ignored for the step's execution.
          type: string
        name:
          description: >-
            Required. The name of the container image that will run this
            particular build step. If the image is available in the host's
            Docker daemon's cache, it will be run directly. If not, the host
            will attempt to pull the image first, using the builder service
            account's credentials if necessary. The Docker daemon's cache will
            already have the latest versions of all of the officially supported
            build steps
            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
            The Docker daemon will also have cached many of the layers for some
            popular images, like "ubuntu", "debian", but they will be refreshed
            at the time you attempt to use them. If you built an image in a
            previous build step, it will be stored in the host's Docker daemon's
            cache and is available to use as the name for a later build step.
          type: string
    GetVulnzOccurrencesSummaryResponse:
      properties:
        counts:
          description: A map of how many occurrences were found for each severity.
          items:
            $ref: '#/components/schemas/SeverityCount'
          type: array
      description: >-
        A summary of how many vulnz occurrences there are per severity type.
        counts by groups, or if we should have different summary messages like
        this.
      id: GetVulnzOccurrencesSummaryResponse
      type: object
    Occurrence:
      type: object
      id: Occurrence
      properties:
        upgrade:
          $ref: '#/components/schemas/UpgradeOccurrence'
          description: Describes an upgrade.
        discovered:
          description: Describes the initial scan status for this resource.
          $ref: '#/components/schemas/Discovered'
        buildDetails:
          description: Build details for a verifiable build.
          $ref: '#/components/schemas/BuildDetails'
        deployment:
          description: Describes the deployment of an artifact on a runtime.
          $ref: '#/components/schemas/Deployment'
        resource:
          $ref: '#/components/schemas/Resource'
          description: ' The resource for which the `Occurrence` applies.'
        sbomReference:
          description: This represents an SBOM reference occurrence
          $ref: '#/components/schemas/SBOMReferenceOccurrence'
        spdxFile:
          description: Describes a specific SPDX File.
          $ref: '#/components/schemas/FileOccurrence'
        compliance:
          $ref: '#/components/schemas/ComplianceOccurrence'
          description: Describes whether or not a resource passes compliance checks.
        updateTime:
          format: google-datetime
          type: string
          description: Output only. The time this `Occurrence` was last updated.
        name:
          type: string
          description: >-
            Output only. The name of the `Occurrence` in the form
            "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
        resourceUrl:
          description: >-
            The unique URL of the image or the container for which the
            `Occurrence` applies. For example,
            https://gcr.io/project/image@sha256:foo This field can be used as a
            filter in list requests.
          type: string
        createTime:
          type: string
          format: google-datetime
          description: Output only. The time this `Occurrence` was created.
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: https://github.com/secure-systems-lab/dsse
        spdxPackage:
          $ref: '#/components/schemas/PackageInfoOccurrence'
          description: Describes a specific SPDX Package.
        installation:
          $ref: '#/components/schemas/Installation'
          description: Describes the installation of a package on the linked resource.
        remediation:
          type: string
          description: A description of actions that can be taken to remedy the `Note`
        dsseAttestation:
          description: This represents a DSSE attestation occurrence
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
        vulnerabilityDetails:
          $ref: '#/components/schemas/VulnerabilityDetails'
          description: Details of a security vulnerability note.
        kind:
          enumDescriptions:
            - Unknown
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available software upgrade.
            - >-
              This represents a compliance check that can be applied to a
              resource.
            - This represents a software bill of materials.
            - This represents an SPDX Package.
            - This represents an SPDX File.
            - This represents an SPDX Relationship.
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents a reference to an SBOM.
          type: string
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
            - COMPLIANCE
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          description: >-
            Output only. This explicitly denotes which of the `Occurrence`
            details are specified. This field can be used as a filter in list
            requests.
        spdxRelationship:
          $ref: '#/components/schemas/RelationshipOccurrence'
          description: Describes a specific relationship between SPDX elements.
        sbom:
          description: Describes a specific software bill of materials document.
          $ref: '#/components/schemas/DocumentOccurrence'
        derivedImage:
          $ref: '#/components/schemas/Derived'
          description: >-
            Describes how this resource derives from the basis in the associated
            note.
        noteName:
          type: string
          description: >-
            An analysis note associated with this image, in the form
            "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as
            a filter in list requests.
        attestation:
          $ref: '#/components/schemas/Attestation'
          description: Describes an attestation of an artifact.
      description: >-
        `Occurrence` includes information about analysis occurrences for an
        image.
    Installation:
      properties:
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
        packageType:
          type: string
          description: >-
            Output only. The type of package; whether native or non native
            (e.g., ruby gems, node.js packages, etc.).
          readOnly: true
        version:
          $ref: '#/components/schemas/Version'
          description: Output only. The version of the package.
          readOnly: true
        architecture:
          description: >-
            Output only. The CPU architecture for which packages in this
            distribution channel were built. Architecture will be blank for
            language packages.
          type: string
          enumDescriptions:
            - Unknown architecture
            - X86 architecture
            - X64 architecture
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          readOnly: true
        name:
          description: Output only. The name of the installed package.
          type: string
          readOnly: true
        cpeUri:
          readOnly: true
          description: >-
            Output only. The cpe_uri in [CPE
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package. The cpe_uri will be blank
            for language packages.
          type: string
        location:
          items:
            $ref: '#/components/schemas/Location'
          type: array
          description: >-
            All of the places within the filesystem versions of this package
            have been found.
      description: >-
        This represents how a particular software package may be installed on a
        system.
      type: object
      id: Installation
    RepoSource:
      properties:
        commitSha:
          type: string
          description: Explicit commit SHA to build.
        branchName:
          description: Name of the branch to build.
          type: string
        tagName:
          type: string
          description: Name of the tag to build.
        repoName:
          description: Name of the repo.
          type: string
        projectId:
          type: string
          description: ID of the project that owns the repo.
      type: object
      id: RepoSource
      description: >-
        RepoSource describes the location of the source in a Google Cloud Source
        Repository.
    GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext:
      properties:
        revisionId:
          description: A revision ID.
          type: string
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasContext
        repoId:
          description: The ID of the repo.
          $ref: '#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1RepoId'
      type: object
      description: >-
        A CloudRepoSourceContext denotes a particular revision in a Google Cloud
        Source Repo.
      id: GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secret:
      description: >-
        Pairs a set of secret environment variables containing encrypted values
        with the Cloud KMS key to use to decrypt the value. Note: Use
        `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with
        `secret`. For instructions see:
        https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
      type: object
      properties:
        secretEnv:
          additionalProperties:
            type: string
            format: byte
          type: object
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
        kmsKeyName:
          type: string
          description: Cloud KMS key name to use to decrypt these envs.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
    DocumentOccurrence:
      description: >-
        DocumentOccurrence represents an SPDX Document Creation Information
        section:
        https://spdx.github.io/spdx-spec/2-document-creation-information/
      type: object
      properties:
        createTime:
          format: google-datetime
          type: string
          description: >-
            Identify when the SPDX file was originally created. The date is to
            be specified according to combined date and time in UTC format as
            specified in ISO 8601 standard
        creatorComment:
          description: >-
            A field for creators of the SPDX file to provide general comments
            about the creation of the SPDX file or any other relevant comment
            not included in the other fields
          type: string
        externalDocumentRefs:
          type: array
          items:
            type: string
          description: >-
            Identify any external SPDX documents referenced within this SPDX
            document
        id:
          description: >-
            Identify the current SPDX document which may be referenced in
            relationships by other files, packages internally and documents
            externally
          type: string
        title:
          type: string
          description: Identify name of this document as designated by creator
        licenseListVersion:
          type: string
          description: >-
            A field for creators of the SPDX file to provide the version of the
            SPDX License List used when the SPDX file was created
        namespace:
          type: string
          description: >-
            Provide an SPDX document specific namespace as a unique absolute
            Uniform Resource Identifier (URI) as specified in RFC-3986, with the
            exception of the â€˜#â€™ delimiter
        creators:
          type: array
          items:
            type: string
          description: >-
            Identify who (or what, in the case of a tool) created the SPDX file.
            If the SPDX file was created by an individual, indicate the person's
            name
        documentComment:
          description: >-
            A field for creators of the SPDX file content to provide comments to
            the consumers of the SPDX document
          type: string
      id: DocumentOccurrence
    Distribution:
      description: >-
        This represents a particular channel of distribution for a given
        package. e.g. Debian's jessie-backports dpkg mirror
      type: object
      properties:
        description:
          description: The distribution channel-specific description of this package.
          type: string
        cpeUri:
          description: >-
            The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
            denoting the package manager version distributing a package.
          type: string
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
        latestVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            The latest available version of this package in this distribution
            channel.
        maintainer:
          type: string
          description: A freeform string denoting the maintainer of this package.
        architecture:
          description: >-
            The CPU architecture for which packages in this distribution channel
            were built
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          enumDescriptions:
            - Unknown architecture
            - X86 architecture
            - X64 architecture
          type: string
      id: Distribution
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
      type: object
      description: A fatal problem encountered during the execution of the build.
      properties:
        type:
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          description: The name of the failure.
          type: string
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
        detail:
          description: Explains the failure issue in more detail using hard-coded text.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage:
      description: >-
        An npm package uploaded to Artifact Registry using the NpmPackage
        directive.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
      type: object
      properties:
        pushTiming:
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        uri:
          description: URI of the uploaded npm package.
          type: string
        fileHashes:
          description: Hash types and values of the npm package.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
    Deployment:
      description: The period during which some deployable was active in a runtime.
      id: Deployment
      properties:
        address:
          type: string
          description: Address of the runtime element hosting this deployment.
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
        platform:
          enumDescriptions:
            - Unknown
            - Google Container Engine
            - 'Google App Engine: Flexible Environment'
            - Custom user-defined platform
          description: Platform hosting this deployment.
          type: string
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
        undeployTime:
          description: End of the lifetime of this deployment.
          format: google-datetime
          type: string
        deployTime:
          description: Beginning of the lifetime of this deployment.
          type: string
          format: google-datetime
        config:
          description: Configuration used to create this deployment.
          type: string
        resourceUri:
          description: >-
            Resource URI for the artifact being deployed taken from the
            deployable field with the same name.
          type: array
          items:
            type: string
      type: object
    Material:
      description: Material is a material used in the generation of the provenance
      type: object
      properties:
        digest:
          description: >-
            digest is a map from a hash algorithm (e.g. sha256) to the value in
            the material
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
          description: uri is the uri of the material
      id: Material
    RelationshipOccurrence:
      description: >-
        RelationshipOccurrence represents an SPDX Relationship section:
        https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
      id: RelationshipOccurrence
      properties:
        target:
          description: >-
            Also referred to as SPDXRef-B The target SPDC element (file,
            package, etc) In cases where there are "known unknowns", the use of
            the keyword NOASSERTION can be used The keywords NONE can be used to
            indicate that an SPDX element (package/file/snippet) has no other
            elements connected by some relationship to it
          type: string
        type:
          readOnly: true
          enum:
            - RELATIONSHIP_TYPE_UNSPECIFIED
            - DESCRIBES
            - DESCRIBED_BY
            - CONTAINS
            - CONTAINED_BY
            - DEPENDS_ON
            - DEPENDENCY_OF
            - DEPENDENCY_MANIFEST_OF
            - BUILD_DEPENDENCY_OF
            - DEV_DEPENDENCY_OF
            - OPTIONAL_DEPENDENCY_OF
            - PROVIDED_DEPENDENCY_OF
            - TEST_DEPENDENCY_OF
            - RUNTIME_DEPENDENCY_OF
            - EXAMPLE_OF
            - GENERATES
            - GENERATED_FROM
            - ANCESTOR_OF
            - DESCENDANT_OF
            - VARIANT_OF
            - DISTRIBUTION_ARTIFACT
            - PATCH_FOR
            - PATCH_APPLIED
            - COPY_OF
            - FILE_ADDED
            - FILE_DELETED
            - FILE_MODIFIED
            - EXPANDED_FROM_ARCHIVE
            - DYNAMIC_LINK
            - STATIC_LINK
            - DATA_FILE_OF
            - TEST_CASE_OF
            - BUILD_TOOL_OF
            - DEV_TOOL_OF
            - TEST_OF
            - TEST_TOOL_OF
            - DOCUMENTATION_OF
            - OPTIONAL_COMPONENT_OF
            - METAFILE_OF
            - PACKAGE_OF
            - AMENDS
            - PREREQUISITE_FOR
            - HAS_PREREQUISITE
            - OTHER
          enumDescriptions:
            - Unspecified
            - Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A
            - Is to be used when SPDXRef-A is described by SPDXREF-Document
            - Is to be used when SPDXRef-A contains SPDXRef-B
            - Is to be used when SPDXRef-A is contained by SPDXRef-B
            - Is to be used when SPDXRef-A depends on SPDXRef-B
            - Is to be used when SPDXRef-A is dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a manifest file that lists a set
              of dependencies for SPDXRef-B
            - Is to be used when SPDXRef-A is a build dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a development dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an optional dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a to be provided dependency of
              SPDXRef-B
            - Is to be used when SPDXRef-A is a test dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a dependency required for the
              execution of SPDXRef-B
            - Is to be used when SPDXRef-A is an example of SPDXRef-B
            - Is to be used when SPDXRef-A generates SPDXRef-B
            - Is to be used when SPDXRef-A was generated from SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an ancestor (same lineage but
              pre-dates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a descendant of (same lineage but
              postdates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a variant of (same lineage but not
              clear which came first) SPDXRef-B
            - >-
              Is to be used when distributing SPDXRef-A requires that SPDXRef-B
              also be distributed
            - >-
              Is to be used when SPDXRef-A is a patch file for (to be applied
              to) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a patch file that has been applied
              to SPDXRef-B
            - Is to be used when SPDXRef-A is an exact copy of SPDXRef-B
            - Is to be used when SPDXRef-A is a file that was added to SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was deleted from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was modified from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is expanded from the archive
              SPDXRef-B
            - Is to be used when SPDXRef-A dynamically links to SPDXRef-B
            - Is to be used when SPDXRef-A statically links to SPDXRef-B
            - Is to be used when SPDXRef-A is a data file used in SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a test case used in testing
              SPDXRef-B
            - Is to be used when SPDXRef-A is used to build SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a development tool for
              SPDXRef-B
            - Is to be used when SPDXRef-A is used for testing SPDXRef-B
            - Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B
            - Is to be used when SPDXRef-A provides documentation of SPDXRef-B
            - Is to be used when SPDXRef-A is an optional component of SPDXRef-B
            - Is to be used when SPDXRef-A is a metafile of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a package as part of
              SPDXRef-B
            - >-
              Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX
              information in SPDXRef-B
            - Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B
            - Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B
            - >-
              Is to be used for a relationship which has not been defined in the
              formal SPDX specification. A description of the relationship
              should be included in the Relationship comments field
          description: >-
            Output only. The type of relationship between the source and target
            SPDX elements
          type: string
        comment:
          description: >-
            A place for the SPDX file creator to record any general comments
            about the relationship
          type: string
        source:
          type: string
          description: >-
            Also referred to as SPDXRef-A The source SPDX element (file,
            package, etc)
      type: object
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
      description: Response message for `TestIamPermissions` method.
    SBOMReferenceNote:
      description: The note representing an SBOM reference.
      type: object
      properties:
        version:
          description: >-
            The version of the format that the SBOM takes. E.g. if the format is
            spdx, the version may be 2.3.
          type: string
        format:
          description: The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
          type: string
      id: SBOMReferenceNote
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
      properties:
        gitSource:
          description: If provided, get the source from this Git repository.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
        storageSourceManifest:
          description: >-
            If provided, get the source from this manifest in Cloud Storage.
            This feature is in Preview; see description
            [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
        repoSource:
          description: >-
            If provided, get the source from this location in a Cloud Source
            Repository.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
        storageSource:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
          description: If provided, get the source from this location in Cloud Storage.
      description: Location of the source in a supported storage service.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
    VulnerabilityType:
      type: object
      properties:
        cwe:
          items:
            type: string
          type: array
          description: >-
            A list of CWE for this vulnerability. For details, see:
            https://cwe.mitre.org/index.html
        cvssV2:
          $ref: '#/components/schemas/CVSS'
          description: The full description of the CVSS for version 2.
        severity:
          enumDescriptions:
            - Unknown Impact
            - Minimal Impact
            - Low Impact
            - Medium Impact
            - High Impact
            - Critical Impact
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: Note provider assigned impact of the vulnerability
        cvssScore:
          description: The CVSS score for this Vulnerability.
          type: number
          format: float
        cvssVersion:
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          description: CVSS version used to populate cvss_score and severity.
          enumDescriptions:
            - CVSS Version unspecified.
            - CVSS v2.
            - CVSS v3.
          type: string
        details:
          description: >-
            All information about the package to specifically identify this
            vulnerability. One entry per (version range and cpe_uri) the package
            vulnerability has manifested in.
          items:
            $ref: '#/components/schemas/Detail'
          type: array
      description: VulnerabilityType provides metadata about a security vulnerability.
      id: VulnerabilityType
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects:
      properties:
        timing:
          readOnly: true
          description: >-
            Output only. Stores timing information for pushing all artifact
            objects.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        paths:
          type: array
          items:
            type: string
          description: Path globs used to match files in the build's workspace.
        location:
          type: string
          description: >-
            Cloud Storage bucket and optional object path, in the form
            "gs://bucket/path/to/somewhere/". (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Files in the workspace matching any path pattern will be uploaded to
            Cloud Storage with this location as a prefix.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
      description: >-
        Files in the workspace to upload to Cloud Storage upon successful
        completion of all build steps.
    DSSEHint:
      type: object
      properties:
        humanReadableName:
          description: >-
            Required. The human readable name of this attestation authority, for
            example "cloudbuild-prod".
          type: string
      id: DSSEHint
      description: >-
        This submessage provides human-readable hints about the purpose of the
        authority. Because the name of a note acts as its resource reference, it
        is important to disambiguate the canonical name of the Note (which might
        be a UUID for security purposes) from "readable" names more suitable for
        debug output. Note that these hints should not be used to look up
        authorities in security sensitive contexts, such as when looking up
        attestations to verify.
    ComplianceNote:
      properties:
        scanInstructions:
          description: Serialized scan instructions with a predefined format.
          type: string
          format: byte
        description:
          type: string
          description: A description about this compliance check.
        version:
          items:
            $ref: '#/components/schemas/ComplianceVersion'
          type: array
          description: The OS and config versions the benchmark applies to.
        rationale:
          description: A rationale for the existence of this compliance check.
          type: string
        remediation:
          type: string
          description: A description of remediation steps if the compliance check fails.
        cisBenchmark:
          description: >-
            Right now we only have one compliance type, but we may add
            additional types in the future.
          $ref: '#/components/schemas/CisBenchmark'
        title:
          type: string
          description: The title that identifies this compliance check.
      description: >-
        ComplianceNote encapsulates all information about a specific compliance
        check.
      id: ComplianceNote
      type: object
    SlsaRecipe:
      id: SlsaRecipe
      description: >-
        Steps taken to build the artifact. For a TaskRun, typically each
        container corresponds to one step in the recipe.
      properties:
        type:
          type: string
          description: >-
            URI indicating what type of recipe was performed. It determines the
            meaning of recipe.entryPoint, recipe.arguments, recipe.environment,
            and materials.
        definedInMaterial:
          description: >-
            Index in materials containing the recipe steps that are not implied
            by recipe.type. For example, if the recipe type were "make", then
            this would point to the source containing the Makefile, not the make
            program itself. Set to -1 if the recipe doesn't come from a
            material, as zero is default unset value for int64.
          format: int64
          type: string
        environment:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Any other builder-controlled inputs necessary for correctly
            evaluating the recipe. Usually only needed for reproducing the build
            but not evaluated as part of policy. Depending on the recipe Type,
            the structure may be different.
        arguments:
          description: >-
            Collection of all external inputs that influenced the build on top
            of recipe.definedInMaterial and recipe.entryPoint. For example, if
            the recipe type were "make", then this might be the flags passed to
            make aside from the target, which is captured in recipe.entryPoint.
            Depending on the recipe Type, the structure may be different.
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        entryPoint:
          type: string
          description: >-
            String identifying the entry point into the build. This is often a
            path to a configuration file and/or a target label within that file.
            The syntax and meaning are defined by recipe.type. For example, if
            the recipe type were "make", then this would reference the directory
            in which to run make as well as which target to use.
      type: object
    Envelope:
      description: >-
        MUST match
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto.
        An authenticated message of arbitrary type.
      type: object
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          type: array
          description: The signatures over the payload
        payload:
          format: byte
          description: The bytes being signed
          type: string
        payloadType:
          description: The type of payload being signed
          type: string
      id: Envelope
    BuildType:
      id: BuildType
      description: >-
        Note holding the version of the provider's builder and the signature of
        the provenance message in linked BuildDetails.
      type: object
      properties:
        signature:
          $ref: '#/components/schemas/BuildSignature'
          description: >-
            Signature of the build in Occurrences pointing to the Note
            containing this `BuilderDetails`.
        builderVersion:
          type: string
          description: Version of the builder which produced this Note.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig:
      properties:
        approvalRequired:
          description: >-
            Whether or not approval is needed. If this is set on a build, it
            will become pending when created, and will need to be explicitly
            approved to start.
          type: boolean
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
      type: object
      description: ApprovalConfig describes configuration for manual approval of a build.
    ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource:
      description: Location of the source in any accessible Git repository.
      properties:
        dir:
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
          type: string
        revision:
          type: string
          description: >-
            The revision to fetch from the Git repository such as a branch, a
            tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to
            fetch the revision from the Git repository; therefore make sure that
            the string you provide for `revision` is parsable by the command.
            For information on string values accepted by `git fetch`, see
            https://git-scm.com/docs/gitrevisions#_specifying_revisions. For
            information on `git fetch`, see https://git-scm.com/docs/git-fetch.
        url:
          type: string
          description: >-
            Location of the Git repo to build. This will be used as a `git
            remote`, see https://git-scm.com/docs/git-remote.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
      properties:
        comment:
          description: Optional. An optional comment for this manual approval result.
          type: string
        url:
          type: string
          description: >-
            Optional. An optional URL tied to this manual approval result. This
            field is essentially the same as comment, except that it will be
            rendered by the UI differently. An example use case is a link to an
            external job that approved this Build.
        approverAccount:
          description: >-
            Output only. Email of the user that called the ApproveBuild API to
            approve or reject a build at the time that the API was called.
          readOnly: true
          type: string
        decision:
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
          description: Required. The decision of this manual approval.
          type: string
        approvalTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. The time when the approval decision was made.
      type: object
      description: >-
        ApprovalResult describes the decision and associated metadata of a
        manual approval of a build.
    Justification:
      id: Justification
      type: object
      properties:
        justificationType:
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
          type: string
          enumDescriptions:
            - JUSTIFICATION_TYPE_UNSPECIFIED.
            - The vulnerable component is not present in the product.
            - >-
              The vulnerable code is not present. Typically this case occurs
              when source code is configured or built in a way that excludes the
              vulnerable code.
            - >-
              The vulnerable code can not be executed. Typically this case
              occurs when the product includes the vulnerable code but does not
              call or use the vulnerable code.
            - >-
              The vulnerable code cannot be controlled by an attacker to exploit
              the vulnerability.
            - >-
              The product includes built-in protections or features that prevent
              exploitation of the vulnerability. These built-in protections
              cannot be subverted by the attacker and cannot be configured or
              disabled by the user. These mitigations completely prevent
              exploitation based on known attack vectors.
          description: The justification type for this vulnerability.
        details:
          description: Additional details on why this justification was chosen.
          type: string
      description: >-
        Justification provides the justification when the state of the
        assessment if NOT_AFFECTED.
    Volume:
      properties:
        path:
          description: >-
            Path at which to mount the volume. Paths must be absolute and cannot
            conflict with other volume paths on the same build step or with
            certain reserved volume paths.
          type: string
        name:
          type: string
          description: >-
            Name of the volume to mount. Volume names must be unique per build
            step and must be valid names for Docker volumes. Each named volume
            must be used by at least two build steps.
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps in order to persist files across build step execution. Next ID: 3
      type: object
      id: Volume
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation:
      description: Identifies the event that kicked off the build.
      properties:
        configSource:
          description: Describes where the config file that kicked off the build came from.
          $ref: >-
            #/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource
        environment:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
          description: >-
            Any other builder-controlled inputs necessary for correctly
            evaluating the build.
        parameters:
          description: >-
            Collection of all external inputs that influenced the build on top
            of invocation.configSource.
          additionalProperties:
            description: Properties of the object.
            type: any
          type: object
      type: object
      id: >-
        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation
    Expr:
      type: object
      properties:
        title:
          type: string
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
        expression:
          type: string
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
        location:
          type: string
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      id: Expr
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage:
      description: An image built by the pipeline.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
      properties:
        pushTiming:
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for pushing the specified
            image.
        digest:
          type: string
          description: Docker Registry 2.0 digest.
        name:
          description: >-
            Name used to push the container image to Google Container Registry,
            as presented to `docker push`.
          type: string
      type: object
    Operation:
      properties:
        name:
          type: string
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
        response:
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: >-
            The normal response of the operation in case of success. If the
            original method returns no data on success, such as `Delete`, the
            response is `google.protobuf.Empty`. If the original method is
            standard `Get`/`Create`/`Update`, the response should be the
            resource. For other methods, the response should have the type
            `XxxResponse`, where `Xxx` is the original method name. For example,
            if the original method name is `TakeSnapshot()`, the inferred
            response type is `TakeSnapshotResponse`.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
        done:
          type: boolean
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      id: Operation
    BuildProvenance:
      id: BuildProvenance
      type: object
      properties:
        buildOptions:
          description: >-
            Special options applied to this build. This is a catch-all field
            where build providers can enter any desired additional details.
          type: object
          additionalProperties:
            type: string
        projectId:
          description: ID of the project.
          type: string
        createTime:
          format: google-datetime
          description: Time at which the build was created.
          type: string
        logsBucket:
          description: Google Cloud Storage bucket where logs were written.
          type: string
        creator:
          description: >-
            E-mail address of the user who initiated this build. Note that this
            was the user's e-mail address at the time the build was initiated;
            this address may not represent the same end-user for all time.
          type: string
        finishTime:
          description: Time at which execution of the build was finished.
          format: google-datetime
          type: string
        builderVersion:
          type: string
          description: Version string of the builder at the time this build was executed.
        startTime:
          description: Time at which execution of the build was started.
          type: string
          format: google-datetime
        triggerId:
          type: string
          description: >-
            Trigger identifier if the build was triggered automatically; empty
            if not.
        commands:
          items:
            $ref: '#/components/schemas/Command'
          description: Commands requested by the build.
          type: array
        sourceProvenance:
          $ref: '#/components/schemas/Source'
          description: Details of the Source input to the build.
        id:
          type: string
          description: Unique identifier of the build.
        builtArtifacts:
          items:
            $ref: '#/components/schemas/Artifact'
          type: array
          description: Output of the build.
      description: >-
        Provenance of a build. Contains all information needed to verify the
        full details about the build from source to completion.
    PackageInfoNote:
      description: >-
        PackageInfoNote represents an SPDX Package Information section:
        https://spdx.github.io/spdx-spec/3-package-information/
      type: object
      id: PackageInfoNote
      properties:
        attribution:
          type: string
          description: >-
            A place for the SPDX data creator to record, at the package level,
            acknowledgements that may be needed to be communicated in some
            contexts
        version:
          description: Identify the version of the package
          type: string
        downloadLocation:
          description: >-
            This section identifies the download Universal Resource Locator
            (URL), or a specific location within a version control system (VCS)
            for the package at the time that the SPDX file was created
          type: string
        detailedDescription:
          type: string
          description: A more detailed description of the package
        copyright:
          type: string
          description: >-
            Identify the copyright holders of the package, as well as any dates
            present
        homePage:
          description: >-
            Provide a place for the SPDX file creator to record a web site that
            serves as the package's home page
          type: string
        supplier:
          type: string
          description: >-
            Identify the actual distribution source for the package/directory
            identified in the SPDX file
        summaryDescription:
          type: string
          description: A short description of the package
        originator:
          description: >-
            If the package identified in the SPDX file originated from a
            different person or organization than identified as Package
            Supplier, this field identifies from where or whom the package
            originally came
          type: string
        filesLicenseInfo:
          type: array
          items:
            type: string
          description: >-
            Contain the license the SPDX file creator has concluded as governing
            the This field is to contain a list of all licenses found in the
            package. The relationship between licenses (i.e., conjunctive,
            disjunctive) is not specified in this field â€“ it is simply a listing
            of all licenses found
        externalRefs:
          type: array
          description: ExternalRef
          items:
            $ref: '#/components/schemas/ExternalRef'
        title:
          description: >-
            Identify the full name of the package as given by the Package
            Originator
          type: string
        licenseDeclared:
          description: >-
            List the licenses that have been declared by the authors of the
            package
          $ref: '#/components/schemas/License'
        packageType:
          description: 'The type of package: OS, MAVEN, GO, GO_STDLIB, etc.'
          type: string
        analyzed:
          description: >-
            Indicates whether the file content of this package has been
            available for or subjected to analysis when creating the SPDX
            document
          type: boolean
        checksum:
          type: string
          description: >-
            Provide an independently reproducible mechanism that permits unique
            identification of a specific package that correlates to the data in
            this SPDX file
        verificationCode:
          type: string
          description: >-
            This field provides an independently reproducible mechanism
            identifying specific contents of a package based on the actual files
            (except the SPDX file itself, if it is included in the package) that
            make up each package and that correlates to the data in this SPDX
            file
    RelationshipNote:
      id: RelationshipNote
      description: >-
        RelationshipNote represents an SPDX Relationship section:
        https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/
      type: object
      properties:
        type:
          enum:
            - RELATIONSHIP_TYPE_UNSPECIFIED
            - DESCRIBES
            - DESCRIBED_BY
            - CONTAINS
            - CONTAINED_BY
            - DEPENDS_ON
            - DEPENDENCY_OF
            - DEPENDENCY_MANIFEST_OF
            - BUILD_DEPENDENCY_OF
            - DEV_DEPENDENCY_OF
            - OPTIONAL_DEPENDENCY_OF
            - PROVIDED_DEPENDENCY_OF
            - TEST_DEPENDENCY_OF
            - RUNTIME_DEPENDENCY_OF
            - EXAMPLE_OF
            - GENERATES
            - GENERATED_FROM
            - ANCESTOR_OF
            - DESCENDANT_OF
            - VARIANT_OF
            - DISTRIBUTION_ARTIFACT
            - PATCH_FOR
            - PATCH_APPLIED
            - COPY_OF
            - FILE_ADDED
            - FILE_DELETED
            - FILE_MODIFIED
            - EXPANDED_FROM_ARCHIVE
            - DYNAMIC_LINK
            - STATIC_LINK
            - DATA_FILE_OF
            - TEST_CASE_OF
            - BUILD_TOOL_OF
            - DEV_TOOL_OF
            - TEST_OF
            - TEST_TOOL_OF
            - DOCUMENTATION_OF
            - OPTIONAL_COMPONENT_OF
            - METAFILE_OF
            - PACKAGE_OF
            - AMENDS
            - PREREQUISITE_FOR
            - HAS_PREREQUISITE
            - OTHER
          enumDescriptions:
            - Unspecified
            - Is to be used when SPDXRef-DOCUMENT describes SPDXRef-A
            - Is to be used when SPDXRef-A is described by SPDXREF-Document
            - Is to be used when SPDXRef-A contains SPDXRef-B
            - Is to be used when SPDXRef-A is contained by SPDXRef-B
            - Is to be used when SPDXRef-A depends on SPDXRef-B
            - Is to be used when SPDXRef-A is dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a manifest file that lists a set
              of dependencies for SPDXRef-B
            - Is to be used when SPDXRef-A is a build dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a development dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an optional dependency of
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a to be provided dependency of
              SPDXRef-B
            - Is to be used when SPDXRef-A is a test dependency of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a dependency required for the
              execution of SPDXRef-B
            - Is to be used when SPDXRef-A is an example of SPDXRef-B
            - Is to be used when SPDXRef-A generates SPDXRef-B
            - Is to be used when SPDXRef-A was generated from SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is an ancestor (same lineage but
              pre-dates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a descendant of (same lineage but
              postdates) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a variant of (same lineage but not
              clear which came first) SPDXRef-B
            - >-
              Is to be used when distributing SPDXRef-A requires that SPDXRef-B
              also be distributed
            - >-
              Is to be used when SPDXRef-A is a patch file for (to be applied
              to) SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a patch file that has been applied
              to SPDXRef-B
            - Is to be used when SPDXRef-A is an exact copy of SPDXRef-B
            - Is to be used when SPDXRef-A is a file that was added to SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was deleted from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a file that was modified from
              SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is expanded from the archive
              SPDXRef-B
            - Is to be used when SPDXRef-A dynamically links to SPDXRef-B
            - Is to be used when SPDXRef-A statically links to SPDXRef-B
            - Is to be used when SPDXRef-A is a data file used in SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is a test case used in testing
              SPDXRef-B
            - Is to be used when SPDXRef-A is used to build SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a development tool for
              SPDXRef-B
            - Is to be used when SPDXRef-A is used for testing SPDXRef-B
            - Is to be used when SPDXRef-A is used as a test tool for SPDXRef-B
            - Is to be used when SPDXRef-A provides documentation of SPDXRef-B
            - Is to be used when SPDXRef-A is an optional component of SPDXRef-B
            - Is to be used when SPDXRef-A is a metafile of SPDXRef-B
            - >-
              Is to be used when SPDXRef-A is used as a package as part of
              SPDXRef-B
            - >-
              Is to be used when (current) SPDXRef-DOCUMENT amends the SPDX
              information in SPDXRef-B
            - Is to be used when SPDXRef-A is a prerequisite for SPDXRef-B
            - Is to be used when SPDXRef-A has as a prerequisite SPDXRef-B
            - >-
              Is to be used for a relationship which has not been defined in the
              formal SPDX specification. A description of the relationship
              should be included in the Relationship comments field
          description: The type of relationship between the source and target SPDX elements
          type: string
    URI:
      description: An URI message.
      properties:
        uri:
          type: string
          description: The unique resource identifier.
        label:
          type: string
          description: A label for the URI.
      id: URI
      type: object
    InTotoProvenance:
      properties:
        recipe:
          $ref: '#/components/schemas/Recipe'
          description: >-
            Identifies the configuration used for the build. When combined with
            materials, this SHOULD fully describe the build, such that
            re-running this recipe results in bit-for-bit identical output (if
            the build is reproducible). required
        builderConfig:
          $ref: '#/components/schemas/BuilderConfig'
          description: required
        materials:
          type: array
          description: >-
            The collection of artifacts that influenced the build including
            sources, dependencies, build tools, base images, and so on. This is
            considered to be incomplete unless metadata.completeness.materials
            is true. Unset or null is equivalent to empty.
          items:
            type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
      id: InTotoProvenance
      type: object
    Product:
      id: Product
      type: object
      properties:
        id:
          description: >-
            Token that identifies a product so that it can be referred to from
            other parts in the document. There is no predefined format as long
            as it uniquely identifies a group in the context of the current
            document.
          type: string
        identifierHelper:
          $ref: '#/components/schemas/IdentifierHelper'
          description: Helps in identifying the underlying product.
        name:
          description: Name of the product.
          type: string
      description: >-
        Product contains information about a product and how to uniquely
        identify it.
    Hash:
      description: Container message for hash values.
      id: Hash
      type: object
      properties:
        type:
          type: string
          enumDescriptions:
            - No hash requested.
            - A sha256 hash.
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
        value:
          description: The hash value.
          format: byte
          type: string
    ListScanConfigsResponse:
      type: object
      description: A list of scan configs for the project.
      id: ListScanConfigsResponse
      properties:
        nextPageToken:
          description: A page token to pass in order to get more scan configs.
          type: string
        scanConfigs:
          type: array
          items:
            $ref: '#/components/schemas/ScanConfig'
          description: The set of scan configs.
    Publisher:
      properties:
        name:
          type: string
          description: 'Name of the publisher. Examples: ''Google'', ''Google Cloud Platform''.'
        publisherNamespace:
          description: >-
            The context or namespace. Contains a URL which is under control of
            the issuing party and can be used as a globally unique identifier
            for that issuing party. Example: https://csaf.io
          type: string
        issuingAuthority:
          type: string
          description: >-
            Provides information about the authority of the issuing party to
            release the document, in particular, the party's constituency and
            responsibilities or other obligations.
      type: object
      description: Publisher contains information about the publisher of this Note.
      id: Publisher
    Version:
      description: >-
        Version contains structured information about the version of the
        package. For a discussion of this in Debian/Ubuntu:
        http://serverfault.com/questions/604541/debian-packages-version-convention
        For a discussion of this in Redhat/Fedora/Centos:
        http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
      type: object
      id: Version
      properties:
        name:
          description: The main part of the version name.
          type: string
        inclusive:
          type: boolean
          description: >-
            Whether this version is vulnerable, when defining the version
            bounds. For example, if the minimum version is 2.0, inclusive=true
            would say 2.0 is vulnerable, while inclusive=false would say it's
            not
        epoch:
          description: Used to correct mistakes in the version numbering scheme.
          format: int32
          type: integer
        kind:
          description: >-
            Distinguish between sentinel MIN/MAX versions and normal versions.
            If kind is not NORMAL, then the other fields are ignored.
          type: string
          enumDescriptions:
            - A standard package version, defined by the other fields.
            - >-
              A special version representing negative infinity, other fields are
              ignored.
            - >-
              A special version representing positive infinity, other fields are
              ignored.
          enum:
            - NORMAL
            - MINIMUM
            - MAXIMUM
        revision:
          description: The iteration of the package build from the above version.
          type: string
    CVSS:
      id: CVSS
      properties:
        impactScore:
          type: number
          format: float
        attackComplexity:
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
          type: string
          description: Defined in CVSS v3, CVSS v2
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
        integrityImpact:
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
          description: Defined in CVSS v3, CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
        scope:
          description: Defined in CVSS v3
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          enumDescriptions:
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
          type: string
        userInteraction:
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          description: Defined in CVSS v3
          enumDescriptions:
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
          type: string
        baseScore:
          description: The base score is a function of the base metric scores.
          type: number
          format: float
        availabilityImpact:
          description: Defined in CVSS v3, CVSS v2
          type: string
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
        privilegesRequired:
          description: Defined in CVSS v3
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
          enumDescriptions:
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3
        authentication:
          type: string
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
          description: Defined in CVSS v2
          enumDescriptions:
            - Defined in CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
        attackVector:
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
          description: >-
            Base Metrics Represents the intrinsic characteristics of a
            vulnerability that are constant over time and across user
            environments. Defined in CVSS v3, CVSS v2
          type: string
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
        exploitabilityScore:
          type: number
          format: float
        confidentialityImpact:
          type: string
          description: Defined in CVSS v3, CVSS v2
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          enumDescriptions:
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v3
            - Defined in CVSS v3
            - Defined in CVSS v3, CVSS v2
            - Defined in CVSS v2
            - Defined in CVSS v2
      type: object
      description: >-
        Common Vulnerability Scoring System. This message is compatible with
        CVSS v2 and v3. For CVSS v2 details, see
        https://www.first.org/cvss/v2/guide CVSS v2 calculator:
        https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3
        details, see https://www.first.org/cvss/specification-document CVSS v3
        calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
    FileLocation:
      type: object
      id: FileLocation
      description: Indicates the location at which a package was found.
      properties:
        filePath:
          description: >-
            For jars that are contained inside .war files, this filepath can
            indicate the path to war file combined with the path to jar file.
          type: string
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      id: Status
      properties:
        code:
          format: int32
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
        details:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource:
      type: object
      properties:
        entryPoint:
          type: string
          description: String identifying the entry point into the build.
        digest:
          description: >-
            Collection of cryptographic digests for the contents of the artifact
            specified by invocation.configSource.uri.
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
          description: URI indicating the identity of the source of the config.
      id: >-
        GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource
      description: >-
        Describes where the config file that kicked off the build came from.
        This is effectively a pointer to the source where buildConfig came from.
    Discovery:
      properties:
        analysisKind:
          description: The kind of analysis that is handled by this discovery.
          type: string
          enum:
            - KIND_UNSPECIFIED
            - PACKAGE_VULNERABILITY
            - BUILD_DETAILS
            - IMAGE_BASIS
            - PACKAGE_MANAGER
            - DEPLOYABLE
            - DISCOVERY
            - ATTESTATION_AUTHORITY
            - UPGRADE
            - COMPLIANCE
            - SBOM
            - SPDX_PACKAGE
            - SPDX_FILE
            - SPDX_RELATIONSHIP
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          enumDescriptions:
            - Unknown
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available software upgrade.
            - >-
              This represents a compliance check that can be applied to a
              resource.
            - This represents a software bill of materials.
            - This represents an SPDX Package.
            - This represents an SPDX File.
            - This represents an SPDX Relationship.
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents a reference to an SBOM.
      id: Discovery
      description: >-
        A note that indicates a type of analysis a provider would perform. This
        note exists in a provider's project. A `Discovery` occurrence is created
        in a consumer's project at the start of analysis. The occurrence's
        operation will indicate the status of the analysis. Absence of an
        occurrence linked to this note for a resource indicates that analysis
        hasn't started.
      type: object
    DSSEAttestationNote:
      type: object
      properties:
        hint:
          description: DSSEHint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/DSSEHint'
      id: DSSEAttestationNote
      description: A note describing an attestation
  parameters:
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1alpha1/providers/{providersId}/notes/{notesId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    delete:
      description: Deletes the given `Note` from the system.
      operationId: containeranalysis.providers.notes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: delete
    patch:
      description: Updates an existing `Note`.
      operationId: containeranalysis.providers.notes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: exec
    get:
      description: Returns the requested `Note`.
      operationId: containeranalysis.providers.notes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: select
  /v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a note or an `Occurrence` resource.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or occurrence, respectively. Attempting to call this method on
        a resource without the required permission will result in a
        `PERMISSION_DENIED` error. Attempting to call this method on a
        non-existent resource will result in a `NOT_FOUND` error if the user has
        list permission on the project, or a `PERMISSION_DENIED` error
        otherwise. The resource takes the following formats:
        `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
        projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      operationId: containeranalysis.providers.notes.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: select
  /v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified `Note` or `Occurrence`.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a `Note` or an `Occurrence`, respectively. Attempting to call this
        method without these permissions will result in a ` `PERMISSION_DENIED`
        error. Attempting to call this method on a non-existent resource will
        result in a `NOT_FOUND` error if the user has
        `containeranalysis.notes.list` permission on a `Note` or
        `containeranalysis.occurrences.list` on an `Occurrence`, or a
        `PERMISSION_DENIED` error otherwise. The resource takes the following
        formats: `projects/{projectid}/occurrences/{occurrenceid}` for
        occurrences and projects/{projectid}/notes/{noteid} for notes
      operationId: containeranalysis.providers.notes.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or
        occurrence resource. Requires list permission on the project (for
        example, "storage.objects.list" on the containing bucket for testing
        permission of an object). Attempting to call this method on a
        non-existent resource will result in a `NOT_FOUND` error if the user has
        list permission on the project, or a `PERMISSION_DENIED` error
        otherwise. The resource takes the following formats:
        `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences`
        and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      operationId: containeranalysis.providers.notes.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1alpha1/providers/{providersId}/notes:
    parameters: *ref_1
    post:
      description: Creates a new `Note`.
      operationId: containeranalysis.providers.notes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: query
          name: noteId
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: insert
    get:
      description: Lists all `Notes` for a given project.
      operationId: containeranalysis.providers.notes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNotesResponse'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: notes
      x-stackQL-verb: select
  /v1alpha1/providers/{providersId}/notes/{notesId}/occurrences:
    parameters: *ref_1
    get:
      description: >-
        Lists `Occurrences` referencing the specified `Note`. Use this method to
        get all occurrences referencing your `Note` across all your customer
        projects.
      operationId: containeranalysis.providers.notes.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteOccurrencesResponse'
      parameters:
        - in: path
          name: providersId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}:
    parameters: *ref_1
    patch:
      description: Updates the scan configuration to a new value.
      operationId: containeranalysis.projects.scanConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: scanConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: scan_configs
      x-stackQL-verb: exec
    get:
      description: Gets a specific scan configuration for a project.
      operationId: containeranalysis.projects.scanConfigs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: scanConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: scan_configs
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/scanConfigs:
    parameters: *ref_1
    get:
      description: Lists scan configurations for a project.
      operationId: containeranalysis.projects.scanConfigs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListScanConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: scan_configs
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a note or an `Occurrence` resource.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or occurrence, respectively. Attempting to call this method on
        a resource without the required permission will result in a
        `PERMISSION_DENIED` error. Attempting to call this method on a
        non-existent resource will result in a `NOT_FOUND` error if the user has
        list permission on the project, or a `PERMISSION_DENIED` error
        otherwise. The resource takes the following formats:
        `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
        projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      operationId: containeranalysis.projects.occurrences.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/occurrences:
    parameters: *ref_1
    post:
      description: >-
        Creates a new `Occurrence`. Use this method to create `Occurrences` for
        a resource.
      operationId: containeranalysis.projects.occurrences.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: insert
    get:
      description: Lists active `Occurrences` for a given project matching the filters.
      operationId: containeranalysis.projects.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: kind
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes:
    parameters: *ref_1
    get:
      description: Gets the `Note` attached to the given `Occurrence`.
      operationId: containeranalysis.projects.occurrences.getNotes
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences__notes
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or
        occurrence resource. Requires list permission on the project (for
        example, "storage.objects.list" on the containing bucket for testing
        permission of an object). Attempting to call this method on a
        non-existent resource will result in a `NOT_FOUND` error if the user has
        list permission on the project, or a `PERMISSION_DENIED` error
        otherwise. The resource takes the following formats:
        `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences`
        and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      operationId: containeranalysis.projects.occurrences.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
  /v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:
    parameters: *ref_1
    get:
      description: Returns the requested `Occurrence`.
      operationId: containeranalysis.projects.occurrences.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes the given `Occurrence` from the system. Use this when an
        `Occurrence` is no longer applicable for the given resource.
      operationId: containeranalysis.projects.occurrences.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: delete
    patch:
      description: Updates an existing occurrence.
      operationId: containeranalysis.projects.occurrences.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: exec
  /v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified `Note` or `Occurrence`.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a `Note` or an `Occurrence`, respectively. Attempting to call this
        method without these permissions will result in a ` `PERMISSION_DENIED`
        error. Attempting to call this method on a non-existent resource will
        result in a `NOT_FOUND` error if the user has
        `containeranalysis.notes.list` permission on a `Note` or
        `containeranalysis.occurrences.list` on an `Occurrence`, or a
        `PERMISSION_DENIED` error otherwise. The resource takes the following
        formats: `projects/{projectid}/occurrences/{occurrenceid}` for
        occurrences and projects/{projectid}/notes/{noteid} for notes
      operationId: containeranalysis.projects.occurrences.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
  /v1alpha1/projects/{projectsId}/occurrences:vulnerabilitySummary:
    parameters: *ref_1
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVulnzOccurrencesSummaryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences__vulnerability_summary
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences:
    parameters: *ref_1
    get:
      description: >-
        Lists `Occurrences` referencing the specified `Note`. Use this method to
        get all occurrences referencing your `Note` across all your customer
        projects.
      operationId: containeranalysis.projects.notes.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/notes/{notesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a note or an `Occurrence` resource.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or occurrence, respectively. Attempting to call this method on
        a resource without the required permission will result in a
        `PERMISSION_DENIED` error. Attempting to call this method on a
        non-existent resource will result in a `NOT_FOUND` error if the user has
        list permission on the project, or a `PERMISSION_DENIED` error
        otherwise. The resource takes the following formats:
        `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
        projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      operationId: containeranalysis.projects.notes.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: select
  /v1alpha1/projects/{projectsId}/notes/{notesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or
        occurrence resource. Requires list permission on the project (for
        example, "storage.objects.list" on the containing bucket for testing
        permission of an object). Attempting to call this method on a
        non-existent resource will result in a `NOT_FOUND` error if the user has
        list permission on the project, or a `PERMISSION_DENIED` error
        otherwise. The resource takes the following formats:
        `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences`
        and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      operationId: containeranalysis.projects.notes.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1alpha1/projects/{projectsId}/notes/{notesId}:
    parameters: *ref_1
    patch:
      description: Updates an existing `Note`.
      operationId: containeranalysis.projects.notes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: exec
    get:
      description: Returns the requested `Note`.
      operationId: containeranalysis.projects.notes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: select
    delete:
      description: Deletes the given `Note` from the system.
      operationId: containeranalysis.projects.notes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: delete
  /v1alpha1/projects/{projectsId}/notes/{notesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified `Note` or `Occurrence`.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a `Note` or an `Occurrence`, respectively. Attempting to call this
        method without these permissions will result in a ` `PERMISSION_DENIED`
        error. Attempting to call this method on a non-existent resource will
        result in a `NOT_FOUND` error if the user has
        `containeranalysis.notes.list` permission on a `Note` or
        `containeranalysis.occurrences.list` on an `Occurrence`, or a
        `PERMISSION_DENIED` error otherwise. The resource takes the following
        formats: `projects/{projectid}/occurrences/{occurrenceid}` for
        occurrences and projects/{projectid}/notes/{noteid} for notes
      operationId: containeranalysis.projects.notes.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1alpha1/projects/{projectsId}/notes:
    parameters: *ref_1
    get:
      description: Lists all `Notes` for a given project.
      operationId: containeranalysis.projects.notes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: notes
      x-stackQL-verb: select
    post:
      description: Creates a new `Note`.
      operationId: containeranalysis.projects.notes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: noteId
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: insert
  /v1alpha1/projects/{projectsId}/operations:
    parameters: *ref_1
    post:
      description: Creates a new `Operation`.
      operationId: containeranalysis.projects.operations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: insert
  /v1alpha1/projects/{projectsId}/operations/{operationsId}:
    parameters: *ref_1
    patch:
      description: >-
        Updates an existing operation returns an error if operation does not
        exist. The only valid operations are to update mark the done bit change
        the result.
      operationId: containeranalysis.projects.operations.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
