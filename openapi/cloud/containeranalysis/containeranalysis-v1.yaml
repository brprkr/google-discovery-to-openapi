openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Container Analysis API
  description: >-
    An implementation of the Grafeas API, which stores, and enables querying and
    retrieval of critical metadata about all of your software artifacts.
  version: v1
  x-discovery-doc-revision: '20230612'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/container-analysis/api/reference/rest/
servers:
  - url: https://containeranalysis.googleapis.com
components:
  schemas:
    Policy:
      properties:
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
        etag:
          format: byte
          type: string
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
      type: object
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      id: Policy
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      type: object
      id: TestIamPermissionsResponse
      properties:
        permissions:
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          items:
            type: string
          type: array
    InTotoStatement:
      id: InTotoStatement
      description: >-
        Spec defined at
        https://github.com/in-toto/attestation/tree/main/spec#statement The
        serialized InTotoStatement will be stored as Envelope.payload.
        Envelope.payloadType is always "application/vnd.in-toto+json".
      properties:
        _type:
          description: Always `https://in-toto.io/Statement/v0.1`.
          type: string
        slsaProvenance:
          $ref: '#/components/schemas/SlsaProvenance'
        provenance:
          $ref: '#/components/schemas/InTotoProvenance'
        slsaProvenanceZeroTwo:
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
        predicateType:
          description: '`https://slsa.dev/provenance/v0.1` for SlsaProvenance.'
          type: string
        subject:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
      type: object
    DiscoveryOccurrence:
      id: DiscoveryOccurrence
      description: Provides information about the analysis status of a discovered resource.
      properties:
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
        analysisStatus:
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - >-
              Analysis has finished unsuccessfully, the analysis itself is in a
              bad state.
            - The resource is known not to be supported.
          type: string
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          description: The status of discovery for the resource.
        analysisStatusError:
          $ref: '#/components/schemas/Status'
          description: >-
            When an error is encountered this will contain a LocalizedMessage
            under details to show to the user. The LocalizedMessage is output
            only and populated by the API.
        analysisError:
          items:
            $ref: '#/components/schemas/Status'
          type: array
          description: >-
            Indicates any errors encountered during analysis of a resource.
            There could be 0 or more of these errors.
        lastScanTime:
          type: string
          format: google-datetime
          description: The last time this resource was scanned.
        continuousAnalysis:
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          description: Whether the resource is continuously analyzed.
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
          type: string
        cpe:
          type: string
          description: The CPE of the resource being scanned.
        archiveTime:
          format: google-datetime
          type: string
          description: >-
            Output only. The time occurrences related to this discovery
            occurrence were archived.
          readOnly: true
      type: object
    DiscoveryNote:
      description: >-
        A note that indicates a type of analysis a provider would perform. This
        note exists in a provider's project. A `Discovery` occurrence is created
        in a consumer's project at the start of analysis.
      properties:
        analysisKind:
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          type: string
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          description: >-
            Required. Immutable. The kind of analysis that is handled by this
            discovery.
      type: object
      id: DiscoveryNote
    SbomReferenceIntotoPredicate:
      id: SbomReferenceIntotoPredicate
      description: A predicate which describes the SBOM being referenced.
      type: object
      properties:
        digest:
          additionalProperties:
            type: string
          description: A map of algorithm to digest of the contents of the SBOM.
          type: object
        mimeType:
          description: The mime type of the SBOM.
          type: string
        location:
          description: The location of the SBOM.
          type: string
        referrerId:
          type: string
          description: The person or system referring this predicate to the consumer.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Results:
      properties:
        artifactManifest:
          type: string
          description: >-
            Path to the artifact manifest for non-container artifacts uploaded
            to Cloud Storage. Only populated when artifacts are uploaded to
            Cloud Storage.
        buildStepOutputs:
          description: >-
            List of build step outputs, produced by builder images, in the order
            corresponding to build step indices. [Cloud
            Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
            can produce this output by writing to `$BUILDER_OUTPUT/output`. Only
            the first 4KB of data is stored.
          items:
            type: string
            format: byte
          type: array
        buildStepImages:
          items:
            type: string
          description: >-
            List of build step digests, in the order corresponding to build step
            indices.
          type: array
        artifactTiming:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: Time to push all non-container artifacts to Cloud Storage.
        mavenArtifacts:
          description: >-
            Maven artifacts uploaded to Artifact Registry at the end of the
            build.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
        npmPackages:
          description: Npm packages uploaded to Artifact Registry at the end of the build.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
        images:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
          description: Container images that were built as a part of the build.
          type: array
        numArtifacts:
          format: int64
          description: >-
            Number of non-container artifacts uploaded to Cloud Storage. Only
            populated when artifacts are uploaded to Cloud Storage.
          type: string
        pythonPackages:
          description: >-
            Python artifacts uploaded to Artifact Registry at the end of the
            build.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
          type: array
      description: Artifacts created by the build pipeline.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
      type: object
    BuilderConfig:
      type: object
      properties:
        id:
          type: string
      id: BuilderConfig
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo:
      properties:
        detail:
          type: string
          description: Explains the failure issue in more detail using hard-coded text.
        type:
          description: The name of the failure.
          type: string
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
      description: A fatal problem encountered during the execution of the build.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions:
      type: object
      description: Optional arguments to enable specific features of builds.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
      properties:
        defaultLogsBucketBehavior:
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          enumDescriptions:
            - Unspecified.
            - >-
              Bucket is located in user-owned project in the same region as the
              build. The builder service account must have access to create and
              write to GCS buckets in the build project.
          description: Optional. Option to specify how default logs buckets are setup.
          type: string
        volumes:
          type: array
          description: >-
            Global list of volumes to mount for ALL build steps Each volume is
            created as an empty volume prior to starting the build process. Upon
            completion of the build, volumes and their contents are discarded.
            Global volume names and paths cannot conflict with the volumes
            defined a build step. Using a global volume in a build with only one
            step is not valid as it is indicative of a build request with an
            incorrect configuration.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
        dynamicSubstitutions:
          type: boolean
          description: >-
            Option to specify whether or not to apply bash style string
            operations to the substitutions. NOTE: this is always enabled for
            triggered builds and cannot be overridden in the build configuration
            file.
        sourceProvenanceHash:
          type: array
          items:
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              - Use a sha512 hash.
            type: string
          description: Requested hash for SourceProvenance.
        workerPool:
          type: string
          description: This field deprecated; please use `pool.name` instead.
        substitutionOption:
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          description: >-
            Option to specify behavior when there is an error in the
            substitution checks. NOTE: this is always set to ALLOW_LOOSE for
            triggered builds and cannot be overridden in the build configuration
            file.
          enumDescriptions:
            - >-
              Fails the build if error in substitutions checks, like missing a
              substitution in the template or in the map.
            - Do not fail the build if error in substitutions checks.
          type: string
        env:
          description: >-
            A list of global environment variable definitions that will exist
            for all build steps in this build. If a variable is defined in both
            globally and in a build step, the variable will use the build step
            value. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        diskSizeGb:
          description: >-
            Requested disk size for the VM that runs the build. Note that this
            is *NOT* "disk free"; some of the space will be used by the
            operating system and build utilities. Also note that this is the
            minimum disk size that will be allocated for the build -- the build
            may run with a larger disk than requested. At present, the maximum
            disk size is 2000GB; builds that request more than the maximum are
            rejected with an error.
          format: int64
          type: string
        machineType:
          type: string
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
          description: Compute Engine machine type on which to run the build.
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
        logStreamingOption:
          type: string
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Cloud Storage.
            - >-
              Build logs should not be streamed to Cloud Storage; they will be
              written when the build is completed.
          description: Option to define build log streaming behavior to Cloud Storage.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
        requestedVerifyOption:
          description: Requested verifiability options.
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
          enum:
            - NOT_VERIFIED
            - VERIFIED
          type: string
        logging:
          description: >-
            Option to specify the logging mode, which determines if and where
            build logs are stored.
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
          type: string
          enumDescriptions:
            - >-
              The service determines the logging mode. The default is `LEGACY`.
              Do not rely on the default logging behavior as it may change in
              the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - >-
              Build logs are stored in Cloud Logging. Selecting this option will
              not allow [logs
              streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
            - Turn off all logging. No build logs will be captured.
        secretEnv:
          type: array
          description: >-
            A list of global environment variables, which are encrypted using a
            Cloud Key Management Service crypto key. These values must be
            specified in the build's `Secret`. These variables will be available
            to all build steps in this build.
          items:
            type: string
        pool:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
          description: >-
            Optional. Specification for execution on a `WorkerPool`. See
            [running builds in a private
            pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
            for more information.
    Binding:
      type: object
      description: Associates `members`, or principals, with a `role`.
      properties:
        members:
          items:
            type: string
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding.
          type: array
        condition:
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
        role:
          type: string
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`.
      id: Binding
    GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder:
      type: object
      description: >-
        Identifies the entity that executed the recipe, which is trusted to have
        correctly performed the operation and populated this provenance.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
      properties:
        id:
          type: string
    Recipe:
      properties:
        type:
          description: >-
            URI indicating what type of recipe was performed. It determines the
            meaning of recipe.entryPoint, recipe.arguments, recipe.environment,
            and materials.
          type: string
        entryPoint:
          type: string
          description: >-
            String identifying the entry point into the build. This is often a
            path to a configuration file and/or a target label within that file.
            The syntax and meaning are defined by recipe.type. For example, if
            the recipe type were "make", then this would reference the directory
            in which to run make as well as which target to use.
        environment:
          description: >-
            Any other builder-controlled inputs necessary for correctly
            evaluating the recipe. Usually only needed for reproducing the build
            but not evaluated as part of policy. Since the environment field can
            greatly vary in structure, depending on the builder and recipe type,
            this is of form "Any".
          type: array
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
        definedInMaterial:
          description: >-
            Index in materials containing the recipe steps that are not implied
            by recipe.type. For example, if the recipe type were "make", then
            this would point to the source containing the Makefile, not the make
            program itself. Set to -1 if the recipe doesn't come from a
            material, as zero is default unset value for int64.
          type: string
          format: int64
        arguments:
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: >-
            Collection of all external inputs that influenced the build on top
            of recipe.definedInMaterial and recipe.entryPoint. For example, if
            the recipe type were "make", then this might be the flags passed to
            make aside from the target, which is captured in recipe.entryPoint.
            Since the arguments field can greatly vary in structure, depending
            on the builder and recipe type, this is of form "Any".
      description: >-
        Steps taken to build the artifact. For a TaskRun, typically each
        container corresponds to one step in the recipe.
      type: object
      id: Recipe
    Status:
      id: Status
      type: object
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      properties:
        details:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
    WindowsUpdate:
      id: WindowsUpdate
      properties:
        title:
          description: The localized title of the update.
          type: string
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
        lastPublishedTimestamp:
          description: The last published timestamp of the update.
          type: string
          format: google-datetime
        kbArticleIds:
          type: array
          items:
            type: string
          description: >-
            The Microsoft Knowledge Base article IDs that are associated with
            the update.
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          description: The list of categories to which the update belongs.
        identity:
          $ref: '#/components/schemas/Identity'
          description: Required - The unique identifier for the update.
        description:
          type: string
          description: The localized description of the update.
      description: >-
        Windows Update represents the metadata about the update for the Windows
        operating system. The fields in this message come from the Windows
        Update API documented at
        https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
      type: object
    AttestationNote:
      type: object
      properties:
        hint:
          $ref: '#/components/schemas/Hint'
          description: Hint hints at the purpose of the attestation authority.
      description: >-
        Note kind that represents a logical attestation "role" or "authority".
        For example, an organization might have one `Authority` for "QA" and one
        for "build". This note is intended to act strictly as a grouping
        mechanism for the attached occurrences (Attestations). This grouping
        mechanism also provides a security boundary, since IAM ACLs gate the
        ability for a principle to attach an occurrence to a given note. It also
        provides a single point of lookup to find all attached attestation
        occurrences, even if they don't all live in the same project.
      id: AttestationNote
    BatchCreateNotesRequest:
      description: Request to create notes in batch.
      properties:
        notes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Note'
          description: Required. The notes to create. Max allowed length is 1000.
      id: BatchCreateNotesRequest
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secret:
      properties:
        kmsKeyName:
          type: string
          description: Cloud KMS key name to use to decrypt these envs.
        secretEnv:
          type: object
          additionalProperties:
            format: byte
            type: string
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
      type: object
      description: >-
        Pairs a set of secret environment variables containing encrypted values
        with the Cloud KMS key to use to decrypt the value. Note: Use
        `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with
        `secret`. For instructions see:
        https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
    ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan:
      properties:
        startTime:
          type: string
          format: google-datetime
          description: Start of time span.
        endTime:
          type: string
          format: google-datetime
          description: End of time span.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
      type: object
      description: Start and end times for a build execution phase.
    GerritSourceContext:
      id: GerritSourceContext
      description: A SourceContext referring to a Gerrit project.
      type: object
      properties:
        revisionId:
          type: string
          description: A revision (commit) ID.
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        gerritProject:
          type: string
          description: >-
            The full project name within the host. Projects may be nested, so
            "project/subproject" is a valid project name. The "repo name" is the
            hostURI/project.
        hostUri:
          type: string
          description: The URI of a running Gerrit instance.
    DSSEAttestationNote:
      properties:
        hint:
          description: DSSEHint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/DSSEHint'
      id: DSSEAttestationNote
      type: object
    VulnerabilityOccurrencesSummary:
      description: >-
        A summary of how many vulnerability occurrences there are per resource
        and severity type.
      type: object
      properties:
        counts:
          description: >-
            A listing by resource of the number of fixable and total
            vulnerabilities.
          items:
            $ref: '#/components/schemas/FixableTotalByDigest'
          type: array
      id: VulnerabilityOccurrencesSummary
    GrafeasV1FileLocation:
      description: Indicates the location at which a package was found.
      type: object
      properties:
        filePath:
          description: >-
            For jars that are contained inside .war files, this filepath can
            indicate the path to war file combined with the path to jar file.
          type: string
      id: GrafeasV1FileLocation
    SlsaRecipe:
      description: >-
        Steps taken to build the artifact. For a TaskRun, typically each
        container corresponds to one step in the recipe.
      id: SlsaRecipe
      properties:
        definedInMaterial:
          type: string
          format: int64
          description: >-
            Index in materials containing the recipe steps that are not implied
            by recipe.type. For example, if the recipe type were "make", then
            this would point to the source containing the Makefile, not the make
            program itself. Set to -1 if the recipe doesn't come from a
            material, as zero is default unset value for int64.
        arguments:
          description: >-
            Collection of all external inputs that influenced the build on top
            of recipe.definedInMaterial and recipe.entryPoint. For example, if
            the recipe type were "make", then this might be the flags passed to
            make aside from the target, which is captured in recipe.entryPoint.
            Depending on the recipe Type, the structure may be different.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type:
          type: string
          description: >-
            URI indicating what type of recipe was performed. It determines the
            meaning of recipe.entryPoint, recipe.arguments, recipe.environment,
            and materials.
        environment:
          description: >-
            Any other builder-controlled inputs necessary for correctly
            evaluating the recipe. Usually only needed for reproducing the build
            but not evaluated as part of policy. Depending on the recipe Type,
            the structure may be different.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
        entryPoint:
          type: string
          description: >-
            String identifying the entry point into the build. This is often a
            path to a configuration file and/or a target label within that file.
            The syntax and meaning are defined by recipe.type. For example, if
            the recipe type were "make", then this would reference the directory
            in which to run make as well as which target to use.
      type: object
    CVSSv3:
      type: object
      properties:
        attackVector:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          description: >-
            Base Metrics Represents the intrinsic characteristics of a
            vulnerability that are constant over time and across user
            environments.
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        baseScore:
          format: float
          description: The base score is a function of the base metric scores.
          type: number
        privilegesRequired:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
        scope:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        impactScore:
          format: float
          type: number
        exploitabilityScore:
          type: number
          format: float
        userInteraction:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          type: string
        integrityImpact:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        availabilityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        attackComplexity:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
          type: string
      description: >-
        Common Vulnerability Scoring System version 3. For details, see
        https://www.first.org/cvss/specification-document
      id: CVSSv3
    Detail:
      description: >-
        A detail for a distro and package affected by this vulnerability and its
        associated fix (if one is available).
      type: object
      properties:
        affectedCpeUri:
          type: string
          description: >-
            Required. The [CPE URI](https://cpe.mitre.org/specification/) this
            vulnerability affects.
        fixedVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            The distro recommended version to update to that contains a fix for
            this vulnerability. Setting this to VersionKind.MAXIMUM means no
            such version is yet available.
        severityName:
          type: string
          description: The distro assigned severity of this vulnerability.
        affectedPackage:
          description: Required. The package this vulnerability affects.
          type: string
        vendor:
          description: The name of the vendor of the product.
          type: string
        affectedVersionEnd:
          description: >-
            The version number at the end of an interval in which this
            vulnerability exists. A vulnerability can affect a package between
            version numbers that are disjoint sets of intervals (example:
            [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will
            be represented in its own Detail. If a specific affected version is
            provided by a vulnerability database, affected_version_start and
            affected_version_end will be the same in that Detail.
          $ref: '#/components/schemas/Version'
        fixedCpeUri:
          type: string
          description: >-
            The distro recommended [CPE
            URI](https://cpe.mitre.org/specification/) to update to that
            contains a fix for this vulnerability. It is possible for this to be
            different from the affected_cpe_uri.
        fixedPackage:
          description: >-
            The distro recommended package to update to that contains a fix for
            this vulnerability. It is possible for this to be different from the
            affected_package.
          type: string
        sourceUpdateTime:
          description: >-
            The time this information was last changed at the source. This is an
            upstream timestamp from the underlying information source - e.g.
            Ubuntu security tracker.
          type: string
          format: google-datetime
        affectedVersionStart:
          description: >-
            The version number at the start of an interval in which this
            vulnerability exists. A vulnerability can affect a package between
            version numbers that are disjoint sets of intervals (example:
            [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will
            be represented in its own Detail. If a specific affected version is
            provided by a vulnerability database, affected_version_start and
            affected_version_end will be the same in that Detail.
          $ref: '#/components/schemas/Version'
        source:
          type: string
          description: The source from which the information in this Detail was obtained.
        description:
          description: A vendor-specific description of this vulnerability.
          type: string
        isObsolete:
          type: boolean
          description: >-
            Whether this detail is obsolete. Occurrences are expected not to
            point to obsolete details.
        packageType:
          type: string
          description: >-
            The type of package; whether native or non native (e.g., ruby gems,
            node.js packages, etc.).
      id: Detail
    AttestationOccurrence:
      type: object
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          description: >-
            One or more signatures over `serialized_payload`. Verifier
            implementations should consider this attestation message verified if
            at least one `signature` verifies `serialized_payload`. See
            `Signature` in common.proto for more details on signature structure
            and verification.
        serializedPayload:
          description: >-
            Required. The serialized payload that is verified by one or more
            `signatures`.
          format: byte
          type: string
        jwts:
          type: array
          description: >-
            One or more JWTs encoding a self-contained attestation. Each JWT
            encodes the payload that it verifies within the JWT itself. Verifier
            implementation SHOULD ignore the `serialized_payload` field when
            verifying these JWTs. If only JWTs are present on this
            AttestationOccurrence, then the `serialized_payload` SHOULD be left
            empty. Each JWT SHOULD encode a claim specific to the `resource_uri`
            of this Occurrence, but this is not validated by Grafeas metadata
            API implementations. The JWT itself is opaque to Grafeas.
          items:
            $ref: '#/components/schemas/Jwt'
      id: AttestationOccurrence
      description: >-
        Occurrence that represents a single "attestation". The authenticity of
        an attestation can be verified using the attached signature. If the
        verifier trusts the public key of the signer, then verifying the
        signature is sufficient to establish trust. In this circumstance, the
        authority to which this attestation is attached is primarily useful for
        lookup (how to find this attestation if you already know the authority
        and artifact to be verified) and intent (for which authority this
        attestation was intended to sign.
    AliasContext:
      id: AliasContext
      description: An alias to a repo revision.
      type: object
      properties:
        name:
          type: string
          description: The alias name.
        kind:
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - >-
              Used to specify non-standard aliases. For example, if a Git repo
              has a ref named "refs/foo/bar".
          type: string
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          description: The alias kind.
    DSSEAttestationOccurrence:
      id: DSSEAttestationOccurrence
      properties:
        statement:
          $ref: '#/components/schemas/InTotoStatement'
        envelope:
          description: >-
            If doing something security critical, make sure to verify the
            signatures in this metadata.
          $ref: '#/components/schemas/Envelope'
      type: object
      description: >-
        Deprecated. Prefer to use a regular Occurrence, and populate the
        Envelope at the top level of the Occurrence.
    Hash:
      id: Hash
      description: Container message for hash values.
      properties:
        value:
          type: string
          description: Required. The hash value.
          format: byte
        type:
          description: Required. The type of hash that was performed, e.g. "SHA-256".
          type: string
      type: object
    DSSEHint:
      id: DSSEHint
      description: >-
        This submessage provides human-readable hints about the purpose of the
        authority. Because the name of a note acts as its resource reference, it
        is important to disambiguate the canonical name of the Note (which might
        be a UUID for security purposes) from "readable" names more suitable for
        debug output. Note that these hints should not be used to look up
        authorities in security sensitive contexts, such as when looking up
        attestations to verify.
      type: object
      properties:
        humanReadableName:
          type: string
          description: >-
            Required. The human readable name of this attestation authority, for
            example "cloudbuild-prod".
    License:
      id: License
      properties:
        comments:
          type: string
          description: Comments
        expression:
          type: string
          description: >-
            Often a single license can be used to represent the licensing terms.
            Sometimes it is necessary to include a choice of one or more
            licenses or some combination of license identifiers. Examples:
            "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later
            WITH Bison-exception-2.2".
      description: License information.
      type: object
    Distribution:
      id: Distribution
      properties:
        cpeUri:
          description: >-
            Required. The cpe_uri in [CPE
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package.
          type: string
        description:
          type: string
          description: The distribution channel-specific description of this package.
        latestVersion:
          description: >-
            The latest available version of this package in this distribution
            channel.
          $ref: '#/components/schemas/Version'
        url:
          type: string
          description: The distribution channel-specific homepage for this package.
        maintainer:
          description: A freeform string denoting the maintainer of this package.
          type: string
        architecture:
          type: string
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          description: >-
            The CPU architecture for which packages in this distribution channel
            were built.
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
      description: >-
        This represents a particular channel of distribution for a given
        package. E.g., Debian's jessie-backports dpkg mirror.
      type: object
    ImageNote:
      type: object
      id: ImageNote
      properties:
        fingerprint:
          description: Required. Immutable. The fingerprint of the base image.
          $ref: '#/components/schemas/Fingerprint'
        resourceUrl:
          type: string
          description: >-
            Required. Immutable. The resource_url for the resource representing
            the basis of associated occurrence images.
      description: >-
        Basis describes the base image portion (Note) of the DockerImage
        relationship. Linked occurrences are derived from this or an equivalent
        image via: FROM Or an equivalent reference, e.g., a tag of the
        resource_url.
    VulnerabilityNote:
      type: object
      description: A security vulnerability that can be found in resources.
      properties:
        details:
          items:
            $ref: '#/components/schemas/Detail'
          description: >-
            Details of all known distros and packages affected by this
            vulnerability.
          type: array
        severity:
          description: The note provider assigned severity of this vulnerability.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        windowsDetails:
          description: >-
            Windows details get their own format because the information format
            and model don't match a normal detail. Specifically Windows updates
            are done as patches, thus Windows vulnerabilities really are a
            missing package, rather than a package being at an incorrect
            version.
          type: array
          items:
            $ref: '#/components/schemas/WindowsDetail'
        cvssVersion:
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          enumDescriptions:
            - ''
            - ''
            - ''
          description: CVSS version used to populate cvss_score and severity.
          type: string
        cvssV2:
          $ref: '#/components/schemas/CVSS'
          description: The full description of the v2 CVSS for this vulnerability.
        sourceUpdateTime:
          type: string
          format: google-datetime
          description: >-
            The time this information was last changed at the source. This is an
            upstream timestamp from the underlying information source - e.g.
            Ubuntu security tracker.
        cvssV3:
          description: The full description of the CVSSv3 for this vulnerability.
          $ref: '#/components/schemas/CVSSv3'
        cvssScore:
          description: >-
            The CVSS score of this vulnerability. CVSS score is on a scale of 0
            - 10 where 0 indicates low severity and 10 indicates high severity.
          type: number
          format: float
      id: VulnerabilityNote
    ComplianceNote:
      type: object
      properties:
        title:
          type: string
          description: The title that identifies this compliance check.
        remediation:
          description: A description of remediation steps if the compliance check fails.
          type: string
        scanInstructions:
          format: byte
          description: Serialized scan instructions with a predefined format.
          type: string
        cisBenchmark:
          $ref: '#/components/schemas/CisBenchmark'
        version:
          items:
            $ref: '#/components/schemas/ComplianceVersion'
          type: array
          description: The OS and config versions the benchmark applies to.
        description:
          type: string
          description: A description about this compliance check.
        rationale:
          type: string
          description: A rationale for the existence of this compliance check.
      id: ComplianceNote
    ImageOccurrence:
      properties:
        distance:
          description: >-
            Output only. The number of layers by which this image differs from
            the associated image basis.
          type: integer
          format: int32
        layerInfo:
          items:
            $ref: '#/components/schemas/Layer'
          type: array
          description: >-
            This contains layer-specific metadata, if populated it has length
            "distance" and is ordered with [distance] being the layer
            immediately following the base image and [1] being the final layer.
        fingerprint:
          description: Required. The fingerprint of the derived image.
          $ref: '#/components/schemas/Fingerprint'
        baseResourceUrl:
          type: string
          description: >-
            Output only. This contains the base image URL for the derived image
            occurrence.
      type: object
      id: ImageOccurrence
      description: >-
        Details of the derived image portion of the DockerImage relationship.
        This image would be produced from a Dockerfile with FROM .
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation:
      type: object
      description: Identifies the event that kicked off the build.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
      properties:
        configSource:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource'
        parameters:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
        environment:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
    SbomReferenceIntotoPayload:
      id: SbomReferenceIntotoPayload
      type: object
      properties:
        predicateType:
          description: URI identifying the type of the Predicate.
          type: string
        _type:
          type: string
          description: Identifier for the schema of the Statement.
        predicate:
          description: >-
            Additional parameters of the Predicate. Includes the actual data
            about the SBOM.
          $ref: '#/components/schemas/SbomReferenceIntotoPredicate'
        subject:
          type: array
          description: >-
            Set of software artifacts that the attestation applies to. Each
            element represents a single software artifact.
          items:
            $ref: '#/components/schemas/Subject'
      description: >-
        The actual payload that contains the SBOM Reference data. The payload
        follows the intoto statement specification. See
        https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md
        for more details.
    VulnerabilityOccurrence:
      type: object
      properties:
        relatedUrls:
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: Output only. URLs related to this vulnerability.
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: >-
            Output only. The note provider assigned severity of this
            vulnerability.
        longDescription:
          type: string
          description: Output only. A detailed description of this vulnerability.
        cvssV2:
          description: The cvss v2 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        packageIssue:
          description: >-
            Required. The set of affected locations and their fixes (if
            available) within the associated resource.
          type: array
          items:
            $ref: '#/components/schemas/PackageIssue'
        shortDescription:
          type: string
          description: Output only. A one sentence description of this vulnerability.
        type:
          description: >-
            The type of package; whether native or non native (e.g., ruby gems,
            node.js packages, etc.).
          type: string
        cvssScore:
          type: number
          format: float
          description: >-
            Output only. The CVSS score of this vulnerability. CVSS score is on
            a scale of 0 - 10 where 0 indicates low severity and 10 indicates
            high severity.
        cvssv3:
          description: The cvss v3 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        fixAvailable:
          description: >-
            Output only. Whether at least one of the affected packages has a fix
            available.
          type: boolean
        cvssVersion:
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          description: Output only. CVSS version used to populate cvss_score and severity.
        vexAssessment:
          $ref: '#/components/schemas/VexAssessment'
        effectiveSeverity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
          description: >-
            The distro assigned severity for this vulnerability when it is
            available, otherwise this is the note provider assigned severity.
            When there are multiple PackageIssues for this vulnerability, they
            can have different effective severities because some might be
            provided by the distro while others are provided by the language
            ecosystem for a language pack. For this reason, it is advised to use
            the effective severity on the PackageIssue level. In the case where
            multiple PackageIssues have differing effective severities, this
            field should be the highest severity for any of the PackageIssues.
      description: An occurrence of a severity vulnerability on a resource.
      id: VulnerabilityOccurrence
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval:
      type: object
      description: >-
        BuildApproval describes a build's approval configuration, state, and
        result.
      properties:
        state:
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          description: Output only. The state of this build's approval.
          readOnly: true
        result:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
          description: Output only. Result of manual approval for this Build.
          readOnly: true
        config:
          readOnly: true
          description: Output only. Configuration for manual approval of this build.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
    TimeSpan:
      id: TimeSpan
      properties:
        endTime:
          description: End of time span.
          type: string
          format: google-datetime
        startTime:
          type: string
          description: Start of time span.
          format: google-datetime
      description: 'Start and end times for a build execution phase. Next ID: 3'
      type: object
    CisBenchmark:
      description: A compliance check that is a CIS benchmark.
      type: object
      properties:
        profileLevel:
          type: integer
          format: int32
        severity:
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
      id: CisBenchmark
    Digest:
      properties:
        digestBytes:
          format: byte
          description: Value of the digest.
          type: string
        algo:
          type: string
          description: '`SHA1`, `SHA512` etc.'
      description: Digest information.
      type: object
      id: Digest
    SourceContext:
      properties:
        gerrit:
          description: A SourceContext referring to a Gerrit project.
          $ref: '#/components/schemas/GerritSourceContext'
        cloudRepo:
          description: >-
            A SourceContext referring to a revision in a Google Cloud Source
            Repo.
          $ref: '#/components/schemas/CloudRepoSourceContext'
        git:
          $ref: '#/components/schemas/GitSourceContext'
          description: >-
            A SourceContext referring to any third party Git repo (e.g.,
            GitHub).
        labels:
          additionalProperties:
            type: string
          type: object
          description: Labels with user defined metadata.
      description: >-
        A SourceContext is a reference to a tree of files. A SourceContext
        together with a path point to a unique revision of a single file or
        directory.
      id: SourceContext
      type: object
    ListNotesResponse:
      type: object
      id: ListNotesResponse
      description: Response for listing notes.
      properties:
        notes:
          type: array
          description: The notes requested.
          items:
            $ref: '#/components/schemas/Note'
        nextPageToken:
          description: >-
            The next pagination token in the list response. It should be used as
            `page_token` for the following request. An empty value means no more
            results.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
      description: >-
        Pairs a secret environment variable with a SecretVersion in Secret
        Manager.
      properties:
        env:
          type: string
          description: >-
            Environment variable name to associate with the secret. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step.
        versionName:
          type: string
          description: >-
            Resource name of the SecretVersion. In format:
            projects/*/secrets/*/versions/*
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
      properties:
        paths:
          type: array
          items:
            type: string
          description: >-
            Path globs used to match files in the build's workspace. For Python/
            Twine, this is usually `dist/*`, and sometimes additionally an
            `.asc` file.
        repository:
          type: string
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the
            workspace matching any path pattern will be uploaded to Artifact
            Registry with this location as a prefix.
      description: >-
        Python package to upload to Artifact Registry upon successful completion
        of all build steps. A package can encapsulate multiple objects to be
        uploaded to a single repository.
      type: object
    UpgradeDistribution:
      description: >-
        The Upgrade Distribution represents metadata about the Upgrade for each
        operating system (CPE). Some distributions have additional metadata
        around updates, classifying them into various categories and severities.
      properties:
        classification:
          description: >-
            The operating system classification of this Upgrade, as specified by
            the upstream operating system upgrade feed. For Windows the
            classification is one of the category_ids listed at
            https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
          type: string
        cpeUri:
          description: >-
            Required - The specific operating system this metadata applies to.
            See https://cpe.mitre.org/specification/.
          type: string
        severity:
          type: string
          description: The severity as specified by the upstream operating system.
        cve:
          description: The cve tied to this Upgrade.
          type: array
          items:
            type: string
      type: object
      id: UpgradeDistribution
    BatchCreateOccurrencesResponse:
      properties:
        occurrences:
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The occurrences that were created.
          type: array
      description: Response for creating occurrences in batch.
      type: object
      id: BatchCreateOccurrencesResponse
    ContaineranalysisGoogleDevtoolsCloudbuildV1Build:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Build
      type: object
      description: >-
        A build resource in the Cloud Build API. At a high level, a `Build`
        describes where to find source code, how to build it (for example, the
        builder image to run on the source), and where to store the built
        artifacts. Fields can include the following variables, which will be
        expanded when the build is created: - $PROJECT_ID: the project ID of the
        build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION:
        the location/region of the build. - $BUILD_ID: the autogenerated ID of
        the build. - $REPO_NAME: the source repository name specified by
        RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. -
        $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or
        $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the
        specified branch or tag. - $SHORT_SHA: first 7 characters of
        $REVISION_ID or $COMMIT_SHA.
      properties:
        tags:
          items:
            type: string
          type: array
          description: Tags for annotation of a `Build`. These are not docker tags.
        substitutions:
          type: object
          description: Substitutions data for `Build` resource.
          additionalProperties:
            type: string
        artifacts:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
          description: >-
            Artifacts produced by the build that should be uploaded upon
            successful completion of all build steps.
        options:
          description: Special options for this build.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
        projectId:
          readOnly: true
          type: string
          description: Output only. ID of the project.
        timing:
          description: >-
            Output only. Stores timing information for phases of the build.
            Valid keys are: * BUILD: time to execute all build steps. * PUSH:
            time to push all artifacts including docker images and non docker
            artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time
            to set up build. If the build does not specify source or images,
            these keys will not be included.
          additionalProperties:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
          type: object
        name:
          description: >-
            Output only. The 'Build' name with format:
            `projects/{project}/locations/{location}/builds/{build}`, where
            {build} is a unique identifier generated by the service.
          readOnly: true
          type: string
        availableSecrets:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
          description: Secrets and secret environment variables.
        buildTriggerId:
          description: >-
            Output only. The ID of the `BuildTrigger` that triggered this build,
            if it was triggered automatically.
          readOnly: true
          type: string
        serviceAccount:
          type: string
          description: >-
            IAM service account whose credentials will be used at build runtime.
            Must be of the format
            `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be
            email address or uniqueId of the service account. 
        finishTime:
          readOnly: true
          type: string
          description: >-
            Output only. Time at which execution of the build was finished. The
            difference between finish_time and start_time is the duration of the
            build's execution.
          format: google-datetime
        status:
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          type: string
          readOnly: true
          description: Output only. Status of the build.
        logsBucket:
          description: >-
            Cloud Storage bucket where logs should be written (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Logs file names will be of the format
            `${logs_bucket}/log-${build_id}.txt`.
          type: string
        images:
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images are pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the `Build` resource's results field. If any of the images
            fail to be pushed, the build status is marked `FAILURE`.
          type: array
          items:
            type: string
        approval:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
          readOnly: true
          description: >-
            Output only. Describes this build's approval configuration, status,
            and result.
        warnings:
          type: array
          readOnly: true
          description: >-
            Output only. Non-fatal problems encountered during the execution of
            the build.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
        timeout:
          description: >-
            Amount of time that this build should be allowed to run, to second
            granularity. If this amount of time elapses, work on the build will
            cease and the build status will be `TIMEOUT`. `timeout` starts
            ticking from `startTime`. Default time is 60 minutes.
          format: google-duration
          type: string
        logUrl:
          type: string
          readOnly: true
          description: Output only. URL to logs for this build in Google Cloud Console.
        sourceProvenance:
          description: Output only. A permanent fixed identifier for source.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
          readOnly: true
        source:
          description: The location of the source files to build.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Source
        failureInfo:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
          readOnly: true
          description: >-
            Output only. Contains information about the build when
            status=FAILURE.
        secrets:
          description: >-
            Secrets to decrypt using Cloud Key Management Service. Note: Secret
            Manager is the recommended technique for managing sensitive data
            with Cloud Build. Use `available_secrets` to configure builds to
            access secrets from Secret Manager. For instructions, see:
            https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
          type: array
        startTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. Time at which execution of the build was started.
        results:
          description: Output only. Results of the build.
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Results
        steps:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
          description: Required. The operations to be performed on the workspace.
          type: array
        queueTtl:
          format: google-duration
          type: string
          description: >-
            TTL in queue for this build. If provided and the build is enqueued
            longer than this value, the build will expire and the build status
            will be `EXPIRED`. The TTL starts ticking from create_time.
        createTime:
          type: string
          format: google-datetime
          readOnly: true
          description: >-
            Output only. Time at which the request to create the build was
            received.
        statusDetail:
          type: string
          description: Output only. Customer-readable message about the current status.
          readOnly: true
        id:
          readOnly: true
          type: string
          description: Output only. Unique identifier of the build.
    Hint:
      type: object
      id: Hint
      description: >-
        This submessage provides human-readable hints about the purpose of the
        authority. Because the name of a note acts as its resource reference, it
        is important to disambiguate the canonical name of the Note (which might
        be a UUID for security purposes) from "readable" names more suitable for
        debug output. Note that these hints should not be used to look up
        authorities in security sensitive contexts, such as when looking up
        attestations to verify.
      properties:
        humanReadableName:
          type: string
          description: >-
            Required. The human readable name of this attestation authority, for
            example "qa".
    GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource:
      description: >-
        Describes where the config file that kicked off the build came from.
        This is effectively a pointer to the source where buildConfig came from.
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        entryPoint:
          type: string
        uri:
          type: string
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
    Product:
      properties:
        name:
          type: string
          description: Name of the product.
        id:
          type: string
          description: >-
            Token that identifies a product so that it can be referred to from
            other parts in the document. There is no predefined format as long
            as it uniquely identifies a group in the context of the current
            document.
        genericUri:
          description: >-
            Contains a URI which is vendor-specific. Example: The artifact
            repository URL of an image.
          type: string
      description: >-
        Product contains information about a product and how to uniquely
        identify it.
      id: Product
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage:
      properties:
        pushTiming:
          description: >-
            Output only. Stores timing information for pushing the specified
            image.
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        name:
          description: >-
            Name used to push the container image to Google Container Registry,
            as presented to `docker push`.
          type: string
        digest:
          description: Docker Registry 2.0 digest.
          type: string
      description: An image built by the pipeline.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects:
      type: object
      properties:
        location:
          description: >-
            Cloud Storage bucket and optional object path, in the form
            "gs://bucket/path/to/somewhere/". (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Files in the workspace matching any path pattern will be uploaded to
            Cloud Storage with this location as a prefix.
          type: string
        timing:
          description: >-
            Output only. Stores timing information for pushing all artifact
            objects.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
        paths:
          items:
            type: string
          description: Path globs used to match files in the build's workspace.
          type: array
      description: >-
        Files in the workspace to upload to Cloud Storage upon successful
        completion of all build steps.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
    EnvelopeSignature:
      id: EnvelopeSignature
      properties:
        keyid:
          type: string
        sig:
          type: string
          format: byte
      type: object
    SBOMReferenceOccurrence:
      description: >-
        The occurrence representing an SBOM reference as applied to a specific
        resource. The occurrence follows the DSSE specification. See
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for
        more details.
      id: SBOMReferenceOccurrence
      properties:
        payload:
          $ref: '#/components/schemas/SbomReferenceIntotoPayload'
          description: The actual payload that contains the SBOM reference data.
        signatures:
          description: The signatures over the payload.
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          type: array
        payloadType:
          type: string
          description: >-
            The kind of payload that SbomReferenceIntotoPayload takes. Since
            it's in the intoto format, this value is expected to be
            'application/vnd.in-toto+json'.
      type: object
    DeploymentNote:
      properties:
        resourceUri:
          items:
            type: string
          description: Required. Resource URI for the artifact being deployed.
          type: array
      description: An artifact that can be deployed in some runtime.
      type: object
      id: DeploymentNote
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact:
      properties:
        pushTiming:
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
        uri:
          description: URI of the uploaded artifact.
          type: string
        fileHashes:
          description: Hash types and values of the Maven Artifact.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
      type: object
      description: A Maven artifact uploaded using the MavenArtifact directive.
    SlsaProvenance:
      properties:
        materials:
          items:
            $ref: '#/components/schemas/Material'
          type: array
          description: >-
            The collection of artifacts that influenced the build including
            sources, dependencies, build tools, base images, and so on. This is
            considered to be incomplete unless metadata.completeness.materials
            is true. Unset or null is equivalent to empty.
        metadata:
          $ref: '#/components/schemas/SlsaMetadata'
        recipe:
          description: >-
            Identifies the configuration used for the build. When combined with
            materials, this SHOULD fully describe the build, such that
            re-running this recipe results in bit-for-bit identical output (if
            the build is reproducible). required
          $ref: '#/components/schemas/SlsaRecipe'
        builder:
          description: required
          $ref: '#/components/schemas/SlsaBuilder'
      type: object
      id: SlsaProvenance
    BatchCreateOccurrencesRequest:
      description: Request to create occurrences in batch.
      id: BatchCreateOccurrencesRequest
      properties:
        occurrences:
          type: array
          description: Required. The occurrences to create. Max allowed length is 1000.
          items:
            $ref: '#/components/schemas/Occurrence'
      type: object
    ComplianceVersion:
      id: ComplianceVersion
      type: object
      description: >-
        Describes the CIS benchmark version that is applicable to a given OS and
        os version.
      properties:
        benchmarkDocument:
          description: >-
            The name of the document that defines this benchmark, e.g. "CIS
            Container-Optimized OS".
          type: string
        cpeUri:
          description: >-
            The CPE URI (https://cpe.mitre.org/specification/) this benchmark is
            applicable to.
          type: string
        version:
          description: >-
            The version of the benchmark. This is set to the version of the
            OS-specific CIS document the benchmark is defined in.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage:
      type: object
      properties:
        packagePath:
          type: string
          description: Path to the package.json. e.g. workspace/path/to/package
        repository:
          type: string
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in
            the workspace specified by path will be zipped and uploaded to
            Artifact Registry with this location as a prefix.
      description: >-
        Npm package to upload to Artifact Registry upon successful completion of
        all build steps.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
    SBOMReferenceNote:
      type: object
      id: SBOMReferenceNote
      properties:
        format:
          type: string
          description: The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...
        version:
          type: string
          description: >-
            The version of the format that the SBOM takes. E.g. if the format is
            spdx, the version may be 2.3.
      description: The note representing an SBOM reference.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets:
      description: Secrets and secret environment variables.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
      type: object
      properties:
        inline:
          description: >-
            Secrets encrypted with KMS key and the associated secret environment
            variable.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
        secretManager:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
          description: >-
            Secrets in Secret Manager and associated secret environment
            variable.
          type: array
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
      type: object
      description: Location of the source in a supported storage service.
      properties:
        gitSource:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
          description: If provided, get the source from this Git repository.
        storageSource:
          description: If provided, get the source from this location in Cloud Storage.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
        repoSource:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
          description: >-
            If provided, get the source from this location in a Cloud Source
            Repository.
        storageSourceManifest:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
          description: >-
            If provided, get the source from this manifest in Cloud Storage.
            This feature is in Preview; see description
            [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
    RepoId:
      type: object
      id: RepoId
      properties:
        uid:
          description: A server-assigned, globally unique identifier.
          type: string
        projectRepoId:
          $ref: '#/components/schemas/ProjectRepoId'
          description: A combination of a project ID and a repo name.
      description: A unique identifier for a Cloud Repo.
    GetIamPolicyRequest:
      description: Request message for `GetIamPolicy` method.
      type: object
      properties:
        options:
          description: >-
            OPTIONAL: A `GetPolicyOptions` object for specifying options to
            `GetIamPolicy`.
          $ref: '#/components/schemas/GetPolicyOptions'
      id: GetIamPolicyRequest
    Artifact:
      type: object
      id: Artifact
      properties:
        checksum:
          description: >-
            Hash or checksum value of a binary, or Docker Registry 2.0 digest of
            a container.
          type: string
        id:
          description: >-
            Artifact ID, if any; for container images, this will be a URL by
            digest like `gcr.io/projectID/imagename@sha256:123456`.
          type: string
        names:
          description: >-
            Related artifact names. This may be the path to a binary or jar
            file, or in the case of a container build, the name used to push the
            container image to Google Container Registry, as presented to
            `docker push`. Note that a single Artifact ID can have multiple
            names, for example if two tags are applied to one image.
          items:
            type: string
          type: array
      description: Artifact describes a build product.
    ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
      properties:
        fileHash:
          description: Collection of file hashes.
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
      type: object
      description: >-
        Container message for hashes of byte content of files, used in
        SourceProvenance messages to verify integrity of source input to the
        build.
    RelatedUrl:
      properties:
        label:
          type: string
          description: Label to describe usage of the URL.
        url:
          description: Specific URL associated with the resource.
          type: string
      id: RelatedUrl
      type: object
      description: Metadata for any related URL information.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Volume:
      properties:
        name:
          type: string
          description: >-
            Name of the volume to mount. Volume names must be unique per build
            step and must be valid names for Docker volumes. Each named volume
            must be used by at least two build steps.
        path:
          type: string
          description: >-
            Path at which to mount the volume. Paths must be absolute and cannot
            conflict with other volume paths on the same build step or with
            certain reserved volume paths.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
      type: object
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps in order to persist files across build step execution.
    Identity:
      type: object
      id: Identity
      properties:
        updateId:
          description: The revision independent identifier of the update.
          type: string
        revision:
          type: integer
          format: int32
          description: The revision number of the update.
      description: The unique identifier of the update.
    ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource:
      type: object
      description: Location of the source in a Google Cloud Source Repository.
      properties:
        substitutions:
          type: object
          description: >-
            Substitutions to use in a triggered build. Should only be used with
            RunBuildTrigger
          additionalProperties:
            type: string
        tagName:
          type: string
          description: >-
            Regex matching tags to build. The syntax of the regular expressions
            accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
        repoName:
          type: string
          description: Name of the Cloud Source Repository.
        projectId:
          description: >-
            ID of the project that owns the Cloud Source Repository. If omitted,
            the project ID requesting the build is assumed.
          type: string
        dir:
          type: string
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
        invertRegex:
          description: >-
            Only trigger a build if the revision regex does NOT match the
            revision regex.
          type: boolean
        branchName:
          type: string
          description: >-
            Regex matching branches to build. The syntax of the regular
            expressions accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
        commitSha:
          description: Explicit commit SHA to build.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts:
      description: >-
        Artifacts produced by a build that should be uploaded upon successful
        completion of all build steps.
      properties:
        objects:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
          description: >-
            A list of objects to be uploaded to Cloud Storage upon successful
            completion of all build steps. Files in the workspace matching
            specified paths globs will be uploaded to the specified Cloud
            Storage location using the builder service account's credentials.
            The location and generation of the uploaded objects will be stored
            in the Build resource's results field. If any objects fail to be
            pushed, the build is marked FAILURE.
        npmPackages:
          type: array
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
          description: >-
            A list of npm packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. Npm packages in the
            specified paths will be uploaded to the specified Artifact Registry
            repository using the builder service account's credentials. If any
            packages fail to be pushed, the build is marked FAILURE.
        pythonPackages:
          description: >-
            A list of Python packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. The build service account
            credentials will be used to perform the upload. If any objects fail
            to be pushed, the build is marked FAILURE.
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
          type: array
        images:
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images will be pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the Build resource's results field. If any of the images
            fail to be pushed, the build is marked FAILURE.
          type: array
          items:
            type: string
        mavenArtifacts:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
          description: >-
            A list of Maven artifacts to be uploaded to Artifact Registry upon
            successful completion of all build steps. Artifacts in the workspace
            matching specified paths globs will be uploaded to the specified
            Artifact Registry repository using the builder service account's
            credentials. If any artifacts fail to be pushed, the build is marked
            FAILURE.
          type: array
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
    CloudRepoSourceContext:
      id: CloudRepoSourceContext
      description: >-
        A CloudRepoSourceContext denotes a particular revision in a Google Cloud
        Source Repo.
      properties:
        repoId:
          description: The ID of the repo.
          $ref: '#/components/schemas/RepoId'
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        revisionId:
          description: A revision ID.
          type: string
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata:
      description: Other properties of the build.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
      type: object
      properties:
        buildStartedOn:
          type: string
          format: google-datetime
        reproducible:
          type: boolean
        completeness:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness'
        buildInvocationId:
          type: string
        buildFinishedOn:
          type: string
          format: google-datetime
    Publisher:
      id: Publisher
      description: Publisher contains information about the publisher of this Note.
      type: object
      properties:
        publisherNamespace:
          type: string
          description: >-
            The context or namespace. Contains a URL which is under control of
            the issuing party and can be used as a globally unique identifier
            for that issuing party. Example: https://csaf.io
        name:
          type: string
          description: 'Name of the publisher. Examples: ''Google'', ''Google Cloud Platform''.'
        issuingAuthority:
          description: >-
            Provides information about the authority of the issuing party to
            release the document, in particular, the party's constituency and
            responsibilities or other obligations.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1Hash:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
      description: Container message for hash values.
      properties:
        value:
          type: string
          description: The hash value.
          format: byte
        type:
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
          description: The type of hash that was performed.
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
            - Use a sha512 hash.
          type: string
      type: object
    AnalysisCompleted:
      description: >-
        Indicates which analysis completed successfully. Multiple types of
        analysis can be performed on a single resource.
      id: AnalysisCompleted
      properties:
        analysisType:
          items:
            type: string
          type: array
      type: object
    Remediation:
      description: >-
        Specifies details on how to handle (and presumably, fix) a
        vulnerability.
      properties:
        details:
          type: string
          description: >-
            Contains a comprehensive human-readable discussion of the
            remediation.
        remediationType:
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
          description: The type of remediation that can be applied.
          type: string
          enumDescriptions:
            - No remediation type specified.
            - A MITIGATION is available.
            - No fix is planned.
            - Not available.
            - A vendor fix is available.
            - A workaround is available.
        remediationUri:
          $ref: '#/components/schemas/RelatedUrl'
          description: Contains the URL where to obtain the remediation.
      id: Remediation
      type: object
    BatchCreateNotesResponse:
      description: Response for creating notes in batch.
      properties:
        notes:
          description: The notes that were created.
          type: array
          items:
            $ref: '#/components/schemas/Note'
      id: BatchCreateNotesResponse
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
      description: >-
        The collection of artifacts that influenced the build including sources,
        dependencies, build tools, base images, and so on.
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
        uri:
          type: string
      type: object
    Justification:
      properties:
        justificationType:
          type: string
          description: The justification type for this vulnerability.
          enumDescriptions:
            - JUSTIFICATION_TYPE_UNSPECIFIED.
            - The vulnerable component is not present in the product.
            - >-
              The vulnerable code is not present. Typically this case occurs
              when source code is configured or built in a way that excludes the
              vulnerable code.
            - >-
              The vulnerable code can not be executed. Typically this case
              occurs when the product includes the vulnerable code but does not
              call or use the vulnerable code.
            - >-
              The vulnerable code cannot be controlled by an attacker to exploit
              the vulnerability.
            - >-
              The product includes built-in protections or features that prevent
              exploitation of the vulnerability. These built-in protections
              cannot be subverted by the attacker and cannot be configured or
              disabled by the user. These mitigations completely prevent
              exploitation based on known attack vectors.
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
        details:
          type: string
          description: Additional details on why this justification was chosen.
      type: object
      description: >-
        Justification provides the justification when the state of the
        assessment if NOT_AFFECTED.
      id: Justification
    Volume:
      properties:
        name:
          description: >-
            Name of the volume to mount. Volume names must be unique per build
            step and must be valid names for Docker volumes. Each named volume
            must be used by at least two build steps.
          type: string
        path:
          description: >-
            Path at which to mount the volume. Paths must be absolute and cannot
            conflict with other volume paths on the same build step or with
            certain reserved volume paths.
          type: string
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps in order to persist files across build step execution. Next ID: 3
      id: Volume
      type: object
    Command:
      properties:
        dir:
          description: >-
            Working directory (relative to project source root) used when
            running this command.
          type: string
        name:
          description: >-
            Required. Name of the command, as presented on the command line, or
            if the command is packaged as a Docker container, as presented to
            `docker pull`.
          type: string
        args:
          items:
            type: string
          type: array
          description: Command-line arguments used when executing this command.
        waitFor:
          type: array
          items:
            type: string
          description: The ID(s) of the command(s) that this command depends on.
        id:
          type: string
          description: >-
            Optional unique identifier for this command, used in wait_for to
            reference this command as a dependency.
        env:
          description: Environment variables set before running this command.
          items:
            type: string
          type: array
      id: Command
      description: Command describes a step performed as part of the build pipeline.
      type: object
    BuildStep:
      description: 'A step in the build pipeline. Next ID: 20'
      id: BuildStep
      properties:
        status:
          type: string
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          description: >-
            Output only. Status of the build step. At this time, build step
            status is only updated on build completion; step status is not
            updated in real-time as the build progresses.
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build has been received and is being queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
        env:
          items:
            type: string
          description: >-
            A list of environment variable definitions to be used when running a
            step. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
          type: array
        name:
          description: >-
            Required. The name of the container image that will run this
            particular build step. If the image is available in the host's
            Docker daemon's cache, it will be run directly. If not, the host
            will attempt to pull the image first, using the builder service
            account's credentials if necessary. The Docker daemon's cache will
            already have the latest versions of all of the officially supported
            build steps
            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
            The Docker daemon will also have cached many of the layers for some
            popular images, like "ubuntu", "debian", but they will be refreshed
            at the time you attempt to use them. If you built an image in a
            previous build step, it will be stored in the host's Docker daemon's
            cache and is available to use as the name for a later build step.
          type: string
        entrypoint:
          type: string
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint. If unset, the image's default entrypoint is used.
        waitFor:
          description: >-
            The ID(s) of the step(s) that this build step depends on. This build
            step will not start until all the build steps in `wait_for` have
            completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have
            completed successfully.
          type: array
          items:
            type: string
        allowFailure:
          type: boolean
          description: >-
            Allow this build step to fail without failing the entire build. If
            false, the entire build will fail if this step fails. Otherwise, the
            build will succeed, but this step will still have a failure status.
            Error information will be reported in the failure_detail field.
        script:
          description: >-
            A shell script to be executed in the step. When script is provided,
            the user cannot specify the entrypoint or args.
          type: string
        args:
          items:
            type: string
          description: >-
            A list of arguments that will be presented to the step when it is
            started. If the image used to run the step's container has an
            entrypoint, the `args` are used as arguments to that entrypoint. If
            the image does not define an entrypoint, the first element in args
            is used as the entrypoint, and the remainder will be used as
            arguments.
          type: array
        secretEnv:
          items:
            type: string
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key Management Service crypto key. These values must be specified in
            the build's `Secret`.
          type: array
        id:
          description: >-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
          type: string
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/Volume'
          description: >-
            List of volumes to mount into the build step. Each volume is created
            as an empty volume prior to execution of the build step. Upon
            completion of the build, volumes and their contents are discarded.
            Using a named volume in only one step is not valid as it is
            indicative of a build request with an incorrect configuration.
        exitCode:
          description: Output only. Return code from running the step.
          format: int32
          type: integer
        timeout:
          format: google-duration
          type: string
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no time limit and will be allowed to continue to run until
            either it completes or the build itself times out.
        pullTiming:
          description: >-
            Output only. Stores timing information for pulling this build step's
            builder image only.
          $ref: '#/components/schemas/TimeSpan'
        timing:
          $ref: '#/components/schemas/TimeSpan'
          description: >-
            Output only. Stores timing information for executing this build
            step.
        allowExitCodes:
          items:
            format: int32
            type: integer
          type: array
          description: >-
            Allow this build step to fail without failing the entire build if
            and only if the exit code is one of the specified codes. If
            allow_failure is also specified, this field will take precedence.
        dir:
          type: string
          description: >-
            Working directory to use when running this step's container. If this
            value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's
            working directory, in which case the contents of the path may not be
            persisted across build step executions, unless a `volume` for that
            path is specified. If the build specifies a `RepoSource` with `dir`
            and a step with a `dir`, which specifies an absolute path, the
            `RepoSource` `dir` is ignored for the step's execution.
      type: object
    Fingerprint:
      properties:
        v1Name:
          description: >-
            Required. The layer ID of the final layer in the Docker image's v1
            representation.
          type: string
        v2Name:
          type: string
          description: >-
            Output only. The name of the image's v2 blobs computed via: [bottom]
            := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the
            name of the final blob is kept.
        v2Blob:
          items:
            type: string
          type: array
          description: Required. The ordered list of v2 blobs that represent a given image.
      type: object
      id: Fingerprint
      description: A set of properties that uniquely identify a given Docker image.
    GitSourceContext:
      description: >-
        A GitSourceContext denotes a particular revision in a third party Git
        repository (e.g., GitHub).
      type: object
      properties:
        url:
          type: string
          description: Git repository URL.
        revisionId:
          description: Git commit hash.
          type: string
      id: GitSourceContext
    SlsaCompleteness:
      properties:
        materials:
          type: boolean
          description: >-
            If true, the builder claims that materials are complete, usually
            through some controls to prevent network access. Sometimes called
            "hermetic".
        arguments:
          description: >-
            If true, the builder claims that recipe.arguments is complete,
            meaning that all external inputs are properly captured in the
            recipe.
          type: boolean
        environment:
          type: boolean
          description: >-
            If true, the builder claims that recipe.environment is claimed to be
            complete.
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
      id: SlsaCompleteness
      type: object
    NonCompliantFile:
      id: NonCompliantFile
      properties:
        reason:
          type: string
          description: Explains why a file is non compliant for a CIS check.
        path:
          description: Empty if `display_command` is set.
          type: string
        displayCommand:
          type: string
          description: Command to display the non-compliant files.
      type: object
      description: >-
        Details about files that caused a compliance check to fail.
        display_command is a single command that can be used to display a list
        of non compliant files. When there is no such command, we can also
        iterate a list of non compliant file using 'path'.
    ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
      properties:
        dir:
          type: string
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
        url:
          type: string
          description: >-
            Location of the Git repo to build. This will be used as a `git
            remote`, see https://git-scm.com/docs/git-remote.
        revision:
          type: string
          description: >-
            The revision to fetch from the Git repository such as a branch, a
            tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to
            fetch the revision from the Git repository; therefore make sure that
            the string you provide for `revision` is parsable by the command.
            For information on string values accepted by `git fetch`, see
            https://git-scm.com/docs/gitrevisions#_specifying_revisions. For
            information on `git fetch`, see https://git-scm.com/docs/git-fetch.
      description: Location of the source in any accessible Git repository.
    ListNoteOccurrencesResponse:
      description: Response for listing occurrences for a note.
      properties:
        occurrences:
          type: array
          description: The occurrences attached to the specified note.
          items:
            $ref: '#/components/schemas/Occurrence'
        nextPageToken:
          type: string
          description: Token to provide to skip to a particular spot in the list.
      id: ListNoteOccurrencesResponse
      type: object
    Subject:
      id: Subject
      properties:
        digest:
          type: object
          description: >-
            `"": ""` Algorithms can be e.g. sha256, sha512 See
            https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
          additionalProperties:
            type: string
        name:
          type: string
      type: object
    BuildProvenance:
      description: >-
        Provenance of a build. Contains all information needed to verify the
        full details about the build from source to completion.
      properties:
        builderVersion:
          type: string
          description: Version string of the builder at the time this build was executed.
        builtArtifacts:
          items:
            $ref: '#/components/schemas/Artifact'
          description: Output of the build.
          type: array
        projectId:
          description: ID of the project.
          type: string
        createTime:
          description: Time at which the build was created.
          type: string
          format: google-datetime
        sourceProvenance:
          $ref: '#/components/schemas/Source'
          description: Details of the Source input to the build.
        triggerId:
          description: >-
            Trigger identifier if the build was triggered automatically; empty
            if not.
          type: string
        creator:
          description: >-
            E-mail address of the user who initiated this build. Note that this
            was the user's e-mail address at the time the build was initiated;
            this address may not represent the same end-user for all time.
          type: string
        buildOptions:
          additionalProperties:
            type: string
          description: >-
            Special options applied to this build. This is a catch-all field
            where build providers can enter any desired additional details.
          type: object
        id:
          type: string
          description: Required. Unique identifier of the build.
        logsUri:
          description: URI where any logs for this provenance were written.
          type: string
        commands:
          type: array
          description: Commands requested by the build.
          items:
            $ref: '#/components/schemas/Command'
        startTime:
          format: google-datetime
          type: string
          description: Time at which execution of the build was started.
        endTime:
          format: google-datetime
          type: string
          description: Time at which execution of the build was finished.
      type: object
      id: BuildProvenance
    VulnerabilityAssessmentNote:
      id: VulnerabilityAssessmentNote
      properties:
        longDescription:
          type: string
          description: A detailed description of this Vex.
        title:
          type: string
          description: The title of the note. E.g. `Vex-Debian-11.4`
        assessment:
          $ref: '#/components/schemas/Assessment'
          description: Represents a vulnerability assessment for the product.
        product:
          description: The product affected by this vex.
          $ref: '#/components/schemas/Product'
        publisher:
          $ref: '#/components/schemas/Publisher'
          description: Publisher details of this Note.
        shortDescription:
          description: A one sentence description of this Vex.
          type: string
        languageCode:
          description: >-
            Identifies the language used by this document, corresponding to IETF
            BCP 47 / RFC 5646.
          type: string
      description: >-
        A single VulnerabilityAssessmentNote represents one particular product's
        vulnerability assessment for one CVE.
      type: object
    Source:
      properties:
        fileHashes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          description: >-
            Hash(es) of the build source, which can be used to verify that the
            original source integrity was maintained in the build. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (.tar.gz), the FileHash
            will be for the single path to that file.
        additionalContexts:
          items:
            $ref: '#/components/schemas/SourceContext'
          type: array
          description: >-
            If provided, some of the source code used for the build may be found
            in these locations, in the case where the source repository had
            multiple remotes or submodules. This list will not include the
            context specified in the context field.
        context:
          $ref: '#/components/schemas/SourceContext'
          description: >-
            If provided, the source code used for the build came from this
            location.
        artifactStorageSourceUri:
          type: string
          description: >-
            If provided, the input binary artifacts for the build came from this
            location.
      type: object
      id: Source
      description: Source describes the location of the source used for the build.
    KnowledgeBase:
      type: object
      properties:
        name:
          type: string
          description: The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
        url:
          type: string
          description: >-
            A link to the KB in the [Windows update catalog]
            (https://www.catalog.update.microsoft.com/).
      id: KnowledgeBase
    SlsaBuilder:
      id: SlsaBuilder
      properties:
        id:
          type: string
      type: object
    GetPolicyOptions:
      properties:
        requestedPolicyVersion:
          description: >-
            Optional. The maximum policy version that will be used to format the
            policy. Valid values are 0, 1, and 3. Requests specifying an invalid
            value will be rejected. Requests for policies with any conditional
            role bindings must specify version 3. Policies with no conditional
            role bindings may specify any valid value or leave the field unset.
            The policy in the response might use the policy version that you
            specified, or it might use a lower policy version. For example, if
            you specify version 3, but the policy has no conditional role
            bindings, the response uses version 1. To learn which resources
            support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
      id: GetPolicyOptions
      type: object
      description: Encapsulates settings provided to GetIamPolicy.
    Envelope:
      description: >-
        MUST match
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto.
        An authenticated message of arbitrary type.
      id: Envelope
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
        payload:
          format: byte
          type: string
        payloadType:
          type: string
    BuildNote:
      properties:
        builderVersion:
          type: string
          description: >-
            Required. Immutable. Version of the builder which produced this
            build.
      description: >-
        Note holding the version of the provider's builder and the signature of
        the provenance message in the build details occurrence.
      id: BuildNote
      type: object
    WindowsDetail:
      type: object
      properties:
        cpeUri:
          description: >-
            Required. The [CPE URI](https://cpe.mitre.org/specification/) this
            vulnerability affects.
          type: string
        name:
          description: Required. The name of this vulnerability.
          type: string
        description:
          description: The description of this vulnerability.
          type: string
        fixingKbs:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeBase'
          description: >-
            Required. The names of the KBs which have hotfixes to mitigate this
            vulnerability. Note that there may be multiple hotfixes (and thus
            multiple KBs) that mitigate a given vulnerability. Currently any
            listed KBs presence is considered a fix.
      id: WindowsDetail
    Layer:
      type: object
      description: Layer holds metadata specific to a layer of a Docker image.
      properties:
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
        directive:
          type: string
          description: >-
            Required. The recovered Dockerfile directive used to construct this
            layer. See https://docs.docker.com/engine/reference/builder/ for
            more information.
      id: Layer
    CVSS:
      description: >-
        Common Vulnerability Scoring System. For details, see
        https://www.first.org/cvss/specification-document This is a message we
        will try to use for storing various versions of CVSS rather than making
        a separate proto for storing a specific version.
      type: object
      id: CVSS
      properties:
        confidentialityImpact:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
        scope:
          type: string
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          enumDescriptions:
            - ''
            - ''
            - ''
        authentication:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
        availabilityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
        integrityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
        userInteraction:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          type: string
        attackVector:
          type: string
          description: >-
            Base Metrics Represents the intrinsic characteristics of a
            vulnerability that are constant over time and across user
            environments.
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
        attackComplexity:
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        impactScore:
          format: float
          type: number
        baseScore:
          description: The base score is a function of the base metric scores.
          type: number
          format: float
        exploitabilityScore:
          format: float
          type: number
        privilegesRequired:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep:
      properties:
        pullTiming:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for pulling this build step's
            builder image only.
          readOnly: true
        entrypoint:
          type: string
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint. If unset, the image's default entrypoint is used.
        volumes:
          items:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
          type: array
          description: >-
            List of volumes to mount into the build step. Each volume is created
            as an empty volume prior to execution of the build step. Upon
            completion of the build, volumes and their contents are discarded.
            Using a named volume in only one step is not valid as it is
            indicative of a build request with an incorrect configuration.
        dir:
          description: >-
            Working directory to use when running this step's container. If this
            value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's
            working directory, in which case the contents of the path may not be
            persisted across build step executions, unless a `volume` for that
            path is specified. If the build specifies a `RepoSource` with `dir`
            and a step with a `dir`, which specifies an absolute path, the
            `RepoSource` `dir` is ignored for the step's execution.
          type: string
        timeout:
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no time limit and will be allowed to continue to run until
            either it completes or the build itself times out.
          type: string
          format: google-duration
        secretEnv:
          items:
            type: string
          type: array
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key Management Service crypto key. These values must be specified in
            the build's `Secret`.
        id:
          type: string
          description: >-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
        timing:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
          description: >-
            Output only. Stores timing information for executing this build
            step.
        status:
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          readOnly: true
          type: string
          description: >-
            Output only. Status of the build step. At this time, build step
            status is only updated on build completion; step status is not
            updated in real-time as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
        args:
          items:
            type: string
          description: >-
            A list of arguments that will be presented to the step when it is
            started. If the image used to run the step's container has an
            entrypoint, the `args` are used as arguments to that entrypoint. If
            the image does not define an entrypoint, the first element in args
            is used as the entrypoint, and the remainder will be used as
            arguments.
          type: array
        exitCode:
          type: integer
          description: Output only. Return code from running the step.
          readOnly: true
          format: int32
        waitFor:
          description: >-
            The ID(s) of the step(s) that this build step depends on. This build
            step will not start until all the build steps in `wait_for` have
            completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have
            completed successfully.
          type: array
          items:
            type: string
        env:
          description: >-
            A list of environment variable definitions to be used when running a
            step. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
          type: array
          items:
            type: string
        allowFailure:
          type: boolean
          description: >-
            Allow this build step to fail without failing the entire build. If
            false, the entire build will fail if this step fails. Otherwise, the
            build will succeed, but this step will still have a failure status.
            Error information will be reported in the failure_detail field.
        name:
          type: string
          description: >-
            Required. The name of the container image that will run this
            particular build step. If the image is available in the host's
            Docker daemon's cache, it will be run directly. If not, the host
            will attempt to pull the image first, using the builder service
            account's credentials if necessary. The Docker daemon's cache will
            already have the latest versions of all of the officially supported
            build steps
            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
            The Docker daemon will also have cached many of the layers for some
            popular images, like "ubuntu", "debian", but they will be refreshed
            at the time you attempt to use them. If you built an image in a
            previous build step, it will be stored in the host's Docker daemon's
            cache and is available to use as the name for a later build step.
        script:
          description: >-
            A shell script to be executed in the step. When script is provided,
            the user cannot specify the entrypoint or args.
          type: string
        allowExitCodes:
          description: >-
            Allow this build step to fail without failing the entire build if
            and only if the exit code is one of the specified codes. If
            allow_failure is also specified, this field will take precedence.
          type: array
          items:
            format: int32
            type: integer
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
      type: object
      description: A step in the build pipeline.
    Category:
      description: The category to which the update belongs.
      properties:
        name:
          description: The localized name of the category.
          type: string
        categoryId:
          description: The identifier of the category.
          type: string
      type: object
      id: Category
    Assessment:
      properties:
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          description: Provides the state of this Vulnerability assessment.
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - >-
              It is not known yet whether these versions are or are not affected
              by the vulnerability. However, it is still under investigation.
        relatedUris:
          description: >-
            Holds a list of references associated with this vulnerability item
            and assessment. These uris have additional information about the
            vulnerability and the assessment itself. E.g. Link to a document
            which details how this assessment concluded the state of this
            vulnerability.
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
        cve:
          description: >-
            Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
            tracking number for the vulnerability.
          type: string
        impacts:
          description: >-
            Contains information about the impact of this vulnerability, this
            will change with time.
          type: array
          items:
            type: string
        shortDescription:
          type: string
          description: A one sentence description of this Vex.
        remediations:
          items:
            $ref: '#/components/schemas/Remediation'
          type: array
          description: >-
            Specifies details on how to handle (and presumably, fix) a
            vulnerability.
        longDescription:
          type: string
          description: A detailed description of this Vex.
        justification:
          $ref: '#/components/schemas/Justification'
          description: >-
            Justification provides the justification when the state of the
            assessment if NOT_AFFECTED.
      type: object
      description: >-
        Assessment provides all information that is related to a single
        vulnerability for this product.
      id: Assessment
    SlsaProvenanceZeroTwo:
      id: SlsaProvenanceZeroTwo
      properties:
        materials:
          items:
            $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial'
          type: array
        buildType:
          type: string
        invocation:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation'
        metadata:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata'
        buildConfig:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
        builder:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder'
      type: object
      description: See full explanation of fields at slsa.dev/provenance/v0.2.
    ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
      description: >-
        Pairs a set of secret environment variables mapped to encrypted values
        with the Cloud KMS key to use to decrypt the value.
      properties:
        kmsKeyName:
          description: >-
            Resource name of Cloud KMS crypto key to decrypt the encrypted
            value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
          type: string
        envMap:
          type: object
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
          additionalProperties:
            format: byte
            type: string
    DeploymentOccurrence:
      description: The period during which some deployable was active in a runtime.
      id: DeploymentOccurrence
      type: object
      properties:
        platform:
          type: string
          description: Platform hosting this deployment.
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
        undeployTime:
          description: End of the lifetime of this deployment.
          format: google-datetime
          type: string
        config:
          description: Configuration used to create this deployment.
          type: string
        resourceUri:
          type: array
          items:
            type: string
          description: >-
            Output only. Resource URI for the artifact being deployed taken from
            the deployable field with the same name.
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
        address:
          type: string
          description: Address of the runtime element hosting this deployment.
        deployTime:
          description: Required. Beginning of the lifetime of this deployment.
          type: string
          format: google-datetime
    Metadata:
      description: Other properties of the build.
      id: Metadata
      type: object
      properties:
        buildFinishedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build completed.
        reproducible:
          description: >-
            If true, the builder claims that running the recipe on materials
            will produce bit-for-bit identical output.
          type: boolean
        buildInvocationId:
          description: >-
            Identifies the particular build invocation, which can be useful for
            finding associated logs or other ad-hoc analysis. The value SHOULD
            be globally unique, per in-toto Provenance spec.
          type: string
        completeness:
          $ref: '#/components/schemas/Completeness'
          description: >-
            Indicates that the builder claims certain fields in this message to
            be complete.
        buildStartedOn:
          type: string
          description: The timestamp of when the build started.
          format: google-datetime
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig:
      description: ApprovalConfig describes configuration for manual approval of a build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
      type: object
      properties:
        approvalRequired:
          description: >-
            Whether or not approval is needed. If this is set on a build, it
            will become pending when created, and will need to be explicitly
            approved to start.
          type: boolean
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage:
      properties:
        fileHashes:
          description: Hash types and values of the Python Artifact.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
        uri:
          description: URI of the uploaded artifact.
          type: string
        pushTiming:
          readOnly: true
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
      type: object
      description: Artifact uploaded using the PythonPackage directive.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
    UpgradeOccurrence:
      type: object
      id: UpgradeOccurrence
      description: >-
        An Upgrade Occurrence represents that a specific resource_url could
        install a specific upgrade. This presence is supplied via local sources
        (i.e. it is present in the mirror and the running system has noticed its
        availability). For Windows, both distribution and windows_update contain
        information for the Windows update.
      properties:
        distribution:
          description: >-
            Metadata about the upgrade for available for the specific operating
            system for the resource_url. This allows efficient filtering, as
            well as making it easier to use the occurrence.
          $ref: '#/components/schemas/UpgradeDistribution'
        package:
          type: string
          description: Required for non-Windows OS. The package this Upgrade is for.
        parsedVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            Required for non-Windows OS. The version of the package in a machine
            + human readable form.
        windowsUpdate:
          description: >-
            Required for Windows OS. Represents the metadata about the Windows
            update.
          $ref: '#/components/schemas/WindowsUpdate'
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      id: TestIamPermissionsRequest
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          items:
            type: string
          type: array
      type: object
    Note:
      description: A type of analysis that can be done for a resource.
      id: Note
      properties:
        compliance:
          $ref: '#/components/schemas/ComplianceNote'
          description: A note describing a compliance check.
        dsseAttestation:
          $ref: '#/components/schemas/DSSEAttestationNote'
          description: A note describing a dsse attestation note.
        attestation:
          description: A note describing an attestation role.
          $ref: '#/components/schemas/AttestationNote'
        vulnerability:
          description: A note describing a package vulnerability.
          $ref: '#/components/schemas/VulnerabilityNote'
        name:
          type: string
          description: >-
            Output only. The name of the note in the form of
            `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
        discovery:
          $ref: '#/components/schemas/DiscoveryNote'
          description: A note describing the initial analysis of a resource.
        deployment:
          description: A note describing something that can be deployed.
          $ref: '#/components/schemas/DeploymentNote'
        createTime:
          description: >-
            Output only. The time this note was created. This field can be used
            as a filter in list requests.
          format: google-datetime
          type: string
        build:
          $ref: '#/components/schemas/BuildNote'
          description: A note describing build provenance for a verifiable build.
        relatedNoteNames:
          description: Other notes related to this note.
          items:
            type: string
          type: array
        image:
          $ref: '#/components/schemas/ImageNote'
          description: A note describing a base image.
        sbomReference:
          $ref: '#/components/schemas/SBOMReferenceNote'
          description: A note describing an SBOM reference.
        expirationTime:
          type: string
          description: Time of expiration for this note. Empty if note does not expire.
          format: google-datetime
        upgrade:
          $ref: '#/components/schemas/UpgradeNote'
          description: A note describing available package upgrades.
        shortDescription:
          description: A one sentence description of this note.
          type: string
        relatedUrl:
          description: URLs associated with this note.
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
        vulnerabilityAssessment:
          $ref: '#/components/schemas/VulnerabilityAssessmentNote'
          description: A note describing a vulnerability assessment.
        package:
          $ref: '#/components/schemas/PackageNote'
          description: A note describing a package hosted by various package managers.
        kind:
          type: string
          description: >-
            Output only. The type of analysis. This field can be used as a
            filter in list requests.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
        updateTime:
          format: google-datetime
          description: >-
            Output only. The time this note was last updated. This field can be
            used as a filter in list requests.
          type: string
        longDescription:
          type: string
          description: A detailed description of this note.
      type: object
    Signature:
      id: Signature
      properties:
        signature:
          format: byte
          description: >-
            The content of the signature, an opaque bytestring. The payload that
            this signature verifies MUST be unambiguously provided with the
            Signature during verification. A wrapper message might provide the
            payload explicitly. Alternatively, a message might have a canonical
            serialization that can always be unambiguously computed to derive
            the payload.
          type: string
        publicKeyId:
          type: string
          description: >-
            The identifier for the public key that verifies this signature. *
            The `public_key_id` is required. * The `public_key_id` SHOULD be an
            RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD
            be an immutable reference, such as a cryptographic digest. Examples
            of valid `public_key_id`s: OpenPGP V4 public key fingerprint: *
            "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See
            https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for
            more details on this scheme. RFC6920 digest-named
            SubjectPublicKeyInfo (digest of the DER serialization): *
            "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" *
            "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
      description: >-
        Verifiers (e.g. Kritis implementations) MUST verify signatures with
        respect to the trust anchors defined in policy (e.g. a Kritis policy).
        Typically this means that the verifier has been configured with a map
        from `public_key_id` to public key material (and any required
        parameters, e.g. signing algorithm). In particular, verification
        implementations MUST NOT treat the signature `public_key_id` as anything
        more than a key lookup hint. The `public_key_id` DOES NOT validate or
        authenticate a public key; it only provides a mechanism for quickly
        selecting a public key ALREADY CONFIGURED on the verifier through a
        trusted channel. Verification implementations MUST reject signatures in
        any of the following circumstances: * The `public_key_id` is not
        recognized by the verifier. * The public key that `public_key_id` refers
        to does not verify the signature with respect to the payload. The
        `signature` contents SHOULD NOT be "attached" (where the payload is
        included with the serialized `signature` bytes). Verifiers MUST ignore
        any "attached" payload and only verify signatures with respect to
        explicitly provided payload (e.g. a `payload` field on the proto message
        that holds this Signature, or the canonical serialization of the proto
        message that holds this signature).
      type: object
    Location:
      type: object
      properties:
        version:
          description: Deprecated. The version installed at this location.
          $ref: '#/components/schemas/Version'
        path:
          description: >-
            The path from which we gathered that this package/version is
            installed.
          type: string
        cpeUri:
          description: >-
            Deprecated. The CPE URI in [CPE
            format](https://cpe.mitre.org/specification/)
          type: string
      description: >-
        An occurrence of a particular package installation found within a
        system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
      id: Location
    ListOccurrencesResponse:
      properties:
        nextPageToken:
          description: >-
            The next pagination token in the list response. It should be used as
            `page_token` for the following request. An empty value means no more
            results.
          type: string
        occurrences:
          type: array
          description: The occurrences requested.
          items:
            $ref: '#/components/schemas/Occurrence'
      description: Response for listing occurrences.
      type: object
      id: ListOccurrencesResponse
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact:
      properties:
        path:
          type: string
          description: >-
            Path to an artifact in the build's workspace to be uploaded to
            Artifact Registry. This can be either an absolute path, e.g.
            /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path
            from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
        groupId:
          type: string
          description: >-
            Maven `groupId` value used when uploading the artifact to Artifact
            Registry.
        version:
          description: >-
            Maven `version` value used when uploading the artifact to Artifact
            Registry.
          type: string
        repository:
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the
            workspace specified by path will be uploaded to Artifact Registry
            with this location as a prefix.
          type: string
        artifactId:
          type: string
          description: >-
            Maven `artifactId` value used when uploading the artifact to
            Artifact Registry.
      description: >-
        A Maven artifact to upload to Artifact Registry upon successful
        completion of all build steps.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
    Jwt:
      id: Jwt
      type: object
      properties:
        compactJwt:
          type: string
          description: >-
            The compact encoding of a JWS, which is always three base64 encoded
            strings joined by periods. For details, see:
            https://tools.ietf.org/html/rfc7515.html#section-3.1
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness:
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
      properties:
        parameters:
          type: boolean
        materials:
          type: boolean
        environment:
          type: boolean
    PackageOccurrence:
      properties:
        architecture:
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          description: >-
            Output only. The CPU architecture for which packages in this
            distribution channel were built. Architecture will be blank for
            language packages.
          type: string
          readOnly: true
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
        cpeUri:
          type: string
          description: >-
            Output only. The cpe_uri in [CPE
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package. The cpe_uri will be blank
            for language packages.
          readOnly: true
        version:
          readOnly: true
          description: Output only. The version of the package.
          $ref: '#/components/schemas/Version'
        packageType:
          description: >-
            Output only. The type of package; whether native or non native
            (e.g., ruby gems, node.js packages, etc.).
          readOnly: true
          type: string
        name:
          description: Required. Output only. The name of the installed package.
          type: string
          readOnly: true
        location:
          description: >-
            All of the places within the filesystem versions of this package
            have been found.
          type: array
          items:
            $ref: '#/components/schemas/Location'
      description: Details on how a particular software package was installed on a system.
      type: object
      id: PackageOccurrence
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage:
      description: >-
        An npm package uploaded to Artifact Registry using the NpmPackage
        directive.
      properties:
        uri:
          type: string
          description: URI of the uploaded npm package.
        fileHashes:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
          description: Hash types and values of the npm package.
        pushTiming:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
          readOnly: true
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
    SetIamPolicyRequest:
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
      type: object
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
    ComplianceOccurrence:
      type: object
      description: >-
        An indication that the compliance checks in the associated
        ComplianceNote were not satisfied for particular resources or a
        specified reason.
      id: ComplianceOccurrence
      properties:
        nonComplianceReason:
          type: string
        nonCompliantFiles:
          type: array
          items:
            $ref: '#/components/schemas/NonCompliantFile'
    PackageIssue:
      type: object
      properties:
        fixAvailable:
          description: Output only. Whether a fix is available for this package.
          type: boolean
        packageType:
          type: string
          description: The type of package (e.g. OS, MAVEN, GO).
        affectedPackage:
          description: Required. The package this vulnerability was found in.
          type: string
        fixedVersion:
          description: >-
            Required. The version of the package this vulnerability was fixed
            in. Setting this to VersionKind.MAXIMUM means no fix is yet
            available.
          $ref: '#/components/schemas/Version'
        fixedPackage:
          type: string
          description: >-
            The package this vulnerability was fixed in. It is possible for this
            to be different from the affected_package.
        affectedVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            Required. The version of the package that is installed on the
            resource affected by this vulnerability.
        effectiveSeverity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: >-
            Output only. The distro or language system assigned severity for
            this vulnerability when that is available and note provider assigned
            severity when it is not available.
          type: string
          readOnly: true
        affectedCpeUri:
          description: >-
            Required. The [CPE URI](https://cpe.mitre.org/specification/) this
            vulnerability was found in.
          type: string
        fixedCpeUri:
          type: string
          description: >-
            The [CPE URI](https://cpe.mitre.org/specification/) this
            vulnerability was fixed in. It is possible for this to be different
            from the affected_cpe_uri.
        fileLocation:
          items:
            $ref: '#/components/schemas/GrafeasV1FileLocation'
          description: The location at which this package was found.
          type: array
      description: >-
        A detail for a distro and package this vulnerability occurrence was
        found in and its associated fix (if one is available).
      id: PackageIssue
    FileHashes:
      properties:
        fileHash:
          type: array
          description: Required. Collection of file hashes.
          items:
            $ref: '#/components/schemas/Hash'
      id: FileHashes
      description: >-
        Container message for hashes of byte content of files, used in source
        messages to verify integrity of source input to the build.
      type: object
    BuildOccurrence:
      id: BuildOccurrence
      type: object
      properties:
        intotoProvenance:
          $ref: '#/components/schemas/InTotoProvenance'
          description: >-
            Deprecated. See InTotoStatement for the replacement. In-toto
            Provenance representation as defined in spec.
        provenanceBytes:
          type: string
          description: >-
            Serialized JSON representation of the provenance, used in generating
            the build signature in the corresponding build note. After verifying
            the signature, `provenance_bytes` can be unmarshalled and compared
            to the provenance to confirm that it is unchanged. A base64-encoded
            string representation of the provenance bytes is used for the
            signature in order to interoperate with openssl which expects this
            format for signature verification. The serialized form is captured
            both to avoid ambiguity in how the provenance is marshalled to json
            as well to prevent incompatibilities with future changes.
        intotoStatement:
          description: >-
            In-toto Statement representation as defined in spec. The
            intoto_statement can contain any type of provenance. The serialized
            payload of the statement can be stored and signed in the
            Occurrence's envelope.
          $ref: '#/components/schemas/InTotoStatement'
        provenance:
          $ref: '#/components/schemas/BuildProvenance'
          description: The actual provenance for the build.
      description: Details of a build occurrence.
    Occurrence:
      type: object
      id: Occurrence
      description: An instance of an analysis type that has been found on a resource.
      properties:
        name:
          description: >-
            Output only. The name of the occurrence in the form of
            `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
          type: string
        compliance:
          $ref: '#/components/schemas/ComplianceOccurrence'
          description: Describes a compliance violation on a linked resource.
        discovery:
          description: Describes when a resource was discovered.
          $ref: '#/components/schemas/DiscoveryOccurrence'
        createTime:
          description: Output only. The time this occurrence was created.
          format: google-datetime
          type: string
        updateTime:
          description: Output only. The time this occurrence was last updated.
          format: google-datetime
          type: string
        deployment:
          description: Describes the deployment of an artifact on a runtime.
          $ref: '#/components/schemas/DeploymentOccurrence'
        resourceUri:
          type: string
          description: >-
            Required. Immutable. A URI that represents the resource for which
            the occurrence applies. For example,
            `https://gcr.io/project/image@sha256:123abc` for a Docker image.
        remediation:
          description: A description of actions that can be taken to remedy the note.
          type: string
        vulnerability:
          description: Describes a security vulnerability.
          $ref: '#/components/schemas/VulnerabilityOccurrence'
        image:
          $ref: '#/components/schemas/ImageOccurrence'
          description: >-
            Describes how this resource derives from the basis in the associated
            note.
        envelope:
          description: https://github.com/secure-systems-lab/dsse
          $ref: '#/components/schemas/Envelope'
        dsseAttestation:
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
          description: Describes an attestation of an artifact using dsse.
        build:
          $ref: '#/components/schemas/BuildOccurrence'
          description: Describes a verifiable build.
        kind:
          description: >-
            Output only. This explicitly denotes which of the occurrence details
            are specified. This field can be used as a filter in list requests.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
        attestation:
          $ref: '#/components/schemas/AttestationOccurrence'
          description: Describes an attestation of an artifact.
        noteName:
          description: >-
            Required. Immutable. The analysis note associated with this
            occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
            This field can be used as a filter in list requests.
          type: string
        sbomReference:
          $ref: '#/components/schemas/SBOMReferenceOccurrence'
          description: Describes a specific SBOM reference occurrences.
        upgrade:
          description: Describes an available package upgrade on the linked resource.
          $ref: '#/components/schemas/UpgradeOccurrence'
        package:
          description: Describes the installation of a package on the linked resource.
          $ref: '#/components/schemas/PackageOccurrence'
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      id: Empty
      properties: {}
    Expr:
      id: Expr
      properties:
        expression:
          type: string
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
        description:
          type: string
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
    PackageNote:
      id: PackageNote
      type: object
      description: PackageNote represents a particular package version.
      properties:
        packageType:
          description: >-
            The type of package; whether native or non native (e.g., ruby gems,
            node.js packages, etc.).
          type: string
        digest:
          description: >-
            Hash value, typically a file digest, that allows unique
            identification a specific package.
          type: array
          items:
            $ref: '#/components/schemas/Digest'
        url:
          type: string
          description: The homepage for this package.
        version:
          description: The version of the package.
          $ref: '#/components/schemas/Version'
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
        architecture:
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          type: string
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          description: >-
            The CPU architecture for which packages in this distribution channel
            were built. Architecture will be blank for language packages.
        name:
          type: string
          description: Required. Immutable. The name of the package.
        description:
          type: string
          description: The description of this package.
        maintainer:
          type: string
          description: A freeform text denoting the maintainer of this package.
        cpeUri:
          description: >-
            The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)
            denoting the package manager version distributing a package. The
            cpe_uri will be blank for language packages.
          type: string
        distribution:
          description: Deprecated. The various channels by which a package is distributed.
          type: array
          items:
            $ref: '#/components/schemas/Distribution'
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance:
      description: >-
        Provenance of the source. Ways to find the original source, or verify
        that some source was used for this build.
      properties:
        resolvedStorageSource:
          description: >-
            A copy of the build's `source.storage_source`, if exists, with any
            generations resolved.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
        resolvedStorageSourceManifest:
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
          description: >-
            A copy of the build's `source.storage_source_manifest`, if exists,
            with any revisions resolved. This feature is in Preview.
        resolvedRepoSource:
          description: >-
            A copy of the build's `source.repo_source`, if exists, with any
            revisions resolved.
          $ref: >-
            #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
        fileHashes:
          readOnly: true
          type: object
          description: >-
            Output only. Hash(es) of the build source, which can be used to
            verify that the original source integrity was maintained in the
            build. Note that `FileHashes` will only be populated if
            `BuildOptions` has requested a `SourceProvenanceHash`. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (`.tar.gz`), the `FileHash`
            will be for the single path to that file.
          additionalProperties:
            $ref: >-
              #/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
    Completeness:
      id: Completeness
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
      properties:
        environment:
          description: >-
            If true, the builder claims that recipe.environment is claimed to be
            complete.
          type: boolean
        materials:
          description: >-
            If true, the builder claims that materials are complete, usually
            through some controls to prevent network access. Sometimes called
            "hermetic".
          type: boolean
        arguments:
          type: boolean
          description: >-
            If true, the builder claims that recipe.arguments is complete,
            meaning that all external inputs are properly captured in the
            recipe.
      type: object
    ProjectRepoId:
      id: ProjectRepoId
      properties:
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
        projectId:
          type: string
          description: The ID of the project.
      type: object
      description: >-
        Selects a repo using a Google Cloud Platform project ID (e.g.,
        winged-cargo-31) and a repo name within that project.
    UpgradeNote:
      type: object
      description: >-
        An Upgrade Note represents a potential upgrade of a package to a given
        version. For each package version combination (i.e. bash 4.0, bash 4.1,
        bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update
        field represents the information related to the update.
      properties:
        version:
          $ref: '#/components/schemas/Version'
          description: >-
            Required for non-Windows OS. The version of the package in machine +
            human readable form.
        distributions:
          description: Metadata about the upgrade for each specific operating system.
          type: array
          items:
            $ref: '#/components/schemas/UpgradeDistribution'
        windowsUpdate:
          $ref: '#/components/schemas/WindowsUpdate'
          description: >-
            Required for Windows OS. Represents the metadata about the Windows
            update.
        package:
          description: Required for non-Windows OS. The package this Upgrade is for.
          type: string
      id: UpgradeNote
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult:
      description: >-
        ApprovalResult describes the decision and associated metadata of a
        manual approval of a build.
      type: object
      properties:
        decision:
          description: Required. The decision of this manual approval.
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          type: string
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
        url:
          type: string
          description: >-
            Optional. An optional URL tied to this manual approval result. This
            field is essentially the same as comment, except that it will be
            rendered by the UI differently. An example use case is a link to an
            external job that approved this Build.
        approverAccount:
          type: string
          readOnly: true
          description: >-
            Output only. Email of the user that called the ApproveBuild API to
            approve or reject a build at the time that the API was called.
        comment:
          type: string
          description: Optional. An optional comment for this manual approval result.
        approvalTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. The time when the approval decision was made.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
    Material:
      properties:
        uri:
          type: string
        digest:
          additionalProperties:
            type: string
          type: object
      id: Material
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      description: >-
        Metadata for all operations used and required for all operations that
        created by Container Analysis Providers
      type: object
      id: GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata
      properties:
        endTime:
          format: google-datetime
          type: string
          description: >-
            Output only. The time that this operation was marked completed or
            failed.
        createTime:
          type: string
          description: Output only. The time this operation was created.
          format: google-datetime
    Version:
      properties:
        inclusive:
          type: boolean
          description: >-
            Whether this version is specifying part of an inclusive range.
            Grafeas does not have the capability to specify version ranges;
            instead we have fields that specify start version and end versions.
            At times this is insufficient - we also need to specify whether the
            version is included in the range or is excluded from the range. This
            boolean is expected to be set to true when the version is included
            in a range.
        epoch:
          type: integer
          description: Used to correct mistakes in the version numbering scheme.
          format: int32
        revision:
          description: The iteration of the package build from the above version.
          type: string
        name:
          type: string
          description: >-
            Required only when version kind is NORMAL. The main part of the
            version name.
        fullName:
          description: >-
            Human readable version string. This string is of the form :- and is
            only set when kind is NORMAL.
          type: string
        kind:
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
          type: string
          description: >-
            Required. Distinguishes between sentinel MIN/MAX versions and normal
            versions.
      id: Version
      type: object
      description: Version contains structured information about the version of a package.
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource:
      description: Location of the source in an archive file in Cloud Storage.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
      properties:
        generation:
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
          type: string
          format: int64
        bucket:
          type: string
          description: >-
            Cloud Storage bucket containing the source (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
        object:
          description: >-
            Cloud Storage object containing the source. This object must be a
            zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing
            source to build.
          type: string
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning:
      properties:
        priority:
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          type: string
          description: The priority for this warning.
        text:
          description: Explanation of the warning generated.
          type: string
      description: A non-fatal problem encountered during the execution of the build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption:
      description: >-
        Details about how a build should be executed on a `WorkerPool`. See
        [running builds in a private
        pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
        for more information.
      type: object
      properties:
        name:
          description: >-
            The `WorkerPool` resource to execute the build on. You must have
            `cloudbuild.workerpools.use` on the project hosting the WorkerPool.
            Format
            projects/{project}/locations/{location}/workerPools/{workerPoolId}
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
    FixableTotalByDigest:
      type: object
      id: FixableTotalByDigest
      properties:
        resourceUri:
          description: The affected resource.
          type: string
        totalCount:
          type: string
          format: int64
          description: The total number of vulnerabilities associated with this resource.
        fixableCount:
          format: int64
          type: string
          description: The number of fixable vulnerabilities associated with this resource.
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: >-
            The severity for this count. SEVERITY_UNSPECIFIED indicates total
            across all severities.
          type: string
      description: Per resource and severity counts of fixable and total vulnerabilities.
    InTotoProvenance:
      type: object
      id: InTotoProvenance
      properties:
        builderConfig:
          description: required
          $ref: '#/components/schemas/BuilderConfig'
        recipe:
          description: >-
            Identifies the configuration used for the build. When combined with
            materials, this SHOULD fully describe the build, such that
            re-running this recipe results in bit-for-bit identical output (if
            the build is reproducible). required
          $ref: '#/components/schemas/Recipe'
        metadata:
          $ref: '#/components/schemas/Metadata'
        materials:
          description: >-
            The collection of artifacts that influenced the build including
            sources, dependencies, build tools, base images, and so on. This is
            considered to be incomplete unless metadata.completeness.materials
            is true. Unset or null is equivalent to empty.
          type: array
          items:
            type: string
    VexAssessment:
      properties:
        remediations:
          type: array
          description: >-
            Specifies details on how to handle (and presumably, fix) a
            vulnerability.
          items:
            $ref: '#/components/schemas/Remediation'
        relatedUris:
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
          description: >-
            Holds a list of references associated with this vulnerability item
            and assessment.
        justification:
          description: >-
            Justification provides the justification when the state of the
            assessment if NOT_AFFECTED.
          $ref: '#/components/schemas/Justification'
        state:
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - >-
              It is not known yet whether these versions are or are not affected
              by the vulnerability. However, it is still under investigation.
          description: Provides the state of this Vulnerability assessment.
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          type: string
        noteName:
          description: >-
            The VulnerabilityAssessment note from which this VexAssessment was
            generated. This will be of the form:
            `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
          type: string
        cve:
          type: string
          description: >-
            Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
            tracking number for the vulnerability.
        impacts:
          type: array
          items:
            type: string
          description: >-
            Contains information about the impact of this vulnerability, this
            will change with time.
      type: object
      description: >-
        VexAssessment provides all publisher provided Vex information that is
        related to this vulnerability.
      id: VexAssessment
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
      properties:
        object:
          description: >-
            Cloud Storage object containing the source manifest. This object
            must be a JSON file.
          type: string
        bucket:
          description: >-
            Cloud Storage bucket containing the source manifest (see [Bucket
            Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        generation:
          type: string
          format: int64
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
      description: >-
        Location of the source manifest in Cloud Storage. This feature is in
        Preview; see description
        [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
    SlsaMetadata:
      properties:
        completeness:
          $ref: '#/components/schemas/SlsaCompleteness'
          description: >-
            Indicates that the builder claims certain fields in this message to
            be complete.
        buildStartedOn:
          type: string
          format: google-datetime
          description: The timestamp of when the build started.
        reproducible:
          type: boolean
          description: >-
            If true, the builder claims that running the recipe on materials
            will produce bit-for-bit identical output.
        buildFinishedOn:
          type: string
          description: The timestamp of when the build completed.
          format: google-datetime
        buildInvocationId:
          type: string
          description: >-
            Identifies the particular build invocation, which can be useful for
            finding associated logs or other ad-hoc analysis. The value SHOULD
            be globally unique, per in-toto Provenance spec.
      id: SlsaMetadata
      description: Other properties of the build.
      type: object
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/projects/{projectsId}/notes:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: Creates a new note.
      operationId: containeranalysis.projects.notes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: noteId
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: insert
    get:
      description: Lists notes for the specified project.
      operationId: containeranalysis.projects.notes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/notes/{notesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or
        occurrence. Requires list permission on the project (for example,
        `containeranalysis.notes.list`). The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/notes:batchCreate:
    parameters: *ref_1
    post:
      description: Creates new notes in batch.
      operationId: containeranalysis.projects.notes.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateNotesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/notes/{notesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a note or an occurrence resource.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/notes/{notesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified note or occurrence.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or an occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/notes/{notesId}:
    parameters: *ref_1
    delete:
      description: Deletes the specified note.
      operationId: containeranalysis.projects.notes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: delete
    get:
      description: Gets the specified note.
      operationId: containeranalysis.projects.notes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: select
    patch:
      description: Updates the specified note.
      operationId: containeranalysis.projects.notes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/notes/{notesId}/occurrences:
    parameters: *ref_1
    get:
      description: >-
        Lists occurrences referencing the specified note. Provider projects can
        use this method to get all occurrences across consumer projects
        referencing the specified note.
      operationId: containeranalysis.projects.notes.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns the permissions that a caller has on the specified note or
        occurrence. Requires list permission on the project (for example,
        `containeranalysis.notes.list`). The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:
    parameters: *ref_1
    get:
      description: Gets the specified occurrence.
      operationId: containeranalysis.projects.occurrences.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes the specified occurrence. For example, use this method to delete
        an occurrence when the occurrence is no longer applicable for the given
        resource.
      operationId: containeranalysis.projects.occurrences.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: delete
    patch:
      description: Updates the specified occurrence.
      operationId: containeranalysis.projects.occurrences.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/occurrences:
    parameters: *ref_1
    get:
      description: Lists occurrences for the specified project.
      operationId: containeranalysis.projects.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
    post:
      description: Creates a new occurrence.
      operationId: containeranalysis.projects.occurrences.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/occurrences:batchCreate:
    parameters: *ref_1
    post:
      description: Creates new occurrences in batch.
      operationId: containeranalysis.projects.occurrences.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateOccurrencesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/occurrences:vulnerabilitySummary:
    parameters: *ref_1
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityOccurrencesSummary'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences__vulnerability_summary
      x-stackQL-verb: select
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified note or occurrence.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or an occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a note or an occurrence resource.
        Requires `containeranalysis.notes.setIamPolicy` or
        `containeranalysis.occurrences.setIamPolicy` permission if the resource
        is a note or occurrence, respectively. The resource takes the format
        `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and
        `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/occurrences/{occurrencesId}/notes:
    parameters: *ref_1
    get:
      description: >-
        Gets the note attached to the specified occurrence. Consumer projects
        can use this method to get a note that belongs to a provider project.
      operationId: containeranalysis.projects.occurrences.getNotes
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences__notes
      x-stackQL-verb: select
