openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Build API
  description: Creates and manages builds on Google Cloud Platform.
  version: v1
  x-discovery-doc-revision: '20230608'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/cloud-build/docs/
servers:
  - url: https://cloudbuild.googleapis.com
components:
  schemas:
    GitLabRepository:
      description: Proto Representing a GitLabRepository
      id: GitLabRepository
      properties:
        repositoryId:
          $ref: '#/components/schemas/GitLabRepositoryId'
          description: Identifier for a repository
        name:
          description: The resource name of the repository
          type: string
        browseUri:
          type: string
          description: Link to the browse repo page on the GitLab instance
        description:
          description: Description of the repository
          type: string
        displayName:
          description: Display name of the repository
          type: string
      type: object
    BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata:
      id: BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata
      type: object
      description: >-
        Metadata for `BatchCreateBitbucketServerConnectedRepositories`
        operation.
      properties:
        createTime:
          format: google-datetime
          description: Time the operation was created.
          type: string
        config:
          description: >-
            The name of the `BitbucketServerConfig` that added connected
            repositories. Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
          type: string
        completeTime:
          type: string
          description: Time the operation was completed.
          format: google-datetime
    ProcessAppManifestCallbackOperationMetadata:
      type: object
      properties:
        createTime:
          description: Time the operation was created.
          type: string
          format: google-datetime
        githubEnterpriseConfig:
          type: string
          description: >-
            The resource name of the GitHubEnterprise to be created. Format:
            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
        completeTime:
          type: string
          format: google-datetime
          description: Time the operation was completed.
      id: ProcessAppManifestCallbackOperationMetadata
      description: Metadata for `ProcessAppManifestCallback` operation.
    ListGithubEnterpriseConfigsResponse:
      properties:
        configs:
          description: A list of GitHubEnterpriseConfigs
          items:
            $ref: '#/components/schemas/GitHubEnterpriseConfig'
          type: array
      type: object
      description: RPC response object returned by ListGithubEnterpriseConfigs RPC method.
      id: ListGithubEnterpriseConfigsResponse
    BitbucketServerRepositoryId:
      id: BitbucketServerRepositoryId
      properties:
        repoSlug:
          type: string
          description: Required. Identifier for the repository.
        projectKey:
          description: Required. Identifier for the project storing the repository.
          type: string
        webhookId:
          readOnly: true
          type: integer
          description: >-
            Output only. The ID of the webhook that was created for receiving
            events from this repo. We only create and manage a single webhook
            for each repo.
          format: int32
      type: object
      description: >-
        BitbucketServerRepositoryId identifies a specific repository hosted on a
        Bitbucket Server.
    UploadedPythonPackage:
      description: Artifact uploaded using the PythonPackage directive.
      properties:
        fileHashes:
          description: Hash types and values of the Python Artifact.
          $ref: '#/components/schemas/FileHashes'
        pushTiming:
          readOnly: true
          $ref: '#/components/schemas/TimeSpan'
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
        uri:
          type: string
          description: URI of the uploaded artifact.
      type: object
      id: UploadedPythonPackage
    NetworkConfig:
      id: NetworkConfig
      properties:
        peeredNetworkIpRange:
          type: string
          description: >-
            Immutable. Subnet IP range within the peered network. This is
            specified in CIDR notation with a slash and the subnet prefix size.
            You can optionally specify an IP address before the subnet prefix
            value. e.g. `192.168.0.0/29` would specify an IP range starting at
            192.168.0.0 with a prefix size of 29 bits. `/16` would specify a
            prefix size of 16 bits, with an automatically determined IP within
            the peered VPC. If unspecified, a value of `/24` will be used.
        peeredNetwork:
          type: string
          description: >-
            Required. Immutable. The network definition that the workers are
            peered to. If this section is left empty, the workers will be peered
            to `WorkerPool.project_id` on the service producer network. Must be
            in the format `projects/{project}/global/networks/{network}`, where
            `{project}` is a project number, such as `12345`, and `{network}` is
            the name of a VPC network in the project. See [Understanding network
            configuration
            options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
        egressOption:
          enum:
            - EGRESS_OPTION_UNSPECIFIED
            - NO_PUBLIC_EGRESS
            - PUBLIC_EGRESS
          enumDescriptions:
            - If set, defaults to PUBLIC_EGRESS.
            - >-
              If set, workers are created without any public address, which
              prevents network egress to public IPs unless a network proxy is
              configured.
            - >-
              If set, workers are created with a public address which allows for
              public internet egress.
          type: string
          description: Option to configure network egress for the workers.
      type: object
      description: Defines the network configuration for the pool.
    Source:
      id: Source
      type: object
      properties:
        repoSource:
          $ref: '#/components/schemas/RepoSource'
          description: >-
            If provided, get the source from this location in a Cloud Source
            Repository.
        storageSource:
          description: If provided, get the source from this location in Cloud Storage.
          $ref: '#/components/schemas/StorageSource'
        gitSource:
          description: If provided, get the source from this Git repository.
          $ref: '#/components/schemas/GitSource'
        storageSourceManifest:
          description: >-
            If provided, get the source from this manifest in Cloud Storage.
            This feature is in Preview; see description
            [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
          $ref: '#/components/schemas/StorageSourceManifest'
      description: Location of the source in a supported storage service.
    BitbucketServerConnectedRepository:
      description: >-
        / BitbucketServerConnectedRepository represents a connected Bitbucket
        Server / repository.
      id: BitbucketServerConnectedRepository
      type: object
      properties:
        status:
          readOnly: true
          description: Output only. The status of the repo connection request.
          $ref: '#/components/schemas/Status'
        parent:
          description: >-
            The name of the `BitbucketServerConfig` that added connected
            repository. Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
          type: string
        repo:
          description: The Bitbucket Server repositories to connect.
          $ref: '#/components/schemas/BitbucketServerRepositoryId'
    UpdateBitbucketServerConfigOperationMetadata:
      id: UpdateBitbucketServerConfigOperationMetadata
      description: Metadata for `UpdateBitbucketServerConfig` operation.
      type: object
      properties:
        createTime:
          format: google-datetime
          type: string
          description: Time the operation was created.
        completeTime:
          type: string
          format: google-datetime
          description: Time the operation was completed.
        bitbucketServerConfig:
          type: string
          description: >-
            The resource name of the BitbucketServerConfig to be updated.
            Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
    BatchCreateBitbucketServerConnectedRepositoriesResponse:
      properties:
        bitbucketServerConnectedRepositories:
          items:
            $ref: '#/components/schemas/BitbucketServerConnectedRepository'
          type: array
          description: The connected Bitbucket Server repositories.
      description: >-
        Response of BatchCreateBitbucketServerConnectedRepositories RPC method
        including all successfully connected Bitbucket Server repositories.
      type: object
      id: BatchCreateBitbucketServerConnectedRepositoriesResponse
    CancelOperationRequest:
      properties: {}
      id: CancelOperationRequest
      type: object
      description: The request message for Operations.CancelOperation.
    Empty:
      type: object
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      properties: {}
    WorkerConfig:
      type: object
      properties:
        machineType:
          type: string
          description: >-
            Machine type of a worker, such as `e2-medium`. See [Worker pool
            config
            file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema).
            If left blank, Cloud Build will use a sensible default.
        diskSizeGb:
          type: string
          format: int64
          description: >-
            Size of the disk attached to the worker, in GB. See [Worker pool
            config
            file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema).
            Specify a value of up to 2000. If `0` is specified, Cloud Build will
            use a standard disk size.
      id: WorkerConfig
      description: Defines the configuration to be used for creating workers in the pool.
    StorageSource:
      properties:
        generation:
          type: string
          format: int64
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
        object:
          description: >-
            Cloud Storage object containing the source. This object must be a
            zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing
            source to build.
          type: string
        bucket:
          type: string
          description: >-
            Cloud Storage bucket containing the source (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
      description: Location of the source in an archive file in Cloud Storage.
      id: StorageSource
      type: object
    SecretManagerSecret:
      type: object
      description: >-
        Pairs a secret environment variable with a SecretVersion in Secret
        Manager.
      id: SecretManagerSecret
      properties:
        versionName:
          description: >-
            Resource name of the SecretVersion. In format:
            projects/*/secrets/*/versions/*
          type: string
        env:
          description: >-
            Environment variable name to associate with the secret. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step.
          type: string
    StorageSourceManifest:
      type: object
      properties:
        object:
          type: string
          description: >-
            Cloud Storage object containing the source manifest. This object
            must be a JSON file.
        generation:
          format: int64
          description: >-
            Cloud Storage generation for the object. If the generation is
            omitted, the latest generation will be used.
          type: string
        bucket:
          description: >-
            Cloud Storage bucket containing the source manifest (see [Bucket
            Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
      description: >-
        Location of the source manifest in Cloud Storage. This feature is in
        Preview; see description
        [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      id: StorageSourceManifest
    ListGitLabRepositoriesResponse:
      properties:
        gitlabRepositories:
          items:
            $ref: '#/components/schemas/GitLabRepository'
          description: List of GitLab repositories
          type: array
        nextPageToken:
          type: string
          description: >-
            A token that can be sent as `page_token` to retrieve the next page.
            If this field is omitted, there are no subsequent pages.
      id: ListGitLabRepositoriesResponse
      description: RPC response object returned by the ListGitLabRepositories RPC method.
      type: object
    BuildOptions:
      type: object
      properties:
        sourceProvenanceHash:
          description: Requested hash for SourceProvenance.
          type: array
          items:
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              - Use a sha512 hash.
            type: string
        pool:
          $ref: '#/components/schemas/PoolOption'
          description: >-
            Optional. Specification for execution on a `WorkerPool`. See
            [running builds in a private
            pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
            for more information.
        diskSizeGb:
          type: string
          format: int64
          description: >-
            Requested disk size for the VM that runs the build. Note that this
            is *NOT* "disk free"; some of the space will be used by the
            operating system and build utilities. Also note that this is the
            minimum disk size that will be allocated for the build -- the build
            may run with a larger disk than requested. At present, the maximum
            disk size is 2000GB; builds that request more than the maximum are
            rejected with an error.
        machineType:
          description: Compute Engine machine type on which to run the build.
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
          type: string
        secretEnv:
          items:
            type: string
          description: >-
            A list of global environment variables, which are encrypted using a
            Cloud Key Management Service crypto key. These values must be
            specified in the build's `Secret`. These variables will be available
            to all build steps in this build.
          type: array
        dynamicSubstitutions:
          type: boolean
          description: >-
            Option to specify whether or not to apply bash style string
            operations to the substitutions. NOTE: this is always enabled for
            triggered builds and cannot be overridden in the build configuration
            file.
        logging:
          enumDescriptions:
            - >-
              The service determines the logging mode. The default is `LEGACY`.
              Do not rely on the default logging behavior as it may change in
              the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - >-
              Build logs are stored in Cloud Logging. Selecting this option will
              not allow [logs
              streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
            - Turn off all logging. No build logs will be captured.
          type: string
          description: >-
            Option to specify the logging mode, which determines if and where
            build logs are stored.
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
        substitutionOption:
          description: >-
            Option to specify behavior when there is an error in the
            substitution checks. NOTE: this is always set to ALLOW_LOOSE for
            triggered builds and cannot be overridden in the build configuration
            file.
          type: string
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          enumDescriptions:
            - >-
              Fails the build if error in substitutions checks, like missing a
              substitution in the template or in the map.
            - Do not fail the build if error in substitutions checks.
        env:
          items:
            type: string
          type: array
          description: >-
            A list of global environment variable definitions that will exist
            for all build steps in this build. If a variable is defined in both
            globally and in a build step, the variable will use the build step
            value. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
        workerPool:
          description: This field deprecated; please use `pool.name` instead.
          type: string
        logStreamingOption:
          description: Option to define build log streaming behavior to Cloud Storage.
          type: string
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Cloud Storage.
            - >-
              Build logs should not be streamed to Cloud Storage; they will be
              written when the build is completed.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
        volumes:
          description: >-
            Global list of volumes to mount for ALL build steps Each volume is
            created as an empty volume prior to starting the build process. Upon
            completion of the build, volumes and their contents are discarded.
            Global volume names and paths cannot conflict with the volumes
            defined a build step. Using a global volume in a build with only one
            step is not valid as it is indicative of a build request with an
            incorrect configuration.
          items:
            $ref: '#/components/schemas/Volume'
          type: array
        requestedVerifyOption:
          enum:
            - NOT_VERIFIED
            - VERIFIED
          description: Requested verifiability options.
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
          type: string
        defaultLogsBucketBehavior:
          type: string
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          enumDescriptions:
            - Unspecified.
            - >-
              Bucket is located in user-owned project in the same region as the
              build. The builder service account must have access to create and
              write to GCS buckets in the build project.
          description: Optional. Option to specify how default logs buckets are setup.
      id: BuildOptions
      description: Optional arguments to enable specific features of builds.
    InlineSecret:
      type: object
      properties:
        envMap:
          type: object
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
          additionalProperties:
            format: byte
            type: string
        kmsKeyName:
          type: string
          description: >-
            Resource name of Cloud KMS crypto key to decrypt the encrypted
            value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
      id: InlineSecret
      description: >-
        Pairs a set of secret environment variables mapped to encrypted values
        with the Cloud KMS key to use to decrypt the value.
    CreateBitbucketServerConnectedRepositoryRequest:
      type: object
      description: Request to connect a repository from a connected Bitbucket Server host.
      properties:
        bitbucketServerConnectedRepository:
          description: Required. The Bitbucket Server repository to connect.
          $ref: '#/components/schemas/BitbucketServerConnectedRepository'
        parent:
          type: string
          description: >-
            Required. The name of the `BitbucketServerConfig` that added
            connected repository. Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
      id: CreateBitbucketServerConnectedRepositoryRequest
    ArtifactResult:
      id: ArtifactResult
      properties:
        fileHash:
          items:
            $ref: '#/components/schemas/FileHashes'
          type: array
          description: The file hash of the artifact.
        location:
          type: string
          description: >-
            The path of an artifact in a Cloud Storage bucket, with the
            generation number. For example,
            `gs://mybucket/path/to/output.jar#generation`.
      type: object
      description: >-
        An artifact that was uploaded during a build. This is a single record in
        the artifact manifest JSON file.
    MavenArtifact:
      type: object
      id: MavenArtifact
      properties:
        groupId:
          description: >-
            Maven `groupId` value used when uploading the artifact to Artifact
            Registry.
          type: string
        artifactId:
          description: >-
            Maven `artifactId` value used when uploading the artifact to
            Artifact Registry.
          type: string
        path:
          description: >-
            Path to an artifact in the build's workspace to be uploaded to
            Artifact Registry. This can be either an absolute path, e.g.
            /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path
            from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
          type: string
        repository:
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the
            workspace specified by path will be uploaded to Artifact Registry
            with this location as a prefix.
          type: string
        version:
          type: string
          description: >-
            Maven `version` value used when uploading the artifact to Artifact
            Registry.
      description: >-
        A Maven artifact to upload to Artifact Registry upon successful
        completion of all build steps.
    BuildOperationMetadata:
      type: object
      id: BuildOperationMetadata
      description: Metadata for build operations.
      properties:
        build:
          description: The build that the operation is tracking.
          $ref: '#/components/schemas/Build'
    GitLabRepositoryId:
      description: >-
        GitLabRepositoryId identifies a specific repository hosted on GitLab.com
        or GitLabEnterprise
      properties:
        id:
          type: string
          description: >-
            Required. Identifier for the repository. example:
            "namespace/project-slug", namespace is usually the username or group
            ID
        webhookId:
          type: integer
          readOnly: true
          format: int32
          description: >-
            Output only. The ID of the webhook that was created for receiving
            events from this repo. We only create and manage a single webhook
            for each repo.
      type: object
      id: GitLabRepositoryId
    FileHashes:
      id: FileHashes
      type: object
      properties:
        fileHash:
          description: Collection of file hashes.
          type: array
          items:
            $ref: '#/components/schemas/Hash'
      description: >-
        Container message for hashes of byte content of files, used in
        SourceProvenance messages to verify integrity of source input to the
        build.
    GitHubEnterpriseConfig:
      type: object
      id: GitHubEnterpriseConfig
      description: >-
        GitHubEnterpriseConfig represents a configuration for a GitHub
        Enterprise server.
      properties:
        peeredNetwork:
          description: >-
            Optional. The network to be used when reaching out to the GitHub
            Enterprise server. The VPC network must be enabled for private
            service connection. This should be set if the GitHub Enterprise
            server is hosted on-premises and not reachable by public internet.
            If this field is left empty, no network peering will occur and calls
            to the GitHub Enterprise server will be made over the public
            internet. Must be in the format
            `projects/{project}/global/networks/{network}`, where {project} is a
            project number or id and {network} is the name of a VPC network in
            the project.
          type: string
        name:
          description: >-
            Optional. The full resource name for the GitHubEnterpriseConfig For
            example:
            "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
          type: string
        displayName:
          type: string
          description: Name to display for this config.
        webhookKey:
          description: >-
            The key that should be attached to webhook calls to the
            ReceiveWebhook endpoint.
          type: string
        sslCa:
          type: string
          description: Optional. SSL certificate to use for requests to GitHub Enterprise.
        hostUrl:
          description: The URL of the github enterprise host the configuration is for.
          type: string
        secrets:
          description: Names of secrets in Secret Manager.
          $ref: '#/components/schemas/GitHubEnterpriseSecrets'
        createTime:
          type: string
          description: >-
            Output only. Time when the installation was associated with the
            project.
          readOnly: true
          format: google-datetime
        appId:
          description: >-
            Required. The GitHub app id of the Cloud Build app on the GitHub
            Enterprise server.
          type: string
          format: int64
    ListGitLabConfigsResponse:
      type: object
      description: RPC response object returned by ListGitLabConfigs RPC method.
      id: ListGitLabConfigsResponse
      properties:
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page
            If this field is omitted, there are no subsequent pages.
          type: string
        gitlabConfigs:
          description: A list of GitLabConfigs
          type: array
          items:
            $ref: '#/components/schemas/GitLabConfig'
    RetryBuildRequest:
      properties:
        name:
          type: string
          description: >-
            The name of the `Build` to retry. Format:
            `projects/{project}/locations/{location}/builds/{build}`
        projectId:
          type: string
          description: Required. ID of the project.
        id:
          description: Required. Build ID of the original build.
          type: string
      description: Specifies a build to retry.
      id: RetryBuildRequest
      type: object
    CancelBuildRequest:
      properties:
        id:
          type: string
          description: Required. ID of the build.
        name:
          description: >-
            The name of the `Build` to cancel. Format:
            `projects/{project}/locations/{location}/builds/{build}`
          type: string
        projectId:
          description: Required. ID of the project.
          type: string
      description: Request to cancel an ongoing build.
      id: CancelBuildRequest
      type: object
    ApprovalResult:
      properties:
        comment:
          type: string
          description: Optional. An optional comment for this manual approval result.
        url:
          description: >-
            Optional. An optional URL tied to this manual approval result. This
            field is essentially the same as comment, except that it will be
            rendered by the UI differently. An example use case is a link to an
            external job that approved this Build.
          type: string
        approvalTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The time when the approval decision was made.
        approverAccount:
          readOnly: true
          description: >-
            Output only. Email of the user that called the ApproveBuild API to
            approve or reject a build at the time that the API was called.
          type: string
        decision:
          description: Required. The decision of this manual approval.
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
          type: string
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
      type: object
      id: ApprovalResult
      description: >-
        ApprovalResult describes the decision and associated metadata of a
        manual approval of a build.
    BuiltImage:
      type: object
      description: An image built by the pipeline.
      properties:
        pushTiming:
          $ref: '#/components/schemas/TimeSpan'
          readOnly: true
          description: >-
            Output only. Stores timing information for pushing the specified
            image.
        digest:
          type: string
          description: Docker Registry 2.0 digest.
        name:
          type: string
          description: >-
            Name used to push the container image to Google Container Registry,
            as presented to `docker push`.
      id: BuiltImage
    BatchCreateGitLabConnectedRepositoriesRequest:
      properties:
        requests:
          items:
            $ref: '#/components/schemas/CreateGitLabConnectedRepositoryRequest'
          type: array
          description: Required. Requests to connect GitLab repositories.
      id: BatchCreateGitLabConnectedRepositoriesRequest
      description: >-
        RPC request object accepted by BatchCreateGitLabConnectedRepositories
        RPC method.
      type: object
    BuildStep:
      id: BuildStep
      description: A step in the build pipeline.
      type: object
      properties:
        timeout:
          type: string
          format: google-duration
          description: >-
            Time limit for executing this build step. If not defined, the step
            has no time limit and will be allowed to continue to run until
            either it completes or the build itself times out.
        waitFor:
          items:
            type: string
          type: array
          description: >-
            The ID(s) of the step(s) that this build step depends on. This build
            step will not start until all the build steps in `wait_for` have
            completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have
            completed successfully.
        exitCode:
          description: Output only. Return code from running the step.
          format: int32
          type: integer
          readOnly: true
        id:
          type: string
          description: >-
            Unique identifier for this build step, used in `wait_for` to
            reference this build step as a dependency.
        name:
          description: >-
            Required. The name of the container image that will run this
            particular build step. If the image is available in the host's
            Docker daemon's cache, it will be run directly. If not, the host
            will attempt to pull the image first, using the builder service
            account's credentials if necessary. The Docker daemon's cache will
            already have the latest versions of all of the officially supported
            build steps
            ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
            The Docker daemon will also have cached many of the layers for some
            popular images, like "ubuntu", "debian", but they will be refreshed
            at the time you attempt to use them. If you built an image in a
            previous build step, it will be stored in the host's Docker daemon's
            cache and is available to use as the name for a later build step.
          type: string
        secretEnv:
          description: >-
            A list of environment variables which are encrypted using a Cloud
            Key Management Service crypto key. These values must be specified in
            the build's `Secret`.
          items:
            type: string
          type: array
        script:
          description: >-
            A shell script to be executed in the step. When script is provided,
            the user cannot specify the entrypoint or args.
          type: string
        pullTiming:
          readOnly: true
          description: >-
            Output only. Stores timing information for pulling this build step's
            builder image only.
          $ref: '#/components/schemas/TimeSpan'
        entrypoint:
          description: >-
            Entrypoint to be used instead of the build step image's default
            entrypoint. If unset, the image's default entrypoint is used.
          type: string
        dir:
          type: string
          description: >-
            Working directory to use when running this step's container. If this
            value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's
            working directory, in which case the contents of the path may not be
            persisted across build step executions, unless a `volume` for that
            path is specified. If the build specifies a `RepoSource` with `dir`
            and a step with a `dir`, which specifies an absolute path, the
            `RepoSource` `dir` is ignored for the step's execution.
        env:
          type: array
          items:
            type: string
          description: >-
            A list of environment variable definitions to be used when running a
            step. The elements are of the form "KEY=VALUE" for the environment
            variable "KEY" being given the value "VALUE".
        args:
          description: >-
            A list of arguments that will be presented to the step when it is
            started. If the image used to run the step's container has an
            entrypoint, the `args` are used as arguments to that entrypoint. If
            the image does not define an entrypoint, the first element in args
            is used as the entrypoint, and the remainder will be used as
            arguments.
          type: array
          items:
            type: string
        allowExitCodes:
          description: >-
            Allow this build step to fail without failing the entire build if
            and only if the exit code is one of the specified codes. If
            allow_failure is also specified, this field will take precedence.
          type: array
          items:
            type: integer
            format: int32
        timing:
          description: >-
            Output only. Stores timing information for executing this build
            step.
          $ref: '#/components/schemas/TimeSpan'
          readOnly: true
        status:
          readOnly: true
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          description: >-
            Output only. Status of the build step. At this time, build step
            status is only updated on build completion; step status is not
            updated in real-time as the build progresses.
          type: string
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
        volumes:
          description: >-
            List of volumes to mount into the build step. Each volume is created
            as an empty volume prior to execution of the build step. Upon
            completion of the build, volumes and their contents are discarded.
            Using a named volume in only one step is not valid as it is
            indicative of a build request with an incorrect configuration.
          items:
            $ref: '#/components/schemas/Volume'
          type: array
        allowFailure:
          type: boolean
          description: >-
            Allow this build step to fail without failing the entire build. If
            false, the entire build will fail if this step fails. Otherwise, the
            build will succeed, but this step will still have a failure status.
            Error information will be reported in the failure_detail field.
    Hash:
      id: Hash
      properties:
        type:
          description: The type of hash that was performed.
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
          type: string
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
            - Use a sha512 hash.
        value:
          type: string
          format: byte
          description: The hash value.
      description: Container message for hash values.
      type: object
    CreateWorkerPoolOperationMetadata:
      properties:
        createTime:
          description: Time the operation was created.
          type: string
          format: google-datetime
        workerPool:
          type: string
          description: >-
            The resource name of the `WorkerPool` to create. Format:
            `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
        completeTime:
          format: google-datetime
          type: string
          description: Time the operation was completed.
      type: object
      description: Metadata for the `CreateWorkerPool` operation.
      id: CreateWorkerPoolOperationMetadata
    ListWorkerPoolsResponse:
      type: object
      id: ListWorkerPoolsResponse
      properties:
        nextPageToken:
          type: string
          description: >-
            Continuation token used to page through large result sets. Provide
            this value in a subsequent ListWorkerPoolsRequest to return the next
            page of results.
        workerPools:
          description: '`WorkerPools` for the specified project.'
          type: array
          items:
            $ref: '#/components/schemas/WorkerPool'
      description: Response containing existing `WorkerPools`.
    Build:
      type: object
      description: >-
        A build resource in the Cloud Build API. At a high level, a `Build`
        describes where to find source code, how to build it (for example, the
        builder image to run on the source), and where to store the built
        artifacts. Fields can include the following variables, which will be
        expanded when the build is created: - $PROJECT_ID: the project ID of the
        build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION:
        the location/region of the build. - $BUILD_ID: the autogenerated ID of
        the build. - $REPO_NAME: the source repository name specified by
        RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. -
        $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or
        $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the
        specified branch or tag. - $SHORT_SHA: first 7 characters of
        $REVISION_ID or $COMMIT_SHA.
      properties:
        artifacts:
          description: >-
            Artifacts produced by the build that should be uploaded upon
            successful completion of all build steps.
          $ref: '#/components/schemas/Artifacts'
        results:
          description: Output only. Results of the build.
          $ref: '#/components/schemas/Results'
          readOnly: true
        serviceAccount:
          description: >-
            IAM service account whose credentials will be used at build runtime.
            Must be of the format
            `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be
            email address or uniqueId of the service account. 
          type: string
        tags:
          description: Tags for annotation of a `Build`. These are not docker tags.
          type: array
          items:
            type: string
        createTime:
          type: string
          description: >-
            Output only. Time at which the request to create the build was
            received.
          format: google-datetime
          readOnly: true
        warnings:
          readOnly: true
          items:
            $ref: '#/components/schemas/Warning'
          description: >-
            Output only. Non-fatal problems encountered during the execution of
            the build.
          type: array
        source:
          description: The location of the source files to build.
          $ref: '#/components/schemas/Source'
        finishTime:
          type: string
          format: google-datetime
          description: >-
            Output only. Time at which execution of the build was finished. The
            difference between finish_time and start_time is the duration of the
            build's execution.
          readOnly: true
        logUrl:
          description: Output only. URL to logs for this build in Google Cloud Console.
          readOnly: true
          type: string
        steps:
          items:
            $ref: '#/components/schemas/BuildStep'
          description: Required. The operations to be performed on the workspace.
          type: array
        failureInfo:
          readOnly: true
          description: >-
            Output only. Contains information about the build when
            status=FAILURE.
          $ref: '#/components/schemas/FailureInfo'
        buildTriggerId:
          type: string
          description: >-
            Output only. The ID of the `BuildTrigger` that triggered this build,
            if it was triggered automatically.
          readOnly: true
        substitutions:
          type: object
          additionalProperties:
            type: string
          description: Substitutions data for `Build` resource.
        projectId:
          description: Output only. ID of the project.
          type: string
          readOnly: true
        statusDetail:
          type: string
          readOnly: true
          description: Output only. Customer-readable message about the current status.
        name:
          readOnly: true
          description: >-
            Output only. The 'Build' name with format:
            `projects/{project}/locations/{location}/builds/{build}`, where
            {build} is a unique identifier generated by the service.
          type: string
        status:
          enumDescriptions:
            - Status of the build is unknown.
            - >-
              Build has been created and is pending execution and queuing. It
              has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          type: string
          readOnly: true
          description: Output only. Status of the build.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
        timeout:
          type: string
          format: google-duration
          description: >-
            Amount of time that this build should be allowed to run, to second
            granularity. If this amount of time elapses, work on the build will
            cease and the build status will be `TIMEOUT`. `timeout` starts
            ticking from `startTime`. Default time is 60 minutes.
        approval:
          $ref: '#/components/schemas/BuildApproval'
          description: >-
            Output only. Describes this build's approval configuration, status,
            and result.
          readOnly: true
        timing:
          type: object
          description: >-
            Output only. Stores timing information for phases of the build.
            Valid keys are: * BUILD: time to execute all build steps. * PUSH:
            time to push all artifacts including docker images and non docker
            artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time
            to set up build. If the build does not specify source or images,
            these keys will not be included.
          additionalProperties:
            $ref: '#/components/schemas/TimeSpan'
          readOnly: true
        options:
          description: Special options for this build.
          $ref: '#/components/schemas/BuildOptions'
        sourceProvenance:
          readOnly: true
          $ref: '#/components/schemas/SourceProvenance'
          description: Output only. A permanent fixed identifier for source.
        startTime:
          description: Output only. Time at which execution of the build was started.
          format: google-datetime
          type: string
          readOnly: true
        availableSecrets:
          description: Secrets and secret environment variables.
          $ref: '#/components/schemas/Secrets'
        images:
          type: array
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images are pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the `Build` resource's results field. If any of the images
            fail to be pushed, the build status is marked `FAILURE`.
          items:
            type: string
        logsBucket:
          type: string
          description: >-
            Cloud Storage bucket where logs should be written (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Logs file names will be of the format
            `${logs_bucket}/log-${build_id}.txt`.
        queueTtl:
          format: google-duration
          type: string
          description: >-
            TTL in queue for this build. If provided and the build is enqueued
            longer than this value, the build will expire and the build status
            will be `EXPIRED`. The TTL starts ticking from create_time.
        secrets:
          description: >-
            Secrets to decrypt using Cloud Key Management Service. Note: Secret
            Manager is the recommended technique for managing sensitive data
            with Cloud Build. Use `available_secrets` to configure builds to
            access secrets from Secret Manager. For instructions, see:
            https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
          items:
            $ref: '#/components/schemas/Secret'
          type: array
        id:
          description: Output only. Unique identifier of the build.
          type: string
          readOnly: true
      id: Build
    CreateGitLabConnectedRepositoryRequest:
      id: CreateGitLabConnectedRepositoryRequest
      properties:
        parent:
          description: >-
            Required. The name of the `GitLabConfig` that adds connected
            repository. Format:
            `projects/{project}/locations/{location}/gitLabConfigs/{config}`
          type: string
        gitlabConnectedRepository:
          $ref: '#/components/schemas/GitLabConnectedRepository'
          description: Required. The GitLab repository to connect.
      type: object
      description: Request to connect a repository from a connected GitLab host.
    OperationMetadata:
      properties:
        statusDetail:
          type: string
          readOnly: true
          description: Output only. Human-readable status of the operation, if any.
        cancelRequested:
          readOnly: true
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have been cancelled successfully
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
        target:
          readOnly: true
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          type: string
        verb:
          type: string
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
        createTime:
          format: google-datetime
          description: Output only. The time the operation was created.
          type: string
          readOnly: true
        endTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The time the operation finished running.
      type: object
      id: OperationMetadata
      description: Represents the metadata of the long-running operation.
    GitRepoSource:
      type: object
      description: GitRepoSource describes a repo and ref of a code repository.
      properties:
        repository:
          type: string
          description: >-
            The connected repository resource name, in the format
            `projects/*/locations/*/connections/*/repositories/*`. Either `uri`
            or `repository` can be specified and is required.
        bitbucketServerConfig:
          description: >-
            The full resource name of the bitbucket server config. Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
          type: string
        repoType:
          enumDescriptions:
            - >-
              The default, unknown repo type. Don't use it, instead use one of
              the other repo types.
            - A Google Cloud Source Repositories-hosted repo.
            - >-
              A GitHub-hosted repo not necessarily on "github.com" (i.e. GitHub
              Enterprise).
            - A Bitbucket Server-hosted repo.
            - A GitLab-hosted repo.
          enum:
            - UNKNOWN
            - CLOUD_SOURCE_REPOSITORIES
            - GITHUB
            - BITBUCKET_SERVER
            - GITLAB
          description: See RepoType below.
          type: string
        githubEnterpriseConfig:
          type: string
          description: >-
            The full resource name of the github enterprise config. Format:
            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
            `projects/{project}/githubEnterpriseConfigs/{id}`.
        uri:
          description: >-
            The URI of the repo (e.g. https://github.com/user/repo.git). Either
            `uri` or `repository` can be specified and is required.
          type: string
        ref:
          type: string
          description: The branch or tag to use. Must start with "refs/" (required).
      id: GitRepoSource
    DeleteBitbucketServerConfigOperationMetadata:
      properties:
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        bitbucketServerConfig:
          type: string
          description: >-
            The resource name of the BitbucketServerConfig to be deleted.
            Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
        completeTime:
          format: google-datetime
          type: string
          description: Time the operation was completed.
      type: object
      id: DeleteBitbucketServerConfigOperationMetadata
      description: Metadata for `DeleteBitbucketServerConfig` operation.
    WorkerPool:
      id: WorkerPool
      type: object
      properties:
        uid:
          type: string
          description: Output only. A unique identifier for the `WorkerPool`.
          readOnly: true
        state:
          enumDescriptions:
            - State of the `WorkerPool` is unknown.
            - '`WorkerPool` is being created.'
            - '`WorkerPool` is running.'
            - >-
              `WorkerPool` is being deleted: cancelling builds and draining
              workers.
            - '`WorkerPool` is deleted.'
            - '`WorkerPool` is being updated; new builds cannot be run.'
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - RUNNING
            - DELETING
            - DELETED
            - UPDATING
          description: Output only. `WorkerPool` state.
          readOnly: true
        privatePoolV1Config:
          description: Legacy Private Pool configuration.
          $ref: '#/components/schemas/PrivatePoolV1Config'
        updateTime:
          description: >-
            Output only. Time at which the request to update the `WorkerPool`
            was received.
          readOnly: true
          format: google-datetime
          type: string
        annotations:
          type: object
          additionalProperties:
            type: string
          description: >-
            User specified annotations. See
            https://google.aip.dev/128#annotations for more details such as
            format and size limitations.
        createTime:
          type: string
          format: google-datetime
          description: >-
            Output only. Time at which the request to create the `WorkerPool`
            was received.
          readOnly: true
        displayName:
          type: string
          description: >-
            A user-specified, human-readable name for the `WorkerPool`. If
            provided, this value must be 1-63 characters.
        name:
          type: string
          description: >-
            Output only. The resource name of the `WorkerPool`, with format
            `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
            The value of `{worker_pool}` is provided by `worker_pool_id` in
            `CreateWorkerPool` request and the value of `{location}` is
            determined by the endpoint accessed.
          readOnly: true
        deleteTime:
          type: string
          description: >-
            Output only. Time at which the request to delete the `WorkerPool`
            was received.
          readOnly: true
          format: google-datetime
        etag:
          type: string
          description: >-
            Output only. Checksum computed by the server. May be sent on update
            and delete requests to ensure that the client has an up-to-date
            value before proceeding.
          readOnly: true
      description: >-
        Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool
        of workers for general use and have no access to a project's private
        network. By default, builds submitted to Cloud Build will use a worker
        from this pool. If your build needs access to resources on a private
        network, create and use a `WorkerPool` to run your builds. Private
        `WorkerPool`s give your builds access to any single VPC network that you
        administer, including any on-prem resources connected to that VPC
        network. For an overview of private pools, see [Private pools
        overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).
    CreateBitbucketServerConfigOperationMetadata:
      properties:
        bitbucketServerConfig:
          type: string
          description: >-
            The resource name of the BitbucketServerConfig to be created.
            Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        completeTime:
          type: string
          format: google-datetime
          description: Time the operation was completed.
      id: CreateBitbucketServerConfigOperationMetadata
      type: object
      description: Metadata for `CreateBitbucketServerConfig` operation.
    HttpBody:
      properties:
        data:
          description: The HTTP request/response body as raw binary.
          type: string
          format: byte
        extensions:
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: >-
            Application specific response metadata. Must be set in the first
            response for streaming APIs.
          type: array
        contentType:
          type: string
          description: >-
            The HTTP Content-Type header value specifying the content type of
            the body.
      id: HttpBody
      description: >-
        Message that represents an arbitrary HTTP body. It should only be used
        for payload formats that can't be represented as JSON, such as raw
        binary or an HTML page. This message can be used both in streaming and
        non-streaming API methods in the request as well as the response. It can
        be used as a top-level request field, which is convenient if one wants
        to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body. Example:
        message GetResourceRequest { // A unique request id. string request_id =
        1; // The raw HTTP body is bound to this field. google.api.HttpBody
        http_body = 2; } service ResourceService { rpc
        GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
        UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
        Example with streaming methods: service CaldavService { rpc
        GetCalendar(stream google.api.HttpBody) returns (stream
        google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody)
        returns (stream google.api.HttpBody); } Use of this type only changes
        how the request and response bodies are handled, all other features will
        continue to work unchanged.
      type: object
    UploadedNpmPackage:
      id: UploadedNpmPackage
      type: object
      properties:
        pushTiming:
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
          $ref: '#/components/schemas/TimeSpan'
          readOnly: true
        uri:
          type: string
          description: URI of the uploaded npm package.
        fileHashes:
          $ref: '#/components/schemas/FileHashes'
          description: Hash types and values of the npm package.
      description: >-
        An npm package uploaded to Artifact Registry using the NpmPackage
        directive.
    Warning:
      type: object
      description: A non-fatal problem encountered during the execution of the build.
      properties:
        priority:
          type: string
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
          description: The priority for this warning.
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
        text:
          description: Explanation of the warning generated.
          type: string
      id: Warning
    DeleteGitHubEnterpriseConfigOperationMetadata:
      type: object
      id: DeleteGitHubEnterpriseConfigOperationMetadata
      description: Metadata for `DeleteGitHubEnterpriseConfig` operation.
      properties:
        githubEnterpriseConfig:
          description: >-
            The resource name of the GitHubEnterprise to be deleted. Format:
            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        completeTime:
          format: google-datetime
          type: string
          description: Time the operation was completed.
    ListBuildTriggersResponse:
      id: ListBuildTriggersResponse
      properties:
        triggers:
          type: array
          description: '`BuildTriggers` for the project, sorted by `create_time` descending.'
          items:
            $ref: '#/components/schemas/BuildTrigger'
        nextPageToken:
          type: string
          description: Token to receive the next page of results.
      description: Response containing existing `BuildTriggers`.
      type: object
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      id: Status
      properties:
        details:
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
        code:
          format: int32
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
      type: object
    CreateGitHubEnterpriseConfigOperationMetadata:
      properties:
        createTime:
          format: google-datetime
          type: string
          description: Time the operation was created.
        completeTime:
          description: Time the operation was completed.
          type: string
          format: google-datetime
        githubEnterpriseConfig:
          description: >-
            The resource name of the GitHubEnterprise to be created. Format:
            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
          type: string
      description: Metadata for `CreateGithubEnterpriseConfig` operation.
      type: object
      id: CreateGitHubEnterpriseConfigOperationMetadata
    GitLabSecrets:
      type: object
      properties:
        apiAccessTokenVersion:
          description: >-
            Required. The resource name for the api access token’s secret
            version
          type: string
        readAccessTokenVersion:
          description: >-
            Required. The resource name for the read access token’s secret
            version
          type: string
        apiKeyVersion:
          description: >-
            Required. Immutable. API Key that will be attached to webhook
            requests from GitLab to Cloud Build.
          type: string
        webhookSecretVersion:
          description: >-
            Required. Immutable. The resource name for the webhook secret’s
            secret version. Once this field has been set, it cannot be changed.
            If you need to change it, please create another GitLabConfig.
          type: string
      description: >-
        GitLabSecrets represents the secrets in Secret Manager for a GitLab
        integration.
      id: GitLabSecrets
    PullRequestFilter:
      description: >-
        PullRequestFilter contains filter properties for matching GitHub Pull
        Requests.
      properties:
        invertRegex:
          description: >-
            If true, branches that do NOT match the git_ref will trigger a
            build.
          type: boolean
        branch:
          type: string
          description: >-
            Regex of branches to match. The syntax of the regular expressions
            accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
        commentControl:
          enumDescriptions:
            - >-
              Do not require comments on Pull Requests before builds are
              triggered.
            - >-
              Enforce that repository owners or collaborators must comment on
              Pull Requests before builds are triggered.
            - >-
              Enforce that repository owners or collaborators must comment on
              external contributors' Pull Requests before builds are triggered.
          type: string
          description: >-
            Configure builds to run whether a repository owner or collaborator
            need to comment `/gcbrun`.
          enum:
            - COMMENTS_DISABLED
            - COMMENTS_ENABLED
            - COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY
      type: object
      id: PullRequestFilter
    Secret:
      id: Secret
      type: object
      properties:
        kmsKeyName:
          type: string
          description: Cloud KMS key name to use to decrypt these envs.
        secretEnv:
          additionalProperties:
            type: string
            format: byte
          description: >-
            Map of environment variable name to its encrypted value. Secret
            environment variables must be unique across all of a build's
            secrets, and must be used by at least one build step. Values can be
            at most 64 KB in size. There can be at most 100 secret values across
            all of a build's secrets.
          type: object
      description: >-
        Pairs a set of secret environment variables containing encrypted values
        with the Cloud KMS key to use to decrypt the value. Note: Use
        `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with
        `secret`. For instructions see:
        https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
    NpmPackage:
      type: object
      id: NpmPackage
      description: >-
        Npm package to upload to Artifact Registry upon successful completion of
        all build steps.
      properties:
        packagePath:
          description: Path to the package.json. e.g. workspace/path/to/package
          type: string
        repository:
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in
            the workspace specified by path will be zipped and uploaded to
            Artifact Registry with this location as a prefix.
          type: string
    ApproveBuildRequest:
      properties:
        approvalResult:
          description: Approval decision and metadata.
          $ref: '#/components/schemas/ApprovalResult'
      type: object
      description: Request to approve or reject a pending build.
      id: ApproveBuildRequest
    Volume:
      properties:
        path:
          description: >-
            Path at which to mount the volume. Paths must be absolute and cannot
            conflict with other volume paths on the same build step or with
            certain reserved volume paths.
          type: string
        name:
          type: string
          description: >-
            Name of the volume to mount. Volume names must be unique per build
            step and must be valid names for Docker volumes. Each named volume
            must be used by at least two build steps.
      id: Volume
      description: >-
        Volume describes a Docker container volume which is mounted into build
        steps in order to persist files across build step execution.
      type: object
    UpdateGitLabConfigOperationMetadata:
      description: Metadata for `UpdateGitLabConfig` operation.
      properties:
        completeTime:
          description: Time the operation was completed.
          type: string
          format: google-datetime
        gitlabConfig:
          description: >-
            The resource name of the GitLabConfig to be created. Format:
            `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
          type: string
        createTime:
          type: string
          description: Time the operation was created.
          format: google-datetime
      id: UpdateGitLabConfigOperationMetadata
      type: object
    PushFilter:
      type: object
      description: Push contains filter properties for matching GitHub git pushes.
      properties:
        tag:
          type: string
          description: >-
            Regexes matching tags to build. The syntax of the regular
            expressions accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
        branch:
          description: >-
            Regexes matching branches to build. The syntax of the regular
            expressions accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
          type: string
        invertRegex:
          description: >-
            When true, only trigger a build if the revision regex does NOT match
            the git_ref regex.
          type: boolean
      id: PushFilter
    PythonPackage:
      properties:
        paths:
          type: array
          description: >-
            Path globs used to match files in the build's workspace. For Python/
            Twine, this is usually `dist/*`, and sometimes additionally an
            `.asc` file.
          items:
            type: string
        repository:
          type: string
          description: >-
            Artifact Registry repository, in the form
            "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the
            workspace matching any path pattern will be uploaded to Artifact
            Registry with this location as a prefix.
      id: PythonPackage
      type: object
      description: >-
        Python package to upload to Artifact Registry upon successful completion
        of all build steps. A package can encapsulate multiple objects to be
        uploaded to a single repository.
    Operation:
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      id: Operation
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        done:
          type: boolean
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
        response:
          description: >-
            The normal response of the operation in case of success. If the
            original method returns no data on success, such as `Delete`, the
            response is `google.protobuf.Empty`. If the original method is
            standard `Get`/`Create`/`Update`, the response should be the
            resource. For other methods, the response should have the type
            `XxxResponse`, where `Xxx` is the original method name. For example,
            if the original method name is `TakeSnapshot()`, the inferred
            response type is `TakeSnapshotResponse`.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
    CreateGitLabConfigOperationMetadata:
      description: Metadata for `CreateGitLabConfig` operation.
      type: object
      properties:
        createTime:
          type: string
          format: google-datetime
          description: Time the operation was created.
        gitlabConfig:
          description: >-
            The resource name of the GitLabConfig to be created. Format:
            `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
          type: string
        completeTime:
          description: Time the operation was completed.
          type: string
          format: google-datetime
      id: CreateGitLabConfigOperationMetadata
    UploadedMavenArtifact:
      description: A Maven artifact uploaded using the MavenArtifact directive.
      properties:
        uri:
          description: URI of the uploaded artifact.
          type: string
        pushTiming:
          readOnly: true
          $ref: '#/components/schemas/TimeSpan'
          description: >-
            Output only. Stores timing information for pushing the specified
            artifact.
        fileHashes:
          description: Hash types and values of the Maven Artifact.
          $ref: '#/components/schemas/FileHashes'
      id: UploadedMavenArtifact
      type: object
    Secrets:
      type: object
      properties:
        inline:
          description: >-
            Secrets encrypted with KMS key and the associated secret environment
            variable.
          items:
            $ref: '#/components/schemas/InlineSecret'
          type: array
        secretManager:
          type: array
          description: >-
            Secrets in Secret Manager and associated secret environment
            variable.
          items:
            $ref: '#/components/schemas/SecretManagerSecret'
      id: Secrets
      description: Secrets and secret environment variables.
    ArtifactObjects:
      description: >-
        Files in the workspace to upload to Cloud Storage upon successful
        completion of all build steps.
      type: object
      properties:
        location:
          description: >-
            Cloud Storage bucket and optional object path, in the form
            "gs://bucket/path/to/somewhere/". (see [Bucket Name
            Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
            Files in the workspace matching any path pattern will be uploaded to
            Cloud Storage with this location as a prefix.
          type: string
        timing:
          readOnly: true
          $ref: '#/components/schemas/TimeSpan'
          description: >-
            Output only. Stores timing information for pushing all artifact
            objects.
        paths:
          description: Path globs used to match files in the build's workspace.
          items:
            type: string
          type: array
      id: ArtifactObjects
    UpdateWorkerPoolOperationMetadata:
      properties:
        completeTime:
          type: string
          description: Time the operation was completed.
          format: google-datetime
        createTime:
          format: google-datetime
          description: Time the operation was created.
          type: string
        workerPool:
          type: string
          description: >-
            The resource name of the `WorkerPool` being updated. Format:
            `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
      type: object
      description: Metadata for the `UpdateWorkerPool` operation.
      id: UpdateWorkerPoolOperationMetadata
    ListBitbucketServerConfigsResponse:
      properties:
        bitbucketServerConfigs:
          type: array
          description: A list of BitbucketServerConfigs
          items:
            $ref: '#/components/schemas/BitbucketServerConfig'
        nextPageToken:
          type: string
          description: >-
            A token that can be sent as `page_token` to retrieve the next page.
            If this field is omitted, there are no subsequent pages.
      type: object
      id: ListBitbucketServerConfigsResponse
      description: RPC response object returned by ListBitbucketServerConfigs RPC method.
    PrivatePoolV1Config:
      id: PrivatePoolV1Config
      description: Configuration for a V1 `PrivatePool`.
      type: object
      properties:
        networkConfig:
          $ref: '#/components/schemas/NetworkConfig'
          description: Network configuration for the pool.
        workerConfig:
          $ref: '#/components/schemas/WorkerConfig'
          description: Machine configuration for the workers in the pool.
    ServiceDirectoryConfig:
      description: >-
        ServiceDirectoryConfig represents Service Directory configuration for a
        SCM host connection.
      type: object
      id: ServiceDirectoryConfig
      properties:
        service:
          description: >-
            The Service Directory service name. Format:
            projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
          type: string
    RepositoryEventConfig:
      id: RepositoryEventConfig
      type: object
      description: >-
        The configuration of a trigger that creates a build whenever an event
        from Repo API is received.
      properties:
        repository:
          type: string
          description: The resource name of the Repo API resource.
        repositoryType:
          enum:
            - REPOSITORY_TYPE_UNSPECIFIED
            - GITHUB
            - GITHUB_ENTERPRISE
            - GITLAB_ENTERPRISE
          enumDescriptions:
            - If unspecified, RepositoryType defaults to GITHUB.
            - The SCM repo is GITHUB.
            - The SCM repo is GITHUB Enterprise.
            - The SCM repo is GITLAB Enterprise.
          description: Output only. The type of the SCM vendor the repository points to.
          type: string
          readOnly: true
        pullRequest:
          description: Filter to match changes in pull requests.
          $ref: '#/components/schemas/PullRequestFilter'
        push:
          description: Filter to match changes in refs like branches, tags.
          $ref: '#/components/schemas/PushFilter'
    Results:
      id: Results
      description: Artifacts created by the build pipeline.
      type: object
      properties:
        images:
          items:
            $ref: '#/components/schemas/BuiltImage'
          type: array
          description: Container images that were built as a part of the build.
        buildStepOutputs:
          items:
            type: string
            format: byte
          description: >-
            List of build step outputs, produced by builder images, in the order
            corresponding to build step indices. [Cloud
            Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
            can produce this output by writing to `$BUILDER_OUTPUT/output`. Only
            the first 4KB of data is stored.
          type: array
        buildStepImages:
          description: >-
            List of build step digests, in the order corresponding to build step
            indices.
          items:
            type: string
          type: array
        artifactTiming:
          description: Time to push all non-container artifacts to Cloud Storage.
          $ref: '#/components/schemas/TimeSpan'
        numArtifacts:
          type: string
          description: >-
            Number of non-container artifacts uploaded to Cloud Storage. Only
            populated when artifacts are uploaded to Cloud Storage.
          format: int64
        npmPackages:
          description: Npm packages uploaded to Artifact Registry at the end of the build.
          type: array
          items:
            $ref: '#/components/schemas/UploadedNpmPackage'
        mavenArtifacts:
          items:
            $ref: '#/components/schemas/UploadedMavenArtifact'
          type: array
          description: >-
            Maven artifacts uploaded to Artifact Registry at the end of the
            build.
        artifactManifest:
          type: string
          description: >-
            Path to the artifact manifest for non-container artifacts uploaded
            to Cloud Storage. Only populated when artifacts are uploaded to
            Cloud Storage.
        pythonPackages:
          description: >-
            Python artifacts uploaded to Artifact Registry at the end of the
            build.
          type: array
          items:
            $ref: '#/components/schemas/UploadedPythonPackage'
    BuildApproval:
      description: >-
        BuildApproval describes a build's approval configuration, state, and
        result.
      id: BuildApproval
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ApprovalConfig'
          readOnly: true
          description: Output only. Configuration for manual approval of this build.
        result:
          $ref: '#/components/schemas/ApprovalResult'
          description: Output only. Result of manual approval for this Build.
          readOnly: true
        state:
          readOnly: true
          type: string
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
          description: Output only. The state of this build's approval.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
    GitHubEventsConfig:
      type: object
      id: GitHubEventsConfig
      description: >-
        GitHubEventsConfig describes the configuration of a trigger that creates
        a build whenever a GitHub event is received.
      properties:
        name:
          type: string
          description: >-
            Name of the repository. For example: The name for
            https://github.com/googlecloudplatform/cloud-builders is
            "cloud-builders".
        enterpriseConfigResourceName:
          description: >-
            Optional. The resource name of the github enterprise config that
            should be applied to this installation. For example:
            "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
          type: string
        pullRequest:
          $ref: '#/components/schemas/PullRequestFilter'
          description: filter to match changes in pull requests.
        owner:
          type: string
          description: >-
            Owner of the repository. For example: The owner for
            https://github.com/googlecloudplatform/cloud-builders is
            "googlecloudplatform".
        push:
          description: filter to match changes in refs like branches, tags.
          $ref: '#/components/schemas/PushFilter'
        installationId:
          type: string
          description: The installationID that emits the GitHub event.
          format: int64
    GitFileSource:
      type: object
      description: >-
        GitFileSource describes a file within a (possibly remote) code
        repository.
      properties:
        path:
          description: The path of the file, with the repo root as the root of the path.
          type: string
        revision:
          type: string
          description: >-
            The branch, tag, arbitrary ref, or SHA version of the repo to use
            when resolving the filename (optional). This field respects the same
            syntax/resolution as described here:
            https://git-scm.com/docs/gitrevisions If unspecified, the revision
            from which the trigger invocation originated is assumed to be the
            revision from which to read the specified path.
        repoType:
          enumDescriptions:
            - >-
              The default, unknown repo type. Don't use it, instead use one of
              the other repo types.
            - A Google Cloud Source Repositories-hosted repo.
            - >-
              A GitHub-hosted repo not necessarily on "github.com" (i.e. GitHub
              Enterprise).
            - A Bitbucket Server-hosted repo.
            - A GitLab-hosted repo.
          enum:
            - UNKNOWN
            - CLOUD_SOURCE_REPOSITORIES
            - GITHUB
            - BITBUCKET_SERVER
            - GITLAB
          type: string
          description: See RepoType above.
        githubEnterpriseConfig:
          description: >-
            The full resource name of the github enterprise config. Format:
            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
            `projects/{project}/githubEnterpriseConfigs/{id}`.
          type: string
        uri:
          type: string
          description: >-
            The URI of the repo. Either uri or repository can be specified. If
            unspecified, the repo from which the trigger invocation originated
            is assumed to be the repo from which to read the specified path.
        repository:
          type: string
          description: >-
            The fully qualified resource name of the Repos API repository.
            Either URI or repository can be specified. If unspecified, the repo
            from which the trigger invocation originated is assumed to be the
            repo from which to read the specified path.
        bitbucketServerConfig:
          description: >-
            The full resource name of the bitbucket server config. Format:
            `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
          type: string
      id: GitFileSource
    BatchCreateGitLabConnectedRepositoriesResponseMetadata:
      type: object
      properties:
        config:
          type: string
          description: >-
            The name of the `GitLabConfig` that added connected repositories.
            Format:
            `projects/{project}/locations/{location}/gitLabConfigs/{config}`
        createTime:
          description: Time the operation was created.
          type: string
          format: google-datetime
        completeTime:
          type: string
          description: Time the operation was completed.
          format: google-datetime
      description: Metadata for `BatchCreateGitLabConnectedRepositories` operation.
      id: BatchCreateGitLabConnectedRepositoriesResponseMetadata
    GitLabConnectedRepository:
      description: >-
        GitLabConnectedRepository represents a GitLab connected repository
        request response.
      id: GitLabConnectedRepository
      type: object
      properties:
        status:
          readOnly: true
          $ref: '#/components/schemas/Status'
          description: Output only. The status of the repo connection request.
        repo:
          description: The GitLab repositories to connect.
          $ref: '#/components/schemas/GitLabRepositoryId'
        parent:
          type: string
          description: >-
            The name of the `GitLabConfig` that added connected repository.
            Format:
            `projects/{project}/locations/{location}/gitLabConfigs/{config}`
    PoolOption:
      id: PoolOption
      properties:
        name:
          type: string
          description: >-
            The `WorkerPool` resource to execute the build on. You must have
            `cloudbuild.workerpools.use` on the project hosting the WorkerPool.
            Format
            projects/{project}/locations/{location}/workerPools/{workerPoolId}
      description: >-
        Details about how a build should be executed on a `WorkerPool`. See
        [running builds in a private
        pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
        for more information.
      type: object
    RemoveBitbucketServerConnectedRepositoryRequest:
      description: >-
        RPC request object accepted by RemoveBitbucketServerConnectedRepository
        RPC method.
      id: RemoveBitbucketServerConnectedRepositoryRequest
      type: object
      properties:
        connectedRepository:
          $ref: '#/components/schemas/BitbucketServerRepositoryId'
          description: The connected repository to remove.
    Artifacts:
      type: object
      description: >-
        Artifacts produced by a build that should be uploaded upon successful
        completion of all build steps.
      id: Artifacts
      properties:
        pythonPackages:
          type: array
          description: >-
            A list of Python packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. The build service account
            credentials will be used to perform the upload. If any objects fail
            to be pushed, the build is marked FAILURE.
          items:
            $ref: '#/components/schemas/PythonPackage'
        npmPackages:
          description: >-
            A list of npm packages to be uploaded to Artifact Registry upon
            successful completion of all build steps. Npm packages in the
            specified paths will be uploaded to the specified Artifact Registry
            repository using the builder service account's credentials. If any
            packages fail to be pushed, the build is marked FAILURE.
          type: array
          items:
            $ref: '#/components/schemas/NpmPackage'
        images:
          description: >-
            A list of images to be pushed upon the successful completion of all
            build steps. The images will be pushed using the builder service
            account's credentials. The digests of the pushed images will be
            stored in the Build resource's results field. If any of the images
            fail to be pushed, the build is marked FAILURE.
          items:
            type: string
          type: array
        objects:
          $ref: '#/components/schemas/ArtifactObjects'
          description: >-
            A list of objects to be uploaded to Cloud Storage upon successful
            completion of all build steps. Files in the workspace matching
            specified paths globs will be uploaded to the specified Cloud
            Storage location using the builder service account's credentials.
            The location and generation of the uploaded objects will be stored
            in the Build resource's results field. If any objects fail to be
            pushed, the build is marked FAILURE.
        mavenArtifacts:
          description: >-
            A list of Maven artifacts to be uploaded to Artifact Registry upon
            successful completion of all build steps. Artifacts in the workspace
            matching specified paths globs will be uploaded to the specified
            Artifact Registry repository using the builder service account's
            credentials. If any artifacts fail to be pushed, the build is marked
            FAILURE.
          items:
            $ref: '#/components/schemas/MavenArtifact'
          type: array
    ReceiveTriggerWebhookResponse:
      description: >-
        ReceiveTriggerWebhookResponse [Experimental] is the response object for
        the ReceiveTriggerWebhook method.
      id: ReceiveTriggerWebhookResponse
      properties: {}
      type: object
    FailureInfo:
      type: object
      description: A fatal problem encountered during the execution of the build.
      id: FailureInfo
      properties:
        detail:
          description: Explains the failure issue in more detail using hard-coded text.
          type: string
        type:
          description: The name of the failure.
          type: string
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
    GitSource:
      properties:
        url:
          type: string
          description: >-
            Location of the Git repo to build. This will be used as a `git
            remote`, see https://git-scm.com/docs/git-remote.
        dir:
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
          type: string
        revision:
          type: string
          description: >-
            The revision to fetch from the Git repository such as a branch, a
            tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to
            fetch the revision from the Git repository; therefore make sure that
            the string you provide for `revision` is parsable by the command.
            For information on string values accepted by `git fetch`, see
            https://git-scm.com/docs/gitrevisions#_specifying_revisions. For
            information on `git fetch`, see https://git-scm.com/docs/git-fetch.
      type: object
      description: Location of the source in any accessible Git repository.
      id: GitSource
    BuildTrigger:
      description: >-
        Configuration for an automated build in response to source repository
        changes.
      properties:
        description:
          type: string
          description: Human-readable description of this trigger.
        autodetect:
          type: boolean
          description: >-
            Autodetect build configuration. The following precedence is used
            (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3.
            cloudbuild.json 4. Dockerfile Currently only available for GitHub
            App Triggers.
        disabled:
          type: boolean
          description: If true, the trigger will never automatically execute a build.
        serviceAccount:
          type: string
          description: >-
            The service account used for all user-controlled operations
            including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and
            CancelBuild. If no service account is set, then the standard Cloud
            Build service account ([PROJECT_NUM]@system.gserviceaccount.com)
            will be used instead. Format:
            `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
        eventType:
          enum:
            - EVENT_TYPE_UNSPECIFIED
            - REPO
            - WEBHOOK
            - PUBSUB
            - MANUAL
          enumDescriptions:
            - EVENT_TYPE_UNSPECIFIED event_types are ignored.
            - REPO corresponds to the supported VCS integrations.
            - WEBHOOK corresponds to webhook triggers.
            - PUBSUB corresponds to pubsub triggers.
            - MANUAL corresponds to manual-only invoked triggers.
          description: >-
            EventType allows the user to explicitly set the type of event to
            which this BuildTrigger should respond. This field will be validated
            against the rest of the configuration if it is set.
          type: string
        gitFileSource:
          description: The file source describing the local or remote Build template.
          $ref: '#/components/schemas/GitFileSource'
        filter:
          type: string
          description: A Common Expression Language string.
        bitbucketServerTriggerConfig:
          $ref: '#/components/schemas/BitbucketServerTriggerConfig'
          description: >-
            BitbucketServerTriggerConfig describes the configuration of a
            trigger that creates a build whenever a Bitbucket Server event is
            received.
        includedFiles:
          items:
            type: string
          description: >-
            If any of the files altered in the commit pass the ignored_files
            filter and included_files is empty, then as far as this filter is
            concerned, we should trigger the build. If any of the files altered
            in the commit pass the ignored_files filter and included_files is
            not empty, then we make sure that at least one of those files
            matches a included_files glob. If not, then we do not trigger a
            build.
          type: array
        ignoredFiles:
          description: >-
            ignored_files and included_files are file glob matches using
            https://golang.org/pkg/path/filepath/#Match extended with support
            for "**". If ignored_files and changed files are both empty, then
            they are not used to determine whether or not to trigger a build. If
            ignored_files is not empty, then we ignore any files that match any
            of the ignored_file globs. If the change has no files that are
            outside of the ignored_files globs, then we do not trigger a build.
          items:
            type: string
          type: array
        triggerTemplate:
          description: >-
            Template describing the types of source changes to trigger a build.
            Branch and tag names in trigger templates are interpreted as regular
            expressions. Any branch or tag change that matches that regular
            expression will trigger a build. Mutually exclusive with `github`.
          $ref: '#/components/schemas/RepoSource'
        github:
          description: >-
            GitHubEventsConfig describes the configuration of a trigger that
            creates a build whenever a GitHub event is received. Mutually
            exclusive with `trigger_template`.
          $ref: '#/components/schemas/GitHubEventsConfig'
        tags:
          type: array
          items:
            type: string
          description: Tags for annotation of a `BuildTrigger`
        filename:
          type: string
          description: >-
            Path, from the source root, to the build configuration file (i.e.
            cloudbuild.yaml).
        gitlabEnterpriseEventsConfig:
          $ref: '#/components/schemas/GitLabEventsConfig'
          description: >-
            GitLabEnterpriseEventsConfig describes the configuration of a
            trigger that creates a build whenever a GitLab Enterprise event is
            received.
        includeBuildLogs:
          description: >-
            If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on
            GitHub page when build status is final. Setting this field to
            INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in
            INVALID_ARGUMENT error.
          type: string
          enum:
            - INCLUDE_BUILD_LOGS_UNSPECIFIED
            - INCLUDE_BUILD_LOGS_WITH_STATUS
          enumDescriptions:
            - Build logs will not be shown on GitHub.
            - Build logs will be shown on GitHub.
        sourceToBuild:
          $ref: '#/components/schemas/GitRepoSource'
          description: >-
            The repo and ref of the repository from which to build. This field
            is used only for those triggers that do not respond to SCM events.
            Triggers that respond to such events build source at whatever commit
            caused the event. This field is currently only used by Webhook,
            Pub/Sub, Manual, and Cron triggers.
        createTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. Time when the trigger was created.
        substitutions:
          type: object
          additionalProperties:
            type: string
          description: >-
            Substitutions for Build resource. The keys must match the following
            regular expression: `^_[A-Z0-9_]+$`.
        name:
          description: >-
            User-assigned name of the trigger. Must be unique within the
            project. Trigger names must meet the following requirements: + They
            must contain only alphanumeric characters and dashes. + They can be
            1-64 characters long. + They must begin and end with an alphanumeric
            character.
          type: string
        build:
          description: Contents of the build template.
          $ref: '#/components/schemas/Build'
        approvalConfig:
          $ref: '#/components/schemas/ApprovalConfig'
          description: >-
            Configuration for manual approval to start a build invocation of
            this BuildTrigger.
        webhookConfig:
          description: >-
            WebhookConfig describes the configuration of a trigger that creates
            a build whenever a webhook is sent to a trigger's webhook URL.
          $ref: '#/components/schemas/WebhookConfig'
        resourceName:
          type: string
          description: >-
            The `Trigger` name with format:
            `projects/{project}/locations/{location}/triggers/{trigger}`, where
            {trigger} is a unique identifier generated by the service.
        repositoryEventConfig:
          $ref: '#/components/schemas/RepositoryEventConfig'
          description: >-
            The configuration of a trigger that creates a build whenever an
            event from Repo API is received.
        id:
          type: string
          readOnly: true
          description: Output only. Unique identifier of the trigger.
        pubsubConfig:
          $ref: '#/components/schemas/PubsubConfig'
          description: >-
            PubsubConfig describes the configuration of a trigger that creates a
            build whenever a Pub/Sub message is published.
      id: BuildTrigger
      type: object
    ListBuildsResponse:
      properties:
        builds:
          description: Builds will be sorted by `create_time`, descending.
          type: array
          items:
            $ref: '#/components/schemas/Build'
        nextPageToken:
          type: string
          description: >-
            Token to receive the next page of results. This will be absent if
            the end of the response list has been reached.
      id: ListBuildsResponse
      type: object
      description: Response including listed builds.
    BitbucketServerTriggerConfig:
      id: BitbucketServerTriggerConfig
      properties:
        repoSlug:
          type: string
          description: >-
            Required. Slug of the repository. A repository slug is a
            URL-friendly version of a repository name, automatically generated
            by Bitbucket for use in the URL. For example, if the repository name
            is 'test repo', in the URL it would become 'test-repo' as in
            https://mybitbucket.server/projects/TEST/repos/test-repo.
        bitbucketServerConfig:
          $ref: '#/components/schemas/BitbucketServerConfig'
          description: >-
            Output only. The BitbucketServerConfig specified in the
            bitbucket_server_config_resource field.
          readOnly: true
        pullRequest:
          description: Filter to match changes in pull requests.
          $ref: '#/components/schemas/PullRequestFilter'
        projectKey:
          description: >-
            Required. Key of the project that the repo is in. For example: The
            key for https://mybitbucket.server/projects/TEST/repos/test-repo is
            "TEST".
          type: string
        bitbucketServerConfigResource:
          type: string
          description: >-
            Required. The Bitbucket server config resource that this trigger
            config maps to.
        push:
          description: Filter to match changes in refs like branches, tags.
          $ref: '#/components/schemas/PushFilter'
      type: object
      description: >-
        BitbucketServerTriggerConfig describes the configuration of a trigger
        that creates a build whenever a Bitbucket Server event is received.
    GitHubEnterpriseSecrets:
      id: GitHubEnterpriseSecrets
      type: object
      description: >-
        GitHubEnterpriseSecrets represents the names of all necessary secrets in
        Secret Manager for a GitHub Enterprise server. Format is:
        projects//secrets/.
      properties:
        privateKeyName:
          description: The resource name for the private key secret.
          type: string
        privateKeyVersionName:
          description: The resource name for the private key secret version.
          type: string
        oauthClientIdName:
          type: string
          description: The resource name for the OAuth client ID secret in Secret Manager.
        webhookSecretName:
          description: The resource name for the webhook secret in Secret Manager.
          type: string
        oauthSecretVersionName:
          type: string
          description: >-
            The resource name for the OAuth secret secret version in Secret
            Manager.
        oauthSecretName:
          description: The resource name for the OAuth secret in Secret Manager.
          type: string
        webhookSecretVersionName:
          description: >-
            The resource name for the webhook secret secret version in Secret
            Manager.
          type: string
        oauthClientIdVersionName:
          description: >-
            The resource name for the OAuth client ID secret version in Secret
            Manager.
          type: string
    UpdateGitHubEnterpriseConfigOperationMetadata:
      description: Metadata for `UpdateGitHubEnterpriseConfig` operation.
      type: object
      properties:
        githubEnterpriseConfig:
          description: >-
            The resource name of the GitHubEnterprise to be updated. Format:
            `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
          type: string
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        completeTime:
          description: Time the operation was completed.
          type: string
          format: google-datetime
      id: UpdateGitHubEnterpriseConfigOperationMetadata
    RunBuildTriggerRequest:
      id: RunBuildTriggerRequest
      description: Specifies a build trigger to run and the source to use.
      type: object
      properties:
        projectId:
          type: string
          description: Required. ID of the project.
        triggerId:
          description: Required. ID of the trigger.
          type: string
        source:
          $ref: '#/components/schemas/RepoSource'
          description: >-
            Source to build against this trigger. Branch and tag names cannot
            consist of regular expressions.
    GitLabEnterpriseConfig:
      properties:
        hostUri:
          type: string
          description: Immutable. The URI of the GitlabEnterprise host.
        sslCa:
          type: string
          description: >-
            The SSL certificate to use in requests to GitLab Enterprise
            instances.
        serviceDirectoryConfig:
          $ref: '#/components/schemas/ServiceDirectoryConfig'
          description: >-
            The Service Directory configuration to be used when reaching out to
            the GitLab Enterprise instance.
      type: object
      id: GitLabEnterpriseConfig
      description: >-
        GitLabEnterpriseConfig represents the configuration for a
        GitLabEnterprise integration.
    DeleteGitLabConfigOperationMetadata:
      properties:
        createTime:
          type: string
          description: Time the operation was created.
          format: google-datetime
        completeTime:
          format: google-datetime
          type: string
          description: Time the operation was completed.
        gitlabConfig:
          type: string
          description: >-
            The resource name of the GitLabConfig to be created. Format:
            `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
      id: DeleteGitLabConfigOperationMetadata
      description: Metadata for `DeleteGitLabConfig` operation.
      type: object
    BatchCreateBitbucketServerConnectedRepositoriesRequest:
      description: >-
        RPC request object accepted by
        BatchCreateBitbucketServerConnectedRepositories RPC method.
      properties:
        requests:
          items:
            $ref: >-
              #/components/schemas/CreateBitbucketServerConnectedRepositoryRequest
          type: array
          description: Required. Requests to connect Bitbucket Server repositories.
      id: BatchCreateBitbucketServerConnectedRepositoriesRequest
      type: object
    WebhookConfig:
      type: object
      properties:
        state:
          type: string
          description: >-
            Potential issues with the underlying Pub/Sub subscription
            configuration. Only populated on get requests.
          enumDescriptions:
            - The webhook auth configuration not been checked.
            - The auth configuration is properly setup.
            - The secret provided in auth_method has been deleted.
          enum:
            - STATE_UNSPECIFIED
            - OK
            - SECRET_DELETED
        secret:
          type: string
          description: Required. Resource name for the secret required as a URL parameter.
      description: >-
        WebhookConfig describes the configuration of a trigger that creates a
        build whenever a webhook is sent to a trigger's webhook URL.
      id: WebhookConfig
    RepoSource:
      id: RepoSource
      properties:
        repoName:
          description: Name of the Cloud Source Repository.
          type: string
        substitutions:
          type: object
          description: >-
            Substitutions to use in a triggered build. Should only be used with
            RunBuildTrigger
          additionalProperties:
            type: string
        projectId:
          type: string
          description: >-
            ID of the project that owns the Cloud Source Repository. If omitted,
            the project ID requesting the build is assumed.
        dir:
          description: >-
            Directory, relative to the source root, in which to run the build.
            This must be a relative path. If a step's `dir` is specified and is
            an absolute path, this value is ignored for that step's execution.
          type: string
        tagName:
          description: >-
            Regex matching tags to build. The syntax of the regular expressions
            accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
          type: string
        commitSha:
          type: string
          description: Explicit commit SHA to build.
        branchName:
          type: string
          description: >-
            Regex matching branches to build. The syntax of the regular
            expressions accepted is the syntax accepted by RE2 and described at
            https://github.com/google/re2/wiki/Syntax
        invertRegex:
          description: >-
            Only trigger a build if the revision regex does NOT match the
            revision regex.
          type: boolean
      type: object
      description: Location of the source in a Google Cloud Source Repository.
    GitLabConfig:
      id: GitLabConfig
      description: GitLabConfig represents the configuration for a GitLab integration.
      type: object
      properties:
        username:
          description: >-
            Username of the GitLab.com or GitLab Enterprise account Cloud Build
            will use.
          type: string
        webhookKey:
          readOnly: true
          type: string
          description: >-
            Output only. UUID included in webhook requests. The UUID is used to
            look up the corresponding config.
        createTime:
          description: Output only. Time when the config was created.
          type: string
          readOnly: true
          format: google-datetime
        connectedRepositories:
          type: array
          items:
            $ref: '#/components/schemas/GitLabRepositoryId'
          description: >-
            Connected GitLab.com or GitLabEnterprise repositories for this
            config.
        name:
          description: The resource name for the config.
          type: string
        secrets:
          description: Required. Secret Manager secrets needed by the config.
          $ref: '#/components/schemas/GitLabSecrets'
        enterpriseConfig:
          description: Optional. GitLabEnterprise config.
          $ref: '#/components/schemas/GitLabEnterpriseConfig'
    BatchCreateGitLabConnectedRepositoriesResponse:
      id: BatchCreateGitLabConnectedRepositoriesResponse
      description: Response of BatchCreateGitLabConnectedRepositories RPC method.
      type: object
      properties:
        gitlabConnectedRepositories:
          items:
            $ref: '#/components/schemas/GitLabConnectedRepository'
          type: array
          description: The GitLab connected repository requests' responses.
    BitbucketServerSecrets:
      description: >-
        BitbucketServerSecrets represents the secrets in Secret Manager for a
        Bitbucket Server.
      id: BitbucketServerSecrets
      type: object
      properties:
        webhookSecretVersionName:
          type: string
          description: >-
            Required. Immutable. The resource name for the webhook secret's
            secret version. Once this field has been set, it cannot be changed.
            If you need to change it, please create another
            BitbucketServerConfig.
        adminAccessTokenVersionName:
          type: string
          description: >-
            Required. The resource name for the admin access token's secret
            version.
        readAccessTokenVersionName:
          type: string
          description: >-
            Required. The resource name for the read access token's secret
            version.
    ListBitbucketServerRepositoriesResponse:
      id: ListBitbucketServerRepositoriesResponse
      properties:
        nextPageToken:
          type: string
          description: >-
            A token that can be sent as `page_token` to retrieve the next page.
            If this field is omitted, there are no subsequent pages.
        bitbucketServerRepositories:
          description: List of Bitbucket Server repositories.
          type: array
          items:
            $ref: '#/components/schemas/BitbucketServerRepository'
      type: object
      description: >-
        RPC response object returned by the ListBitbucketServerRepositories RPC
        method.
    SourceProvenance:
      id: SourceProvenance
      properties:
        resolvedStorageSourceManifest:
          $ref: '#/components/schemas/StorageSourceManifest'
          description: >-
            A copy of the build's `source.storage_source_manifest`, if exists,
            with any revisions resolved. This feature is in Preview.
        resolvedRepoSource:
          $ref: '#/components/schemas/RepoSource'
          description: >-
            A copy of the build's `source.repo_source`, if exists, with any
            revisions resolved.
        fileHashes:
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          description: >-
            Output only. Hash(es) of the build source, which can be used to
            verify that the original source integrity was maintained in the
            build. Note that `FileHashes` will only be populated if
            `BuildOptions` has requested a `SourceProvenanceHash`. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (`.tar.gz`), the `FileHash`
            will be for the single path to that file.
          type: object
          readOnly: true
        resolvedStorageSource:
          description: >-
            A copy of the build's `source.storage_source`, if exists, with any
            generations resolved.
          $ref: '#/components/schemas/StorageSource'
      description: >-
        Provenance of the source. Ways to find the original source, or verify
        that some source was used for this build.
      type: object
    GitLabEventsConfig:
      type: object
      id: GitLabEventsConfig
      properties:
        gitlabConfig:
          $ref: '#/components/schemas/GitLabConfig'
          description: >-
            Output only. The GitLabConfig specified in the
            gitlab_config_resource field.
          readOnly: true
        gitlabConfigResource:
          type: string
          description: The GitLab config resource that this trigger config maps to.
        pullRequest:
          description: Filter to match changes in pull requests.
          $ref: '#/components/schemas/PullRequestFilter'
        push:
          $ref: '#/components/schemas/PushFilter'
          description: Filter to match changes in refs like branches, tags.
        projectNamespace:
          type: string
          description: Namespace of the GitLab project.
      description: >-
        GitLabEventsConfig describes the configuration of a trigger that creates
        a build whenever a GitLab event is received.
    PubsubConfig:
      type: object
      description: >-
        PubsubConfig describes the configuration of a trigger that creates a
        build whenever a Pub/Sub message is published.
      properties:
        subscription:
          description: >-
            Output only. Name of the subscription. Format is
            `projects/{project}/subscriptions/{subscription}`.
          readOnly: true
          type: string
        topic:
          description: >-
            The name of the topic from which this subscription is receiving
            messages. Format is `projects/{project}/topics/{topic}`.
          type: string
        serviceAccountEmail:
          description: Service account that will make the push request.
          type: string
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - OK
            - SUBSCRIPTION_DELETED
            - TOPIC_DELETED
            - SUBSCRIPTION_MISCONFIGURED
          description: >-
            Potential issues with the underlying Pub/Sub subscription
            configuration. Only populated on get requests.
          enumDescriptions:
            - The subscription configuration has not been checked.
            - The Pub/Sub subscription is properly configured.
            - The subscription has been deleted.
            - The topic has been deleted.
            - Some of the subscription's field are misconfigured.
      id: PubsubConfig
    ApprovalConfig:
      description: ApprovalConfig describes configuration for manual approval of a build.
      id: ApprovalConfig
      properties:
        approvalRequired:
          type: boolean
          description: >-
            Whether or not approval is needed. If this is set on a build, it
            will become pending when created, and will need to be explicitly
            approved to start.
      type: object
    DeleteWorkerPoolOperationMetadata:
      properties:
        createTime:
          type: string
          format: google-datetime
          description: Time the operation was created.
        workerPool:
          type: string
          description: >-
            The resource name of the `WorkerPool` being deleted. Format:
            `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
        completeTime:
          format: google-datetime
          description: Time the operation was completed.
          type: string
      type: object
      id: DeleteWorkerPoolOperationMetadata
      description: Metadata for the `DeleteWorkerPool` operation.
    BitbucketServerConfig:
      id: BitbucketServerConfig
      properties:
        connectedRepositories:
          description: >-
            Output only. Connected Bitbucket Server repositories for this
            config.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/BitbucketServerRepositoryId'
        createTime:
          format: google-datetime
          type: string
          description: Time when the config was created.
        username:
          type: string
          description: Username of the account Cloud Build will use on Bitbucket Server.
        peeredNetwork:
          type: string
          description: >-
            Optional. The network to be used when reaching out to the Bitbucket
            Server instance. The VPC network must be enabled for private service
            connection. This should be set if the Bitbucket Server instance is
            hosted on-premises and not reachable by public internet. If this
            field is left empty, no network peering will occur and calls to the
            Bitbucket Server instance will be made over the public internet.
            Must be in the format
            `projects/{project}/global/networks/{network}`, where {project} is a
            project number or id and {network} is the name of a VPC network in
            the project.
        sslCa:
          type: string
          description: >-
            Optional. SSL certificate to use for requests to Bitbucket Server.
            The format should be PEM format but the extension can be one of
            .pem, .cer, or .crt.
        hostUri:
          type: string
          description: >-
            Required. Immutable. The URI of the Bitbucket Server host. Once this
            field has been set, it cannot be changed. If you need to change it,
            please create another BitbucketServerConfig.
        secrets:
          description: Required. Secret Manager secrets needed by the config.
          $ref: '#/components/schemas/BitbucketServerSecrets'
        apiKey:
          description: >-
            Required. Immutable. API Key that will be attached to webhook. Once
            this field has been set, it cannot be changed. If you need to change
            it, please create another BitbucketServerConfig.
          type: string
        webhookKey:
          readOnly: true
          type: string
          description: >-
            Output only. UUID included in webhook requests. The UUID is used to
            look up the corresponding config.
        name:
          type: string
          description: The resource name for the config.
      description: >-
        BitbucketServerConfig represents the configuration for a Bitbucket
        Server.
      type: object
    RemoveGitLabConnectedRepositoryRequest:
      id: RemoveGitLabConnectedRepositoryRequest
      description: >-
        RPC request object accepted by RemoveGitLabConnectedRepository RPC
        method.
      properties:
        connectedRepository:
          description: The connected repository to remove.
          $ref: '#/components/schemas/GitLabRepositoryId'
      type: object
    BitbucketServerRepository:
      properties:
        description:
          description: Description of the repository.
          type: string
        browseUri:
          type: string
          description: Link to the browse repo page on the Bitbucket Server instance.
        repoId:
          $ref: '#/components/schemas/BitbucketServerRepositoryId'
          description: Identifier for a repository hosted on a Bitbucket Server.
        displayName:
          type: string
          description: Display name of the repository.
        name:
          type: string
          description: The resource name of the repository.
      id: BitbucketServerRepository
      description: >-
        BitbucketServerRepository represents a repository hosted on a Bitbucket
        Server.
      type: object
    TimeSpan:
      type: object
      description: Start and end times for a build execution phase.
      id: TimeSpan
      properties:
        startTime:
          format: google-datetime
          description: Start of time span.
          type: string
        endTime:
          format: google-datetime
          description: End of time span.
          type: string
  parameters:
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/locations/{locationsId}/regionalWebhook:
    parameters: &ref_1
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: >-
        ReceiveRegionalWebhook is called when the API receives a regional GitHub
        webhook.
      operationId: cloudbuild.locations.regionalWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: webhookKey
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: exec
  /v1/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: cloudbuild.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: cloudbuild.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/webhook:
    parameters: *ref_1
    post:
      description: ReceiveWebhook is called when the API receives a GitHub webhook.
      operationId: cloudbuild.webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: query
          name: webhookKey
          schema:
            type: string
      x-stackQL-resource: cloudbuild
      x-stackQL-verb: exec
  /v1/githubDotComWebhook:receive:
    parameters: *ref_1
    post:
      description: >-
        ReceiveGitHubDotComWebhook is called when the API receives a github.com
        webhook.
      operationId: cloudbuild.githubDotComWebhook.receive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: query
          name: webhookKey
          schema:
            type: string
      x-stackQL-resource: github_dot_com_webhook
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/githubEnterpriseConfigs:
    parameters: *ref_1
    get:
      description: List all GitHubEnterpriseConfigs for a given project.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGithubEnterpriseConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: select
    post:
      description: >-
        Create an association between a GCP project and a GitHub Enterprise
        server.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: gheConfigId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}:
    parameters: *ref_1
    get:
      description: Retrieve a GitHubEnterpriseConfig.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubEnterpriseConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: select
    delete:
      description: >-
        Delete an association between a GCP project and a GitHub Enterprise
        server.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: delete
    patch:
      description: >-
        Update an association between a GCP project and a GitHub Enterprise
        server.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: exec
  /v1/projects/{projectId}/builds:
    parameters: *ref_1
    post:
      description: >-
        Starts a build with the specified configuration. This method returns a
        long-running `Operation`, which includes the build ID. Pass the build ID
        to `GetBuild` to determine the build status (such as `SUCCESS` or
        `FAILURE`).
      operationId: cloudbuild.projects.builds.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: insert
    get:
      description: >-
        Lists previously requested builds. Previously requested builds may still
        be in-progress, or may have finished successfully or unsuccessfully.
      operationId: cloudbuild.projects.builds.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildsResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: select
  /v1/projects/{projectId}/builds/{id}:retry:
    parameters: *ref_1
    post:
      description: >-
        Creates a new build based on the specified build. This method creates a
        new build using the original build request, which may or may not result
        in an identical build. For triggered builds: * Triggered builds resolve
        to a precise revision; therefore a retry of a triggered build will
        result in a build that uses the same revision. For non-triggered builds
        that specify `RepoSource`: * If the original build built from the tip of
        a branch, the retried build will build from the tip of that branch,
        which may not be the same revision as the original build. * If the
        original build specified a commit sha or revision ID, the retried build
        will use the identical source. For builds that specify `StorageSource`:
        * If the original build pulled source from Cloud Storage without
        specifying the generation of the object, the new build will use the
        current object, which may be different from the original build source. *
        If the original build pulled source from Cloud Storage and specified the
        generation of the object, the new build will attempt to use the same
        object, which may or may not be available depending on the bucket's
        lifecycle management settings.
      operationId: cloudbuild.projects.builds.retry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryBuildRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: exec
  /v1/projects/{projectId}/builds/{id}:
    parameters: *ref_1
    get:
      description: >-
        Returns information about a previously requested build. The `Build` that
        is returned includes its status (such as `SUCCESS`, `FAILURE`, or
        `WORKING`), and timing information.
      operationId: cloudbuild.projects.builds.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: select
  /v1/projects/{projectId}/builds/{id}:cancel:
    parameters: *ref_1
    post:
      description: Cancels a build in progress.
      operationId: cloudbuild.projects.builds.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBuildRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/builds/{buildsId}:approve:
    parameters: *ref_1
    post:
      description: >-
        Approves or rejects a pending build. If approved, the returned LRO will
        be analogous to the LRO returned from a CreateBuild call. If rejected,
        the returned LRO will be immediately done.
      operationId: cloudbuild.projects.builds.approve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveBuildRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: exec
  /v1/projects/{projectId}/triggers:
    parameters: *ref_1
    post:
      description: Creates a new `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.triggers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: insert
    get:
      description: Lists existing `BuildTrigger`s. This API is experimental.
      operationId: cloudbuild.projects.triggers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildTriggersResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: triggers
      x-stackQL-verb: select
  /v1/projects/{projectId}/triggers/{triggerId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes a `BuildTrigger` by its project ID and trigger ID. This API is
        experimental.
      operationId: cloudbuild.projects.triggers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: delete
    patch:
      description: >-
        Updates a `BuildTrigger` by its project ID and trigger ID. This API is
        experimental.
      operationId: cloudbuild.projects.triggers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: exec
    get:
      description: Returns information about a `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.triggers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: select
  /v1/projects/{projectId}/triggers/{trigger}:webhook:
    parameters: *ref_1
    post:
      description: >-
        ReceiveTriggerWebhook [Experimental] is called when the API receives a
        webhook request targeted at a specific trigger.
      operationId: cloudbuild.projects.triggers.webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveTriggerWebhookResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: trigger
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: secret
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: exec
  /v1/projects/{projectId}/triggers/{triggerId}:run:
    parameters: *ref_1
    post:
      description: >-
        Runs a `BuildTrigger` at a particular source revision. To run a regional
        or global trigger, use the POST request that includes the location
        endpoint in the path (ex.
        v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run).
        The POST request that does not include the location endpoint in the path
        can only be used when running global triggers.
      operationId: cloudbuild.projects.triggers.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoSource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/builds:
    parameters: *ref_1
    get:
      description: >-
        Lists previously requested builds. Previously requested builds may still
        be in-progress, or may have finished successfully or unsuccessfully.
      operationId: cloudbuild.projects.locations.builds.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: select
    post:
      description: >-
        Starts a build with the specified configuration. This method returns a
        long-running `Operation`, which includes the build ID. Pass the build ID
        to `GetBuild` to determine the build status (such as `SUCCESS` or
        `FAILURE`).
      operationId: cloudbuild.projects.locations.builds.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry:
    parameters: *ref_1
    post:
      description: >-
        Creates a new build based on the specified build. This method creates a
        new build using the original build request, which may or may not result
        in an identical build. For triggered builds: * Triggered builds resolve
        to a precise revision; therefore a retry of a triggered build will
        result in a build that uses the same revision. For non-triggered builds
        that specify `RepoSource`: * If the original build built from the tip of
        a branch, the retried build will build from the tip of that branch,
        which may not be the same revision as the original build. * If the
        original build specified a commit sha or revision ID, the retried build
        will use the identical source. For builds that specify `StorageSource`:
        * If the original build pulled source from Cloud Storage without
        specifying the generation of the object, the new build will use the
        current object, which may be different from the original build source. *
        If the original build pulled source from Cloud Storage and specified the
        generation of the object, the new build will attempt to use the same
        object, which may or may not be available depending on the bucket's
        lifecycle management settings.
      operationId: cloudbuild.projects.locations.builds.retry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryBuildRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel:
    parameters: *ref_1
    post:
      description: Cancels a build in progress.
      operationId: cloudbuild.projects.locations.builds.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBuildRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:approve:
    parameters: *ref_1
    post:
      description: >-
        Approves or rejects a pending build. If approved, the returned LRO will
        be analogous to the LRO returned from a CreateBuild call. If rejected,
        the returned LRO will be immediately done.
      operationId: cloudbuild.projects.locations.builds.approve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveBuildRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:
    parameters: *ref_1
    get:
      description: >-
        Returns information about a previously requested build. The `Build` that
        is returned includes its status (such as `SUCCESS`, `FAILURE`, or
        `WORKING`), and timing information.
      operationId: cloudbuild.projects.locations.builds.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}:
    parameters: *ref_1
    patch:
      description: Updates an existing `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLabConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: git_lab_configs
      x-stackQL-verb: exec
    delete:
      description: Delete a `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: git_lab_configs
      x-stackQL-verb: delete
    get:
      description: Retrieves a `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitLabConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: git_lab_configs
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs:
    parameters: *ref_1
    post:
      description: Creates a new `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLabConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: gitlabConfigId
          schema:
            type: string
      x-stackQL-resource: git_lab_configs
      x-stackQL-verb: insert
    get:
      description: List all `GitLabConfigs` for a given project. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGitLabConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: git_lab_configs
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}:removeGitLabConnectedRepository:
    parameters: *ref_1
    post:
      description: >-
        Remove a GitLab repository from a given GitLabConfig's connected
        repositories. This API is experimental.
      operationId: >-
        cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveGitLabConnectedRepositoryRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: git_lab_configs__git_lab_connected_repository
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/connectedRepositories:batchCreate:
    parameters: *ref_1
    post:
      description: >-
        Batch connecting GitLab repositories to Cloud Build. This API is
        experimental.
      operationId: >-
        cloudbuild.projects.locations.gitLabConfigs.connectedRepositories.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/BatchCreateGitLabConnectedRepositoriesRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: connected_repositories
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/repos:
    parameters: *ref_1
    get:
      description: >-
        List all repositories for a given `GitLabConfig`. This API is
        experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.repos.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGitLabRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: repos
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes a `BuildTrigger` by its project ID and trigger ID. This API is
        experimental.
      operationId: cloudbuild.projects.locations.triggers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: triggerId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: delete
    patch:
      description: >-
        Updates a `BuildTrigger` by its project ID and trigger ID. This API is
        experimental.
      operationId: cloudbuild.projects.locations.triggers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: triggerId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: exec
    get:
      description: Returns information about a `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: triggerId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/triggers:
    parameters: *ref_1
    get:
      description: Lists existing `BuildTrigger`s. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildTriggersResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: select
    post:
      description: Creates a new `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:run:
    parameters: *ref_1
    post:
      description: >-
        Runs a `BuildTrigger` at a particular source revision. To run a regional
        or global trigger, use the POST request that includes the location
        endpoint in the path (ex.
        v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run).
        The POST request that does not include the location endpoint in the path
        can only be used when running global triggers.
      operationId: cloudbuild.projects.locations.triggers.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunBuildTriggerRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:webhook:
    parameters: *ref_1
    post:
      description: >-
        ReceiveTriggerWebhook [Experimental] is called when the API receives a
        webhook request targeted at a specific trigger.
      operationId: cloudbuild.projects.locations.triggers.webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveTriggerWebhookResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: secret
          schema:
            type: string
        - in: query
          name: trigger
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs:
    parameters: *ref_1
    post:
      description: >-
        Create an association between a GCP project and a GitHub Enterprise
        server.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: gheConfigId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: insert
    get:
      description: List all GitHubEnterpriseConfigs for a given project.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGithubEnterpriseConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}:
    parameters: *ref_1
    get:
      description: Retrieve a GitHubEnterpriseConfig.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubEnterpriseConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: select
    delete:
      description: >-
        Delete an association between a GCP project and a GitHub Enterprise
        server.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: delete
    patch:
      description: >-
        Update an association between a GCP project and a GitHub Enterprise
        server.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/workerPools:
    parameters: *ref_1
    post:
      description: Creates a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkerPool'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: workerPoolId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: worker_pools
      x-stackQL-verb: insert
    get:
      description: Lists `WorkerPool`s.
      operationId: cloudbuild.projects.locations.workerPools.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkerPoolsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: worker_pools
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}:
    parameters: *ref_1
    delete:
      description: Deletes a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: workerPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: etag
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
      x-stackQL-resource: worker_pools
      x-stackQL-verb: delete
    get:
      description: Returns details of a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerPool'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: workerPoolsId
          required: true
          schema:
            type: string
      x-stackQL-resource: worker_pools
      x-stackQL-verb: select
    patch:
      description: Updates a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkerPool'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: workerPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: worker_pools
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: cloudbuild.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: cloudbuild.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}:removeBitbucketServerConnectedRepository:
    parameters: *ref_1
    post:
      description: >-
        Remove a Bitbucket Server repository from a given
        BitbucketServerConfig's connected repositories. This API is
        experimental.
      operationId: >-
        cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/RemoveBitbucketServerConnectedRepositoryRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs__bitbucket_server_connected_repository
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs:
    parameters: *ref_1
    post:
      description: Creates a new `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BitbucketServerConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: bitbucketServerConfigId
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-verb: insert
    get:
      description: >-
        List all `BitbucketServerConfigs` for a given project. This API is
        experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBitbucketServerConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}:
    parameters: *ref_1
    get:
      description: Retrieve a `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BitbucketServerConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-verb: select
    patch:
      description: Updates an existing `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BitbucketServerConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-verb: exec
    delete:
      description: Delete a `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/connectedRepositories:batchCreate:
    parameters: *ref_1
    post:
      description: Batch connecting Bitbucket Server repositories to Cloud Build.
      operationId: >-
        cloudbuild.projects.locations.bitbucketServerConfigs.connectedRepositories.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/BatchCreateBitbucketServerConnectedRepositoriesRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: connected_repositories
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/repos:
    parameters: *ref_1
    get:
      description: >-
        List all repositories for a given `BitbucketServerConfig`. This API is
        experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.repos.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBitbucketServerRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: repos
      x-stackQL-verb: select
