openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Healthcare API
  description: Manage, store, and access healthcare data in Google Cloud Platform.
  version: v1beta1
  x-discovery-doc-revision: '20230616'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/healthcare
servers:
  - url: https://healthcare.googleapis.com
components:
  schemas:
    TestIamPermissionsRequest:
      properties:
        permissions:
          items:
            type: string
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
      description: Request message for `TestIamPermissions` method.
      type: object
      id: TestIamPermissionsRequest
    DeleteTag:
      description: Delete tag.
      id: DeleteTag
      type: object
      properties: {}
    QueryAccessibleDataRequest:
      type: object
      properties:
        resourceAttributes:
          description: >-
            Optional. The values of resource attributes associated with the type
            of resources being requested. If no values are specified, then all
            resource types are included in the output.
          additionalProperties:
            type: string
          type: object
        requestAttributes:
          type: object
          additionalProperties:
            type: string
          description: >-
            The values of request attributes associated with this access
            request.
        gcsDestination:
          description: >-
            The Cloud Storage destination. The Cloud Healthcare API service
            account must have the `roles/storage.objectAdmin` Cloud IAM role for
            this Cloud Storage location. The object name is in the following
            format: query-accessible-data-result-{operation_id}.txt where each
            line contains a single data_id.
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1ConsentGcsDestination
      id: QueryAccessibleDataRequest
      description: >-
        Queries all data_ids that are consented for a given use in the given
        consent store and writes them to a specified destination. The returned
        Operation includes a progress counter for the number of User data
        mappings processed. Errors are logged to Cloud Logging (see [Viewing
        error logs in Cloud Logging]
        (https://cloud.google.com/healthcare/docs/how-tos/logging) and
        [QueryAccessibleData] for a sample log entry).
    Location:
      type: object
      id: Location
      description: A resource that represents a Google Cloud location.
      properties:
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
    GoogleCloudHealthcareV1beta1FhirGcsDestination:
      description: The configuration for exporting to Cloud Storage.
      id: GoogleCloudHealthcareV1beta1FhirGcsDestination
      properties:
        uriPrefix:
          type: string
          description: >-
            URI for a Cloud Storage directory where result files should be
            written (in the format
            `gs://{bucket-id}/{path/to/destination/dir}`). If there is no
            trailing slash, the service appends one when composing the object
            path. The Cloud Storage bucket referenced in `uri_prefix` must exist
            or an error occurs.
      type: object
    SchemaGroup:
      id: SchemaGroup
      properties:
        maxOccurs:
          format: int32
          type: integer
          description: >-
            The maximum number of times this group can be repeated. 0 or -1
            means unbounded.
        minOccurs:
          format: int32
          type: integer
          description: The minimum number of times this group must be present/repeated.
        members:
          description: Nested groups and/or segments.
          type: array
          items:
            $ref: '#/components/schemas/GroupOrSegment'
        choice:
          description: >-
            True indicates that this is a choice group, meaning that only one of
            its segments can exist in a given message.
          type: boolean
        name:
          type: string
          description: The name of this group. For example, "ORDER_DETAIL".
      type: object
      description: An HL7v2 logical group construct.
    AnnotationStore:
      type: object
      description: >-
        An Annotation store that can store annotation resources such as labels
        and tags for text, image and audio.
      id: AnnotationStore
      properties:
        name:
          description: >-
            Resource name of the Annotation store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
          type: string
        labels:
          additionalProperties:
            type: string
          description: >-
            Optional. User-supplied key-value pairs used to organize Annotation
            stores. Label keys must be between 1 and 63 characters long, have a
            UTF-8 encoding of maximum 128 bytes, and must conform to the
            following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values
            must be between 1 and 63 characters long, have a UTF-8 encoding of
            maximum 128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          type: object
    GoogleCloudHealthcareV1beta1DeidentifyDeidentifyDicomStoreSummary:
      id: GoogleCloudHealthcareV1beta1DeidentifyDeidentifyDicomStoreSummary
      properties: {}
      type: object
      description: Contains a summary of the DeidentifyDicomStore operation.
    DeidentifyFhirStoreRequest:
      properties:
        resourceFilter:
          $ref: '#/components/schemas/FhirFilter'
          description: >-
            A filter specifying the resources to include in the output. If not
            specified, all resources are included in the output.
        config:
          description: >-
            Deidentify configuration. Only one of `config` and `gcs_config_uri`
            can be specified.
          $ref: '#/components/schemas/DeidentifyConfig'
        destinationStore:
          description: >-
            The name of the FHIR store to create and write the redacted data to.
            For example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
            * The destination dataset must exist. * The source dataset and
            destination dataset must both reside in the same location.
            De-identifying data across multiple locations is not supported. *
            The destination FHIR store must exist. * The caller must have the
            healthcare.fhirResources.update permission to write to the
            destination FHIR store.
          type: string
        skipModifiedResources:
          description: >-
            If true, skips resources that are created or modified after the
            de-identify operation is created.
          type: boolean
        gcsConfigUri:
          type: string
          description: >-
            Cloud Storage location to read the JSON
            cloud.healthcare.deidentify.DeidentifyConfig from, overriding the
            default config. Must be of the form
            `gs://{bucket_id}/path/to/object`. The Cloud Storage location must
            grant the Cloud IAM role `roles/storage.objectViewer` to the
            project's Cloud Healthcare Service Agent service account. Only one
            of `config` and `gcs_config_uri` can be specified.
      id: DeidentifyFhirStoreRequest
      description: Creates a new FHIR store with sensitive information de-identified.
      type: object
    RejectConsentRequest:
      id: RejectConsentRequest
      type: object
      properties:
        consentArtifact:
          type: string
          description: >-
            Optional. The resource name of the Consent artifact that contains
            documentation of the user's rejection of the draft Consent, of the
            form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
            If the draft Consent had a Consent artifact, this Consent artifact
            overwrites it.
      description: >-
        Rejects the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REJECTED`. If the latest revision of
        the given Consent is in the `REJECTED` state, no new revision is
        committed.
    OperationMetadata:
      properties:
        endTime:
          description: The time at which execution was completed.
          type: string
          format: google-datetime
        apiMethodName:
          type: string
          description: The name of the API method that initiated the operation.
        counter:
          $ref: '#/components/schemas/ProgressCounter'
        cancelRequested:
          description: Specifies if cancellation was requested for the operation.
          type: boolean
        createTime:
          format: google-datetime
          type: string
          description: The time at which the operation was created by the API.
        logsUrl:
          type: string
          description: >-
            A link to audit and error logs in the log viewer. Error logs are
            generated only by some operations, listed at [Viewing error logs in
            Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
      id: OperationMetadata
      description: >-
        OperationMetadata provides information about the operation execution.
        Returned in the long-running operation's metadata field.
      type: object
    ParserConfig:
      properties:
        allowNullHeader:
          type: boolean
          description: Determines whether messages with no header are allowed.
        version:
          enum:
            - PARSER_VERSION_UNSPECIFIED
            - V1
            - V2
            - V3
          description: >-
            Immutable. Determines the version of both the default parser to be
            used when `schema` is not given, as well as the schematized parser
            used when `schema` is specified. This field is immutable after HL7v2
            store creation.
          enumDescriptions:
            - Unspecified parser version, equivalent to V1.
            - >-
              The `parsed_data` includes every given non-empty message field
              except the Field Separator (MSH-1) field. As a result, the parsed
              MSH segment starts with the MSH-2 field and the field numbers are
              off-by-one with respect to the HL7 standard.
            - The `parsed_data` includes every given non-empty message field.
            - >-
              This version is the same as V2, with the following change. The
              `parsed_data` contains unescaped escaped field separators,
              component separators, sub-component separators, repetition
              separators, escape characters, and truncation characters. If
              `schema` is specified, the schematized parser uses improved
              parsing heuristics compared to previous versions.
          type: string
        schema:
          $ref: '#/components/schemas/SchemaPackage'
          description: >-
            Schemas used to parse messages in this store, if schematized parsing
            is desired.
        segmentTerminator:
          format: byte
          description: >-
            Byte(s) to use as the segment terminator. If this is unset, '\r' is
            used as segment terminator, matching the HL7 version 2
            specification.
          type: string
      id: ParserConfig
      type: object
      description: >-
        The configuration for the parser. It determines how the server parses
        the messages.
    TestIamPermissionsResponse:
      properties:
        permissions:
          items:
            type: string
          type: array
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
      type: object
      description: Response message for `TestIamPermissions` method.
      id: TestIamPermissionsResponse
    ReplaceWithInfoTypeConfig:
      description: >-
        When using the INSPECT_AND_TRANSFORM action, each match is replaced with
        the name of the info_type. For example, "My name is Jane" becomes "My
        name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
      id: ReplaceWithInfoTypeConfig
      type: object
      properties: {}
    GoogleCloudHealthcareV1beta1DeidentifyDeidentifyFhirStoreSummary:
      properties: {}
      id: GoogleCloudHealthcareV1beta1DeidentifyDeidentifyFhirStoreSummary
      description: Contains a summary of the DeidentifyFhirStore operation.
      type: object
    BoundingPoly:
      id: BoundingPoly
      description: A bounding polygon for the detected image annotation.
      properties:
        label:
          type: string
          description: A description of this polygon.
        vertices:
          description: List of the vertices of this polygon.
          items:
            $ref: '#/components/schemas/Vertex'
          type: array
      type: object
    ConsentList:
      description: List of resource names of Consent resources.
      id: ConsentList
      properties:
        consents:
          type: array
          items:
            type: string
          description: >-
            The resource names of the Consents to evaluate against, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
      type: object
    AuditConfig:
      properties:
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          items:
            $ref: '#/components/schemas/AuditLogConfig'
          type: array
        service:
          type: string
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted. Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        `jose@example.com` from DATA_READ logging, and `aliya@example.com` from
        DATA_WRITE logging.
      id: AuditConfig
      type: object
    ListHl7V2StoresResponse:
      id: ListHl7V2StoresResponse
      description: Lists the HL7v2 stores in the given dataset.
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
        hl7V2Stores:
          items:
            $ref: '#/components/schemas/Hl7V2Store'
          type: array
          description: >-
            The returned HL7v2 stores. Won't be more HL7v2 stores than the value
            of page_size in the request.
    Hl7V2NotificationConfig:
      id: Hl7V2NotificationConfig
      type: object
      properties:
        filter:
          description: >-
            Restricts notifications sent for messages matching a filter. If this
            is empty, all messages are matched. The following syntax is
            available: * A string field value can be written as text inside
            quotation marks, for example `"query text"`. The only valid
            relational operation for text fields is equality (`=`), where text
            is searched within the field, rather than having the field be equal
            to the text. For example, `"Comment = great"` returns messages with
            `great` in the comment field. * A number field value can be written
            as an integer, a decimal, or an exponential. The valid relational
            operators for number fields are the equality operator (`=`), along
            with the less than/greater than operators (`<`, `<=`, `>`, `>=`).
            Note that there is no inequality (`!=`) operator. You can prepend
            the `NOT` operator to an expression to negate it. * A date field
            value must be written in `yyyy-mm-dd` form. Fields with date and
            time use the RFC3339 time format. Leading zeros are required for
            one-digit months and days. The valid relational operators for date
            fields are the equality operator (`=`) , along with the less
            than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there
            is no inequality (`!=`) operator. You can prepend the `NOT` operator
            to an expression to negate it. * Multiple field query expressions
            can be combined in one query by adding `AND` or `OR` operators
            between the expressions. If a boolean operator appears within a
            quoted string, it is not treated as special, it's just another part
            of the character string to be matched. You can prepend the `NOT`
            operator to an expression to negate it. Fields/functions available
            for filtering are: * `message_type`, from the MSH-9.1 field. For
            example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`,
            the YYYY-MM-DD date the message was sent in the dataset's time_zone,
            from the MSH-7 segment. For example, `send_date < "2017-01-02"`. *
            `send_time`, the timestamp when the message was sent, using the
            RFC3339 time format for comparisons, from the MSH-7 segment. For
            example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`,
            the timestamp when the message was created in the HL7v2 store. Use
            the RFC3339 time format for comparisons. For example, `create_time <
            "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center
            that the message came from, from the MSH-4 segment. For example,
            `send_facility = "ABC"`. * `PatientId(value, type)`, which matches
            if the message lists a patient having an ID of the given value and
            type in the PID-2, PID-3, or PID-4 segments. For example,
            `PatientId("123456", "MRN")`. * `labels.x`, a string value of the
            label with key `x` as set using the Message.labels map. For example,
            `labels."priority"="high"`. The operator `:*` can be used to assert
            the existence of a label. For example, `labels."priority":*`.
          type: string
        pubsubTopic:
          description: >-
            The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that
            notifications of changes are published on. Supplied by the client.
            The notification is a `PubsubMessage` with the following fields: *
            `PubsubMessage.Data` contains the resource name. *
            `PubsubMessage.MessageId` is the ID of this notification. It is
            guaranteed to be unique within the topic. *
            `PubsubMessage.PublishTime` is the time when the message was
            published. Note that notifications are only sent if the topic is
            non-empty. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. Cloud Healthcare API service account must have
            publisher permissions on the given Pub/Sub topic. Not having
            adequate permissions causes the calls that send notifications to
            fail. If a notification can't be published to Pub/Sub, errors are
            logged to Cloud Logging. For more information, see [Viewing error
            logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
          type: string
      description: >-
        Specifies where and whether to send notifications upon changes to a data
        store.
    CryptoHashConfig:
      type: object
      id: CryptoHashConfig
      description: >-
        Pseudonymization method that generates surrogates via cryptographic
        hashing. Uses SHA-256. Outputs a base64-encoded representation of the
        hashed output. For example,
        `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`.
      properties:
        cryptoKey:
          description: >-
            An AES 128/192/256 bit key. Causes the hash to be computed based on
            this key. A default key is generated for each Deidentify operation
            and is used when neither `crypto_key` nor `kms_wrapped` is
            specified. Must not be set if `kms_wrapped` is set.
          type: string
          format: byte
        kmsWrapped:
          description: KMS wrapped key. Must not be set if `crypto_key` is set.
          $ref: '#/components/schemas/KmsWrappedCryptoKey'
    ListMessagesResponse:
      id: ListMessagesResponse
      description: Lists the messages in the specified HL7v2 store.
      type: object
      properties:
        hl7V2Messages:
          items:
            $ref: '#/components/schemas/Message'
          type: array
          description: >-
            The returned Messages. Won't be more Messages than the value of
            page_size in the request. See view for populated fields.
        nextPageToken:
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
          type: string
    CheckDataAccessRequest:
      type: object
      id: CheckDataAccessRequest
      description: >-
        Checks if a particular data_id of a User data mapping in the given
        consent store is consented for a given use.
      properties:
        dataId:
          type: string
          description: >-
            Required. The unique identifier of the resource to check access for.
            This identifier must correspond to a User data mapping in the given
            consent store.
        responseView:
          enum:
            - RESPONSE_VIEW_UNSPECIFIED
            - BASIC
            - FULL
          enumDescriptions:
            - >-
              No response view specified. The API will default to the BASIC
              view.
            - >-
              Only the `consented` field is populated in
              CheckDataAccessResponse.
            - >-
              All fields within CheckDataAccessResponse are populated. When set
              to `FULL`, all `ACTIVE` Consents are evaluated even if a matching
              policy is found during evaluation.
          type: string
          description: >-
            Optional. The view for CheckDataAccessResponse. If unspecified,
            defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.
        requestAttributes:
          additionalProperties:
            type: string
          description: >-
            The values of request attributes associated with this access
            request.
          type: object
        consentList:
          description: >-
            Optional. Specific Consents to evaluate the access request against.
            These Consents must have the same `user_id` as the evaluated User
            data mapping, must exist in the current `consent_store`, and have a
            `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can
            be provided here. If no selection is specified, the access request
            is evaluated against all `ACTIVE` unexpired Consents with the same
            `user_id` as the evaluated User data mapping.
          $ref: '#/components/schemas/ConsentList'
    KmsWrappedCryptoKey:
      type: object
      id: KmsWrappedCryptoKey
      description: >-
        Include to use an existing data crypto key wrapped by KMS. The wrapped
        key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud
        IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the
        project's Cloud Healthcare Service Agent service account. For more
        information, see [Creating a wrapped key]
        (https://cloud.google.com/dlp/docs/create-wrapped-key).
      properties:
        cryptoKey:
          description: >-
            Required. The resource name of the KMS CryptoKey to use for
            unwrapping. For example,
            `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
          type: string
        wrappedKey:
          type: string
          format: byte
          description: Required. The wrapped data crypto key.
    Hl7TypesConfig:
      id: Hl7TypesConfig
      type: object
      description: Root config for HL7v2 datatype definitions for a specific HL7v2 version.
      properties:
        version:
          type: array
          items:
            $ref: '#/components/schemas/VersionSource'
          description: >-
            The version selectors that this config applies to. A message must
            match ALL version sources to apply.
        type:
          description: The HL7v2 type definitions.
          type: array
          items:
            $ref: '#/components/schemas/Type'
    GoogleCloudHealthcareV1beta1FhirImportResourcesResponse:
      id: GoogleCloudHealthcareV1beta1FhirImportResourcesResponse
      description: >-
        Final response of importing resources. This structure is included in the
        response to describe the detailed outcome after the operation finishes
        successfully.
      type: object
      properties: {}
    FhirStoreMetric:
      description: >-
        Count of resources and total storage size by type for a given FHIR
        store.
      id: FhirStoreMetric
      type: object
      properties:
        structuredStorageSizeBytes:
          description: >-
            The total amount of structured storage used by FHIR resources of
            this resource type in the store.
          type: string
          format: int64
        count:
          type: string
          format: int64
          description: >-
            The total count of FHIR resources in the store of this resource
            type.
        resourceType:
          description: The FHIR resource type this metric applies to.
          type: string
    GoogleCloudHealthcareV1beta1AnnotationGcsDestination:
      id: GoogleCloudHealthcareV1beta1AnnotationGcsDestination
      properties:
        uriPrefix:
          description: >-
            The Cloud Storage destination to export to. URI for a Cloud Storage
            directory where the server writes result files, in the format
            `gs://{bucket-id}/{path/to/destination/dir}`. If there is no
            trailing slash, the service appends one when composing the object
            path. The user is responsible for creating the Cloud Storage bucket
            referenced in `uri_prefix`.
          type: string
      description: The Cloud Storage location for export.
      type: object
    Action:
      properties:
        regenUidTag:
          description: >-
            Replace UID with a new generated UID. Supported [Value
            Representation]
            (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1):
            UI
          $ref: '#/components/schemas/RegenUidTag'
        keepTag:
          description: Keep tag unchanged.
          $ref: '#/components/schemas/KeepTag'
        queries:
          type: array
          items:
            type: string
          description: >-
            Select all tags with the listed tag IDs, names, or Value
            Representations (VRs). Examples: ID: "00100010" Keyword:
            "PatientName" VR: "PN"
        removeTag:
          $ref: '#/components/schemas/RemoveTag'
          description: Replace with empty tag.
        resetTag:
          description: Reset tag to a placeholder value.
          $ref: '#/components/schemas/ResetTag'
        deleteTag:
          description: Delete tag.
          $ref: '#/components/schemas/DeleteTag'
        cleanTextTag:
          $ref: '#/components/schemas/CleanTextTag'
          description: >-
            Inspect text and transform sensitive text. Configurable via
            TextConfig. Supported Value Representations: AE, LO, LT, PN, SH, ST,
            UC, UT, DA, DT, AS
        recurseTag:
          $ref: '#/components/schemas/RecurseTag'
          description: >-
            Recursively apply DICOM de-id to tags nested in a sequence.
            Supported [Value Representation]
            (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1):
            SQ
        cleanImageTag:
          $ref: '#/components/schemas/ImageConfig'
          description: >-
            Inspect image and transform sensitive burnt-in text. Doesn't apply
            to elements nested in a sequence, which revert to `Keep`. Supported
            [tags](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html):
            PixelData
      id: Action
      description: Specifies a selection of tags and an `Action` to apply to each one.
      type: object
    ValidationConfig:
      description: Contains the configuration for FHIR profiles and validation.
      type: object
      id: ValidationConfig
      properties:
        disableFhirpathValidation:
          type: boolean
          description: >-
            Whether to disable FHIRPath validation for incoming resources. Set
            this to true to disable checking incoming resources for conformance
            against FHIRPath requirement defined in the FHIR specification. This
            property only affects resource types that do not have profiles
            configured for them, any rules in enabled implementation guides will
            still be enforced.
        disableReferenceTypeValidation:
          description: >-
            Whether to disable reference type validation for incoming resources.
            Set this to true to disable checking incoming resources for
            conformance against reference type requirement defined in the FHIR
            specification. This property only affects resource types that do not
            have profiles configured for them, any rules in enabled
            implementation guides will still be enforced.
          type: boolean
        disableRequiredFieldValidation:
          description: >-
            Whether to disable required fields validation for incoming
            resources. Set this to true to disable checking incoming resources
            for conformance against required fields requirement defined in the
            FHIR specification. This property only affects resource types that
            do not have profiles configured for them, any rules in enabled
            implementation guides will still be enforced.
          type: boolean
        enabledImplementationGuides:
          description: >-
            A list of ImplementationGuide URLs in this FHIR store that are used
            to configure the profiles to use for validation. For example, to use
            the US Core profiles for validation, set
            `enabled_implementation_guides` to
            `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If
            `enabled_implementation_guides` is empty or omitted, then incoming
            resources are only required to conform to the base FHIR profiles.
            Otherwise, a resource must conform to at least one profile listed in
            the `global` property of one of the enabled ImplementationGuides.
            The Cloud Healthcare API does not currently enforce all of the rules
            in a StructureDefinition. The following rules are supported: -
            min/max - minValue/maxValue - maxLength - type - fixed[x] -
            pattern[x] on simple types - slicing, when using "value" as the
            discriminator type When a URL cannot be resolved (for example, in a
            type assertion), the server does not return an error.
          items:
            type: string
          type: array
        disableProfileValidation:
          description: >-
            Whether to disable profile validation for this FHIR store. Set this
            to true to disable checking incoming resources for conformance
            against StructureDefinitions in this FHIR store.
          type: boolean
    GoogleCloudHealthcareV1beta1DicomGcsDestination:
      type: object
      properties:
        mimeType:
          type: string
          description: >-
            MIME types supported by DICOM spec. Each file is written in the
            following format:
            `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}`
            The frame_number component exists only for multi-frame instances.
            Supported MIME types are consistent with supported formats in
            DICOMweb:
            https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction.
            Specifically, the following are supported: - application/dicom;
            transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) -
            application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM
            with embedded JPEG Baseline) - application/dicom;
            transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG
            2000 Lossless Only) - application/dicom;
            transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG
            2000)h - application/dicom; transfer-syntax=* (DICOM with no
            transcoding) - application/octet-stream;
            transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) -
            application/octet-stream; transfer-syntax=* (raw PixelData in
            whatever format it was uploaded in) - image/jpeg;
            transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png
            The following extensions are used for output files: -
            application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png -
            application/octet-stream -> no extension If unspecified, the
            instances are exported in the original DICOM format they were
            uploaded in.
        uriPrefix:
          description: >-
            The Cloud Storage destination to export to. URI for a Cloud Storage
            directory where the server writes the result files, in the format
            `gs://{bucket-id}/{path/to/destination/dir}`). If there is no
            trailing slash, the service appends one when composing the object
            path. The user is responsible for creating the Cloud Storage bucket
            referenced in `uri_prefix`.
          type: string
      id: GoogleCloudHealthcareV1beta1DicomGcsDestination
      description: >-
        The Cloud Storage location where the server writes the output and the
        export configuration.
    FhirFilter:
      description: Filter configuration.
      properties:
        resources:
          $ref: '#/components/schemas/Resources'
          description: >-
            List of resources to include in the output. If this list is empty or
            not specified, all resources are included in the output.
      type: object
      id: FhirFilter
    EvaluateAnnotationStoreResponse:
      properties: {}
      id: EvaluateAnnotationStoreResponse
      type: object
      description: >-
        Response for successful Annotation store evaluation operations. This
        structure is included in the response upon operation completion.
    GoogleCloudHealthcareV1beta1DicomStreamConfig:
      properties:
        bigqueryDestination:
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1DicomBigQueryDestination
          description: >-
            Results are appended to this table. The server creates a new table
            in the given BigQuery dataset if the specified table does not exist.
            To enable the Cloud Healthcare API to write to your BigQuery table,
            you must give the Cloud Healthcare API service account the
            bigquery.dataEditor role. The service account is:
            `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`.
            The PROJECT_NUMBER identifies the project that the DICOM store
            resides in. To get the project number, go to the Cloud Console
            Dashboard. It is recommended to not have a custom schema in the
            destination table which could conflict with the schema created by
            the Cloud Healthcare API. Instance deletions are not applied to the
            destination table. The destination's table schema will be
            automatically updated in case a new instance's data is incompatible
            with the current schema. The schema should not be updated manually
            as this can cause incompatibilies that cannot be resolved
            automatically. One resolution in this case is to delete the
            incompatible table and let the server recreate one, though the newly
            created table only contains data after the table recreation.
            BigQuery imposes a 1 MB limit on streaming insert row size,
            therefore any instance that generates more than 1 MB of BigQuery
            data will not be streamed. If an instance cannot be streamed to
            BigQuery, errors will be logged to Cloud Logging (see [Viewing error
            logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
      id: GoogleCloudHealthcareV1beta1DicomStreamConfig
      type: object
      description: StreamConfig specifies configuration for a streaming DICOM export.
    GroupOrSegment:
      type: object
      description: Construct representing a logical group or a segment.
      id: GroupOrSegment
      properties:
        segment:
          $ref: '#/components/schemas/SchemaSegment'
        group:
          $ref: '#/components/schemas/SchemaGroup'
    DeidentifiedStoreDestination:
      properties:
        config:
          $ref: '#/components/schemas/DeidentifyConfig'
          description: >-
            The configuration to use when de-identifying resources that are
            added to this store.
        store:
          description: >-
            The full resource name of a Cloud Healthcare FHIR store, for
            example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
          type: string
      id: DeidentifiedStoreDestination
      description: Contains configuration for streaming de-identified FHIR export.
      type: object
    ExportMessagesRequest:
      id: ExportMessagesRequest
      type: object
      description: Request to schedule an export.
      properties:
        startTime:
          description: >-
            The start of the range in `send_time` (MSH.7,
            https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm)
            to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z)
            is used. This value has to come before the `end_time` defined below.
            Only messages whose `send_time` lies in the range `start_time`
            (inclusive) to `end_time` (exclusive) are exported.
          format: google-datetime
          type: string
        endTime:
          format: google-datetime
          type: string
          description: >-
            The end of the range in `send_time` (MSH.7,
            https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm)
            to process. If not specified, the time when the export is scheduled
            is used. This value has to come after the `start_time` defined
            below. Only messages whose `send_time` lies in the range
            `start_time` (inclusive) to `end_time` (exclusive) are exported.
        gcsDestination:
          $ref: '#/components/schemas/GcsDestination'
          description: Export to a Cloud Storage destination.
    ExportAnnotationsRequest:
      properties:
        gcsDestination:
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1AnnotationGcsDestination
          description: >-
            The Cloud Storage destination, which requires the
            `roles/storage.objectAdmin` Cloud IAM role.
        bigqueryDestination:
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
          description: >-
            The BigQuery output destination, which requires two IAM roles:
            `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`.
      type: object
      id: ExportAnnotationsRequest
      description: >-
        Request to export Annotations. The export operation is not atomic. If a
        failure occurs, any annotations already exported are not removed.
    ExportDicomDataResponse:
      properties: {}
      description: >-
        Returns additional information in regards to a completed DICOM store
        export.
      type: object
      id: ExportDicomDataResponse
    BatchGetMessagesResponse:
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: The returned Messages. See `MessageView` for populated fields.
      id: BatchGetMessagesResponse
      description: Gets multiple messages in a specified HL7v2 store.
      type: object
    ImportDicomDataResponse:
      properties: {}
      description: >-
        Returns additional information in regards to a completed DICOM store
        import.
      id: ImportDicomDataResponse
      type: object
    ListAttributeDefinitionsResponse:
      properties:
        attributeDefinitions:
          items:
            $ref: '#/components/schemas/AttributeDefinition'
          description: >-
            The returned Attribute definitions. The maximum number of attributes
            returned is determined by the value of page_size in the
            ListAttributeDefinitionsRequest.
          type: array
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
      id: ListAttributeDefinitionsResponse
      type: object
    ArchiveUserDataMappingRequest:
      id: ArchiveUserDataMappingRequest
      description: Archives the specified User data mapping.
      type: object
      properties: {}
    SchemaConfig:
      type: object
      description: >-
        Configuration for the FHIR BigQuery schema. Determines how the server
        generates the schema.
      id: SchemaConfig
      properties:
        lastUpdatedPartitionConfig:
          description: >-
            The configuration for exported BigQuery tables to be partitioned by
            FHIR resource's last updated time column.
          $ref: '#/components/schemas/TimePartitioning'
        schemaType:
          description: Specifies the output schema type. Schema type is required.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - LOSSLESS
            - ANALYTICS
            - ANALYTICS_V2
          enumDescriptions:
            - No schema type specified. This type is unsupported.
            - >-
              A data-driven schema generated from the fields present in the FHIR
              data being exported, with no additional simplification. This type
              cannot be used for streaming to BigQuery.
            - >-
              Analytics schema defined by the FHIR community. See
              https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
              BigQuery only allows a maximum of 10,000 columns per table. Due to
              this limitation, the server will not generate schemas for fields
              of type `Resource`, which can hold any resource type. The affected
              fields are `Parameters.parameter.resource`,
              `Bundle.entry.resource`, and `Bundle.entry.response.outcome`.
              Analytics schema does not gracefully handle extensions with one or
              more occurrences, anaytics schema also does not handle contained
              resource.
            - >-
              Analytics V2, similar to schema defined by the FHIR community,
              with added support for extensions with one or more occurrences and
              contained resources in stringified JSON. Analytics V2 uses more
              space in the destination table than Analytics V1. It is generally
              recommended to use Analytics V2 over Analytics.
          type: string
        recursiveStructureDepth:
          type: string
          description: >-
            The depth for all recursive structures in the output analytics
            schema. For example, `concept` in the CodeSystem resource is a
            recursive structure; when the depth is 2, the CodeSystem table will
            have a column called `concept.concept` but not
            `concept.concept.concept`. If not specified or set to 0, the server
            will use the default value 2. The maximum depth allowed is 5.
          format: int64
    ListAnnotationStoresResponse:
      properties:
        annotationStores:
          type: array
          description: >-
            The returned Annotation stores. Won't be more Annotation stores than
            the value of page_size in the request.
          items:
            $ref: '#/components/schemas/AnnotationStore'
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
      type: object
      description: Lists the Annotation stores in the given dataset.
      id: ListAnnotationStoresResponse
    CreateMessageRequest:
      description: Creates a new message.
      properties:
        message:
          description: HL7v2 message.
          $ref: '#/components/schemas/Message'
      id: CreateMessageRequest
      type: object
    ListConsentsResponse:
      id: ListConsentsResponse
      properties:
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
        consents:
          items:
            $ref: '#/components/schemas/Consent'
          description: >-
            The returned Consents. The maximum number of Consents returned is
            determined by the value of page_size in the ListConsentsRequest.
          type: array
      type: object
    ExportDicomDataRequest:
      description: >-
        Exports data from the specified DICOM store. If a given resource, such
        as a DICOM object with the same SOPInstance UID, already exists in the
        output, it is overwritten with the version in the source dataset.
        Exported DICOM data persists when the DICOM store from which it was
        exported is deleted.
      type: object
      id: ExportDicomDataRequest
      properties:
        bigqueryDestination:
          description: >-
            The BigQuery output destination. You can only export to a BigQuery
            dataset that's in the same project as the DICOM store you're
            exporting from. The Cloud Healthcare Service Agent requires two IAM
            roles on the BigQuery location: `roles/bigquery.dataEditor` and
            `roles/bigquery.jobUser`.
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1DicomBigQueryDestination
        filterConfig:
          description: Specifies the filter configuration.
          $ref: '#/components/schemas/DicomFilterConfig'
        gcsDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1DicomGcsDestination'
          description: >-
            The Cloud Storage output destination. The Cloud Healthcare Service
            Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on
            the Cloud Storage location.
    CloudHealthcareSource:
      type: object
      description: Cloud Healthcare API resource.
      id: CloudHealthcareSource
      properties:
        name:
          type: string
          description: Full path of a Cloud Healthcare API resource.
    QueryAccessibleDataResponse:
      type: object
      id: QueryAccessibleDataResponse
      properties:
        gcsUris:
          items:
            type: string
          type: array
          description: >-
            List of files, each of which contains a list of data_id(s) that are
            consented for a specified use in the request.
      description: >-
        Response for successful QueryAccessibleData operations. This structure
        is included in the response upon operation completion.
    FhirNotificationConfig:
      id: FhirNotificationConfig
      properties:
        sendFullResource:
          description: >-
            Whether to send full FHIR resource to this Pub/Sub topic for Create
            and Update operation. Note that setting this to true does not
            guarantee that all resources will be sent in the format of full FHIR
            resource. When a resource change is too large or during heavy
            traffic, only the resource name will be sent. Clients should always
            check the "payloadType" label from a Pub/Sub message to determine
            whether it needs to fetch the full resource as a separate operation.
          type: boolean
        sendPreviousResourceOnDelete:
          description: >-
            Whether to send full FHIR resource to this Pub/Sub topic for
            deleting FHIR resource. Note that setting this to true does not
            guarantee that all previous resources will be sent in the format of
            full FHIR resource. When a resource change is too large or during
            heavy traffic, only the resource name will be sent. Clients should
            always check the "payloadType" label from a Pub/Sub message to
            determine whether it needs to fetch the full previous resource as a
            separate operation.
          type: boolean
        pubsubTopic:
          type: string
          description: >-
            The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that
            notifications of changes are published on. Supplied by the client.
            The notification is a `PubsubMessage` with the following fields: *
            `PubsubMessage.Data` contains the resource name. *
            `PubsubMessage.MessageId` is the ID of this notification. It is
            guaranteed to be unique within the topic. *
            `PubsubMessage.PublishTime` is the time when the message was
            published. Note that notifications are only sent if the topic is
            non-empty. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. The Cloud Healthcare API service account,
            service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have
            publisher permissions on the given Pub/Sub topic. Not having
            adequate permissions causes the calls that send notifications to
            fail
            (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions).
            If a notification can't be published to Pub/Sub, errors are logged
            to Cloud Logging. For more information, see [Viewing error logs in
            Cloud
            Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
      description: Contains the configuration for FHIR notifications.
      type: object
    DateShiftConfig:
      type: object
      properties:
        cryptoKey:
          type: string
          description: >-
            An AES 128/192/256 bit key. The date shift is computed based on this
            key and the patient ID. If the patient ID is empty for a DICOM
            resource, the date shift is computed based on this key and the study
            instance UID. If `crypto_key` is not set, then `kms_wrapped` is used
            to calculate the date shift. If neither is set, a default key is
            generated for each de-identify operation. Must not be set if
            `kms_wrapped` is set.
          format: byte
        kmsWrapped:
          $ref: '#/components/schemas/KmsWrappedCryptoKey'
          description: >-
            KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is
            used to calculate the date shift. If neither is set, a default key
            is generated for each de-identify operation. Must not be set if
            `crypto_key` is set.
      description: >-
        Shift a date forward or backward in time by a random amount which is
        consistent for a given patient and crypto key combination.
      id: DateShiftConfig
    EvaluateUserConsentsRequest:
      type: object
      id: EvaluateUserConsentsRequest
      description: >-
        Evaluate a user's Consents for all matching User data mappings. Note:
        User data mappings are indexed asynchronously, causing slight delays
        between the time mappings are created or updated and when they are
        included in EvaluateUserConsents results.
      properties:
        resourceAttributes:
          additionalProperties:
            type: string
          description: >-
            Optional. The values of resource attributes associated with the
            resources being requested. If no values are specified, then all
            resources are queried.
          type: object
        responseView:
          enumDescriptions:
            - >-
              No response view specified. The API will default to the BASIC
              view.
            - >-
              Only the `data_id` and `consented` fields are populated in the
              response.
            - >-
              All fields within the response are populated. When set to `FULL`,
              all `ACTIVE` Consents are evaluated even if a matching policy is
              found during evaluation.
          description: >-
            Optional. The view for EvaluateUserConsentsResponse. If unspecified,
            defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.
          type: string
          enum:
            - RESPONSE_VIEW_UNSPECIFIED
            - BASIC
            - FULL
        consentList:
          description: >-
            Optional. Specific Consents to evaluate the access request against.
            These Consents must have the same `user_id` as the User data
            mappings being evalauted, must exist in the current `consent_store`,
            and must have a `state` of either `ACTIVE` or `DRAFT`. A maximum of
            100 Consents can be provided here. If unspecified, all `ACTIVE`
            unexpired Consents in the current `consent_store` will be evaluated.
          $ref: '#/components/schemas/ConsentList'
        pageToken:
          type: string
          description: >-
            Optional. Token to retrieve the next page of results, or empty to
            get the first page.
        requestAttributes:
          additionalProperties:
            type: string
          type: object
          description: >-
            Required. The values of request attributes associated with this
            access request.
        pageSize:
          description: >-
            Optional. Limit on the number of User data mappings to return in a
            single response. If not specified, 100 is used. May not be larger
            than 1000.
          format: int32
          type: integer
        userId:
          description: Required. User ID to evaluate consents for.
          type: string
    DeidentifyDatasetRequest:
      type: object
      properties:
        gcsConfigUri:
          type: string
          description: >-
            Cloud Storage location to read the JSON
            cloud.healthcare.deidentify.DeidentifyConfig from, overriding the
            default config. Must be of the form
            `gs://{bucket_id}/path/to/object`. The Cloud Storage location must
            grant the Cloud IAM role `roles/storage.objectViewer` to the
            project's Cloud Healthcare Service Agent service account. Only one
            of `config` and `gcs_config_uri` can be specified.
        config:
          $ref: '#/components/schemas/DeidentifyConfig'
          description: >-
            Deidentify configuration. Only one of `config` and `gcs_config_uri`
            can be specified.
        destinationDataset:
          description: >-
            The name of the dataset resource to create and write the redacted
            data to. * The destination dataset must not exist. * The destination
            dataset must be in the same location as the source dataset.
            De-identifying data across multiple locations is not supported.
          type: string
      description: Redacts identifying information from the specified dataset.
      id: DeidentifyDatasetRequest
    Image:
      description: Raw bytes representing consent artifact content.
      properties:
        rawBytes:
          type: string
          description: >-
            Consent artifact content represented as a stream of bytes. This
            field is populated when returned in GetConsentArtifact response, but
            not included in CreateConsentArtifact and ListConsentArtifact
            response.
          format: byte
        gcsUri:
          description: >-
            Input only. Points to a Cloud Storage URI containing the consent
            artifact content. The URI must be in the following format:
            `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service
            account must have the `roles/storage.objectViewer` Cloud IAM role
            for this Cloud Storage location. The consent artifact content at
            this URI is copied to a Cloud Storage location managed by the Cloud
            Healthcare API. Responses to fetching requests return the consent
            artifact content in raw_bytes.
          type: string
      id: Image
      type: object
    DicomFilterConfig:
      properties:
        resourcePathsGcsUri:
          type: string
          description: >-
            The Cloud Storage location of the filter configuration file. The
            `gcs_uri` must be in the format `gs://bucket/path/to/object`. The
            filter configuration file must contain a list of resource paths
            separated by newline characters (\n or \r\n). Each resource path
            must be in the format
            "/studies/{studyUID}[/series/{seriesUID}[/instances/{instanceUID}]]"
            The Cloud Healthcare API service account must have the
            `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage
            location.
      description: Specifies the filter configuration for DICOM resources.
      id: DicomFilterConfig
      type: object
    RemoveTag:
      description: Replace with empty tag.
      id: RemoveTag
      properties: {}
      type: object
    FieldMetadata:
      properties:
        paths:
          description: >-
            List of paths to FHIR fields to redact. Each path is a
            period-separated list where each component is either a field name or
            FHIR type name. All types begin with an upper case letter. For
            example, the resource field "Patient.Address.city", which uses a
            string type, can be matched by "Patient.Address.String". Path also
            supports partial matching. For example, "Patient.Address.city" can
            be matched by "Address.city" (Patient omitted). Partial matching and
            type matching can be combined. For example, "Patient.Address.city"
            can be matched by "Address.String". For "choice" types (those
            defined in the FHIR spec with the form: field[x]), use two separate
            components. For example, "deceasedAge.unit" is matched by
            "Deceased.Age.unit". Supported types are: AdministrativeGenderCode,
            Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id,
            Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String,
            UnsignedInt, Uri, Uuid, Xhtml. The sub-type for HumanName(for
            example HumanName.given, HumanName.family) can be omitted.
          type: array
          items:
            type: string
        action:
          description: Deidentify action for one field.
          enumDescriptions:
            - No action specified.
            - >-
              Transform the entire field based on transformations specified in
              TextConfig. When the specified transformation cannot be applied to
              a field, RedactConfig is used. For example, a Crypto Hash
              transformation can't be applied to a FHIR Date field.
            - >-
              Inspect and transform any found PHI. When `AnnotationConfig` is
              provided, annotations of PHI will be generated, except for Date
              and Datetime.
            - Do not transform.
          type: string
          enum:
            - ACTION_UNSPECIFIED
            - TRANSFORM
            - INSPECT_AND_TRANSFORM
            - DO_NOT_TRANSFORM
      id: FieldMetadata
      description: >-
        Specifies FHIR paths to match, and how to handle de-identification of
        matching fields.
      type: object
    ConsentArtifact:
      description: Documentation of a user's consent.
      id: ConsentArtifact
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          description: >-
            Optional. Metadata associated with the Consent artifact. For
            example, the consent locale or user agent version.
        witnessSignature:
          $ref: '#/components/schemas/Signature'
          description: Optional. A signature from a witness.
        name:
          description: >-
            Resource name of the Consent artifact, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
            Cannot be changed after creation.
          type: string
        userId:
          type: string
          description: Required. User's UUID provided by the client.
        userSignature:
          description: Optional. User's signature.
          $ref: '#/components/schemas/Signature'
        consentContentVersion:
          description: >-
            Optional. An string indicating the version of the consent
            information shown to the user.
          type: string
        consentContentScreenshots:
          type: array
          items:
            $ref: '#/components/schemas/Image'
          description: >-
            Optional. Screenshots, PDFs, or other binary information documenting
            the user's consent.
        guardianSignature:
          description: Optional. A signature from a guardian.
          $ref: '#/components/schemas/Signature'
      type: object
    Expr:
      properties:
        title:
          type: string
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
        description:
          type: string
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
      type: object
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
    HttpBody:
      type: object
      properties:
        data:
          description: The HTTP request/response body as raw binary.
          type: string
          format: byte
        contentType:
          description: >-
            The HTTP Content-Type header value specifying the content type of
            the body.
          type: string
        extensions:
          description: >-
            Application specific response metadata. Must be set in the first
            response for streaming APIs.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
      description: >-
        Message that represents an arbitrary HTTP body. It should only be used
        for payload formats that can't be represented as JSON, such as raw
        binary or an HTML page. This message can be used both in streaming and
        non-streaming API methods in the request as well as the response. It can
        be used as a top-level request field, which is convenient if one wants
        to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body. Example:
        message GetResourceRequest { // A unique request id. string request_id =
        1; // The raw HTTP body is bound to this field. google.api.HttpBody
        http_body = 2; } service ResourceService { rpc
        GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
        UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
        Example with streaming methods: service CaldavService { rpc
        GetCalendar(stream google.api.HttpBody) returns (stream
        google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody)
        returns (stream google.api.HttpBody); } Use of this type only changes
        how the request and response bodies are handled, all other features will
        continue to work unchanged.
      id: HttpBody
    Segment:
      id: Segment
      properties:
        fields:
          additionalProperties:
            type: string
          description: >-
            A mapping from the positional location to the value. The key string
            uses zero-based indexes separated by dots to identify Fields,
            components and sub-components. A bracket notation is also used to
            identify different instances of a repeated field. Regex for key:
            (\d+)(\[\d+\])?(.\d+)?(.\d+)? Examples of (key, value) pairs: *
            (0.1, "hemoglobin") denotes that the first component of Field 0 has
            the value "hemoglobin". * (1.1.2, "CBC") denotes that the second
            sub-component of the first component of Field 1 has the value "CBC".
            * (1[0].1, "HbA1c") denotes that the first component of the first
            Instance of Field 1, which is repeated, has the value "HbA1c".
          type: object
        setId:
          description: >-
            Set ID for segments that can be in a set. This can be empty if it's
            missing or isn't applicable.
          type: string
        segmentId:
          description: >-
            A string that indicates the type of segment. For example, EVN or
            PID.
          type: string
      type: object
      description: A segment in a structured format.
    Message:
      description: >-
        A complete HL7v2 message. See [Introduction to HL7 Standards]
        (https://www.hl7.org/implement/standards/index.cfm?ref=common) for
        details on the standard.
      properties:
        sendFacility:
          type: string
          description: The hospital that this message came from. MSH-4.
        createTime:
          format: google-datetime
          type: string
          description: >-
            Output only. The datetime when the message was created. Set by the
            server.
          readOnly: true
        labels:
          additionalProperties:
            type: string
          description: >-
            User-supplied key-value pairs used to organize HL7v2 stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          type: object
        data:
          format: byte
          type: string
          description: Raw message bytes.
        schematizedData:
          $ref: '#/components/schemas/SchematizedData'
          description: >-
            The parsed version of the raw message data schematized according to
            this store's schemas and type definitions.
        messageType:
          description: The message type for this message. MSH-9.1.
          type: string
        name:
          type: string
          description: >-
            Resource name of the Message, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
            Assigned by the server.
        sendTime:
          description: The datetime the sending application sent this message. MSH-7.
          type: string
          format: google-datetime
        patientIds:
          items:
            $ref: '#/components/schemas/PatientId'
          type: array
          description: >-
            All patient IDs listed in the PID-2, PID-3, and PID-4 segments of
            this message.
        parsedData:
          description: Output only. The parsed version of the raw message data.
          $ref: '#/components/schemas/ParsedData'
          readOnly: true
      id: Message
      type: object
    ImportResourcesRequest:
      description: Request to import resources.
      id: ImportResourcesRequest
      type: object
      properties:
        gcsSource:
          description: >-
            Cloud Storage source data location and import configuration. The
            Cloud Healthcare Service Agent requires the
            `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage
            location. The Healthcare Service Agent Each Cloud Storage object
            should be a text file that contains the format specified in
            ContentStructure.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1FhirGcsSource'
        contentStructure:
          description: >-
            The content structure in the source location. If not specified, the
            server treats the input source files as BUNDLE.
          type: string
          enumDescriptions:
            - >-
              If the content structure is not specified, the default value
              `BUNDLE` is used.
            - >-
              The source file contains one or more lines of newline-delimited
              JSON (ndjson). Each line is a bundle that contains one or more
              resources.
            - >-
              The source file contains one or more lines of newline-delimited
              JSON (ndjson). Each line is a single resource.
            - >-
              The entire file is one JSON bundle. The JSON can span multiple
              lines.
            - >-
              The entire file is one JSON resource. The JSON can span multiple
              lines.
          enum:
            - CONTENT_STRUCTURE_UNSPECIFIED
            - BUNDLE
            - RESOURCE
            - BUNDLE_PRETTY
            - RESOURCE_PRETTY
    NotificationConfig:
      id: NotificationConfig
      properties:
        sendForBulkImport:
          type: boolean
          description: >-
            Indicates whether or not to send Pub/Sub notifications on bulk
            import. Only supported for DICOM imports.
        pubsubTopic:
          type: string
          description: >-
            The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that
            notifications of changes are published on. Supplied by the client.
            PubsubMessage.Data contains the resource name.
            PubsubMessage.MessageId is the ID of this message. It is guaranteed
            to be unique within the topic. PubsubMessage.PublishTime is the time
            at which the message was published. Notifications are only sent if
            the topic is non-empty. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. Cloud Healthcare API service account must have
            publisher permissions on the given Pub/Sub topic. Not having
            adequate permissions causes the calls that send notifications to
            fail. If a notification can't be published to Pub/Sub, errors are
            logged to Cloud Logging (see [Viewing error logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
            If the number of errors exceeds a certain rate, some aren't
            submitted. Note that not all operations trigger notifications, see
            [Configuring Pub/Sub
            notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub)
            for specific details.
      description: Specifies where to send notifications upon changes to a data store.
      type: object
    ListFhirStoresResponse:
      id: ListFhirStoresResponse
      type: object
      description: Lists the FHIR stores in the given dataset.
      properties:
        fhirStores:
          type: array
          description: >-
            The returned FHIR stores. Won't be more FHIR stores than the value
            of page_size in the request.
          items:
            $ref: '#/components/schemas/FhirStore'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
          type: string
    ConsentStore:
      id: ConsentStore
      description: Represents a consent store.
      properties:
        defaultConsentTtl:
          type: string
          description: >-
            Optional. Default time to live for Consents created in this store.
            Must be at least 24 hours. Updating this field will not affect the
            expiration time of existing consents.
          format: google-duration
        labels:
          type: object
          description: >-
            Optional. User-supplied key-value pairs used to organize consent
            stores. Label keys must be between 1 and 63 characters long, have a
            UTF-8 encoding of maximum 128 bytes, and must conform to the
            following PCRE regular expression: \p{Ll}\p{Lo}{0,62}. Label values
            must be between 1 and 63 characters long, have a UTF-8 encoding of
            maximum 128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}. No more than 64 labels can
            be associated with a given store. For more information:
            https://cloud.google.com/healthcare/docs/how-tos/labeling-resources
          additionalProperties:
            type: string
        enableConsentCreateOnUpdate:
          type: boolean
          description: >-
            Optional. If `true`, UpdateConsent creates the Consent if it does
            not already exist. If unspecified, defaults to `false`.
        name:
          description: >-
            Resource name of the consent store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
            Cannot be changed after creation.
          type: string
      type: object
    TextSpan:
      properties:
        beginOffset:
          description: The unicode codepoint index of the beginning of this span.
          type: integer
          format: int32
        content:
          description: The original text contained in this span.
          type: string
      description: A span of text in the provided document.
      type: object
      id: TextSpan
    GcsDestination:
      description: >-
        The Cloud Storage output destination. The Cloud Healthcare Service Agent
        requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud
        Storage location.
      properties:
        messageView:
          description: >-
            Specifies the parts of the Message resource to include in the
            export. If not specified, FULL is used.
          enum:
            - MESSAGE_VIEW_UNSPECIFIED
            - RAW_ONLY
            - PARSED_ONLY
            - FULL
            - SCHEMATIZED_ONLY
            - BASIC
          enumDescriptions:
            - >-
              Not specified, equivalent to FULL for getMessage, equivalent to
              BASIC for listMessages.
            - >-
              Server responses include all the message fields except
              parsed_data, and schematized_data fields.
            - >-
              Server responses include all the message fields except data and
              schematized_data fields.
            - Server responses include all the message fields.
            - >-
              Server responses include all the message fields except data and
              parsed_data fields.
            - Server responses include only the name field.
          type: string
        uriPrefix:
          description: >-
            URI of an existing Cloud Storage directory where the server writes
            result files, in the format
            `gs://{bucket-id}/{path/to/destination/dir}`. If there is no
            trailing slash, the service appends one when composing the object
            path.
          type: string
        contentStructure:
          description: The format of the exported HL7v2 message files.
          enum:
            - CONTENT_STRUCTURE_UNSPECIFIED
            - MESSAGE_JSON
          type: string
          enumDescriptions:
            - >-
              If the content structure is not specified, the default value
              `MESSAGE_JSON` will be used.
            - >-
              Messages are printed using the JSON format returned from the
              `GetMessage` API. Messages are delimited with newlines.
      id: GcsDestination
      type: object
    PatientId:
      description: A patient identifier and associated type.
      properties:
        type:
          type: string
          description: ID type. For example, MRN or NHS.
        value:
          type: string
          description: The patient's unique identifier.
      id: PatientId
      type: object
    ImportAnnotationsRequest:
      description: >-
        Request to import Annotations. The Annotations to be imported must have
        client-supplied resource names which indicate the annotation resource.
        The import operation is not atomic. If a failure occurs, any annotations
        already imported are not removed.
      type: object
      id: ImportAnnotationsRequest
      properties:
        gcsSource:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1AnnotationGcsSource'
    KeepTag:
      type: object
      properties: {}
      id: KeepTag
      description: Keep tag unchanged.
    IngestMessageRequest:
      properties:
        message:
          $ref: '#/components/schemas/Message'
          description: HL7v2 message to ingest.
      description: Ingests a message into the specified HL7v2 store.
      id: IngestMessageRequest
      type: object
    ConfigureSearchRequest:
      type: object
      properties:
        validateOnly:
          type: boolean
          description: >-
            If `validate_only` is set to true, the method will compile all the
            search parameters without actually setting the search config for the
            store and triggering the reindex.
        canonicalUrls:
          items:
            type: string
          description: >-
            The canonical URLs of the search parameters that are intended to be
            used for the FHIR store. See
            https://www.hl7.org/fhir/references.html#canonical for explanation
            on FHIR canonical urls
          type: array
      id: ConfigureSearchRequest
      description: Request to configure the search parameters for the specified FHIR store.
    Feature:
      description: A feature of an entity mention.
      id: Feature
      type: object
      properties:
        confidence:
          type: number
          description: >-
            The model's confidence in this feature annotation. A number between
            0 and 1.
          format: double
        value:
          type: string
          description: >-
            The value of this feature annotation. Its range depends on the type
            of the feature.
    ListConsentArtifactsResponse:
      properties:
        consentArtifacts:
          description: >-
            The returned Consent artifacts. The maximum number of artifacts
            returned is determined by the value of page_size in the
            ListConsentArtifactsRequest.
          items:
            $ref: '#/components/schemas/ConsentArtifact'
          type: array
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
      type: object
      id: ListConsentArtifactsResponse
    RedactConfig:
      description: >-
        Define how to redact sensitive values. Default behaviour is erase. For
        example, "My name is Jane." becomes "My name is ."
      type: object
      properties: {}
      id: RedactConfig
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    TextConfig:
      id: TextConfig
      description: Configures how to transform sensitive text `InfoTypes`.
      type: object
      properties:
        additionalTransformations:
          description: >-
            Additional transformations to apply to the detected data, overriding
            `profile`.
          items:
            $ref: '#/components/schemas/InfoTypeTransformation'
          type: array
        profileType:
          type: string
          enumDescriptions:
            - Same as BASIC.
            - Empty profile which does not perform any transformations.
            - >-
              Basic profile applies: DATE -> DateShift Default ->
              ReplaceWithInfoType
          description: Base profile type for text transformation.
          enum:
            - PROFILE_TYPE_UNSPECIFIED
            - EMPTY
            - BASIC
        excludeInfoTypes:
          type: array
          description: InfoTypes to skip transforming, overriding `profile`.
          items:
            type: string
        transformations:
          description: >-
            The transformations to apply to the detected data. Deprecated. Use
            `additional_transformations` instead.
          type: array
          items:
            $ref: '#/components/schemas/InfoTypeTransformation'
    CleanTextField:
      description: >-
        Inspect text and transform sensitive text. Configure using `TextConfig`.
        Supported [types](https://www.hl7.org/fhir/datatypes.html): Code, Date,
        DateTime, Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String,
        Uri, Uuid, Xhtml
      type: object
      properties: {}
      id: CleanTextField
    ImportMessagesRequest:
      description: Request to import messages.
      properties:
        gcsSource:
          $ref: '#/components/schemas/GcsSource'
          description: >-
            Cloud Storage source data location and import configuration. The
            Cloud Healthcare Service Agent requires the
            `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage
            location.
      id: ImportMessagesRequest
      type: object
    VersionSource:
      type: object
      properties:
        value:
          description: >-
            The value to match with the field. For example, "My Application
            Name" or "2.3".
          type: string
        mshField:
          type: string
          description: >-
            The field to extract from the MSH segment. For example, "3.1" or
            "18[1].1".
      id: VersionSource
      description: >-
        Describes a selector for extracting and matching an MSH field to a
        value.
    ExportMessagesResponse:
      type: object
      id: ExportMessagesResponse
      properties: {}
      description: >-
        Final response for the export operation. This structure is included in
        the response to describe the detailed outcome.
    ListAnnotationsResponse:
      type: object
      description: Lists the Annotations in the specified Annotation store.
      properties:
        annotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
          description: >-
            The returned Annotations. Won't be more values than the value of
            page_size in the request. See `AnnotationView` in the request for
            populated fields.
        nextPageToken:
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
          type: string
      id: ListAnnotationsResponse
    AttributeDefinition:
      properties:
        category:
          enum:
            - CATEGORY_UNSPECIFIED
            - RESOURCE
            - REQUEST
          enumDescriptions:
            - No category specified. This option is invalid.
            - >-
              Specify this category when this attribute describes the properties
              of resources. For example, data anonymity or data type.
            - >-
              Specify this category when this attribute describes the properties
              of requests. For example, requester's role or requester's
              organization.
          type: string
          description: >-
            Required. The category of the attribute. The value of this field
            cannot be changed after creation.
        dataMappingDefaultValue:
          type: string
          description: >-
            Optional. Default value of the attribute in User data mappings. If
            no default value is specified, it defaults to an empty value. This
            field is only applicable to attributes of the category `RESOURCE`.
        consentDefaultValues:
          type: array
          description: >-
            Optional. Default values of the attribute in Consents. If no default
            values are specified, it defaults to an empty value.
          items:
            type: string
        name:
          type: string
          description: >-
            Resource name of the Attribute definition, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`.
            Cannot be changed after creation.
        allowedValues:
          type: array
          description: >-
            Required. Possible values for the attribute. The number of allowed
            values must not exceed 500. An empty list is invalid. The list can
            only be expanded after creation.
          items:
            type: string
        description:
          type: string
          description: Optional. A description of the attribute.
      type: object
      id: AttributeDefinition
      description: A client-defined consent attribute.
    AnnotationConfig:
      type: object
      id: AnnotationConfig
      properties:
        annotationStoreName:
          type: string
          description: >-
            The name of the annotation store, in the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`).
            * The destination annotation store must be in the same project as
            the source data. De-identifying data across multiple projects is not
            supported. * The destination annotation store must exist when using
            DeidentifyDicomStore or DeidentifyFhirStore. DeidentifyDataset
            automatically creates the destination annotation store.
        storeQuote:
          type: boolean
          description: >-
            If set to true, the sensitive texts are included in
            SensitiveTextAnnotation of Annotation.
      description: Specifies how to store annotations during de-identification operation.
    ImageConfig:
      id: ImageConfig
      properties:
        excludeInfoTypes:
          items:
            type: string
          description: >-
            InfoTypes to skip redacting, overriding those used by
            `text_redaction_mode`. Can only be used when `text_redaction_mode`
            is set to `REDACT_SENSITIVE_TEXT` or
            `REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS`.
          type: array
        textRedactionMode:
          enum:
            - TEXT_REDACTION_MODE_UNSPECIFIED
            - REDACT_ALL_TEXT
            - REDACT_SENSITIVE_TEXT
            - REDACT_NO_TEXT
            - REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS
          description: Determines how to redact text from image.
          type: string
          enumDescriptions:
            - No text redaction specified. Same as REDACT_NO_TEXT.
            - Redact all text.
            - >-
              Redact sensitive text. Uses the set of [Default DICOM
              InfoTypes](https://cloud.google.com/healthcare-api/docs/how-tos/dicom-deidentify#default_dicom_infotypes).
            - Do not redact text.
            - >-
              This mode is like `REDACT_SENSITIVE_TEXT` with the addition of the
              [Clean Descriptors Option]
              (https://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/sect_E.3.5.html)
              enabled: When cleaning text, the process attempts to transform
              phrases matching any of the tags marked for removal (action codes
              D, Z, X, and U) in the [Basic Profile]
              (https://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html).
              These contextual phrases are replaced with the token "[CTX]". This
              mode uses an additional InfoType during inspection.
        additionalInfoTypes:
          type: array
          items:
            type: string
          description: >-
            Additional InfoTypes to redact in the images in addition to those
            used by `text_redaction_mode`. Can only be used when
            `text_redaction_mode` is set to `REDACT_SENSITIVE_TEXT`,
            `REDACT_SENSITIVE_TEXT_CLEAN_DESCRIPTORS` or
            `TEXT_REDACTION_MODE_UNSPECIFIED`.
      type: object
      description: Specifies how to handle de-identification of image pixels.
    Finding:
      properties:
        end:
          description: Zero-based ending index of the found text, exclusively.
          format: int64
          type: string
        infoType:
          description: >-
            The type of information stored in this text range. For example,
            HumanName, BirthDate, or Address.
          type: string
        quote:
          type: string
          description: >-
            The snippet of the sensitive text. This field is only populated
            during deidentification if `store_quote` is set to true in
            DeidentifyConfig.
        start:
          type: string
          description: Zero-based starting index of the found text, inclusively.
          format: int64
      type: object
      id: Finding
    ImportAnnotationsResponse:
      type: object
      properties: {}
      description: >-
        Final response of importing Annotations in successful case. This
        structure is included in the response. It is only included when the
        operation finishes.
      id: ImportAnnotationsResponse
    ArchiveUserDataMappingResponse:
      type: object
      id: ArchiveUserDataMappingResponse
      description: Archives the specified User data mapping.
      properties: {}
    Signature:
      id: Signature
      description: User signature.
      type: object
      properties:
        image:
          description: Optional. An image of the user's signature.
          $ref: '#/components/schemas/Image'
        metadata:
          type: object
          additionalProperties:
            type: string
          description: >-
            Optional. Metadata associated with the user's signature. For
            example, the user's name or the user's title.
        signatureTime:
          format: google-datetime
          description: Optional. Timestamp of the signature.
          type: string
        userId:
          type: string
          description: Required. User's UUID provided by the client.
    ListConsentRevisionsResponse:
      type: object
      id: ListConsentRevisionsResponse
      properties:
        consents:
          items:
            $ref: '#/components/schemas/Consent'
          description: >-
            The returned Consent revisions. The maximum number of revisions
            returned is determined by the value of `page_size` in the
            ListConsentRevisionsRequest.
          type: array
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    SensitiveTextAnnotation:
      id: SensitiveTextAnnotation
      type: object
      description: >-
        A TextAnnotation specifies a text range that includes sensitive
        information.
      properties:
        details:
          description: >-
            Maps from a resource slice. For example, FHIR resource field path to
            a set of sensitive text findings. For example, Appointment.Narrative
            text1 --> {findings_1, findings_2, findings_3}
          additionalProperties:
            $ref: '#/components/schemas/Detail'
          type: object
    ResourceAnnotation:
      properties:
        label:
          description: A description of the annotation record.
          type: string
      type: object
      id: ResourceAnnotation
      description: Resource level annotation.
    DicomStore:
      properties:
        name:
          description: >-
            Resource name of the DICOM store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
          type: string
        labels:
          description: >-
            User-supplied key-value pairs used to organize DICOM stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          additionalProperties:
            type: string
          type: object
        notificationConfig:
          $ref: '#/components/schemas/NotificationConfig'
          description: >-
            Notification destination for new DICOM instances. Supplied by the
            client.
        streamConfigs:
          description: >-
            A list of streaming configs used to configure the destination of
            streaming exports for every DICOM instance insertion in this DICOM
            store. After a new config is added to `stream_configs`, DICOM
            instance insertions are streamed to the new destination. When a
            config is removed from `stream_configs`, the server stops streaming
            to that destination. Each config must contain a unique destination.
          items:
            $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1DicomStreamConfig'
          type: array
      description: Represents a DICOM store.
      id: DicomStore
      type: object
    GoogleCloudHealthcareV1beta1FhirBigQueryDestination:
      description: The configuration for exporting to BigQuery.
      id: GoogleCloudHealthcareV1beta1FhirBigQueryDestination
      type: object
      properties:
        schemaConfig:
          $ref: '#/components/schemas/SchemaConfig'
          description: The configuration for the exported BigQuery schema.
        force:
          description: >-
            Use `write_disposition` instead. If `write_disposition` is
            specified, this parameter is ignored. force=false is equivalent to
            write_disposition=WRITE_EMPTY and force=true is equivalent to
            write_disposition=WRITE_TRUNCATE.
          type: boolean
        writeDisposition:
          enum:
            - WRITE_DISPOSITION_UNSPECIFIED
            - WRITE_EMPTY
            - WRITE_TRUNCATE
            - WRITE_APPEND
          enumDescriptions:
            - Default behavior is the same as WRITE_EMPTY.
            - Only export data if the destination tables are empty.
            - >-
              Erase all existing data in the destination tables before writing
              the FHIR resources.
            - Append data to the destination tables.
          description: >-
            Determines if existing data in the destination dataset is
            overwritten, appended to, or not written if the tables contain data.
            If a write_disposition is specified, the `force` parameter is
            ignored.
          type: string
        datasetUri:
          description: >-
            BigQuery URI to an existing dataset, up to 2000 characters long, in
            the format `bq://projectId.bqDatasetId`.
          type: string
    ListDatasetsResponse:
      description: Lists the available datasets.
      type: object
      id: ListDatasetsResponse
      properties:
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
          description: The first page of datasets.
    RecurseTag:
      properties: {}
      id: RecurseTag
      description: >-
        Recursively apply DICOM de-id to tags nested in a sequence. Supported
        [Value Representation]
        (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1):
        SQ
      type: object
    FhirStoreMetrics:
      type: object
      properties:
        name:
          type: string
          description: >-
            The resource name of the FHIR store to get metrics for, in the
            format
            `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/FhirStoreMetric'
          description: List of FhirStoreMetric by resource type.
      description: List of metrics for a given FHIR store.
      id: FhirStoreMetrics
    CleanDescriptorsOption:
      id: CleanDescriptorsOption
      description: >-
        This option is based on the DICOM Standard's [Clean Descriptors
        Option](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/sect_E.3.5.html),
        and the `CleanText` `Action` is applied to all the specified fields.
        When cleaning text, the process attempts to transform phrases matching
        any of the tags marked for removal (action codes D, Z, X, and U) in the
        [Basic
        Profile](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html).
        These contextual phrases are replaced with the token "[CTX]". This
        option uses an additional `InfoType` during inspection.
      properties: {}
      type: object
    ContextualDeidConfig:
      type: object
      description: >-
        The fields that aren't marked `Keep` or `CleanText` in the `BASIC`
        profile are collected into a contextual phrase list. For fields marked
        `CleanText`, the process attempts to transform phrases matching these
        contextual entries. These contextual phrases are replaced with the token
        "[CTX]". This feature uses an additional InfoType during inspection.
      id: ContextualDeidConfig
      properties: {}
    Empty:
      type: object
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
      properties: {}
    Operation:
      type: object
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      id: Operation
      properties:
        name:
          type: string
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
        done:
          type: boolean
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: >-
            The normal response of the operation in case of success. If the
            original method returns no data on success, such as `Delete`, the
            response is `google.protobuf.Empty`. If the original method is
            standard `Get`/`Create`/`Update`, the response should be the
            resource. For other methods, the response should have the type
            `XxxResponse`, where `Xxx` is the original method name. For example,
            if the original method name is `TakeSnapshot()`, the inferred
            response type is `TakeSnapshotResponse`.
    TimePartitioning:
      id: TimePartitioning
      description: Configuration for FHIR BigQuery time-partitioned tables.
      type: object
      properties:
        expirationMs:
          format: int64
          type: string
          description: >-
            Number of milliseconds for which to keep the storage for a
            partition.
        type:
          enum:
            - PARTITION_TYPE_UNSPECIFIED
            - HOUR
            - DAY
            - MONTH
            - YEAR
          type: string
          enumDescriptions:
            - Default unknown time.
            - Data partitioned by hour.
            - Data partitioned by day.
            - Data partitioned by month.
            - Data partitioned by year.
          description: Type of partitioning.
    ImageAnnotation:
      description: Image annotation.
      type: object
      id: ImageAnnotation
      properties:
        boundingPolys:
          items:
            $ref: '#/components/schemas/BoundingPoly'
          description: The list of polygons outlining the sensitive regions in the image.
          type: array
        frameIndex:
          description: >-
            0-based index of the image frame. For example, an image frame in a
            DICOM instance.
          format: int32
          type: integer
    GoogleCloudHealthcareV1beta1FhirGcsSource:
      description: Specifies the configuration for importing data from Cloud Storage.
      type: object
      id: GoogleCloudHealthcareV1beta1FhirGcsSource
      properties:
        uri:
          description: >-
            Points to a Cloud Storage URI containing file(s) to import. The URI
            must be in the following format: `gs://{bucket_id}/{object_id}`. The
            URI can include wildcards in `object_id` and thus identify multiple
            files. Supported wildcards: * `*` to match 0 or more non-separator
            characters * `**` to match 0 or more characters (including
            separators). Must be used at the end of a path and with no other
            wildcards in the path. Can also be used with a file extension (such
            as .ndjson), which imports all files with the extension in the
            specified directory and its sub-directories. For example,
            `gs://my-bucket/my-directory/**.ndjson` imports all files with
            `.ndjson` extensions in `my-directory/` and its sub-directories. *
            `?` to match 1 character Files matching the wildcard are expected to
            contain content only, no metadata.
          type: string
    Result:
      description: The consent evaluation result for a single `data_id`.
      id: Result
      type: object
      properties:
        consented:
          description: Whether the resource is consented for the given use.
          type: boolean
        consentDetails:
          additionalProperties:
            $ref: '#/components/schemas/ConsentEvaluation'
          type: object
          description: >-
            The resource names of all evaluated Consents mapped to their
            evaluation.
        dataId:
          type: string
          description: The unique identifier of the evaluated resource.
    SearchConfig:
      properties:
        searchParameters:
          items:
            $ref: '#/components/schemas/SearchParameter'
          description: >-
            A list of search parameters in this FHIR store that are used to
            configure this FHIR store.
          type: array
      id: SearchConfig
      type: object
      description: Contains the configuration for FHIR search.
    SearchParameter:
      type: object
      id: SearchParameter
      description: Contains the versioned name and the URL for one SearchParameter.
      properties:
        parameter:
          description: >-
            The versioned name of the search parameter resource. The format is
            projects/{project-id}/locations/{location}/datasets/{dataset-id}/fhirStores/{fhirStore-id}/fhir/SearchParameter/{resource-id}/_history/{version-id}
            For fhir stores with disable_resource_versioning=true, the format is
            projects/{project-id}/locations/{location}/datasets/{dataset-id}/fhirStores/{fhirStore-id}/fhir/SearchParameter/{resource-id}/
          type: string
        canonicalUrl:
          type: string
          description: The canonical url of the search parameter resource.
    SchemaSegment:
      properties:
        type:
          description: The Segment type. For example, "PID".
          type: string
        minOccurs:
          type: integer
          description: >-
            The minimum number of times this segment can be present in this
            group.
          format: int32
        maxOccurs:
          description: >-
            The maximum number of times this segment can be present in this
            group. 0 or -1 means unbounded.
          format: int32
          type: integer
      description: An HL7v2 Segment.
      type: object
      id: SchemaSegment
    ParsedData:
      id: ParsedData
      description: The content of an HL7v2 message in a structured format.
      type: object
      properties:
        segments:
          items:
            $ref: '#/components/schemas/Segment'
          type: array
    Detail:
      properties:
        findings:
          type: array
          items:
            $ref: '#/components/schemas/Finding'
      type: object
      id: Detail
      description: >-
        Contains multiple sensitive information findings for each resource
        slice.
    AnnotationSource:
      properties:
        cloudHealthcareSource:
          $ref: '#/components/schemas/CloudHealthcareSource'
          description: Cloud Healthcare API resource.
      type: object
      id: AnnotationSource
      description: AnnotationSource holds the source information of the annotation.
    ListLocationsResponse:
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
      type: object
      description: The response message for Locations.ListLocations.
      id: ListLocationsResponse
    FhirStore:
      type: object
      description: Represents a FHIR store.
      properties:
        searchConfig:
          $ref: '#/components/schemas/SearchConfig'
          description: Configuration for how FHIR resources can be searched.
        streamConfigs:
          items:
            $ref: '#/components/schemas/StreamConfig'
          description: >-
            A list of streaming configs that configure the destinations of
            streaming export for every resource mutation in this FHIR store.
            Each store is allowed to have up to 10 streaming configs. After a
            new config is added, the next resource mutation is streamed to the
            new location in addition to the existing ones. When a location is
            removed from the list, the server stops streaming to that location.
            Before adding a new config, you must add the required
            [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor)
            role to your project's **Cloud Healthcare Service Agent** [service
            account](https://cloud.google.com/iam/docs/service-accounts). Some
            lag (typically on the order of dozens of seconds) is expected before
            the results show up in the streaming destination.
          type: array
        version:
          type: string
          description: >-
            Immutable. The FHIR specification version that this FHIR store
            supports natively. This field is immutable after store creation.
            Requests are rejected if they contain FHIR resources of a different
            version. Version is required for every FHIR store.
          enum:
            - VERSION_UNSPECIFIED
            - DSTU2
            - STU3
            - R4
          enumDescriptions:
            - >-
              VERSION_UNSPECIFIED is treated as STU3 to accommodate the existing
              FHIR stores.
            - >-
              Draft Standard for Trial Use, [Release
              2](https://www.hl7.org/fhir/DSTU2)
            - Standard for Trial Use, [Release 3](https://www.hl7.org/fhir/STU3)
            - '[Release 4](https://www.hl7.org/fhir/R4)'
        notificationConfig:
          description: >-
            Deprecated. Use `notification_configs` instead. If non-empty,
            publish all resource modifications of this FHIR store to this
            destination. The Pub/Sub message attributes contain a map with a
            string describing the action that has triggered the notification.
            For example, "action":"CreateResource".
          $ref: '#/components/schemas/NotificationConfig'
        complexDataTypeReferenceParsing:
          enum:
            - COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED
            - DISABLED
            - ENABLED
          description: >-
            Enable parsing of references within complex FHIR data types such as
            Extensions. If this value is set to ENABLED, then features like
            referential integrity and Bundle reference rewriting apply to all
            references. If this flag has not been specified the behavior of the
            FHIR store will not change, references in complex data types will
            not be parsed. New stores will have this value set to ENABLED after
            a notification period. Warning: turning on this flag causes
            processing existing resources to fail if they contain references to
            non-existent resources.
          type: string
          enumDescriptions:
            - >-
              No parsing behavior specified. This is the same as DISABLED for
              backwards compatibility.
            - References in complex data types are ignored.
            - References in complex data types are parsed.
        disableResourceVersioning:
          type: boolean
          description: >-
            Immutable. Whether to disable resource versioning for this FHIR
            store. This field can not be changed after the creation of FHIR
            store. If set to false, which is the default behavior, all write
            operations cause historical versions to be recorded automatically.
            The historical versions can be fetched through the history APIs, but
            cannot be updated. If set to true, no historical versions are kept.
            The server sends errors for attempts to read the historical
            versions.
        disableReferentialIntegrity:
          description: >-
            Immutable. Whether to disable referential integrity in this FHIR
            store. This field is immutable after FHIR store creation. The
            default value is false, meaning that the API enforces referential
            integrity and fails the requests that result in inconsistent state
            in the FHIR store. When this field is set to true, the API skips
            referential integrity checks. Consequently, operations that rely on
            references, such as GetPatientEverything, do not return all the
            results if broken references exist.
          type: boolean
        defaultSearchHandlingStrict:
          description: >-
            If true, overrides the default search behavior for this FHIR store
            to `handling=strict` which returns an error for unrecognized search
            parameters. If false, uses the FHIR specification default
            `handling=lenient` which ignores unrecognized search parameters. The
            handling can always be changed from the default on an individual API
            call by setting the HTTP header `Prefer: handling=strict` or
            `Prefer: handling=lenient`.
          type: boolean
        name:
          description: >-
            Output only. Resource name of the FHIR store, of the form
            `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
          type: string
        enableUpdateCreate:
          description: >-
            Whether this FHIR store has the [updateCreate
            capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate).
            This determines if the client can use an Update operation to create
            a new resource with a client-specified ID. If false, all IDs are
            server-assigned through the Create operation and attempts to update
            a non-existent resource return errors. It is strongly advised not to
            include or encode any sensitive data such as patient identifiers in
            client-specified resource IDs. Those IDs are part of the FHIR
            resource path recorded in Cloud audit logs and Pub/Sub
            notifications. Those IDs can also be contained in reference fields
            within other resources.
          type: boolean
        validationConfig:
          description: >-
            Configuration for how to validate incoming FHIR resources against
            configured profiles.
          $ref: '#/components/schemas/ValidationConfig'
        labels:
          additionalProperties:
            type: string
          description: >-
            User-supplied key-value pairs used to organize FHIR stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          type: object
        notificationConfigs:
          items:
            $ref: '#/components/schemas/FhirNotificationConfig'
          type: array
          description: >-
            Specifies where and whether to send notifications upon changes to a
            Fhir store.
      id: FhirStore
    SchematizedData:
      description: >-
        The content of an HL7v2 message in a structured format as specified by a
        schema.
      id: SchematizedData
      type: object
      properties:
        data:
          type: string
          description: JSON output of the parser.
        error:
          description: The error output of the parser.
          type: string
    ProgressCounter:
      type: object
      properties:
        failure:
          type: string
          description: The number of units that failed in the operation.
          format: int64
        success:
          type: string
          format: int64
          description: The number of units that succeeded in the operation.
        pending:
          type: string
          format: int64
          description: The number of units that are pending in the operation.
      description: ProgressCounter provides counters to describe an operation's progress.
      id: ProgressCounter
    CheckDataAccessResponse:
      id: CheckDataAccessResponse
      type: object
      properties:
        consented:
          type: boolean
          description: Whether the requested resource is consented for the given use.
        consentDetails:
          additionalProperties:
            $ref: '#/components/schemas/ConsentEvaluation'
          type: object
          description: >-
            The resource names of all evaluated Consents mapped to their
            evaluation.
      description: >-
        Checks if a particular data_id of a User data mapping in the given
        consent store is consented for a given use.
    GoogleCloudHealthcareV1beta1DicomBigQueryDestination:
      properties:
        tableUri:
          description: >-
            BigQuery URI to a table, up to 2000 characters long, in the format
            `bq://projectId.bqDatasetId.tableId`
          type: string
        writeDisposition:
          type: string
          enum:
            - WRITE_DISPOSITION_UNSPECIFIED
            - WRITE_EMPTY
            - WRITE_TRUNCATE
            - WRITE_APPEND
          enumDescriptions:
            - Default behavior is the same as WRITE_EMPTY.
            - Only export data if the destination table is empty.
            - >-
              Erase all existing data in the destination table before writing
              the instances.
            - Append data to the destination table.
          description: >-
            Determines whether the existing table in the destination is to be
            overwritten or appended to. If a write_disposition is specified, the
            `force` parameter is ignored.
        force:
          type: boolean
          description: >-
            Use `write_disposition` instead. If `write_disposition` is
            specified, this parameter is ignored. force=false is equivalent to
            write_disposition=WRITE_EMPTY and force=true is equivalent to
            write_disposition=WRITE_TRUNCATE.
      id: GoogleCloudHealthcareV1beta1DicomBigQueryDestination
      description: The BigQuery table where the server writes output.
      type: object
    Hl7SchemaConfig:
      properties:
        version:
          type: array
          description: >-
            Each VersionSource is tested and only if they all match is the
            schema used for the message.
          items:
            $ref: '#/components/schemas/VersionSource'
        messageSchemaConfigs:
          type: object
          description: >-
            Map from each HL7v2 message type and trigger event pair, such as
            ADT_A04, to its schema configuration root group.
          additionalProperties:
            $ref: '#/components/schemas/SchemaGroup'
      id: Hl7SchemaConfig
      type: object
      description: >-
        Root config message for HL7v2 schema. This contains a schema structure
        of groups and segments, and filters that determine which messages to
        apply the schema structure to.
    Consent:
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1ConsentPolicy'
          description: >-
            Optional. Represents a user's consent in terms of the resources that
            can be accessed and under what conditions.
        ttl:
          type: string
          description: >-
            Input only. The time to live for this Consent from when it is
            created.
          format: google-duration
        revisionId:
          readOnly: true
          description: >-
            Output only. The revision ID of the Consent. The format is an
            8-character hexadecimal string. Refer to a specific revision of a
            Consent by appending `@{revision_id}` to the Consent's resource
            name.
          type: string
        consentArtifact:
          description: >-
            Required. The resource name of the Consent artifact that contains
            proof of the end user's consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
          type: string
        revisionCreateTime:
          format: google-datetime
          type: string
          description: Output only. The timestamp that the revision was created.
          readOnly: true
        state:
          description: Required. Indicates the current state of this Consent.
          enumDescriptions:
            - >-
              No state specified. Treated as ACTIVE only at the time of resource
              creation.
            - >-
              The Consent is active and is considered when evaluating a user's
              consent on resources.
            - The archived state is currently not being used.
            - >-
              A revoked Consent is not considered when evaluating a user's
              consent on resources.
            - >-
              A draft Consent is not considered when evaluating a user's consent
              on resources unless explicitly specified.
            - >-
              When a draft Consent is rejected by a user, it is set to a
              rejected state. A rejected Consent is not considered when
              evaluating a user's consent on resources.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - ARCHIVED
            - REVOKED
            - DRAFT
            - REJECTED
        metadata:
          type: object
          additionalProperties:
            type: string
          description: >-
            Optional. User-supplied key-value pairs used to organize Consent
            resources. Metadata keys must: - be between 1 and 63 characters long
            - have a UTF-8 encoding of maximum 128 bytes - begin with a letter -
            consist of up to 63 characters including lowercase letters, numeric
            characters, underscores, and dashes Metadata values must be: - be
            between 1 and 63 characters long - have a UTF-8 encoding of maximum
            128 bytes - consist of up to 63 characters including lowercase
            letters, numeric characters, underscores, and dashes No more than 64
            metadata entries can be associated with a given consent.
        expireTime:
          description: Timestamp in UTC of when this Consent is considered expired.
          format: google-datetime
          type: string
        userId:
          type: string
          description: Required. User's UUID provided by the client.
        name:
          type: string
          description: >-
            Resource name of the Consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
            Cannot be changed after creation.
      type: object
      id: Consent
      description: Represents a user's consent.
    CharacterMaskField:
      description: >-
        Replace field value with masking character. Supported
        [types](https://www.hl7.org/fhir/datatypes.html): Code, Decimal,
        HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml
      id: CharacterMaskField
      properties: {}
      type: object
    Attribute:
      description: >-
        An attribute value for a Consent or User data mapping. Each Attribute
        must have a corresponding AttributeDefinition in the consent store that
        defines the default and allowed values.
      properties:
        values:
          items:
            type: string
          description: >-
            The value of the attribute. Must be an acceptable value as defined
            in the consent store. For example, if the consent store defines
            "data type" with acceptable values "questionnaire" and "step-count",
            when the attribute name is data type, this field must contain one of
            those values.
          type: array
        attributeDefinitionId:
          description: Indicates the name of an attribute defined in the consent store.
          type: string
      id: Attribute
      type: object
    ImportDicomDataRequest:
      type: object
      properties:
        gcsSource:
          description: >-
            Cloud Storage source data location and import configuration. The
            Cloud Healthcare Service Agent requires the
            `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage
            location.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1DicomGcsSource'
      id: ImportDicomDataRequest
      description: >-
        Imports data into the specified DICOM store. Returns an error if any of
        the files to import are not DICOM files. This API accepts duplicate
        DICOM instances by ignoring the newly-pushed instance. It does not
        overwrite.
    ListDicomStoresResponse:
      id: ListDicomStoresResponse
      type: object
      properties:
        dicomStores:
          type: array
          description: >-
            The returned DICOM stores. Won't be more DICOM stores than the value
            of page_size in the request.
          items:
            $ref: '#/components/schemas/DicomStore'
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
      description: Lists the DICOM stores in the given dataset.
    ListConsentStoresResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
        consentStores:
          description: >-
            The returned consent stores. The maximum number of stores returned
            is determined by the value of page_size in the
            ListConsentStoresRequest.
          type: array
          items:
            $ref: '#/components/schemas/ConsentStore'
      id: ListConsentStoresResponse
    DateShiftField:
      properties: {}
      type: object
      id: DateShiftField
      description: >-
        Shift the date by a randomized number of days. See [date
        shifting](https://cloud.google.com/dlp/docs/concepts-date-shifting) for
        more information. Supported
        [types](https://www.hl7.org/fhir/datatypes.html): Date, DateTime
    Dataset:
      description: >-
        A message representing a health dataset. A health dataset represents a
        collection of healthcare data pertaining to one or more patients. This
        may include multiple modalities of healthcare data, such as electronic
        medical records or medical imaging data.
      properties:
        timeZone:
          type: string
          description: >-
            The default timezone used by this dataset. Must be a either a valid
            IANA time zone name such as "America/New_York" or empty, which
            defaults to UTC. This is used for parsing times in resources, such
            as HL7 messages, where no explicit timezone is specified.
        name:
          type: string
          description: >-
            Resource name of the dataset, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
      id: Dataset
      type: object
    UserDataMapping:
      id: UserDataMapping
      properties:
        dataId:
          type: string
          description: Required. A unique identifier for the mapped resource.
        resourceAttributes:
          items:
            $ref: '#/components/schemas/Attribute'
          description: >-
            Attributes of the resource. Only explicitly set attributes are
            displayed here. Attribute definitions with defaults set implicitly
            apply to these User data mappings. Attributes listed here must be
            single valued, that is, exactly one value is specified for the field
            "values" in each Attribute.
          type: array
        archiveTime:
          type: string
          readOnly: true
          description: Output only. Indicates the time when this mapping was archived.
          format: google-datetime
        userId:
          type: string
          description: Required. User's UUID provided by the client.
        archived:
          type: boolean
          description: Output only. Indicates whether this mapping is archived.
          readOnly: true
        name:
          description: >-
            Resource name of the User data mapping, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.
          type: string
      type: object
      description: Maps a resource to the associated user and Attributes.
    EntityMentionRelationship:
      description: Defines directed relationship from one entity mention to another.
      properties:
        subjectId:
          description: subject_id is the id of the subject entity mention.
          type: string
        confidence:
          format: double
          description: The model's confidence in this annotation. A number between 0 and 1.
          type: number
        objectId:
          type: string
          description: object_id is the id of the object entity mention.
      id: EntityMentionRelationship
      type: object
    Vertex:
      id: Vertex
      properties:
        x:
          description: X coordinate.
          format: float
          type: number
        'y':
          description: Y coordinate.
          type: number
          format: float
      type: object
      description: A 2D coordinate in an image. The origin is the top-left.
    InfoTypeTransformation:
      type: object
      description: >-
        A transformation to apply to text that is identified as a specific
        info_type.
      id: InfoTypeTransformation
      properties:
        dateShiftConfig:
          description: Config for date shift.
          $ref: '#/components/schemas/DateShiftConfig'
        cryptoHashConfig:
          $ref: '#/components/schemas/CryptoHashConfig'
          description: Config for crypto hash.
        redactConfig:
          description: Config for text redaction.
          $ref: '#/components/schemas/RedactConfig'
        replaceWithInfoTypeConfig:
          $ref: '#/components/schemas/ReplaceWithInfoTypeConfig'
          description: Config for replace with InfoType.
        infoTypes:
          description: >-
            `InfoTypes` to apply this transformation to. If this is not
            specified, this transformation becomes the default transformation,
            and is used for any `info_type` that is not specified in another
            transformation.
          items:
            type: string
          type: array
        characterMaskConfig:
          description: Config for character mask.
          $ref: '#/components/schemas/CharacterMaskConfig'
    Hl7V2Store:
      type: object
      properties:
        parserConfig:
          $ref: '#/components/schemas/ParserConfig'
          description: >-
            The configuration for the parser. It determines how the server
            parses the messages.
        name:
          description: >-
            Resource name of the HL7v2 store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
          type: string
        notificationConfigs:
          items:
            $ref: '#/components/schemas/Hl7V2NotificationConfig'
          type: array
          description: >-
            A list of notification configs. Each configuration uses a filter to
            determine whether to publish a message (both Ingest & Create) on the
            corresponding notification destination. Only the message name is
            sent as part of the notification. Supplied by the client.
        rejectDuplicateMessage:
          type: boolean
          description: >-
            Determines whether to reject duplicate messages. A duplicate message
            is a message with the same raw bytes as a message that has already
            been ingested/created in this HL7v2 store. The default value is
            false, meaning that the store accepts the duplicate messages and it
            also returns the same ACK message in the IngestMessageResponse as
            has been returned previously. Note that only one resource is created
            in the store. When this field is set to true,
            CreateMessage/IngestMessage requests with a duplicate message will
            be rejected by the store, and IngestMessageErrorDetail returns a
            NACK message upon rejection.
        notificationConfig:
          description: >-
            The notification destination all messages (both Ingest & Create) are
            published on. Only the message name is sent as part of the
            notification. If this is unset, no notifications are sent. Supplied
            by the client.
          $ref: '#/components/schemas/NotificationConfig'
        labels:
          description: >-
            User-supplied key-value pairs used to organize HL7v2 stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          additionalProperties:
            type: string
          type: object
      id: Hl7V2Store
      description: Represents an HL7v2 store.
    CryptoHashField:
      type: object
      id: CryptoHashField
      description: >-
        Replace field value with a hash of that value. Supported
        [types](https://www.hl7.org/fhir/datatypes.html): Code, Decimal,
        HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml
      properties: {}
    GoogleCloudHealthcareV1beta1ConsentGcsDestination:
      properties:
        uriPrefix:
          description: >-
            URI for a Cloud Storage directory where the server writes result
            files, in the format `gs://{bucket-id}/{path/to/destination/dir}`.
            If there is no trailing slash, the service appends one when
            composing the object path. The user is responsible for creating the
            Cloud Storage bucket and directory referenced in `uri_prefix`.
          type: string
      description: The Cloud Storage location for export.
      id: GoogleCloudHealthcareV1beta1ConsentGcsDestination
      type: object
    EvaluateUserConsentsResponse:
      id: EvaluateUserConsentsResponse
      properties:
        nextPageToken:
          type: string
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list. This token is valid for 72 hours after it
            is created.
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
          description: The consent evaluation result for each `data_id`.
      type: object
    EntityMention:
      type: object
      description: An entity mention in the document.
      id: EntityMention
      properties:
        text:
          $ref: '#/components/schemas/TextSpan'
          description: text is the location of the entity mention in the document.
        linkedEntities:
          type: array
          description: >-
            linked_entities are candidate ontological concepts that this entity
            mention may refer to. They are sorted by decreasing confidence.
          items:
            $ref: '#/components/schemas/LinkedEntity'
        confidence:
          type: number
          format: double
          description: >-
            The model's confidence in this entity mention annotation. A number
            between 0 and 1.
        additionalInfo:
          type: array
          description: >-
            Additional information about the entity mention. For example, for an
            entity mention of type `DATE` this can be its more specific date
            types from the following list: `ADMISSION_DATE`,
            `CONSULTATION_DATE`, `DISCHARGE_DATE`, `SERVICE_DATE`, `VISIT_DATE`,
            `DIAGNOSIS_DATE`, `MED_STARTED_DATE`, `MED_ENDED_DATE`, `NOTE_DATE`,
            `PROCEDURE_DATE`, `RADIATION_STARTED_DATE`, `RADIATION_ENDED_DATE`,
            `STAGE_DATE`
          items:
            $ref: '#/components/schemas/Feature'
        type:
          description: >-
            The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE,
            ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT,
            BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT,
            DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT,
            LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE,
            MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS,
            MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT,
            OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT,
            PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE,
            UNCLEAR_FOLLOWUP.
          type: string
        certaintyAssessment:
          description: >-
            The certainty assessment of the entity mention. Its value is one of:
            LIKELY, SOMEWHAT_LIKELY, UNCERTAIN, SOMEWHAT_UNLIKELY, UNLIKELY,
            CONDITIONAL
          $ref: '#/components/schemas/Feature'
        subject:
          description: >-
            The subject this entity mention relates to. Its value is one of:
            PATIENT, FAMILY_MEMBER, OTHER
          $ref: '#/components/schemas/Feature'
        mentionId:
          description: >-
            mention_id uniquely identifies each entity mention in a single
            response.
          type: string
        temporalAssessment:
          $ref: '#/components/schemas/Feature'
          description: >-
            How this entity mention relates to the subject temporally. Its value
            is one of: CURRENT, CLINICAL_HISTORY, FAMILY_HISTORY, UPCOMING,
            ALLERGY
    InfoTypeConfig:
      id: InfoTypeConfig
      properties:
        evaluateList:
          $ref: '#/components/schemas/FilterList'
        ignoreList:
          $ref: '#/components/schemas/FilterList'
        strictMatching:
          type: boolean
          description: >-
            If `TRUE`, infoTypes described by `filter` are used for evaluation.
            Otherwise, infoTypes are not considered for evaluation. For example:
            * Annotated text: "Toronto is a location" * Finding 1: `{"infoType":
            "PERSON", "quote": "Toronto", "start": 0, "end": 7}` * Finding 2:
            `{"infoType": "CITY", "quote": "Toronto", "start": 0, "end": 7}` *
            Finding 3: `{}` * Ground truth: `{"infoType": "LOCATION", "quote":
            "Toronto", "start": 0, "end": 7}` When `strict_matching` is `TRUE`:
            * Finding 1: 1 false positive * Finding 2: 1 false positive *
            Finding 3: 1 false negative When `strict_matching` is `FALSE`: *
            Finding 1: 1 true positive * Finding 2: 1 true positive * Finding 3:
            1 false negative
      type: object
      description: >-
        Specifies how to use infoTypes for evaluation. For example, a user might
        only want to evaluate `PERSON`, `LOCATION`, and `AGE`.
    ConsentEvaluation:
      type: object
      properties:
        evaluationResult:
          description: The evaluation result.
          enum:
            - EVALUATION_RESULT_UNSPECIFIED
            - NOT_APPLICABLE
            - NO_MATCHING_POLICY
            - NO_SATISFIED_POLICY
            - HAS_SATISFIED_POLICY
          type: string
          enumDescriptions:
            - No evaluation result specified. This option is invalid.
            - >-
              The Consent is not applicable to the requested access
              determination. For example, the Consent does not apply to the user
              for which the access determination is requested, or it has a
              `state` of `REVOKED`, or it has expired.
            - >-
              The Consent does not have a policy that matches the
              `resource_attributes` of the evaluated resource.
            - >-
              The Consent has at least one policy that matches the
              `resource_attributes` of the evaluated resource, but no
              `authorization_rule` was satisfied.
            - >-
              The Consent has at least one policy that matches the
              `resource_attributes` of the evaluated resource, and at least one
              `authorization_rule` was satisfied.
      id: ConsentEvaluation
      description: The detailed evaluation of a particular Consent.
    SetIamPolicyRequest:
      type: object
      id: SetIamPolicyRequest
      properties:
        updateMask:
          description: >-
            OPTIONAL: A FieldMask specifying which fields of the policy to
            modify. Only the fields in the mask will be modified. If no mask is
            provided, the following default mask is used: `paths: "bindings,
            etag"`
          type: string
          format: google-fieldmask
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
      description: Request message for `SetIamPolicy` method.
    AnalyzeEntitiesResponse:
      description: Includes recognized entity mentions and relationships between them.
      properties:
        entityMentions:
          description: >-
            The `entity_mentions` field contains all the annotated medical
            entities that were mentioned in the provided document.
          items:
            $ref: '#/components/schemas/EntityMention'
          type: array
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
          description: >-
            The union of all the candidate entities that the entity_mentions in
            this response could link to. These are UMLS concepts or normalized
            mention content.
        relationships:
          items:
            $ref: '#/components/schemas/EntityMentionRelationship'
          description: >-
            relationships contains all the binary relationships that were
            identified between entity mentions within the provided document.
          type: array
      id: AnalyzeEntitiesResponse
      type: object
    Binding:
      id: Binding
      properties:
        condition:
          $ref: '#/components/schemas/Expr'
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        members:
          type: array
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding.
          items:
            type: string
        role:
          type: string
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`.
      description: Associates `members`, or principals, with a `role`.
      type: object
    Annotation:
      id: Annotation
      properties:
        resourceAnnotation:
          $ref: '#/components/schemas/ResourceAnnotation'
          description: Annotations for resource. For example, classification tags.
        textAnnotation:
          $ref: '#/components/schemas/SensitiveTextAnnotation'
          description: >-
            Annotations for sensitive texts. For example, a range that describes
            the location of sensitive text.
        name:
          description: >-
            Resource name of the Annotation, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.
          type: string
        imageAnnotation:
          description: Annotations for images. For example, bounding polygons.
          $ref: '#/components/schemas/ImageAnnotation'
        annotationSource:
          description: Details of the source.
          $ref: '#/components/schemas/AnnotationSource'
        customData:
          description: >-
            Additional information for this annotation record, such as annotator
            and verifier information or study campaign.
          additionalProperties:
            type: string
          type: object
      type: object
      description: An annotation record.
    GoogleCloudHealthcareV1beta1FhirExportResourcesResponse:
      type: object
      properties: {}
      id: GoogleCloudHealthcareV1beta1FhirExportResourcesResponse
      description: >-
        Response when all resources export successfully. This structure is
        included in the response to describe the detailed outcome after the
        operation finishes successfully.
    StreamConfig:
      id: StreamConfig
      description: Contains configuration for streaming FHIR export.
      type: object
      properties:
        deidentifiedStoreDestination:
          description: >-
            The destination FHIR store for de-identified resources. After this
            field is added, all subsequent creates/updates/patches to the source
            store will be de-identified using the provided configuration and
            applied to the destination store. Importing resources to the source
            store will not trigger the streaming. If the source store already
            contains resources when this option is enabled, those resources will
            not be copied to the destination store unless they are subsequently
            updated. This may result in invalid references in the destination
            store. Before adding this config, you must grant the
            healthcare.fhirResources.update permission on the destination store
            to your project's **Cloud Healthcare Service Agent** [service
            account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent).
            The destination store must set enable_update_create to true. The
            destination store must have disable_referential_integrity set to
            true. If a resource cannot be de-identified, errors will be logged
            to Cloud Logging (see [Viewing error logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
          $ref: '#/components/schemas/DeidentifiedStoreDestination'
        resourceTypes:
          type: array
          items:
            type: string
          description: >-
            Supply a FHIR resource type (such as "Patient" or "Observation").
            See https://www.hl7.org/fhir/valueset-resource-types.html for a list
            of all FHIR resource types. The server treats an empty list as an
            intent to stream all the supported resource types in this FHIR
            store.
        bigqueryDestination:
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1FhirBigQueryDestination
          description: >-
            The destination BigQuery structure that contains both the dataset
            location and corresponding schema config. The output is organized in
            one table per resource type. The server reuses the existing tables
            (if any) that are named after the resource types, e.g. "Patient",
            "Observation". When there is no existing table for a given resource
            type, the server attempts to create one. When a table schema doesn't
            align with the schema config, either because of existing
            incompatible schema or out of band incompatible modification, the
            server does not stream in new data. One resolution in this case is
            to delete the incompatible table and let the server recreate one,
            though the newly created table only contains data after the table
            recreation. BigQuery imposes a 1 MB limit on streaming insert row
            size, therefore any resource mutation that generates more than 1 MB
            of BigQuery data will not be streamed. Results are written to
            BigQuery tables according to the parameters in
            BigQueryDestination.WriteDisposition. Different versions of the same
            resource are distinguishable by the meta.versionId and
            meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that
            results in the new version is recorded in the meta.tag. The tables
            contain all historical resource versions since streaming was
            enabled. For query convenience, the server also creates one view per
            table of the same name containing only the current resource version.
            The streamed data in the BigQuery dataset is not guaranteed to be
            completely unique. The combination of the id and meta.versionId
            columns should ideally identify a single unique row. But in rare
            cases, duplicates may exist. At query time, users may use the SQL
            select statement to keep only one of the duplicate rows given an id
            and meta.versionId pair. Alternatively, the server created view
            mentioned above also filters out duplicates. If a resource mutation
            cannot be streamed to BigQuery, errors will be logged to Cloud
            Logging (see [Viewing error logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      id: Status
      properties:
        details:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
        code:
          format: int32
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
    IngestMessageResponse:
      description: >-
        Acknowledges that a message has been ingested into the specified HL7v2
        store.
      id: IngestMessageResponse
      properties:
        message:
          $ref: '#/components/schemas/Message'
          description: Created message resource.
        hl7Ack:
          description: HL7v2 ACK message.
          format: byte
          type: string
      type: object
    KeepExtensionsConfig:
      type: object
      properties: {}
      id: KeepExtensionsConfig
      description: >-
        The behaviour for handling FHIR extensions that aren't otherwise
        specified for de-identification. If provided, all extensions are
        preserved during de-identification by default. If unspecified, all
        extensions are removed during de-identification by default.
    RemoveField:
      properties: {}
      id: RemoveField
      description: Remove field.
      type: object
    AuditLogConfig:
      type: object
      id: AuditLogConfig
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      properties:
        logType:
          type: string
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          description: The log type that this config enables.
        exemptedMembers:
          items:
            type: string
          type: array
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
    EvaluateAnnotationStoreRequest:
      properties:
        bigqueryDestination:
          description: >-
            The BigQuery table where the server writes the output.
            BigQueryDestination requires the `roles/bigquery.dataEditor` and
            `roles/bigquery.jobUser` Cloud IAM roles.
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
        infoTypeConfig:
          $ref: '#/components/schemas/InfoTypeConfig'
        goldenStore:
          description: >-
            The Annotation store to use as ground truth, in the format of
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
          type: string
        goldenInfoTypeMapping:
          description: >-
            Optional. Similar to `eval_info_type_mapping`, infoType mapping for
            `golden_store`.
          type: object
          additionalProperties:
            type: string
        evalInfoTypeMapping:
          type: object
          description: >-
            Optional. InfoType mapping for `eval_store`. Different resources can
            map to the same infoType. For example, `PERSON_NAME`, `PERSON`,
            `NAME`, and `HUMAN` are different. To map all of these into a single
            infoType (such as `PERSON_NAME`), specify the following mapping: ```
            info_type_mapping["PERSON"] = "PERSON_NAME"
            info_type_mapping["NAME"] = "PERSON_NAME" info_type_mapping["HUMAN"]
            = "PERSON_NAME" ``` Unmentioned infoTypes, such as `DATE`, are
            treated as identity mapping. For example: ```
            info_type_mapping["DATE"] = "DATE" ``` InfoTypes are
            case-insensitive.
          additionalProperties:
            type: string
      id: EvaluateAnnotationStoreRequest
      description: >-
        Request to evaluate an Annotation store against a ground truth
        [Annotation store].
      type: object
    ExportAnnotationsResponse:
      id: ExportAnnotationsResponse
      type: object
      properties: {}
      description: >-
        Response for successful annotation export operations. This structure is
        included in response upon operation completion.
    Options:
      description: Specifies additional options to apply to the base profile.
      type: object
      id: Options
      properties:
        primaryIds:
          enum:
            - PRIMARY_IDS_OPTION_UNSPECIFIED
            - KEEP
            - REGEN
          enumDescriptions:
            - >-
              No value provided. Default to the behavior specified by the base
              profile.
            - Keep primary IDs.
            - Regenerate primary IDs.
          type: string
          description: >-
            Set `Action` for [`StudyInstanceUID`, `SeriesInstanceUID`,
            `SOPInstanceUID`, and
            `MediaStorageSOPInstanceUID`](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html).
        cleanDescriptors:
          description: Set Clean Descriptors Option.
          $ref: '#/components/schemas/CleanDescriptorsOption'
        cleanImage:
          $ref: '#/components/schemas/ImageConfig'
          description: >-
            Apply `Action.clean_image` to
            [`PixelData`](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part06/chapter_6.html)
            as configured.
    SearchResourcesRequest:
      properties:
        resourceType:
          description: >-
            The FHIR resource type to search, such as Patient or Observation.
            For a complete list, see the FHIR Resource Index
            ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html),
            [STU3](https://hl7.org/implement/standards/fhir/STU3/resourcelist.html),
            [R4](https://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
          type: string
      id: SearchResourcesRequest
      type: object
      description: Request to search the resources in the specified FHIR store.
    KeepField:
      properties: {}
      type: object
      description: Keep field unchanged.
      id: KeepField
    GcsSource:
      properties:
        uri:
          type: string
          description: >-
            Points to a Cloud Storage URI containing file(s) to import. The URI
            must be in the following format: `gs://{bucket_id}/{object_id}`. The
            URI can include wildcards in `object_id` and thus identify multiple
            files. Supported wildcards: * `*` to match 0 or more non-separator
            characters * `**` to match 0 or more characters (including
            separators). Must be used at the end of a path and with no other
            wildcards in the path. Can also be used with a file extension (such
            as .ndjson), which imports all files with the extension in the
            specified directory and its sub-directories. For example,
            `gs://my-bucket/my-directory/**.ndjson` imports all files with
            `.ndjson` extensions in `my-directory/` and its sub-directories. *
            `?` to match 1 character Files matching the wildcard are expected to
            contain content only, no metadata.
      description: Specifies the configuration for importing data from Cloud Storage.
      type: object
      id: GcsSource
    Field:
      type: object
      description: A (sub) field of a type.
      properties:
        minOccurs:
          format: int32
          type: integer
          description: The minimum number of times this field must be present/repeated.
        maxOccurs:
          format: int32
          type: integer
          description: >-
            The maximum number of times this field can be repeated. 0 or -1
            means unbounded.
        type:
          type: string
          description: >-
            The type of this field. A Type with this name must be defined in an
            Hl7TypesConfig.
        table:
          type: string
          description: >-
            The HL7v2 table this field refers to. For example, PID-15 (Patient's
            Primary Language) usually refers to table "0296".
        name:
          description: The name of the field. For example, "PID-1" or just "1".
          type: string
      id: Field
    RegenUidTag:
      properties: {}
      id: RegenUidTag
      description: >-
        Replace UID with a new generated UID. Supported [Value Representation]
        (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1):
        UI
      type: object
    ListOperationsResponse:
      id: ListOperationsResponse
      properties:
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
        nextPageToken:
          description: The standard List next-page token.
          type: string
      type: object
      description: The response message for Operations.ListOperations.
    ImportMessagesResponse:
      type: object
      description: >-
        Final response of importing messages. This structure is included in the
        response to describe the detailed outcome. It is only included when the
        operation finishes successfully.
      properties: {}
      id: ImportMessagesResponse
    FhirConfig:
      id: FhirConfig
      type: object
      properties:
        defaultKeepExtensions:
          description: >-
            The behaviour for handling FHIR extensions that aren't otherwise
            specified for de-identification. If true, all extensions are
            preserved during de-identification by default. If false or
            unspecified, all extensions are removed during de-identification by
            default.
          type: boolean
        fieldMetadataList:
          description: >-
            Specifies FHIR paths to match and how to transform them. Any field
            that is not matched by a FieldMetadata is passed through to the
            output dataset unmodified. All extensions will be processed
            according to `default_keep_extensions`. If a field can be matched by
            more than one FieldMetadata, the first FieldMetadata.Action is
            applied.
          items:
            $ref: '#/components/schemas/FieldMetadata'
          type: array
      description: Specifies how to handle de-identification of a FHIR store.
    ExportResourcesRequest:
      type: object
      properties:
        bigqueryDestination:
          $ref: >-
            #/components/schemas/GoogleCloudHealthcareV1beta1FhirBigQueryDestination
          description: >-
            The BigQuery output destination. The Cloud Healthcare Service Agent
            requires two IAM roles on the BigQuery location:
            `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`. The output
            is one BigQuery table per resource type. Unlike when setting
            `BigQueryDestination` for `StreamConfig`, `ExportResources` does not
            create BigQuery views.
        _since:
          description: >-
            If provided, only resources updated after this time are exported.
            The time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example,
            `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time
            must be specified to the second and include a time zone.
          type: string
        _type:
          description: >-
            String of comma-delimited FHIR resource types. If provided, only
            resources of the specified resource type(s) are exported.
          type: string
        gcsDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1FhirGcsDestination'
          description: >-
            The Cloud Storage output destination. The Cloud Healthcare Service
            Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on
            the Cloud Storage location. The exported outputs are organized by
            FHIR resource types. The server creates one object per resource
            type. Each object contains newline delimited JSON, and each line is
            a FHIR resource.
      description: Request to export resources.
      id: ExportResourcesRequest
    DicomTagConfig:
      properties:
        profileType:
          type: string
          enum:
            - PROFILE_TYPE_UNSPECIFIED
            - MINIMAL_KEEP_LIST_PROFILE
            - ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE
            - KEEP_ALL_PROFILE
            - DEIDENTIFY_TAG_CONTENTS
          enumDescriptions:
            - >-
              No profile provided. Same as
              `ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE`.
            - Keep only the tags required to produce valid DICOM objects.
            - >-
              Remove tags based on DICOM Standard's [Attribute Confidentiality
              Basic Profile (DICOM Standard Edition
              2018e)](http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html).
            - Keep all tags.
            - >-
              Inspect tag contents and replace sensitive text. The process can
              be configured using the TextConfig. Applies to all tags with the
              following [Value Representations]
              (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1):
              AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS
          description: Base profile type for handling DICOM tags.
        options:
          description: >-
            Specifies additional options to apply, overriding the base
            `profile`.
          $ref: '#/components/schemas/Options'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
          description: >-
            Specifies custom tag selections and `Actions` to apply to them.
            Overrides `options` and `profile`. Conflicting `Actions` are applied
            in the order given.
      description: >-
        Specifies the parameters needed for the de-identification of DICOM
        stores.
      type: object
      id: DicomTagConfig
    DeidentifyOperationMetadata:
      description: Details about the work the de-identify operation performed.
      id: DeidentifyOperationMetadata
      type: object
      properties:
        fhirOutput:
          $ref: '#/components/schemas/FhirOutput'
          description: Details about the FHIR store to write the output to.
    Entity:
      type: object
      id: Entity
      properties:
        preferredTerm:
          type: string
          description: >-
            preferred_term is the preferred term for this concept. For example,
            "Acetaminophen". For ad hoc entities formed by normalization, this
            is the most popular unnormalized string.
        vocabularyCodes:
          items:
            type: string
          type: array
          description: >-
            Vocabulary codes are first-class fields and differentiated from the
            concept unique identifier (entity_id). vocabulary_codes contains the
            representation of this concept in particular vocabularies, such as
            ICD-10, SNOMED-CT and RxNORM. These are prefixed by the name of the
            vocabulary, followed by the unique code within that vocabulary. For
            example, "RXNORM/A10334543".
        entityId:
          description: >-
            entity_id is a first class field entity_id uniquely identifies this
            concept and its meta-vocabulary. For example, "UMLS/C0000970".
          type: string
      description: The candidate entities that an entity mention could link to.
    Type:
      description: A type definition for some HL7v2 type (incl. Segments and Datatypes).
      type: object
      id: Type
      properties:
        name:
          type: string
          description: >-
            The name of this type. This would be the segment or datatype name.
            For example, "PID" or "XPN".
        primitive:
          enum:
            - PRIMITIVE_UNSPECIFIED
            - STRING
            - VARIES
            - UNESCAPED_STRING
          type: string
          enumDescriptions:
            - Not a primitive.
            - String primitive.
            - Element that can have unschematized children.
            - Like STRING, but all delimiters below this element are ignored.
          description: >-
            If this is a primitive type then this field is the type of the
            primitive For example, STRING. Leave unspecified for composite
            types.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
          description: The (sub) fields this type has (if not primitive).
    TagFilterList:
      properties:
        tags:
          items:
            type: string
          type: array
          description: >-
            Tags to be filtered. Tags must be DICOM Data Elements, File Meta
            Elements, or Directory Structuring Elements, as defined at:
            http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,.
            They may be provided by "Keyword" or "Tag". For example,
            "PatientID", "00100010".
      id: TagFilterList
      type: object
      description: List of tags to be filtered.
    RevokeConsentRequest:
      type: object
      properties:
        consentArtifact:
          type: string
          description: >-
            Optional. The resource name of the Consent artifact that contains
            proof of the user's revocation of the Consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
      id: RevokeConsentRequest
      description: >-
        Revokes the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REVOKED`. If the latest revision of
        the given Consent is in the `REVOKED` state, no new revision is
        committed.
    Resources:
      description: A list of FHIR resources.
      id: Resources
      type: object
      properties:
        resources:
          type: array
          items:
            type: string
          description: List of resources IDs. For example, "Patient/1234".
    GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination:
      id: GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination
      properties:
        tableUri:
          type: string
          description: >-
            BigQuery URI to a table, up to 2000 characters long, must be of the
            form bq://projectId.bqDatasetId.tableId.
        force:
          description: >-
            Use `write_disposition` instead. If `write_disposition` is
            specified, this parameter is ignored. force=false is equivalent to
            write_disposition=WRITE_EMPTY and force=true is equivalent to
            write_disposition=WRITE_TRUNCATE.
          type: boolean
        writeDisposition:
          description: >-
            Determines if existing data in the destination dataset is
            overwritten, appended to, or not written if the tables contain data.
            If a write_disposition is specified, the `force` parameter is
            ignored.
          enum:
            - WRITE_DISPOSITION_UNSPECIFIED
            - WRITE_EMPTY
            - WRITE_TRUNCATE
            - WRITE_APPEND
          enumDescriptions:
            - Default behavior is the same as WRITE_EMPTY.
            - Only export data if the destination table is empty.
            - Erase all existing data in a table before writing the instances.
            - Append data to the existing table.
          type: string
        schemaType:
          type: string
          description: Specifies the schema format to export.
          enumDescriptions:
            - Same as SIMPLE.
            - A flatterned version of Annotation.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - SIMPLE
      type: object
      description: The BigQuery table for export.
    DeidentifyDicomStoreRequest:
      description: Creates a new DICOM store with sensitive information de-identified.
      properties:
        config:
          description: >-
            Deidentify configuration. Only one of `config` and `gcs_config_uri`
            can be specified.
          $ref: '#/components/schemas/DeidentifyConfig'
        filterConfig:
          description: Filter configuration.
          $ref: '#/components/schemas/DicomFilterConfig'
        destinationStore:
          description: >-
            The name of the DICOM store to create and write the redacted data
            to. For example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
            * The destination dataset must exist. * The source dataset and
            destination dataset must both reside in the same location.
            De-identifying data across multiple locations is not supported. *
            The destination DICOM store must not exist. * The caller must have
            the necessary permissions to create the destination DICOM store.
          type: string
        gcsConfigUri:
          type: string
          description: >-
            Cloud Storage location to read the JSON
            cloud.healthcare.deidentify.DeidentifyConfig from, overriding the
            default config. Must be of the form
            `gs://{bucket_id}/path/to/object`. The Cloud Storage location must
            grant the Cloud IAM role `roles/storage.objectViewer` to the
            project's Cloud Healthcare Service Agent service account. Only one
            of `config` and `gcs_config_uri` can be specified.
      id: DeidentifyDicomStoreRequest
      type: object
    FilterList:
      description: List of infoTypes to be filtered.
      properties:
        infoTypes:
          items:
            type: string
          type: array
          description: >-
            These infoTypes are based on after the `eval_info_type_mapping` and
            `golden_info_type_mapping`.
      type: object
      id: FilterList
    Policy:
      type: object
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      properties:
        etag:
          type: string
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          format: byte
        auditConfigs:
          type: array
          description: Specifies cloud audit logging configuration for this policy.
          items:
            $ref: '#/components/schemas/AuditConfig'
        bindings:
          type: array
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          items:
            $ref: '#/components/schemas/Binding'
        version:
          format: int32
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
    GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata:
      type: object
      id: GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata
      description: >-
        Specifies the FHIR paths to match and how to handle the
        de-identification of matching fields.
      properties:
        characterMaskField:
          $ref: '#/components/schemas/CharacterMaskField'
          description: >-
            Replace the field's value with a masking character. Supported
            [types](https://www.hl7.org/fhir/datatypes.html): Code, Decimal,
            HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml
        cryptoHashField:
          description: >-
            Replace field value with a hash of that value. Supported
            [types](https://www.hl7.org/fhir/datatypes.html): Code, Decimal,
            HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml
          $ref: '#/components/schemas/CryptoHashField'
        paths:
          items:
            type: string
          type: array
          description: >-
            List of paths to FHIR fields to redact. Each path is a
            period-separated list where each component is either a field name or
            FHIR type name. All types begin with an upper case letter. For
            example, the resource field "Patient.Address.city", which uses a
            string type, can be matched by "Patient.Address.String". Path also
            supports partialkk matching. For example, "Patient.Address.city" can
            be matched by "Address.city" (Patient omitted). Partial matching and
            type matching can be combined, for example "Patient.Address.city"
            can be matched by "Address.String". For "choice" types (those
            defined in the FHIR spec with the form: field[x]), use two separate
            components. For example, "deceasedAge.unit" is matched by
            "Deceased.Age.unit". Supported
            [types](https://www.hl7.org/fhir/datatypes.html) are:
            AdministrativeGenderCode, Base64Binary, Boolean, Code, Date,
            DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode,
            Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
            The sub-type for HumanName (for example HumanName.given,
            HumanName.family) can be omitted.
        dateShiftField:
          $ref: '#/components/schemas/DateShiftField'
          description: >-
            Shift the date by a randomized number of days. See [date
            shifting](https://cloud.google.com/dlp/docs/concepts-date-shifting)
            for more information. Supported
            [types](https://www.hl7.org/fhir/datatypes.html): Date, DateTime
        cleanTextField:
          $ref: '#/components/schemas/CleanTextField'
          description: >-
            Inspect the field's text and transform sensitive text. Configure
            using `TextConfig`. Supported
            [types](https://www.hl7.org/fhir/datatypes.html): Code, Date,
            DateTime, Decimal, HumanName, Id, LanguageCode, Markdown, Oid,
            String, Uri, Uuid, Xhtml
        removeField:
          description: Remove the field.
          $ref: '#/components/schemas/RemoveField'
        keepField:
          description: Keep the field unchanged.
          $ref: '#/components/schemas/KeepField'
    ActivateConsentRequest:
      id: ActivateConsentRequest
      description: >-
        Activates the latest revision of the specified Consent by committing a
        new revision with `state` updated to `ACTIVE`. If the latest revision of
        the given Consent is in the `ACTIVE` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the given consent is in the `REJECTED` or `REVOKED` state.
      type: object
      properties:
        consentArtifact:
          description: >-
            Required. The resource name of the Consent artifact that contains
            documentation of the user's consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
            If the draft Consent had a Consent artifact, this Consent artifact
            overwrites it.
          type: string
        expireTime:
          type: string
          format: google-datetime
          description: Timestamp in UTC of when this Consent is considered expired.
        ttl:
          format: google-duration
          type: string
          description: The time to live for this Consent from when it is marked as active.
    FhirFieldConfig:
      type: object
      id: FhirFieldConfig
      properties:
        options:
          description: Specifies additional options, overriding the base `profile`.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1beta1DeidentifyOptions'
        profileType:
          type: string
          description: Base profile type for handling FHIR fields.
          enumDescriptions:
            - No profile provided. Same as `BASIC`.
            - '`Keep` all fields.'
            - >-
              Transforms known HIPAA 18 fields and cleans known unstructured
              text fields.
            - >-
              Cleans all supported tags. Applies to types: Code, Date, DateTime,
              Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String, Uri,
              Uuid, Xhtml
          enum:
            - PROFILE_TYPE_UNSPECIFIED
            - KEEP_ALL
            - BASIC
            - CLEAN_ALL
        fieldMetadataList:
          type: array
          items:
            $ref: >-
              #/components/schemas/GoogleCloudHealthcareV1beta1DeidentifyFieldMetadata
          description: >-
            Specifies FHIR paths to match and how to transform them. Any field
            that is not matched by a `FieldMetadata` is passed through to the
            output dataset unmodified. All extensions will be processed
            according to `keep_extensions`. If a field can be matched by more
            than one `FieldMetadata`, the first `FieldMetadata.Action` is
            applied. Overrides `options` and `profile`.
      description: Specifies how to handle the de-identification of a FHIR store.
    CharacterMaskConfig:
      type: object
      description: Mask a string by replacing its characters with a fixed character.
      id: CharacterMaskConfig
      properties:
        maskingCharacter:
          description: >-
            Character to mask the sensitive values. If not supplied, defaults to
            "*".
          type: string
    AnalyzeEntitiesRequest:
      id: AnalyzeEntitiesRequest
      description: The request to analyze healthcare entities in a document.
      properties:
        documentContent:
          type: string
          description: document_content is a document to be annotated.
        licensedVocabularies:
          type: array
          items:
            enumDescriptions:
              - No licensed vocabulary specified.
              - ICD-10-CM vocabulary
              - SNOMED CT (US version) vocabulary
            type: string
            enum:
              - LICENSED_VOCABULARY_UNSPECIFIED
              - ICD10CM
              - SNOMEDCT_US
          description: >-
            A list of licensed vocabularies to use in the request, in addition
            to the default unlicensed vocabularies.
      type: object
    LinkedEntity:
      properties:
        entityId:
          type: string
          description: >-
            entity_id is a concept unique identifier. These are prefixed by a
            string that identifies the entity coding system, followed by the
            unique identifier within that system. For example, "UMLS/C0000970".
            This also supports ad hoc entities, which are formed by normalizing
            entity mention content.
      type: object
      id: LinkedEntity
      description: >-
        EntityMentions can be linked to multiple entities using a LinkedEntity
        message lets us add other fields, e.g. confidence.
    GoogleCloudHealthcareV1beta1AnnotationGcsSource:
      description: Specifies the configuration for importing data from Cloud Storage.
      id: GoogleCloudHealthcareV1beta1AnnotationGcsSource
      properties:
        uri:
          description: >-
            Points to a Cloud Storage URI containing file(s) with content only.
            The URI must be in the following format:
            `gs://{bucket_id}/{object_id}`. The URI can include wildcards in
            `object_id` and thus identify multiple files. Supported wildcards:
            '*' to match 0 or more non-separator characters '**' to match 0 or
            more characters (including separators). Must be used at the end of a
            path and with no other wildcards in the path. Can also be used with
            a file extension (such as .dcm), which imports all files with the
            extension in the specified directory and its sub-directories. For
            example, `gs://my-bucket/my-directory/**.json` imports all files
            with .json extensions in `my-directory/` and its sub-directories.
            '?' to match 1 character All other URI formats are invalid. Files
            matching the wildcard are expected to contain content only, no
            metadata.
          type: string
      type: object
    GoogleCloudHealthcareV1beta1DicomGcsSource:
      description: Specifies the configuration for importing data from Cloud Storage.
      id: GoogleCloudHealthcareV1beta1DicomGcsSource
      type: object
      properties:
        uri:
          description: >-
            Points to a Cloud Storage URI containing file(s) with content only.
            The URI must be in the following format:
            `gs://{bucket_id}/{object_id}`. The URI can include wildcards in
            `object_id` and thus identify multiple files. Supported wildcards: *
            '*' to match 0 or more non-separator characters * '**' to match 0 or
            more characters (including separators). Must be used at the end of a
            path and with no other wildcards in the path. Can also be used with
            a file extension (such as .dcm), which imports all files with the
            extension in the specified directory and its sub-directories. For
            example, `gs://my-bucket/my-directory/**.dcm` imports all files with
            .dcm extensions in `my-directory/` and its sub-directories. * '?' to
            match 1 character. All other URI formats are invalid. Files matching
            the wildcard are expected to contain content only, no metadata.
          type: string
    FhirOutput:
      id: FhirOutput
      type: object
      description: Details about the FHIR store to write the output to.
      properties:
        fhirStore:
          type: string
          description: >-
            Name of the output FHIR store, which must already exist. You must
            grant the healthcare.fhirResources.update permission on the
            destination store to your project's **Cloud Healthcare Service
            Agent** [service
            account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent).
            The destination store must set `enable_update_create` to true. The
            destination store must use FHIR version R4. Writing these resources
            will consume FHIR operations quota from the project containing the
            source data. De-identify operation metadata is only generated for
            DICOM de-identification operations.
    DeidentifyConfig:
      description: >-
        Configures de-id options specific to different types of content. Each
        submessage customizes the handling of an
        https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are
        applied in a nested manner at runtime.
      id: DeidentifyConfig
      type: object
      properties:
        operationMetadata:
          $ref: '#/components/schemas/DeidentifyOperationMetadata'
          description: Details about the work the de-identify operation performed.
        image:
          description: >-
            Configures the de-identification of image pixels in the
            source_dataset. Deprecated. Use
            `dicom_tag_config.options.clean_image` instead.
          $ref: '#/components/schemas/ImageConfig'
        dicom:
          description: >-
            Configures de-id of application/DICOM content. Deprecated. Use
            `dicom_tag_config` instead.
          $ref: '#/components/schemas/DicomConfig'
        text:
          $ref: '#/components/schemas/TextConfig'
          description: >-
            Configures de-identification of text wherever it is found in the
            source_dataset.
        fhirFieldConfig:
          description: Configures de-id of application/FHIR content.
          $ref: '#/components/schemas/FhirFieldConfig'
        annotation:
          description: >-
            Configures how annotations, meaning that the location and infoType
            of sensitive information findings, are created during
            de-identification. If unspecified, no annotations are created.
          $ref: '#/components/schemas/AnnotationConfig'
        dicomTagConfig:
          description: Configures de-id of application/DICOM content.
          $ref: '#/components/schemas/DicomTagConfig'
        fhir:
          $ref: '#/components/schemas/FhirConfig'
          description: >-
            Configures de-id of application/FHIR content. Deprecated. Use
            `fhir_field_config` instead.
        useRegionalDataProcessing:
          type: boolean
          description: >-
            Ensures in-flight data remains in the region of origin during
            de-identification. Using this option results in a significant
            reduction of throughput, and is not compatible with `LOCATION` or
            `ORGANIZATION_NAME` infoTypes. If the deprecated
            [`DicomConfig`](google.cloud.healthcare.v1beta1.deidentify.DeidentifyConfig.dicom_config)
            or
            [`FhirConfig`](google.cloud.healthcare.v1beta1.deidentify.DeidentifyConfig.fhir_config)
            are used, then `LOCATION` must be excluded within `TextConfig`, and
            must also be excluded within `ImageConfig` if image redaction is
            required.
    DeidentifySummary:
      id: DeidentifySummary
      type: object
      properties: {}
      description: Contains a detailed summary of the Deidentify operation.
    CleanTextTag:
      properties: {}
      description: >-
        Inspect text and transform sensitive text. Configurable using
        `TextConfig`. Supported [Value Representations]
        (http://dicom.nema.org/medical/dicom/2018e/output/chtml/part05/sect_6.2.html#table_6.2-1):
        AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS
      id: CleanTextTag
      type: object
    GoogleCloudHealthcareV1beta1ConsentPolicy:
      properties:
        resourceAttributes:
          description: >-
            The resources that this policy applies to. A resource is a match if
            it matches all the attributes listed here. If empty, this policy
            applies to all User data mappings for the given user.
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        authorizationRule:
          $ref: '#/components/schemas/Expr'
          description: >-
            Required. The request conditions to meet to grant access. In
            addition to any supported comparison operators, authorization rules
            may have `IN` operator as well as at most 10 logical operators that
            are limited to `AND` (`&&`), `OR` (`||`).
      description: >-
        Represents a user's consent in terms of the resources that can be
        accessed and under what conditions.
      id: GoogleCloudHealthcareV1beta1ConsentPolicy
      type: object
    ListUserDataMappingsResponse:
      type: object
      id: ListUserDataMappingsResponse
      properties:
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
        userDataMappings:
          description: >-
            The returned User data mappings. The maximum number of User data
            mappings returned is determined by the value of page_size in the
            ListUserDataMappingsRequest.
          type: array
          items:
            $ref: '#/components/schemas/UserDataMapping'
    DicomConfig:
      id: DicomConfig
      description: Specifies the parameters needed for de-identification of DICOM stores.
      properties:
        keepList:
          $ref: '#/components/schemas/TagFilterList'
          description: List of tags to keep. Remove all other tags.
        skipIdRedaction:
          description: >-
            If true, skip replacing StudyInstanceUID, SeriesInstanceUID,
            SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them
            untouched. The Cloud Healthcare API regenerates these UIDs by
            default based on the DICOM Standard's reasoning: "Whilst these UIDs
            cannot be mapped directly to an individual out of context, given
            access to the original images, or to a database of the original
            images containing the UIDs, it would be possible to recover the
            individual's identity."
            http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
          type: boolean
        filterProfile:
          enum:
            - TAG_FILTER_PROFILE_UNSPECIFIED
            - MINIMAL_KEEP_LIST_PROFILE
            - ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE
            - KEEP_ALL_PROFILE
            - DEIDENTIFY_TAG_CONTENTS
          enumDescriptions:
            - No tag filtration profile provided. Same as KEEP_ALL_PROFILE.
            - Keep only the tags required to produce valid DICOM objects.
            - >-
              Remove tags based on DICOM Standard's Attribute Confidentiality
              Basic Profile (DICOM Standard Edition 2018e)
              http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html.
            - Keep all tags.
            - >-
              Inspect within tag contents and replace sensitive text. The
              process can be configured using the TextConfig. Applies to all
              tags with the following Value Representation names: AE, LO, LT,
              PN, SH, ST, UC, UT, DA, DT, AS
          type: string
          description: Tag filtering profile that determines which tags to keep/remove.
        removeList:
          description: List of tags to remove. Keep all other tags.
          $ref: '#/components/schemas/TagFilterList'
      type: object
    GoogleCloudHealthcareV1beta1DeidentifyOptions:
      properties:
        contextualDeid:
          $ref: '#/components/schemas/ContextualDeidConfig'
          description: Configure contextual de-id.
        cryptoHashConfig:
          description: Crypo hash config for `CharacterMaskField` `FieldMetadatas`.
          $ref: '#/components/schemas/CryptoHashConfig'
        dateShiftConfig:
          $ref: '#/components/schemas/DateShiftConfig'
          description: Date shifting config for `CharacterMaskField` `FieldMetadatas`.
        keepExtensions:
          $ref: '#/components/schemas/KeepExtensionsConfig'
          description: Configure keeping extensions by default.
        characterMaskConfig:
          $ref: '#/components/schemas/CharacterMaskConfig'
          description: Character mask config for `CharacterMaskField` `FieldMetadatas`.
      description: Specifies additional options to apply to the base `profile`.
      type: object
      id: GoogleCloudHealthcareV1beta1DeidentifyOptions
    ResetTag:
      properties: {}
      description: Reset tag to a placeholder value.
      id: ResetTag
      type: object
    SchemaPackage:
      id: SchemaPackage
      properties:
        types:
          description: >-
            Schema type definitions that are layered based on their
            VersionSources that match the incoming message. Type definitions
            present in higher indices override those in lower indices with the
            same type name if their VersionSources all match an incoming
            message.
          items:
            $ref: '#/components/schemas/Hl7TypesConfig'
          type: array
        ignoreMinOccurs:
          type: boolean
          description: >-
            Flag to ignore all min_occurs restrictions in the schema. This means
            that incoming messages can omit any group, segment, field,
            component, or subcomponent.
        schemas:
          items:
            $ref: '#/components/schemas/Hl7SchemaConfig'
          type: array
          description: >-
            Schema configs that are layered based on their VersionSources that
            match the incoming message. Schema configs present in higher indices
            override those in lower indices with the same message type and
            trigger event if their VersionSources all match an incoming message.
        unexpectedSegmentHandling:
          enumDescriptions:
            - Unspecified handling mode, equivalent to FAIL.
            - Unexpected segments fail to parse and return an error.
            - Unexpected segments do not fail, but are omitted from the output.
            - >-
              Unexpected segments do not fail, but are parsed in place and added
              to the current group. If a segment has a type definition, it is
              used, otherwise it is parsed as VARIES.
          enum:
            - UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED
            - FAIL
            - SKIP
            - PARSE
          type: string
          description: >-
            Determines how unexpected segments (segments not matched to the
            schema) are handled.
        schematizedParsingType:
          description: Determines how messages that fail to parse are handled.
          type: string
          enum:
            - SCHEMATIZED_PARSING_TYPE_UNSPECIFIED
            - SOFT_FAIL
            - HARD_FAIL
          enumDescriptions:
            - Unspecified schematized parsing type, equivalent to `SOFT_FAIL`.
            - >-
              Messages that fail to parse are still stored and ACKed but a
              parser error is stored in place of the schematized data.
            - >-
              Messages that fail to parse are rejected from ingestion/insertion
              and return an error code.
      description: A schema package contains a set of schemas and type definitions.
      type: object
  parameters:
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1beta1/projects/{projectsId}/locations/{locationsId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Gets information about a location.
      operationId: healthcare.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: healthcare.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets:
    parameters: *ref_1
    post:
      description: >-
        Creates a new health dataset. Results are returned through the Operation
        interface which returns either an `Operation.response` which contains a
        Dataset or `Operation.error`. The metadata field type is
        OperationMetadata.
      operationId: healthcare.projects.locations.datasets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: datasetId
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-verb: insert
    get:
      description: Lists the health datasets in the current project.
      operationId: healthcare.projects.locations.datasets.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:
    parameters: *ref_1
    get:
      description: Gets any metadata associated with a dataset.
      operationId: healthcare.projects.locations.datasets.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-verb: select
    patch:
      description: Updates dataset metadata.
      operationId: healthcare.projects.locations.datasets.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes the specified health dataset and all data contained in the
        dataset. Deleting a dataset does not affect the sources from which the
        dataset was imported (if any).
      operationId: healthcare.projects.locations.datasets.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: datasets_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:deidentify:
    parameters: *ref_1
    post:
      description: >-
        Creates a new dataset containing de-identified data from the source
        dataset. The metadata field type is OperationMetadata. If the request is
        successful, the response field type is DeidentifySummary. The LRO result
        may still be successful if de-identification fails for some resources.
        The new de-identified dataset will not contain these failed resources.
        The number of resources processed are tracked in Operation.metadata.
        Error details are logged to Cloud Logging. For more information, see
        [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
      operationId: healthcare.projects.locations.datasets.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyDatasetRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations/{annotationsId}:
    parameters: *ref_1
    get:
      description: Gets an Annotation.
      operationId: healthcare.projects.locations.datasets.annotationStores.annotations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
        - in: path
          name: annotationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotations
      x-stackQL-verb: select
    delete:
      description: Deletes an Annotation or returns NOT_FOUND if it does not exist.
      operationId: >-
        healthcare.projects.locations.datasets.annotationStores.annotations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
        - in: path
          name: annotationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotations
      x-stackQL-verb: delete
    patch:
      description: Updates the Annotation.
      operationId: >-
        healthcare.projects.locations.datasets.annotationStores.annotations.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
        - in: path
          name: annotationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: annotations
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations:
    parameters: *ref_1
    post:
      description: >-
        Creates a new Annotation record. It is valid to create Annotation
        objects for the same source more than once since a unique ID is assigned
        to each record by this service.
      operationId: >-
        healthcare.projects.locations.datasets.annotationStores.annotations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Annotation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotations
      x-stackQL-verb: insert
    get:
      description: >-
        Lists the Annotations in the given Annotation store for a source
        resource.
      operationId: healthcare.projects.locations.datasets.annotationStores.annotations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnnotationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: annotations
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the specified Annotation store or returns NOT_FOUND if it does not
        exist.
      operationId: healthcare.projects.locations.datasets.annotationStores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: select
    patch:
      description: Updates the specified Annotation store.
      operationId: healthcare.projects.locations.datasets.annotationStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes the specified Annotation store and removes all annotations that
        are contained within it.
      operationId: healthcare.projects.locations.datasets.annotationStores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores:
    parameters: *ref_1
    get:
      description: Lists the Annotation stores in the given dataset for a source store.
      operationId: healthcare.projects.locations.datasets.annotationStores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnnotationStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: select
    post:
      description: Creates a new Annotation store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.annotationStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: annotationStoreId
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: >-
        healthcare.projects.locations.datasets.annotationStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotation_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.annotationStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotation_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:import:
    parameters: *ref_1
    post:
      description: >-
        Import Annotations to the Annotation store by loading data from the
        specified sources. If the request is successful, a detailed response is
        returned as of type ImportAnnotationsResponse, contained in the response
        field when the operation finishes. The metadata field type is
        OperationMetadata. Errors are logged to Cloud Logging (see [Viewing
        error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
      operationId: healthcare.projects.locations.datasets.annotationStores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAnnotationsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:export:
    parameters: *ref_1
    post:
      description: >-
        Export Annotations from the Annotation store. If the request is
        successful, a detailed response is returned of type
        ExportAnnotationsResponse, contained in the response field when the
        operation finishes. The metadata field type is OperationMetadata. Errors
        are logged to Cloud Logging (see [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
      operationId: healthcare.projects.locations.datasets.annotationStores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportAnnotationsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.annotationStores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: annotation_stores_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:evaluate:
    parameters: *ref_1
    post:
      description: >-
        Evaluate an Annotation store against a ground truth Annotation store.
        When the operation finishes successfully, a detailed response is
        returned of type EvaluateAnnotationStoreResponse, contained in the
        response. The metadata field type is OperationMetadata. Errors are
        logged to Cloud Logging (see [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
      operationId: healthcare.projects.locations.datasets.annotationStores.evaluate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateAnnotationStoreRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: annotationStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: annotation_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: healthcare.projects.locations.datasets.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: healthcare.projects.locations.datasets.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: healthcare.projects.locations.datasets.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings:
    parameters: *ref_1
    get:
      description: Lists the User data mappings in the specified consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserDataMappingsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-verb: select
    post:
      description: Creates a new User data mapping in the parent consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataMapping'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:archive:
    parameters: *ref_1
    post:
      description: Archives the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.archive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveUserDataMappingRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveUserDataMappingResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:
    parameters: *ref_1
    delete:
      description: Deletes the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-verb: delete
    patch:
      description: Updates the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataMapping'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-verb: exec
    get:
      description: Gets the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:
    parameters: *ref_1
    patch:
      description: >-
        Updates the latest revision of the specified Consent by committing a new
        revision with the changes. A FAILED_PRECONDITION error occurs if the
        latest revision of the specified Consent is in the `REJECTED` or
        `REVOKED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: exec
    get:
      description: >-
        Gets the specified revision of a Consent, or the latest revision if
        `revision_id` is not specified in the resource name.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes the Consent and its revisions. To keep a record of the Consent
        but mark it inactive, see [RevokeConsent]. To delete a revision of a
        Consent, see [DeleteConsentRevision]. This operation does not delete the
        related Consent artifact.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:listRevisions:
    parameters: *ref_1
    get:
      description: >-
        Lists the revisions of the specified Consent in reverse chronological
        order.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consents.listRevisions
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentRevisionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: consents__revisions
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:activate:
    parameters: *ref_1
    post:
      description: >-
        Activates the latest revision of the specified Consent by committing a
        new revision with `state` updated to `ACTIVE`. If the latest revision of
        the specified Consent is in the `ACTIVE` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the specified consent is in the `REJECTED` or `REVOKED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.activate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateConsentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents:
    parameters: *ref_1
    get:
      description: >-
        Lists the Consent in the given consent store, returning each Consent's
        latest revision.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: select
    post:
      description: Creates a new Consent in the parent consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:revoke:
    parameters: *ref_1
    post:
      description: >-
        Revokes the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REVOKED`. If the latest revision of
        the specified Consent is in the `REVOKED` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the given consent is in `DRAFT` or `REJECTED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.revoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeConsentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:reject:
    parameters: *ref_1
    post:
      description: >-
        Rejects the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REJECTED`. If the latest revision of
        the specified Consent is in the `REJECTED` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the specified Consent is in the `ACTIVE` or `REVOKED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.reject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectConsentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:deleteRevision:
    parameters: *ref_1
    delete:
      description: >-
        Deletes the specified revision of a Consent. An INVALID_ARGUMENT error
        occurs if the specified revision is the latest revision.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consents.deleteRevision
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents__revision
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes the specified Consent artifact. Fails if the artifact is
        referenced by the latest revision of any Consent.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentArtifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_artifacts
      x-stackQL-verb: delete
    get:
      description: Gets the specified Consent artifact.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentArtifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_artifacts
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts:
    parameters: *ref_1
    post:
      description: Creates a new Consent artifact in the parent consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentArtifact'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_artifacts
      x-stackQL-verb: insert
    get:
      description: Lists the Consent artifacts in the specified consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: consent_artifacts
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}:
    parameters: *ref_1
    patch:
      description: Updates the specified Attribute definition.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDefinition'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-verb: exec
    get:
      description: Gets the specified Attribute definition.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes the specified Attribute definition. Fails if the Attribute
        definition is referenced by any User data mapping, or the latest
        revision of any Consent.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions:
    parameters: *ref_1
    get:
      description: Lists the Attribute definitions in the specified consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAttributeDefinitionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: attribute_definitions
      x-stackQL-verb: select
    post:
      description: Creates a new Attribute definition in the parent consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDefinition'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: attributeDefinitionId
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:
    parameters: *ref_1
    patch:
      description: Updates the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: exec
    get:
      description: Gets the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes the specified consent store and removes all the consent store's
        data.
      operationId: healthcare.projects.locations.datasets.consentStores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:checkDataAccess:
    parameters: *ref_1
    post:
      description: >-
        Checks if a particular data_id of a User data mapping in the specified
        consent store is consented for the specified use.
      operationId: healthcare.projects.locations.datasets.consentStores.checkDataAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckDataAccessRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDataAccessResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:evaluateUserConsents:
    parameters: *ref_1
    post:
      description: >-
        Evaluates the user's Consents for all matching User data mappings. Note:
        User data mappings are indexed asynchronously, which can cause a slight
        delay between the time mappings are created or updated and when they are
        included in EvaluateUserConsents results.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.evaluateUserConsents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateUserConsentsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateUserConsentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores:
    parameters: *ref_1
    get:
      description: Lists the consent stores in the specified dataset.
      operationId: healthcare.projects.locations.datasets.consentStores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: select
    post:
      description: >-
        Creates a new consent store in the parent dataset. Attempting to create
        a consent store with the same ID as an existing store fails with an
        ALREADY_EXISTS error.
      operationId: healthcare.projects.locations.datasets.consentStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: consentStoreId
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.consentStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:queryAccessibleData:
    parameters: *ref_1
    post:
      description: >-
        Queries all data_ids that are consented for a specified use in the given
        consent store and writes them to a specified destination. The returned
        Operation includes a progress counter for the number of User data
        mappings processed. If the request is successful, a detailed response is
        returned of type QueryAccessibleDataResponse, contained in the response
        field when the operation finishes. The metadata field type is
        OperationMetadata. Errors are logged to Cloud Logging (see [Viewing
        error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For
        example, the following sample log entry shows a `failed to evaluate
        consent policy` error that occurred during a QueryAccessibleData call to
        consent store
        `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
        ```json jsonPayload: { @type:
        "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry"
        error: { code: 9 message: "failed to evaluate consent policy" }
        resourceName:
        "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}"
        } logName:
        "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data"
        operation: { id:
        "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}"
        producer: "healthcare.googleapis.com/QueryAccessibleData" }
        receiveTimestamp: "TIMESTAMP" resource: { labels: { consent_store_id:
        "{consent_store_id}" dataset_id: "{dataset_id}" location:
        "{location_id}" project_id: "{project_id}" } type:
        "healthcare_consent_store" } severity: "ERROR" timestamp: "TIMESTAMP"
        ```
      operationId: healthcare.projects.locations.datasets.consentStores.queryAccessibleData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryAccessibleDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.consentStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.consentStores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: consent_stores_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:batchGet:
    parameters: *ref_1
    get:
      description: Gets multiple messages in the given HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.batchGet
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetMessagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: ids
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:
    parameters: *ref_1
    get:
      description: >-
        Lists all the messages in the given HL7v2 store with support for
        filtering. Note: HL7v2 messages are indexed asynchronously, so there
        might be a slight delay between the time a message is created and when
        it can be found through a filter.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: select
    post:
      description: >-
        Parses and stores an HL7v2 message. This method triggers an asynchronous
        notification to any Pub/Sub topic configured in
        Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the
        message. If an MLLP adapter is configured to listen to a Pub/Sub topic,
        the adapter transmits the message when a notification is received.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}:
    parameters: *ref_1
    patch:
      description: >-
        Update the message. The contents of the message in Message.data and data
        extracted from the contents such as Message.create_time can't be
        altered. Only the Message.labels field is allowed to be updated. The
        labels in the request are merged with the existing set of labels.
        Existing labels with the same keys are updated.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: exec
    get:
      description: Gets an HL7v2 message.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: select
    delete:
      description: Deletes an HL7v2 message.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:ingest:
    parameters: *ref_1
    post:
      description: >-
        Parses and stores an HL7v2 message. This method triggers an asynchronous
        notification to any Pub/Sub topic configured in
        Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the
        message. If an MLLP adapter is configured to listen to a Pub/Sub topic,
        the adapter transmits the message when a notification is received. If
        the method is successful, it generates a response containing an HL7v2
        acknowledgment (`ACK`) message. If the method encounters an error, it
        returns a negative acknowledgment (`NACK`) message. This behavior is
        suitable for replying to HL7v2 interface systems that expect these
        acknowledgments.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestMessageRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestMessageResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:
    parameters: *ref_1
    patch:
      description: Updates the HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hl7V2Store'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes the specified HL7v2 store and removes all messages that it
        contains.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-verb: delete
    get:
      description: Gets the specified HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores:
    parameters: *ref_1
    get:
      description: Lists the HL7v2 stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHl7V2StoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-verb: select
    post:
      description: Creates a new HL7v2 store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hl7V2Store'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: hl7V2StoreId
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-verb: insert
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:export:
    parameters: *ref_1
    post:
      description: >-
        Exports the messages to a destination. To filter messages to be
        exported, define a filter using the start and end time, relative to the
        message generation time (MSH.7). This API returns an Operation that can
        be used to track the status of the job by calling GetOperation.
        Immediate fatal errors appear in the error field. Otherwise, when the
        operation finishes, a detailed response of type ExportMessagesResponse
        is returned in the response field. The metadata field type for this
        operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportMessagesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: hl7_v2_stores_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:import:
    parameters: *ref_1
    post:
      description: >-
        Import messages to the HL7v2 store by loading data from the specified
        sources. This method is optimized to load large quantities of data using
        import semantics that ignore some HL7v2 store configuration options and
        are not suitable for all use cases. It is primarily intended to load
        data into an empty HL7v2 store that is not being used by other clients.
        An existing message will be overwritten if a duplicate message is
        imported. A duplicate message is a message with the same raw bytes as a
        message that already exists in this HL7v2 store. When a message is
        overwritten, its labels will also be overwritten. The import operation
        is idempotent unless the input data contains multiple valid messages
        with the same raw bytes but different labels. In that case, after the
        import completes, the store contains exactly one message with those raw
        bytes but there is no ordering guarantee on which version of the labels
        it has. The operation result counters do not count duplicated raw bytes
        as an error and count one success for each message in the input, which
        might result in a success count larger than the number of messages in
        the HL7v2 store. If some messages fail to import, for example due to
        parsing errors, successfully imported messages are not rolled back. This
        method returns an Operation that can be used to track the status of the
        import by calling GetOperation. Immediate fatal errors appear in the
        error field, errors are also logged to Cloud Logging (see [Viewing error
        logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a response of type
        ImportMessagesResponse is returned in the response field. The metadata
        field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessagesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:export:
    parameters: *ref_1
    post:
      description: >-
        Exports data to the specified destination by copying it from the DICOM
        store. Errors are also logged to Cloud Logging. For more information,
        see [Viewing errors in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
        metadata field type is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.dicomStores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportDicomDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/series:
    parameters: *ref_1
    get:
      description: >-
        SearchForSeries returns a list of matching series. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of SearchForSeries, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForSeries, see [Searching for studies, series,
        instances, and
        frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForSeries
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.dicomStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:
    parameters: *ref_1
    patch:
      description: Updates the specified DICOM store.
      operationId: healthcare.projects.locations.datasets.dicomStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DicomStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes the specified DICOM store and removes all images that are
        contained within it.
      operationId: healthcare.projects.locations.datasets.dicomStores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: delete
    get:
      description: Gets the specified DICOM store.
      operationId: healthcare.projects.locations.datasets.dicomStores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.dicomStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies:
    parameters: *ref_1
    post:
      description: >-
        StoreInstances stores DICOM instances associated with study instance
        unique identifiers (SUID). See [Store
        Transaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
        For details on the implementation of StoreInstances, see [Store
        transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call StoreInstances, see [Storing DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
      operationId: healthcare.projects.locations.datasets.dicomStores.storeInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
    get:
      description: >-
        SearchForStudies returns a list of matching studies. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of SearchForStudies, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForStudies, see [Searching for studies, series,
        instances, and
        frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForStudies
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.dicomStores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: dicom_stores_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores:
    parameters: *ref_1
    post:
      description: Creates a new DICOM store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.dicomStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DicomStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: dicomStoreId
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: insert
    get:
      description: Lists the DICOM stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.dicomStores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDicomStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:import:
    parameters: *ref_1
    post:
      description: >-
        Imports data into the DICOM store by copying it from the specified
        source. Errors are logged to Cloud Logging. For more information, see
        [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
        metadata field type is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.dicomStores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDicomDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:deidentify:
    parameters: *ref_1
    post:
      description: >-
        De-identifies data from the source store and writes it to the
        destination store. The metadata field type is OperationMetadata. If the
        request is successful, the response field type is
        DeidentifyDicomStoreSummary. The LRO result may still be successful if
        de-identification fails for some DICOM instances. The output DICOM store
        will not contain these failed resources. The number of resources
        processed are tracked in Operation.metadata. Error details are logged to
        Cloud Logging. For more information, see [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
      operationId: healthcare.projects.locations.datasets.dicomStores.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyDicomStoreRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/instances:
    parameters: *ref_1
    get:
      description: >-
        SearchForInstances returns a list of matching instances. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of SearchForInstances, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForInstances, see [Searching for studies, series,
        instances, and
        frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForInstances
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}:
    parameters: *ref_1
    delete:
      description: >-
        DeleteStudy deletes all instances within the given study using a long
        running operation. The method returns an Operation which will be marked
        successful when the deletion is complete. Warning: Instances cannot be
        inserted into a study that is being deleted by an operation until the
        operation completes. For samples that show how to call DeleteStudy, see
        [Deleting a study, series, or
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-verb: delete
    post:
      description: >-
        StoreInstances stores DICOM instances associated with study instance
        unique identifiers (SUID). See [Store
        Transaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
        For details on the implementation of StoreInstances, see [Store
        transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call StoreInstances, see [Storing DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.storeInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-verb: exec
    get:
      description: >-
        RetrieveStudy returns all instances within the given study. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveStudy, see [DICOM
        study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveStudy, see [Retrieving DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies__study
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/metadata:
    parameters: *ref_1
    get:
      description: >-
        RetrieveStudyMetadata returns instance associated with the given study
        presented as metadata with the bulk data removed. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveStudyMetadata, see
        [Metadata
        resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveStudyMetadata, see [Retrieving
        metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies__metadata
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series:
    parameters: *ref_1
    get:
      description: >-
        SearchForSeries returns a list of matching series. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of SearchForSeries, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForSeries, see [Searching for studies, series,
        instances, and
        frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/instances:
    parameters: *ref_1
    get:
      description: >-
        SearchForInstances returns a list of matching instances. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of SearchForInstances, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForInstances, see [Searching for studies, series,
        instances, and
        frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}:
    parameters: *ref_1
    get:
      description: >-
        RetrieveSeries returns all instances within the given study and series.
        See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveSeries, see [DICOM
        study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveSeries, see [Retrieving DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series__series
      x-stackQL-verb: select
    delete:
      description: >-
        DeleteSeries deletes all instances within the given study and series
        using a long running operation. The method returns an Operation which
        will be marked successful when the deletion is complete. Warning:
        Instances cannot be inserted into a series that is being deleted by an
        operation until the operation completes. For samples that show how to
        call DeleteSeries, see [Deleting a study, series, or
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances:
    parameters: *ref_1
    get:
      description: >-
        SearchForInstances returns a list of matching instances. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of SearchForInstances, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForInstances, see [Searching for studies, series,
        instances, and
        frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/metadata:
    parameters: *ref_1
    get:
      description: >-
        RetrieveSeriesMetadata returns instance associated with the given study
        and series, presented as metadata with the bulk data removed. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveSeriesMetadata, see
        [Metadata
        resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveSeriesMetadata, see [Retrieving
        metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series__metadata
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}/rendered:
    parameters: *ref_1
    get:
      description: >-
        RetrieveRenderedFrames returns instances associated with the given
        study, series, SOP Instance UID and frame numbers in an acceptable
        Rendered Media Type. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveRenderedFrames, see
        [Rendered
        resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveRenderedFrames, see [Retrieving consumer image
        formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: path
          name: framesId
          required: true
          schema:
            type: string
      x-stackQL-resource: frames__rendered
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}:
    parameters: *ref_1
    get:
      description: >-
        RetrieveFrames returns instances associated with the given study,
        series, SOP Instance UID and frame numbers. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveFrames, see [DICOM
        frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in
        the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveFrames, see [Retrieving DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: path
          name: framesId
          required: true
          schema:
            type: string
      x-stackQL-resource: frames__frames
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}:
    parameters: *ref_1
    get:
      description: >-
        RetrieveInstance returns instance associated with the given study,
        series, and SOP Instance UID. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveInstance, see [DICOM
        study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
        and [DICOM
        instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveInstance, see [Retrieving an
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances__instance
      x-stackQL-verb: select
    delete:
      description: >-
        DeleteInstance deletes an instance associated with the given study,
        series, and SOP Instance UID. Delete requests are equivalent to the GET
        requests specified in the Retrieve transaction. Study and series search
        results can take a few seconds to be updated after an instance is
        deleted using DeleteInstance. For samples that show how to call
        DeleteInstance, see [Deleting a study, series, or
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances
      x-stackQL-verb: delete
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/metadata:
    parameters: *ref_1
    get:
      description: >-
        RetrieveInstanceMetadata returns instance associated with the given
        study, series, and SOP Instance UID presented as metadata with the bulk
        data removed. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveInstanceMetadata, see
        [Metadata
        resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveInstanceMetadata, see [Retrieving
        metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances__metadata
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/rendered:
    parameters: *ref_1
    get:
      description: >-
        RetrieveRenderedInstance returns instance associated with the given
        study, series, and SOP Instance UID in an acceptable Rendered Media
        Type. See
        [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveRenderedInstance, see
        [Rendered
        resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveRenderedInstance, see [Retrieving consumer image
        formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances__rendered
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:
    parameters: *ref_1
    delete:
      description: Deletes the specified FHIR store and removes all resources within it.
      operationId: healthcare.projects.locations.datasets.fhirStores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: delete
    get:
      description: Gets the configuration of the specified FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: select
    patch:
      description: Updates the configuration of the specified FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FhirStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:deidentify:
    parameters: *ref_1
    post:
      description: >-
        De-identifies data from the source store and writes it to the
        destination store. The metadata field type is OperationMetadata. If the
        request is successful, the response field type is
        DeidentifyFhirStoreSummary. The number of resources processed are
        tracked in Operation.metadata. Error details are logged to Cloud
        Logging. For more information, see [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
      operationId: healthcare.projects.locations.datasets.fhirStores.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyFhirStoreRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores:
    parameters: *ref_1
    post:
      description: Creates a new FHIR store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.fhirStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FhirStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: fhirStoreId
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: insert
    get:
      description: Lists the FHIR stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.fhirStores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFhirStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.fhirStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getFHIRStoreMetrics:
    parameters: *ref_1
    get:
      description: Gets metrics associated with the FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.getFHIRStoreMetrics
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStoreMetrics'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores__f_h_i_r_store_metrics
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:export:
    parameters: *ref_1
    post:
      description: >-
        Export resources from the FHIR store to the specified destination. This
        method returns an Operation that can be used to track the status of the
        export by calling GetOperation. Immediate fatal errors appear in the
        error field, errors are also logged to Cloud Logging (see [Viewing error
        logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a detailed response of type
        ExportResourcesResponse is returned in the response field. The metadata
        field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.fhirStores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:configureSearch:
    parameters: *ref_1
    post:
      description: >-
        Configure the search parameters for the FHIR store and reindex resources
        in the FHIR store according to the defined search parameters. The search
        parameters provided in this request will replace any previous search
        configuration. The target SearchParameter resources need to exist in the
        store before calling ConfigureSearch, otherwise an error will occur.
        This method returns an Operation that can be used to track the progress
        of the reindexing by calling GetOperation.
      operationId: healthcare.projects.locations.datasets.fhirStores.configureSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigureSearchRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.fhirStores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: fhir_stores_iam_policies
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.fhirStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores_iam_policies
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:import:
    parameters: *ref_1
    post:
      description: >-
        Import resources to the FHIR store by loading data from the specified
        sources. This method is optimized to load large quantities of data using
        import semantics that ignore some FHIR store configuration options and
        are not suitable for all use cases. It is primarily intended to load
        data into an empty FHIR store that is not being used by other clients.
        In cases where this method is not appropriate, consider using
        ExecuteBundle to load data. Every resource in the input must contain a
        client-supplied ID. Each resource is stored using the supplied ID
        regardless of the enable_update_create setting on the FHIR store. It is
        strongly advised not to include or encode any sensitive data such as
        patient identifiers in client-specified resource IDs. Those IDs are part
        of the FHIR resource path recorded in Cloud Audit Logs and Cloud Pub/Sub
        notifications. Those IDs can also be contained in reference fields
        within other resources. The import process does not enforce referential
        integrity, regardless of the disable_referential_integrity setting on
        the FHIR store. This allows the import of resources with arbitrary
        interdependencies without considering grouping or ordering, but if the
        input data contains invalid references or if some resources fail to be
        imported, the FHIR store might be left in a state that violates
        referential integrity. The import process does not trigger Pub/Sub
        notification or BigQuery streaming update, regardless of how those are
        configured on the FHIR store. If a resource with the specified ID
        already exists, the most recent version of the resource is overwritten
        without creating a new historical version, regardless of the
        disable_resource_versioning setting on the FHIR store. If transient
        failures occur during the import, it is possible that successfully
        imported resources will be overwritten more than once. The import
        operation is idempotent unless the input data contains multiple valid
        resources with the same ID but different contents. In that case, after
        the import completes, the store contains exactly one resource with that
        ID but there is no ordering guarantee on which version of the contents
        it will have. The operation result counters do not count duplicate IDs
        as an error and count one success for each resource in the input, which
        might result in a success count larger than the number of resources in
        the FHIR store. This often occurs when importing data organized in
        bundles produced by Patient-everything where each bundle contains its
        own copy of a resource such as Practitioner that might be referred to by
        many patients. If some resources fail to import, for example due to
        parsing errors, successfully imported resources are not rolled back. The
        location and format of the input data are specified by the parameters in
        ImportResourcesRequest. Note that if no format is specified, this method
        assumes the `BUNDLE` format. When using the `BUNDLE` format this method
        ignores the `Bundle.type` field, except that `history` bundles are
        rejected, and does not apply any of the bundle processing semantics for
        batch or transaction bundles. Unlike in ExecuteBundle, transaction
        bundles are not executed as a single transaction and bundle-internal
        references are not rewritten. The bundle is treated as a collection of
        resources to be written as provided in `Bundle.entry.resource`, ignoring
        `Bundle.entry.request`. As an example, this allows the import of
        `searchset` bundles produced by a FHIR search or Patient-everything
        operation. This method returns an Operation that can be used to track
        the status of the import by calling GetOperation. Immediate fatal errors
        appear in the error field, errors are also logged to Cloud Logging (see
        [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a detailed response of type
        ImportResourcesResponse is returned in the response field. The metadata
        field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.fhirStores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{resourceType}/_search:
    parameters: *ref_1
    post:
      description: >-
        Searches for resources in the given FHIR store according to criteria
        specified as query parameters. Implements the FHIR standard search
        interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#search),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#search))
        using the search semantics described in the FHIR Search specification
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/search.html),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/search.html),
        [R4](https://hl7.org/implement/standards/fhir/R4/search.html)). Supports
        four methods of search defined by the specification: * `GET
        [base]?[parameters]` to search across all resources. * `GET
        [base]/[type]?[parameters]` to search resources of a specified type. *
        `POST [base]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method across all resources. * `POST
        [base]/[type]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method for the specified type. The `GET` and
        `POST` methods do not support compartment searches. The `POST` method
        does not support `application/x-www-form-urlencoded` search parameters.
        On success, the response body contains a JSON-encoded representation of
        a `Bundle` resource of type `searchset`, containing the results of the
        search. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. The server's capability
        statement, retrieved through capabilities, indicates what search
        parameters are supported on each FHIR resource. A list of all search
        parameters defined by the specification can be found in the FHIR Search
        Parameter Registry
        ([STU3](https://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
        [R4](https://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
        FHIR search parameters for DSTU2 can be found on each resource's
        definition page. Supported search modifiers: `:missing`, `:exact`,
        `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`,
        `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported
        search result parameters: `_sort`, `_count`, `_include`, `_revinclude`,
        `_summary=text`, `_summary=data`, and `_elements`. The maximum number of
        search results returned defaults to 100, which can be overridden by the
        `_count` parameter up to a maximum limit of 1000. The server might
        return fewer resources than requested to prevent excessively large
        responses. If there are additional results, the returned `Bundle`
        contains a link of `relation` "next", which has a `_page_token`
        parameter for an opaque pagination token that can be used to retrieve
        the next page. Resources with a total size larger than 5MB or a field
        count larger than 50,000 might not be fully searchable as the server
        might trim its generated search index in those cases. Note: FHIR
        resources are indexed asynchronously, so there might be a slight delay
        between the time a resource is created or changes and when the change is
        reflected in search results. For samples and detailed information, see
        [Searching for FHIR
        resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search)
        and [Advanced FHIR search
        features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.search-type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: resourceType
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Patient/{PatientId}/$everything:
    parameters: *ref_1
    get:
      description: >-
        Retrieves a Patient resource and resources related to that patient.
        Implements the FHIR extended operation Patient-everything
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything),
        [R4](https://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)).
        On success, the response body contains a JSON-encoded representation of
        a `Bundle` resource of type `searchset`, containing the results of the
        operation. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. The resources in scope for
        the response are: * The patient resource itself. * All the resources
        directly referenced by the patient resource. * Resources directly
        referencing the patient resource that meet the inclusion criteria. The
        inclusion criteria are based on the membership rules in the patient
        compartment definition
        ([DSTU2](https://hl7.org/fhir/DSTU2/compartment-patient.html),
        [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html),
        [R4](https://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which
        details the eligible resource types and referencing search parameters.
        For samples that show how to call `Patient-everything`, see [Getting all
        patient compartment
        resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.fhir.Patient-everything
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: PatientId
          required: true
          schema:
            type: string
        - in: query
          name: _type
          schema:
            type: string
        - in: query
          name: _page_token
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
        - in: query
          name: _since
          schema:
            type: string
        - in: query
          name: start
          schema:
            type: string
        - in: query
          name: end
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/$references:
    parameters: *ref_1
    get:
      description: >-
        Lists all the resources that directly refer to the given target FHIR
        resource. Can also support the case when the target resource doesn't
        exist, for example, if the target has been deleted. On success, the
        response body contains a Bundle with type `searchset`, where each entry
        in the Bundle contains the full content of the resource. If the
        operation fails, an `OperationOutcome` is returned describing the
        failure. If the request cannot be mapped to a valid API method on a FHIR
        store, a generic Google Cloud error might be returned instead.
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.fhir.Resource-incoming-references
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: _type
          schema:
            type: string
        - in: query
          name: _page_token
          schema:
            type: string
        - in: query
          name: _summary
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
        - in: query
          name: target
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history/{_historyId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the contents of a version (current or historical) of a FHIR
        resource by version ID. Implements the FHIR standard vread interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#vread),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#vread),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#vread)). On
        success, the response body contains a JSON-encoded representation of the
        resource. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. For samples that show how
        to call `vread`, see [Retrieving a FHIR resource
        version](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.vread
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
        - in: path
          name: _historyId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}:
    parameters: *ref_1
    patch:
      description: >-
        If a resource is found based on the search criteria specified in the
        query parameters, updates part of that resource by applying the
        operations specified in a [JSON Patch](http://jsonpatch.com/) document.
        Implements the FHIR standard conditional patch interaction
        ([STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#patch),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#patch)).
        DSTU2 doesn't define a conditional patch method, but the server supports
        it in the same way it supports STU3. Search terms are provided as query
        parameters following the same pattern as the search method. If the
        search criteria identify more than one match, the request returns a `412
        Precondition Failed` error. The request body must contain a JSON Patch
        document, and the request headers must contain `Content-Type:
        application/json-patch+json`. On success, the response body contains a
        JSON-encoded representation of the updated resource, including the
        server-assigned version ID. Errors generated by the FHIR store contain a
        JSON-encoded `OperationOutcome` resource describing the reason for the
        error. If the request cannot be mapped to a valid API method on a FHIR
        store, a generic GCP error might be returned instead. This method
        requires the`healthcare.fhirStores.searchResources` permission on the
        parent FHIR store and the `healthcare.fhirResources.patch` permission on
        the requested FHIR store resource. For samples that show how to call
        `conditionalPatch`, see [Conditionally patching a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_patching_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes FHIR resources that match a search query. Implements the FHIR
        standard conditional delete interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.12.1),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.13.1),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#3.1.0.7.1)).
        If multiple resources match, all matching resources are deleted. Search
        terms are provided as query parameters following the same pattern as the
        search method. Not all FHIR resources that match the search query might
        be deleted because, by default, a maximum of 100 FHIR resources can be
        deleted. The number of FHIR resources that can be deleted depends on the
        page size of the returned resources, which you can control using the
        `_count` query parameter. Even when using `_count`, you can delete a
        maximum 1,000 FHIR resources per each call of `conditionalDelete`. Note:
        Unless resource versioning is disabled by setting the
        disable_resource_versioning flag on the FHIR store, the deleted
        resources are moved to a history repository that can still be retrieved
        through vread and related methods, unless they are removed by the purge
        method. This method requires the`healthcare.fhirStores.searchResources`
        and `healthcare.fhirResources.delete` permissions on the parent FHIR
        store. For samples that show how to call `conditionalDelete`, see
        [Conditionally deleting a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_deleting_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalDelete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
    post:
      description: >-
        Creates a FHIR resource. Implements the FHIR standard create interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#create),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#create),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#create)),
        which creates a new resource with a server-assigned resource ID. Also
        supports the FHIR standard conditional create interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#ccreate),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#ccreate),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#ccreate)),
        specified by supplying an `If-None-Exist` header containing a FHIR
        search query. If no resources match this search query, the server
        processes the create operation as normal. The request body must contain
        a JSON-encoded FHIR resource, and the request headers must contain
        `Content-Type: application/fhir+json`. On success, the response body
        contains a JSON-encoded representation of the resource as it was created
        on the server, including the server-assigned resource ID and version ID.
        Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. For samples that show how
        to call `create`, see [Creating a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: insert
    put:
      description: >-
        If a resource is found based on the search criteria specified in the
        query parameters, updates the entire contents of that resource.
        Implements the FHIR standard conditional update interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.10.2),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#cond-update),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#cond-update)).
        Search terms are provided as query parameters following the same pattern
        as the search method. If the search criteria identify more than one
        match, the request returns a `412 Precondition Failed` error. If the
        search criteria identify zero matches, and the supplied resource body
        contains an `id`, and the FHIR store has enable_update_create set,
        creates the resource with the client-specified ID. It is strongly
        advised not to include or encode any sensitive data such as patient
        identifiers in client-specified resource IDs. Those IDs are part of the
        FHIR resource path recorded in Cloud Audit Logs and Pub/Sub
        notifications. Those IDs can also be contained in reference fields
        within other resources. If the search criteria identify zero matches,
        and the supplied resource body does not contain an `id`, the resource is
        created with a server-assigned ID as per the create method. The request
        body must contain a JSON-encoded FHIR resource, and the request headers
        must contain `Content-Type: application/fhir+json`. On success, the
        response body contains a JSON-encoded representation of the updated
        resource, including the server-assigned version ID. Errors generated by
        the FHIR store contain a JSON-encoded `OperationOutcome` resource
        describing the reason for the error. If the request cannot be mapped to
        a valid API method on a FHIR store, a generic GCP error might be
        returned instead. This method requires
        the`healthcare.fhirStores.searchResources` and
        `healthcare.fhirResources.update` permissions on the parent FHIR store.
        For samples that show how to call `conditionalUpdate`, see
        [Conditionally updating a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_updating_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history:
    parameters: *ref_1
    get:
      description: >-
        Lists all the versions of a resource (including the current version and
        deleted versions) from the FHIR store. Implements the per-resource form
        of the FHIR standard history interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#history),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#history),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#history)). On
        success, the response body contains a JSON-encoded representation of a
        `Bundle` resource of type `history`, containing the version history
        sorted from most recent to oldest versions. Errors generated by the FHIR
        store contain a JSON-encoded `OperationOutcome` resource describing the
        reason for the error. If the request cannot be mapped to a valid API
        method on a FHIR store, a generic GCP error might be returned instead.
        For samples that show how to call `history`, see [Listing FHIR resource
        versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.history
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
        - in: query
          name: _at
          schema:
            type: string
        - in: query
          name: _since
          schema:
            type: string
        - in: query
          name: _page_token
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/metadata:
    parameters: *ref_1
    get:
      description: >-
        Gets the FHIR capability statement
        ([STU3](https://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html),
        [R4](https://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)),
        or the [conformance
        statement](https://hl7.org/implement/standards/fhir/DSTU2/conformance.html)
        in the DSTU2 case for the store, which contains a description of
        functionality supported by the server. Implements the FHIR standard
        capabilities interaction
        ([STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#capabilities),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#capabilities)),
        or the [conformance
        interaction](https://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance)
        in the DSTU2 case. On success, the response body contains a JSON-encoded
        representation of a `CapabilityStatement` resource.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.capabilities
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Observation/$lastn:
    parameters: *ref_1
    get:
      description: >-
        Retrieves the N most recent `Observation` resources for a subject
        matching search criteria specified as query parameters, grouped by
        `Observation.code`, sorted from most recent to oldest. Implements the
        FHIR extended operation Observation-lastn
        ([STU3](https://hl7.org/implement/standards/fhir/STU3/observation-operations.html#lastn),
        [R4](https://hl7.org/implement/standards/fhir/R4/observation-operations.html#lastn)).
        DSTU2 doesn't define the Observation-lastn method, but the server
        supports it the same way it supports STU3. Search terms are provided as
        query parameters following the same pattern as the search method. The
        following search parameters must be provided: - `subject` or `patient`
        to specify a subject for the Observation. - `code`, `category` or any of
        the composite parameters that include `code`. Any other valid
        Observation search parameters can also be provided. This operation
        accepts an additional query parameter `max`, which specifies N, the
        maximum number of Observations to return from each group, with a default
        of 1. Searches with over 1000 results are rejected. Results are counted
        before grouping and limiting the results with `max`. To stay within the
        limit, constrain these searches using Observation search parameters such
        as `_lastUpdated` or `date`. On success, the response body contains a
        JSON-encoded representation of a `Bundle` resource of type `searchset`,
        containing the results of the operation. Errors generated by the FHIR
        store contain a JSON-encoded `OperationOutcome` resource describing the
        reason for the error. If the request cannot be mapped to a valid API
        method on a FHIR store, a generic GCP error might be returned instead.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Observation-lastn
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/ConceptMap/$translate:
    parameters: *ref_1
    get:
      description: >-
        Translates a code from one value set to another by searching for
        appropriate concept maps. Implements the FHIR standard $translate
        operation
        ([DSTU2](https://www.hl7.org/fhir/DSTU2/operation-conceptmap-translate.html),
        [STU3](https://www.hl7.org/fhir/STU3/operation-conceptmap-translate.html),
        [R4](https://www.hl7.org/fhir/R4/operation-conceptmap-translate.html)).
        On success, the response body contains a JSON-encoded representation of
        a FHIR Parameters resource, which includes the translation result.
        Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead.
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.fhir.ConceptMap-search-translate
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: target
          schema:
            type: string
        - in: query
          name: system
          schema:
            type: string
        - in: query
          name: conceptMapVersion
          schema:
            type: string
        - in: query
          name: code
          schema:
            type: string
        - in: query
          name: url
          schema:
            type: string
        - in: query
          name: source
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}:
    parameters: *ref_1
    patch:
      description: >-
        Updates part of an existing resource by applying the operations
        specified in a [JSON Patch](http://jsonpatch.com/) document. Implements
        the FHIR standard patch interaction
        ([STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#patch),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#patch)).
        DSTU2 doesn't define a patch method, but the server supports it in the
        same way it supports STU3. The request body must contain a JSON Patch
        document, and the request headers must contain `Content-Type:
        application/json-patch+json`. On success, the response body contains a
        JSON-encoded representation of the updated resource, including the
        server-assigned version ID. Errors generated by the FHIR store contain a
        JSON-encoded `OperationOutcome` resource describing the reason for the
        error. If the request cannot be mapped to a valid API method on a FHIR
        store, a generic GCP error might be returned instead. For samples that
        show how to call `patch`, see [Patching a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
    delete:
      description: >-
        Deletes a FHIR resource. Implements the FHIR standard delete interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#delete),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#delete),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#delete)).
        Note: Unless resource versioning is disabled by setting the
        disable_resource_versioning flag on the FHIR store, the deleted
        resources are moved to a history repository that can still be retrieved
        through vread and related methods, unless they are removed by the purge
        method. For samples that show how to call `delete`, see [Deleting a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: delete
    put:
      description: >-
        Updates the entire contents of a resource. Implements the FHIR standard
        update interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#update),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#update),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#update)). If
        the specified resource does not exist and the FHIR store has
        enable_update_create set, creates the resource with the client-specified
        ID. It is strongly advised not to include or encode any sensitive data
        such as patient identifiers in client-specified resource IDs. Those IDs
        are part of the FHIR resource path recorded in Cloud Audit Logs and
        Pub/Sub notifications. Those IDs can also be contained in reference
        fields within other resources. The request body must contain a
        JSON-encoded FHIR resource, and the request headers must contain
        `Content-Type: application/fhir+json`. The resource must contain an `id`
        element having an identical value to the ID in the REST path of the
        request. On success, the response body contains a JSON-encoded
        representation of the updated resource, including the server-assigned
        version ID. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. For samples that show how
        to call `update`, see [Updating a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
    get:
      description: >-
        Gets the contents of a FHIR resource. Implements the FHIR standard read
        interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#read),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#read),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#read)). Also
        supports the FHIR standard conditional read interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#cread),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#cread),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#cread))
        specified by supplying an `If-Modified-Since` header with a date/time
        value or an `If-None-Match` header with an ETag value. On success, the
        response body contains a JSON-encoded representation of the resource.
        Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. For samples that show how
        to call `read`, see [Getting a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.read
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/$purge:
    parameters: *ref_1
    delete:
      description: >-
        Deletes all the historical versions of a resource (excluding the current
        version) from the FHIR store. To remove all versions of a resource,
        first delete the current version and then call this method. This is not
        a FHIR standard operation. For samples that show how to call
        `Resource-purge`, see [Deleting historical versions of a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-purge
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir:
    parameters: *ref_1
    post:
      description: >-
        Executes all the requests in the given Bundle. Implements the FHIR
        standard batch/transaction interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)).
        Supports all interactions within a bundle, except search. This method
        accepts Bundles of type `batch` and `transaction`, processing them
        according to the batch processing rules
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and
        transaction processing rules
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The
        request body must contain a JSON-encoded FHIR `Bundle` resource, and the
        request headers must contain `Content-Type: application/fhir+json`. For
        a batch bundle or a successful transaction, the response body contains a
        JSON-encoded representation of a `Bundle` resource of type
        `batch-response` or `transaction-response` containing one entry for each
        entry in the request, with the outcome of processing the entry. In the
        case of an error for a transaction bundle, the response body contains a
        JSON-encoded `OperationOutcome` resource describing the reason for the
        error. If the request cannot be mapped to a valid API method on a FHIR
        store, a generic GCP error might be returned instead. This method checks
        permissions for each request in the bundle. The `executeBundle`
        permission is required to call this method, but you must also grant
        sufficient permissions to execute the individual requests in the bundle.
        For example, if the bundle contains a request to create a FHIR resource,
        the caller must also have been granted the
        `healthcare.fhirResources.create` permission. You can use audit logs to
        view the permissions for `executeBundle` and each request in the bundle.
        For more information, see [Viewing Cloud Audit
        logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging).
        For samples that show how to call `executeBundle`, see [Managing FHIR
        resources using FHIR
        bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/_search:
    parameters: *ref_1
    post:
      description: >-
        Searches for resources in the given FHIR store according to criteria
        specified as query parameters. Implements the FHIR standard search
        interaction
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#search),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#search),
        [R4](https://hl7.org/implement/standards/fhir/R4/http.html#search))
        using the search semantics described in the FHIR Search specification
        ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/search.html),
        [STU3](https://hl7.org/implement/standards/fhir/STU3/search.html),
        [R4](https://hl7.org/implement/standards/fhir/R4/search.html)). Supports
        four methods of search defined by the specification: * `GET
        [base]?[parameters]` to search across all resources. * `GET
        [base]/[type]?[parameters]` to search resources of a specified type. *
        `POST [base]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method across all resources. * `POST
        [base]/[type]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method for the specified type. The `GET` and
        `POST` methods do not support compartment searches. The `POST` method
        does not support `application/x-www-form-urlencoded` search parameters.
        On success, the response body contains a JSON-encoded representation of
        a `Bundle` resource of type `searchset`, containing the results of the
        search. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. The server's capability
        statement, retrieved through capabilities, indicates what search
        parameters are supported on each FHIR resource. A list of all search
        parameters defined by the specification can be found in the FHIR Search
        Parameter Registry
        ([STU3](https://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
        [R4](https://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)).
        FHIR search parameters for DSTU2 can be found on each resource's
        definition page. Supported search modifiers: `:missing`, `:exact`,
        `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`,
        `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported
        search result parameters: `_sort`, `_count`, `_include`, `_revinclude`,
        `_summary=text`, `_summary=data`, and `_elements`. The maximum number of
        search results returned defaults to 100, which can be overridden by the
        `_count` parameter up to a maximum limit of 1000. The server might
        return fewer resources than requested to prevent excessively large
        responses. If there are additional results, the returned `Bundle`
        contains a link of `relation` "next", which has a `_page_token`
        parameter for an opaque pagination token that can be used to retrieve
        the next page. Resources with a total size larger than 5MB or a field
        count larger than 50,000 might not be fully searchable as the server
        might trim its generated search index in those cases. Note: FHIR
        resources are indexed asynchronously, so there might be a slight delay
        between the time a resource is created or changes and when the change is
        reflected in search results. For samples and detailed information, see
        [Searching for FHIR
        resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search)
        and [Advanced FHIR search
        features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/ConceptMap/{ConceptMapId}/$translate:
    parameters: *ref_1
    get:
      description: >-
        Translates a code from one value set to another using a concept map. You
        can provide your own concept maps to translate any code system to
        another code system. Implements the FHIR standard $translate operation
        ([DSTU2](https://www.hl7.org/fhir/DSTU2/operation-conceptmap-translate.html),
        [STU3](https://www.hl7.org/fhir/STU3/operation-conceptmap-translate.html),
        [R4](https://www.hl7.org/fhir/R4/operation-conceptmap-translate.html)).
        On success, the response body contains a JSON-encoded representation of
        a FHIR Parameters resource, which includes the translation result.
        Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead.
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.fhir.ConceptMap-translate
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: ConceptMapId
          required: true
          schema:
            type: string
        - in: query
          name: system
          schema:
            type: string
        - in: query
          name: conceptMapVersion
          schema:
            type: string
        - in: query
          name: code
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/$validate:
    parameters: *ref_1
    post:
      description: >-
        Validates an input FHIR resource's conformance to its profiles and the
        profiles configured on the FHIR store. Implements the FHIR extended
        operation $validate
        ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate),
        [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate),
        or
        [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)).
        The request body must contain a JSON-encoded FHIR resource, and the
        request headers must contain `Content-Type: application/fhir+json`. The
        `Parameters` input syntax is not supported. The `profile` query
        parameter can be used to request that the resource only be validated
        against a specific profile. If a profile with the given URL cannot be
        found in the FHIR store then an error is returned. Errors generated by
        validation contain a JSON-encoded `OperationOutcome` resource describing
        the reason for the error. If the request cannot be mapped to a valid API
        method on a FHIR store, a generic GCP error might be returned instead.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: query
          name: profile
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/services/nlp:analyzeEntities:
    parameters: *ref_1
    post:
      description: >-
        Analyze heathcare entity in a document. Its response includes the
        recognized entity mentions and the relationships between them.
        AnalyzeEntities uses context aware models to detect entities. This
        method can only analyze documents written in English.
      operationId: healthcare.projects.locations.services.nlp.analyzeEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeEntitiesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeEntitiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: nlp
      x-stackQL-verb: exec
