openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Trace API
  description: >-
    Sends application trace data to Cloud Trace for viewing. Trace data is
    collected for all App Engine applications by default. Trace data from other
    applications can be provided using this API. This library is used to
    interact with the Cloud Trace API directly. If you are looking to instrument
    your application for Cloud Trace, we recommend using OpenTelemetry. 
  version: v1
  x-discovery-doc-revision: '20230608'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/trace
servers:
  - url: https://cloudtrace.googleapis.com
components:
  schemas:
    TraceSpan:
      type: object
      id: TraceSpan
      properties:
        endTime:
          format: google-datetime
          description: End time of the span in nanoseconds from the UNIX epoch.
          type: string
        spanId:
          description: >-
            Identifier for the span. Must be a 64-bit integer other than 0 and
            unique within a trace. For example, `2205310701640571284`.
          type: string
          format: uint64
        parentSpanId:
          format: uint64
          type: string
          description: Optional. ID of the parent span, if any.
        labels:
          type: object
          description: >-
            Collection of labels associated with the span. Label keys must be
            less than 128 bytes. Label values must be less than 16 kilobytes
            (10MB for `/stacktrace` values). Some predefined label keys exist,
            or you may create your own. When creating your own, we recommend the
            following formats: * `/category/product/key` for agents of
            well-known products (e.g. `/db/mongodb/read_size`). *
            `short_host/path/key` for domain-specific keys (e.g.
            `foo.com/myproduct/bar`) Predefined labels include: * `/agent` *
            `/component` * `/error/message` * `/error/name` *
            `/http/client_city` * `/http/client_country` *
            `/http/client_protocol` * `/http/client_region` * `/http/host` *
            `/http/method` * `/http/path` * `/http/redirected_url` *
            `/http/request/size` * `/http/response/size` * `/http/route` *
            `/http/status_code` * `/http/url` * `/http/user_agent` * `/pid` *
            `/stacktrace` * `/tid`
          additionalProperties:
            type: string
        startTime:
          type: string
          description: Start time of the span in nanoseconds from the UNIX epoch.
          format: google-datetime
        name:
          description: >-
            Name of the span. Must be less than 128 bytes. The span name is
            sanitized and displayed in the Trace tool in the Google Cloud
            Platform Console. The name may be a method name or some other
            per-call site name. For the same executable and the same call point,
            a best practice is to use a consistent name, which makes it easier
            to correlate cross-trace spans.
          type: string
        kind:
          enum:
            - SPAN_KIND_UNSPECIFIED
            - RPC_SERVER
            - RPC_CLIENT
          enumDescriptions:
            - Unspecified.
            - >-
              Indicates that the span covers server-side handling of an RPC or
              other remote network request.
            - >-
              Indicates that the span covers the client-side wrapper around an
              RPC or other remote request.
          type: string
          description: >-
            Distinguishes between spans generated in a particular context. For
            example, two spans with the same name may be distinguished using
            `RPC_CLIENT` and `RPC_SERVER` to identify queueing latency
            associated with the span.
      description: >-
        A span represents a single timed event within a trace. Spans can be
        nested and form a trace tree. Often, a trace contains a root span that
        describes the end-to-end latency of an operation and, optionally, one or
        more subspans for its suboperations. Spans do not need to be contiguous.
        There may be gaps between spans in a trace.
    ListTracesResponse:
      type: object
      description: The response message for the `ListTraces` method.
      properties:
        traces:
          description: List of trace records as specified by the view parameter.
          type: array
          items:
            $ref: '#/components/schemas/Trace'
        nextPageToken:
          type: string
          description: >-
            If defined, indicates that there are more traces that match the
            request and that this value should be passed to the next request to
            continue retrieving additional traces.
      id: ListTracesResponse
    Traces:
      type: object
      properties:
        traces:
          description: List of traces.
          items:
            $ref: '#/components/schemas/Trace'
          type: array
      id: Traces
      description: List of new or updated traces.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      properties: {}
      type: object
    Trace:
      description: >-
        A trace describes how long it takes for an application to perform an
        operation. It consists of a set of spans, each of which represent a
        single timed event within the operation.
      properties:
        projectId:
          description: Project ID of the Cloud project where the trace data is stored.
          type: string
        traceId:
          description: >-
            Globally unique identifier for the trace. This identifier is a
            128-bit numeric value formatted as a 32-byte hex string. For
            example, `382d4f4c6b7bb2f4a972559d9085001d`. The numeric value
            should not be zero.
          type: string
        spans:
          items:
            $ref: '#/components/schemas/TraceSpan'
          type: array
          description: Collection of spans in the trace.
      type: object
      id: Trace
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
            https://www.googleapis.com/auth/trace.append: Write Trace data for a project or application
            https://www.googleapis.com/auth/trace.readonly: Read Trace data for a project or application
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/projects/{projectId}/traces:
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
    patch:
      description: >-
        Sends new traces to Cloud Trace or updates existing traces. If the ID of
        a trace that you send matches that of an existing trace, any fields in
        the existing trace and its spans are overwritten by the provided values,
        and any new fields provided are merged with the existing trace data. If
        the ID does not match, a new trace is created.
      operationId: cloudtrace.projects.patchTraces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Traces'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/trace.append
          Oauth2c:
            - https://www.googleapis.com/auth/trace.append
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
    get:
      description: Returns a list of traces that match the specified filter conditions.
      operationId: cloudtrace.projects.traces.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/trace.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/trace.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTracesResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: endTime
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: traces
      x-stackQL-verb: select
  /v1/projects/{projectId}/traces/{traceId}:
    parameters: *ref_1
    get:
      description: Gets a single trace by its ID.
      operationId: cloudtrace.projects.traces.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/trace.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/trace.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trace'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: traceId
          required: true
          schema:
            type: string
      x-stackQL-resource: traces
      x-stackQL-verb: select
