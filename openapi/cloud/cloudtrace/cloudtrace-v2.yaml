openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Trace API
  description: >-
    Sends application trace data to Cloud Trace for viewing. Trace data is
    collected for all App Engine applications by default. Trace data from other
    applications can be provided using this API. This library is used to
    interact with the Cloud Trace API directly. If you are looking to instrument
    your application for Cloud Trace, we recommend using OpenTelemetry. 
  version: v2
  x-discovery-doc-revision: '20230608'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/trace
servers:
  - url: https://cloudtrace.googleapis.com
components:
  schemas:
    TimeEvent:
      properties:
        annotation:
          description: Text annotation with a set of attributes.
          $ref: '#/components/schemas/Annotation'
        messageEvent:
          $ref: '#/components/schemas/MessageEvent'
          description: An event describing a message sent/received between Spans.
        time:
          type: string
          format: google-datetime
          description: The timestamp indicating the time the event occurred.
      description: A time-stamped annotation or message event in the Span.
      id: TimeEvent
      type: object
    Empty:
      properties: {}
      type: object
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
    AttributeValue:
      description: The allowed types for `[VALUE]` in a `[KEY]:[VALUE]` attribute.
      properties:
        intValue:
          format: int64
          description: A 64-bit signed integer.
          type: string
        stringValue:
          description: A string up to 256 bytes long.
          $ref: '#/components/schemas/TruncatableString'
        boolValue:
          type: boolean
          description: A Boolean value represented by `true` or `false`.
      id: AttributeValue
      type: object
    Attributes:
      description: A set of attributes as key-value pairs.
      properties:
        droppedAttributesCount:
          type: integer
          format: int32
          description: >-
            The number of attributes that were discarded. Attributes can be
            discarded because their keys are too long or because there are too
            many attributes. If this value is 0 then all attributes are valid.
        attributeMap:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
          type: object
          description: >-
            A set of attributes. Each attribute's key can be up to 128 bytes
            long. The value can be a string up to 256 bytes, a signed 64-bit
            integer, or the boolean values `true` or `false`. For example:
            "/instance_id": { "string_value": { "value": "my-instance" } }
            "/http/request_bytes": { "int_value": 300 }
            "example.com/myattribute": { "bool_value": false }
      id: Attributes
      type: object
    StackFrame:
      id: StackFrame
      type: object
      properties:
        originalFunctionName:
          description: >-
            An un-mangled function name, if `function_name` is mangled. To get
            information about name mangling, run [this
            search](https://www.google.com/search?q=cxx+name+mangling). The name
            can be fully-qualified (up to 1024 bytes).
          $ref: '#/components/schemas/TruncatableString'
        loadModule:
          $ref: '#/components/schemas/Module'
          description: The binary module from where the code was loaded.
        fileName:
          description: >-
            The name of the source file where the function call appears (up to
            256 bytes).
          $ref: '#/components/schemas/TruncatableString'
        columnNumber:
          type: string
          description: >-
            The column number where the function call appears, if available.
            This is important in JavaScript because of its anonymous functions.
          format: int64
        lineNumber:
          format: int64
          description: The line number in `file_name` where the function call appears.
          type: string
        sourceVersion:
          description: The version of the deployed source code (up to 128 bytes).
          $ref: '#/components/schemas/TruncatableString'
        functionName:
          description: >-
            The fully-qualified name that uniquely identifies the function or
            method that is active in this frame (up to 1024 bytes).
          $ref: '#/components/schemas/TruncatableString'
      description: Represents a single stack frame in a stack trace.
    StackFrames:
      properties:
        droppedFramesCount:
          type: integer
          description: >-
            The number of stack frames that were dropped because there were too
            many stack frames. If this value is 0, then no stack frames were
            dropped.
          format: int32
        frame:
          type: array
          items:
            $ref: '#/components/schemas/StackFrame'
          description: Stack frames in this call stack.
      type: object
      id: StackFrames
      description: A collection of stack frames, which can be truncated.
    TimeEvents:
      type: object
      id: TimeEvents
      description: >-
        A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
        on the span, consisting of either user-supplied key:value pairs, or
        details of a message sent/received between Spans.
      properties:
        droppedMessageEventsCount:
          description: >-
            The number of dropped message events in all the included time
            events. If the value is 0, then no message events were dropped.
          format: int32
          type: integer
        droppedAnnotationsCount:
          description: >-
            The number of dropped annotations in all the included time events.
            If the value is 0, then no annotations were dropped.
          format: int32
          type: integer
        timeEvent:
          items:
            $ref: '#/components/schemas/TimeEvent'
          type: array
          description: A collection of `TimeEvent`s.
    MessageEvent:
      properties:
        uncompressedSizeBytes:
          type: string
          description: The number of uncompressed bytes sent or received.
          format: int64
        compressedSizeBytes:
          format: int64
          type: string
          description: >-
            The number of compressed bytes sent or received. If missing, the
            compressed size is assumed to be the same size as the uncompressed
            size.
        id:
          format: int64
          description: >-
            An identifier for the MessageEvent's message that can be used to
            match `SENT` and `RECEIVED` MessageEvents.
          type: string
        type:
          type: string
          description: >-
            Type of MessageEvent. Indicates whether the message was sent or
            received.
          enumDescriptions:
            - Unknown event type.
            - Indicates a sent message.
            - Indicates a received message.
          enum:
            - TYPE_UNSPECIFIED
            - SENT
            - RECEIVED
      type: object
      id: MessageEvent
      description: An event describing a message sent/received between Spans.
    StackTrace:
      description: A call stack appearing in a trace.
      id: StackTrace
      properties:
        stackTraceHashId:
          format: int64
          type: string
          description: >-
            The hash ID is used to conserve network bandwidth for duplicate
            stack traces within a single trace. Often multiple spans will have
            identical stack traces. The first occurrence of a stack trace should
            contain both the `stackFrame` content and a value in
            `stackTraceHashId`. Subsequent spans within the same request can
            refer to that stack trace by only setting `stackTraceHashId`.
        stackFrames:
          $ref: '#/components/schemas/StackFrames'
          description: >-
            Stack frames in this stack trace. A maximum of 128 frames are
            allowed.
      type: object
    BatchWriteSpansRequest:
      id: BatchWriteSpansRequest
      type: object
      description: The request message for the `BatchWriteSpans` method.
      properties:
        spans:
          description: >-
            Required. A list of new spans. The span names must not match
            existing spans, otherwise the results are undefined.
          type: array
          items:
            $ref: '#/components/schemas/Span'
    Span:
      properties:
        name:
          type: string
          description: >-
            Required. The resource name of the span in the following format: *
            `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]`
            `[TRACE_ID]` is a unique identifier for a trace within a project; it
            is a 32-character hexadecimal encoding of a 16-byte array. It should
            not be zero. `[SPAN_ID]` is a unique identifier for a span within a
            trace; it is a 16-character hexadecimal encoding of an 8-byte array.
            It should not be zero. .
        spanKind:
          type: string
          description: >-
            Optional. Distinguishes between spans generated in a particular
            context. For example, two spans with the same name may be
            distinguished using `CLIENT` (caller) and `SERVER` (callee) to
            identify an RPC call.
          enum:
            - SPAN_KIND_UNSPECIFIED
            - INTERNAL
            - SERVER
            - CLIENT
            - PRODUCER
            - CONSUMER
          enumDescriptions:
            - >-
              Unspecified. Do NOT use as default. Implementations MAY assume
              SpanKind.INTERNAL to be default.
            - Indicates that the span is used internally. Default value.
            - >-
              Indicates that the span covers server-side handling of an RPC or
              other remote network request.
            - >-
              Indicates that the span covers the client-side wrapper around an
              RPC or other remote request.
            - >-
              Indicates that the span describes producer sending a message to a
              broker. Unlike client and server, there is no direct critical path
              latency relationship between producer and consumer spans (e.g.
              publishing a message to a pubsub service).
            - >-
              Indicates that the span describes consumer receiving a message
              from a broker. Unlike client and server, there is no direct
              critical path latency relationship between producer and consumer
              spans (e.g. receiving a message from a pubsub service
              subscription).
        displayName:
          description: >-
            Required. A description of the span's operation (up to 128 bytes).
            Cloud Trace displays the description in the Cloud console. For
            example, the display name can be a qualified method name or a file
            name and a line number where the operation is called. A best
            practice is to use the same display name within an application and
            at the same call point. This makes it easier to correlate spans in
            different traces.
          $ref: '#/components/schemas/TruncatableString'
        startTime:
          type: string
          description: >-
            Required. The start time of the span. On the client side, this is
            the time kept by the local machine where the span execution starts.
            On the server side, this is the time when the server's application
            handler starts running.
          format: google-datetime
        links:
          description: >-
            Links associated with the span. You can have up to 128 links per
            Span.
          $ref: '#/components/schemas/Links'
        spanId:
          type: string
          description: Required. The `[SPAN_ID]` portion of the span's resource name.
        stackTrace:
          description: Stack trace captured at the start of the span.
          $ref: '#/components/schemas/StackTrace'
        childSpanCount:
          type: integer
          description: >-
            Optional. The number of child spans that were generated while this
            span was active. If set, allows implementation to detect missing
            child spans.
          format: int32
        attributes:
          $ref: '#/components/schemas/Attributes'
          description: >-
            A set of attributes on the span. You can have up to 32 attributes
            per span.
        endTime:
          description: >-
            Required. The end time of the span. On the client side, this is the
            time kept by the local machine where the span execution ends. On the
            server side, this is the time when the server application handler
            stops running.
          format: google-datetime
          type: string
        sameProcessAsParentSpan:
          description: >-
            Optional. Set this parameter to indicate whether this span is in the
            same process as its parent. If you do not set this parameter, Trace
            is unable to take advantage of this helpful information.
          type: boolean
        parentSpanId:
          description: >-
            The `[SPAN_ID]` of this span's parent span. If this is a root span,
            then this field must be empty.
          type: string
        status:
          description: Optional. The final status for this span.
          $ref: '#/components/schemas/Status'
        timeEvents:
          $ref: '#/components/schemas/TimeEvents'
          description: >-
            A set of time events. You can have up to 32 annotations and 128
            message events per span.
      type: object
      id: Span
      description: >-
        A span represents a single operation within a trace. Spans can be nested
        to form a trace tree. Often, a trace contains a root span that describes
        the end-to-end latency, and one or more subspans for its sub-operations.
        A trace can also contain multiple root spans, or none at all. Spans do
        not need to be contiguous. There might be gaps or overlaps between spans
        in a trace.
    Annotation:
      description: Text annotation with a set of attributes.
      type: object
      properties:
        attributes:
          description: >-
            A set of attributes on the annotation. You can have up to 4
            attributes per Annotation.
          $ref: '#/components/schemas/Attributes'
        description:
          $ref: '#/components/schemas/TruncatableString'
          description: >-
            A user-supplied message describing the event. The maximum length for
            the description is 256 bytes.
      id: Annotation
    Links:
      description: >-
        A collection of links, which are references from this span to a span in
        the same or different trace.
      properties:
        link:
          description: A collection of links.
          items:
            $ref: '#/components/schemas/Link'
          type: array
        droppedLinksCount:
          type: integer
          description: >-
            The number of dropped links after the maximum size was enforced. If
            this value is 0, then no links were dropped.
          format: int32
      type: object
      id: Links
    Status:
      id: Status
      properties:
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          type: array
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
      type: object
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
    Module:
      id: Module
      properties:
        module:
          description: >-
            For example: main binary, kernel modules, and dynamic libraries such
            as libc.so, sharedlib.so (up to 256 bytes).
          $ref: '#/components/schemas/TruncatableString'
        buildId:
          $ref: '#/components/schemas/TruncatableString'
          description: >-
            A unique identifier for the module, usually a hash of its contents
            (up to 128 bytes).
      description: Binary module.
      type: object
    Link:
      properties:
        type:
          description: The relationship of the current span relative to the linked span.
          enumDescriptions:
            - The relationship of the two spans is unknown.
            - The linked span is a child of the current span.
            - The linked span is a parent of the current span.
          enum:
            - TYPE_UNSPECIFIED
            - CHILD_LINKED_SPAN
            - PARENT_LINKED_SPAN
          type: string
        attributes:
          $ref: '#/components/schemas/Attributes'
          description: >-
            A set of attributes on the link. Up to 32 attributes can be
            specified per link.
        spanId:
          type: string
          description: The `[SPAN_ID]` for a span within a trace.
        traceId:
          type: string
          description: The `[TRACE_ID]` for a trace within a project.
      type: object
      description: >-
        A pointer from the current span to another span in the same trace or in
        a different trace. For example, this can be used in batching operations,
        where a single batch handler processes multiple requests from different
        traces or when the handler receives a request from a different project.
      id: Link
    TruncatableString:
      properties:
        value:
          description: >-
            The shortened string. For example, if the original string is 500
            bytes long and the limit of the string is 128 bytes, then `value`
            contains the first 128 bytes of the 500-byte string. Truncation
            always happens on a UTF8 character boundary. If there are multi-byte
            characters in the string, then the length of the shortened string
            might be less than the size limit.
          type: string
        truncatedByteCount:
          format: int32
          type: integer
          description: >-
            The number of bytes removed from the original string. If this value
            is 0, then the string was not shortened.
      id: TruncatableString
      description: Represents a string that might be shortened to a specified length.
      type: object
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/trace.append: Write Trace data for a project or application
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v2/projects/{projectsId}/traces/{tracesId}/spans/{spansId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/oauth_token'
    post:
      description: Creates a new span.
      operationId: cloudtrace.projects.traces.spans.createSpan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Span'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/trace.append
          Oauth2c:
            - https://www.googleapis.com/auth/trace.append
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Span'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: tracesId
          required: true
          schema:
            type: string
        - in: path
          name: spansId
          required: true
          schema:
            type: string
      x-stackQL-resource: spans__span
      x-stackQL-verb: insert
  /v2/projects/{projectsId}/traces:batchWrite:
    parameters: *ref_1
    post:
      description: >-
        Batch writes new spans to new or existing traces. You cannot update
        existing spans.
      operationId: cloudtrace.projects.traces.batchWrite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchWriteSpansRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/trace.append
          Oauth2c:
            - https://www.googleapis.com/auth/trace.append
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: traces
      x-stackQL-verb: exec
