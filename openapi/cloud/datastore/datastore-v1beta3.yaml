openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Datastore API
  description: >-
    Accesses the schemaless NoSQL database to provide fully managed, robust,
    scalable storage for your application. 
  version: v1beta3
  x-discovery-doc-revision: '20230611'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/datastore/
servers:
  - url: https://datastore.googleapis.com
components:
  schemas:
    GoogleDatastoreAdminV1PrepareStepDetails:
      properties:
        concurrencyMode:
          enum:
            - CONCURRENCY_MODE_UNSPECIFIED
            - PESSIMISTIC
            - OPTIMISTIC
            - OPTIMISTIC_WITH_ENTITY_GROUPS
          description: >-
            The concurrency mode this database will use when it reaches the
            `REDIRECT_WRITES` step.
          type: string
          enumDescriptions:
            - Unspecified.
            - Pessimistic concurrency.
            - Optimistic concurrency.
            - Optimistic concurrency with entity groups.
      description: Details for the `PREPARE` step.
      id: GoogleDatastoreAdminV1PrepareStepDetails
      type: object
    CompositeFilter:
      type: object
      properties:
        filters:
          items:
            $ref: '#/components/schemas/Filter'
          type: array
          description: >-
            The list of filters to combine. Requires: * At least one filter is
            present.
        op:
          enum:
            - OPERATOR_UNSPECIFIED
            - AND
            - OR
          description: The operator for combining multiple filters.
          type: string
          enumDescriptions:
            - Unspecified. This value must not be used.
            - The results are required to satisfy each of the combined filters.
            - >-
              Documents are required to satisfy at least one of the combined
              filters.
      id: CompositeFilter
      description: A filter that merges multiple other filters using the given operator.
    PathElement:
      id: PathElement
      description: >-
        A (kind, ID/name) pair used to construct a key path. If either name or
        ID is set, the element is complete. If neither is set, the element is
        incomplete.
      properties:
        name:
          description: >-
            The name of the entity. A name matching regex `__.*__` is
            reserved/read-only. A name must not be more than 1500 bytes when
            UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy
            values that are not valid UTF-8 are encoded as `__bytes__` where ``
            is the base-64 encoding of the bytes.
          type: string
        id:
          description: >-
            The auto-allocated ID of the entity. Never equal to zero. Values
            less than zero are discouraged and may not be supported in the
            future.
          type: string
          format: int64
        kind:
          description: >-
            The kind of the entity. A kind matching regex `__.*__` is
            reserved/read-only. A kind must not contain more than 1500 bytes
            when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes.
            Legacy values that are not valid UTF-8 are encoded as `__bytes__`
            where `` is the base-64 encoding of the bytes.
          type: string
      type: object
    Value:
      description: >-
        A message that can hold any of the supported value types and associated
        metadata.
      type: object
      id: Value
      properties:
        entityValue:
          description: >-
            An entity value. - May have no key. - May have a key with an
            incomplete key path. - May have a reserved/read-only key.
          $ref: '#/components/schemas/Entity'
        nullValue:
          description: A null value.
          type: string
          enum:
            - NULL_VALUE
          enumDescriptions:
            - Null value.
        integerValue:
          description: An integer value.
          type: string
          format: int64
        excludeFromIndexes:
          description: >-
            If the value should be excluded from all indexes including those
            defined explicitly.
          type: boolean
        timestampValue:
          format: google-datetime
          type: string
          description: >-
            A timestamp value. When stored in the Datastore, precise only to
            microseconds; any additional precision is rounded down.
        geoPointValue:
          description: A geo point value representing a point on the surface of Earth.
          $ref: '#/components/schemas/LatLng'
        arrayValue:
          $ref: '#/components/schemas/ArrayValue'
          description: >-
            An array value. Cannot contain another array value. A `Value`
            instance that sets field `array_value` must not set fields `meaning`
            or `exclude_from_indexes`.
        meaning:
          format: int32
          type: integer
          description: >-
            The `meaning` field should only be populated for backwards
            compatibility.
        booleanValue:
          description: A boolean value.
          type: boolean
        doubleValue:
          description: A double value.
          format: double
          type: number
        blobValue:
          type: string
          description: >-
            A blob value. May have at most 1,000,000 bytes. When
            `exclude_from_indexes` is false, may have at most 1500 bytes. In
            JSON requests, must be base64-encoded.
          format: byte
        keyValue:
          $ref: '#/components/schemas/Key'
          description: A key value.
        stringValue:
          type: string
          description: >-
            A UTF-8 encoded string value. When `exclude_from_indexes` is false
            (it is indexed) , may have at most 1500 bytes. Otherwise, may be set
            to at most 1,000,000 bytes.
    ReserveIdsResponse:
      id: ReserveIdsResponse
      description: The response for Datastore.ReserveIds.
      properties: {}
      type: object
    TransactionOptions:
      properties:
        readWrite:
          description: The transaction should allow both reads and writes.
          $ref: '#/components/schemas/ReadWrite'
        readOnly:
          description: The transaction should only allow reads.
          $ref: '#/components/schemas/ReadOnly'
      type: object
      description: >-
        Options for beginning a new transaction. Transactions can be created
        explicitly with calls to Datastore.BeginTransaction or implicitly by
        setting ReadOptions.new_transaction in read requests.
      id: TransactionOptions
    RollbackRequest:
      type: object
      description: The request for Datastore.Rollback.
      id: RollbackRequest
      properties:
        transaction:
          type: string
          description: >-
            Required. The transaction identifier, returned by a call to
            Datastore.BeginTransaction.
          format: byte
    PropertyFilter:
      type: object
      id: PropertyFilter
      description: A filter on a specific property.
      properties:
        op:
          description: The operator to filter by.
          enum:
            - OPERATOR_UNSPECIFIED
            - LESS_THAN
            - LESS_THAN_OR_EQUAL
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL
            - EQUAL
            - IN
            - NOT_EQUAL
            - HAS_ANCESTOR
            - NOT_IN
          enumDescriptions:
            - Unspecified. This value must not be used.
            - >-
              The given `property` is less than the given `value`. Requires: *
              That `property` comes first in `order_by`.
            - >-
              The given `property` is less than or equal to the given `value`.
              Requires: * That `property` comes first in `order_by`.
            - >-
              The given `property` is greater than the given `value`. Requires:
              * That `property` comes first in `order_by`.
            - >-
              The given `property` is greater than or equal to the given
              `value`. Requires: * That `property` comes first in `order_by`.
            - The given `property` is equal to the given `value`.
            - >-
              The given `property` is equal to at least one value in the given
              array. Requires: * That `value` is a non-empty `ArrayValue`,
              subject to disjunction limits. * No `NOT_IN` is in the same query.
            - >-
              The given `property` is not equal to the given `value`. Requires:
              * No other `NOT_EQUAL` or `NOT_IN` is in the same query. * That
              `property` comes first in the `order_by`.
            - >-
              Limit the result set to the given entity and its descendants.
              Requires: * That `value` is an entity key. * All evaluated
              disjunctions must have the same `HAS_ANCESTOR` filter.
            - >-
              The value of the `property` is not in the given array. Requires: *
              That `value` is a non-empty `ArrayValue` with at most 10 values. *
              No other `OR`, `IN`, `NOT_IN`, `NOT_EQUAL` is in the same query. *
              That `field` comes first in the `order_by`.
          type: string
        value:
          $ref: '#/components/schemas/Value'
          description: The value to compare the property to.
        property:
          description: The property to filter by.
          $ref: '#/components/schemas/PropertyReference'
    Query:
      description: A query for entities.
      type: object
      properties:
        filter:
          description: The filter to apply.
          $ref: '#/components/schemas/Filter'
        distinctOn:
          items:
            $ref: '#/components/schemas/PropertyReference'
          description: >-
            The properties to make distinct. The query results will contain the
            first result for each distinct combination of values for the given
            properties (if empty, all results are returned). Requires: * If
            `order` is specified, the set of distinct on properties must appear
            before the non-distinct on properties in `order`.
          type: array
        kind:
          description: >-
            The kinds to query (if empty, returns entities of all kinds).
            Currently at most 1 kind may be specified.
          items:
            $ref: '#/components/schemas/KindExpression'
          type: array
        projection:
          items:
            $ref: '#/components/schemas/Projection'
          description: The projection to return. Defaults to returning all properties.
          type: array
        limit:
          format: int32
          type: integer
          description: >-
            The maximum number of results to return. Applies after all other
            constraints. Optional. Unspecified is interpreted as no limit. Must
            be >= 0 if specified.
        offset:
          format: int32
          type: integer
          description: >-
            The number of results to skip. Applies before limit, but after all
            other constraints. Optional. Must be >= 0 if specified.
        startCursor:
          format: byte
          type: string
          description: >-
            A starting point for the query results. Query cursors are returned
            in query result batches and [can only be used to continue the same
            query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
        endCursor:
          description: >-
            An ending point for the query results. Query cursors are returned in
            query result batches and [can only be used to limit the same
            query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
          type: string
          format: byte
        order:
          description: >-
            The order to apply to the query results (if empty, order is
            unspecified).
          type: array
          items:
            $ref: '#/components/schemas/PropertyOrder'
      id: Query
    AggregationResultBatch:
      id: AggregationResultBatch
      properties:
        moreResults:
          enum:
            - MORE_RESULTS_TYPE_UNSPECIFIED
            - NOT_FINISHED
            - MORE_RESULTS_AFTER_LIMIT
            - MORE_RESULTS_AFTER_CURSOR
            - NO_MORE_RESULTS
          type: string
          description: >-
            The state of the query after the current batch. Only COUNT(*)
            aggregations are supported in the initial launch. Therefore,
            expected result type is limited to `NO_MORE_RESULTS`.
          enumDescriptions:
            - Unspecified. This value is never used.
            - There may be additional batches to fetch from this query.
            - >-
              The query is finished, but there may be more results after the
              limit.
            - >-
              The query is finished, but there may be more results after the end
              cursor.
            - The query is finished, and there are no more results.
        readTime:
          format: google-datetime
          description: >-
            Read timestamp this batch was returned from. In a single
            transaction, subsequent query result batches for the same query can
            have a greater timestamp. Each batch's read timestamp is valid for
            all preceding batches.
          type: string
        aggregationResults:
          items:
            $ref: '#/components/schemas/AggregationResult'
          description: The aggregation results for this batch.
          type: array
      description: A batch of aggregation results produced by an aggregation query.
      type: object
    AggregationResult:
      description: >-
        The result of a single bucket from a Datastore aggregation query. The
        keys of `aggregate_properties` are the same for all results in an
        aggregation query, unlike entity queries which can have different fields
        present for each result.
      type: object
      id: AggregationResult
      properties:
        aggregateProperties:
          description: >-
            The result of the aggregation functions, ex: `COUNT(*) AS
            total_entities`. The key is the alias assigned to the aggregation
            function on input and the size of this map equals the number of
            aggregation functions in the query.
          additionalProperties:
            $ref: '#/components/schemas/Value'
          type: object
    AllocateIdsRequest:
      properties:
        keys:
          description: >-
            Required. A list of keys with incomplete key paths for which to
            allocate IDs. No key may be reserved/read-only.
          items:
            $ref: '#/components/schemas/Key'
          type: array
      description: The request for Datastore.AllocateIds.
      type: object
      id: AllocateIdsRequest
    RunAggregationQueryRequest:
      id: RunAggregationQueryRequest
      properties:
        partitionId:
          description: >-
            Entities are partitioned into subsets, identified by a partition ID.
            Queries are scoped to a single partition. This partition ID is
            normalized with the standard default context partition ID.
          $ref: '#/components/schemas/PartitionId'
        gqlQuery:
          description: The GQL query to run. This query must be an aggregation query.
          $ref: '#/components/schemas/GqlQuery'
        aggregationQuery:
          description: The query to run.
          $ref: '#/components/schemas/AggregationQuery'
        readOptions:
          $ref: '#/components/schemas/ReadOptions'
          description: The options for this query.
      type: object
      description: The request for Datastore.RunAggregationQuery.
    ArrayValue:
      description: An array value.
      id: ArrayValue
      type: object
      properties:
        values:
          items:
            $ref: '#/components/schemas/Value'
          type: array
          description: >-
            Values in the array. The order of values in an array is preserved as
            long as all values have identical settings for
            'exclude_from_indexes'.
    GoogleDatastoreAdminV1ExportEntitiesResponse:
      properties:
        outputUrl:
          description: >-
            Location of the output metadata file. This can be used to begin an
            import into Cloud Datastore (this project or another project). See
            google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only
            present if the operation completed successfully.
          type: string
      id: GoogleDatastoreAdminV1ExportEntitiesResponse
      type: object
      description: >-
        The response for
        google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
    GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata:
      properties:
        migrationState:
          description: >-
            The current state of migration from Cloud Datastore to Cloud
            Firestore in Datastore mode.
          enum:
            - MIGRATION_STATE_UNSPECIFIED
            - RUNNING
            - PAUSED
            - COMPLETE
          enumDescriptions:
            - Unspecified.
            - The migration is running.
            - The migration is paused.
            - The migration is complete.
          type: string
        migrationStep:
          enum:
            - MIGRATION_STEP_UNSPECIFIED
            - PREPARE
            - START
            - APPLY_WRITES_SYNCHRONOUSLY
            - COPY_AND_VERIFY
            - REDIRECT_EVENTUALLY_CONSISTENT_READS
            - REDIRECT_STRONGLY_CONSISTENT_READS
            - REDIRECT_WRITES
          description: >-
            The current step of migration from Cloud Datastore to Cloud
            Firestore in Datastore mode.
          type: string
          enumDescriptions:
            - Unspecified.
            - 'Pre-migration: the database is prepared for migration.'
            - Start of migration.
            - Writes are applied synchronously to at least one replica.
            - >-
              Data is copied to Cloud Firestore and then verified to match the
              data in Cloud Datastore.
            - Eventually-consistent reads are redirected to Cloud Firestore.
            - Strongly-consistent reads are redirected to Cloud Firestore.
            - Writes are redirected to Cloud Firestore.
      type: object
      id: GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata
      description: >-
        Metadata for Datastore to Firestore migration operations. The
        DatastoreFirestoreMigration operation is not started by the end-user via
        an explicit "creation" method. This is an intentional deviation from the
        LRO design pattern. This singleton resource can be accessed at:
        "projects/{project_id}/operations/datastore-firestore-migration"
    LookupRequest:
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
          description: Required. Keys of entities to look up.
        readOptions:
          $ref: '#/components/schemas/ReadOptions'
          description: The options for this lookup request.
      type: object
      id: LookupRequest
      description: The request for Datastore.Lookup.
    PropertyOrder:
      properties:
        direction:
          type: string
          enum:
            - DIRECTION_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          enumDescriptions:
            - Unspecified. This value must not be used.
            - Ascending.
            - Descending.
          description: The direction to order by. Defaults to `ASCENDING`.
        property:
          description: The property to order by.
          $ref: '#/components/schemas/PropertyReference'
      id: PropertyOrder
      description: The desired order for a specific property.
      type: object
    GoogleDatastoreAdminV1beta1ImportEntitiesMetadata:
      type: object
      id: GoogleDatastoreAdminV1beta1ImportEntitiesMetadata
      properties:
        inputUrl:
          type: string
          description: >-
            The location of the import metadata file. This will be the same
            value as the
            google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url
            field.
        progressBytes:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
          description: An estimate of the number of bytes processed.
        progressEntities:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
          description: An estimate of the number of entities processed.
        common:
          description: Metadata common to all Datastore Admin operations.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata'
        entityFilter:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter'
          description: Description of which entities are being imported.
      description: Metadata for ImportEntities operations.
    AllocateIdsResponse:
      id: AllocateIdsResponse
      properties:
        keys:
          items:
            $ref: '#/components/schemas/Key'
          description: >-
            The keys specified in the request (in the same order), each with its
            key path completed with a newly allocated ID.
          type: array
      type: object
      description: The response for Datastore.AllocateIds.
    GoogleDatastoreAdminV1Progress:
      description: Measures the progress of a particular metric.
      id: GoogleDatastoreAdminV1Progress
      type: object
      properties:
        workEstimated:
          description: >-
            An estimate of how much work needs to be performed. May be zero if
            the work estimate is unavailable.
          type: string
          format: int64
        workCompleted:
          format: int64
          type: string
          description: >-
            The amount of work that has been completed. Note that this may be
            greater than work_estimated.
    GoogleDatastoreAdminV1MigrationStateEvent:
      type: object
      id: GoogleDatastoreAdminV1MigrationStateEvent
      properties:
        state:
          type: string
          description: The new state of the migration.
          enumDescriptions:
            - Unspecified.
            - The migration is running.
            - The migration is paused.
            - The migration is complete.
          enum:
            - MIGRATION_STATE_UNSPECIFIED
            - RUNNING
            - PAUSED
            - COMPLETE
      description: >-
        An event signifying a change in state of a [migration from Cloud
        Datastore to Cloud Firestore in Datastore
        mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
    LatLng:
      type: object
      description: >-
        An object that represents a latitude/longitude pair. This is expressed
        as a pair of doubles to represent degrees latitude and degrees
        longitude. Unless specified otherwise, this object must conform to the
        WGS84 standard. Values must be within normalized ranges.
      id: LatLng
      properties:
        longitude:
          description: The longitude in degrees. It must be in the range [-180.0, +180.0].
          format: double
          type: number
        latitude:
          format: double
          type: number
          description: The latitude in degrees. It must be in the range [-90.0, +90.0].
    Projection:
      properties:
        property:
          $ref: '#/components/schemas/PropertyReference'
          description: The property to project.
      description: A representation of a property in a projection.
      id: Projection
      type: object
    GoogleDatastoreAdminV1beta1ExportEntitiesResponse:
      type: object
      id: GoogleDatastoreAdminV1beta1ExportEntitiesResponse
      properties:
        outputUrl:
          description: >-
            Location of the output metadata file. This can be used to begin an
            import into Cloud Datastore (this project or another project). See
            google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only
            present if the operation completed successfully.
          type: string
      description: >-
        The response for
        google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
    GqlQuery:
      type: object
      properties:
        allowLiterals:
          description: >-
            When false, the query string must not contain any literals and
            instead must bind all values. For example, `SELECT * FROM Kind WHERE
            a = 'string literal'` is not allowed, while `SELECT * FROM Kind
            WHERE a = @value` is.
          type: boolean
        queryString:
          description: >-
            A string of the format described
            [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
          type: string
        positionalBindings:
          description: >-
            Numbered binding site @1 references the first numbered parameter,
            effectively using 1-based indexing, rather than the usual 0. For
            each binding site numbered i in `query_string`, there must be an
            i-th numbered parameter. The inverse must also be true.
          items:
            $ref: '#/components/schemas/GqlQueryParameter'
          type: array
        namedBindings:
          additionalProperties:
            $ref: '#/components/schemas/GqlQueryParameter'
          type: object
          description: >-
            For each non-reserved named binding site in the query string, there
            must be a named parameter with that name, but not necessarily the
            inverse. Key must match regex `A-Za-z_$*`, must not match regex
            `__.*__`, and must not be `""`.
      id: GqlQuery
      description: >-
        A [GQL
        query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
    Key:
      id: Key
      description: >-
        A unique identifier for an entity. If a key's partition ID or any of its
        path kinds or names are reserved/read-only, the key is
        reserved/read-only. A reserved/read-only key is forbidden in certain
        documented contexts.
      properties:
        partitionId:
          $ref: '#/components/schemas/PartitionId'
          description: >-
            Entities are partitioned into subsets, currently identified by a
            project ID and namespace ID. Queries are scoped to a single
            partition.
        path:
          items:
            $ref: '#/components/schemas/PathElement'
          description: >-
            The entity path. An entity path consists of one or more elements
            composed of a kind and a string or numerical identifier, which
            identify entities. The first element identifies a _root entity_, the
            second element identifies a _child_ of the root entity, the third
            element identifies a child of the second entity, and so forth. The
            entities identified by all prefixes of the path are called the
            element's _ancestors_. An entity path is always fully complete:
            *all* of the entity's ancestors are required to be in the path along
            with the entity identifier itself. The only exception is that in
            some documented cases, the identifier in the last path element (for
            the entity) itself may be omitted. For example, the last path
            element of the key of `Mutation.insert` may have no identifier. A
            path can never be empty, and a path can have at most 100 elements.
          type: array
      type: object
    EntityResult:
      description: The result of fetching an entity from Datastore.
      id: EntityResult
      type: object
      properties:
        entity:
          description: The resulting entity.
          $ref: '#/components/schemas/Entity'
        cursor:
          description: >-
            A cursor that points to the position after the result entity. Set
            only when the `EntityResult` is part of a `QueryResultBatch`
            message.
          format: byte
          type: string
        updateTime:
          format: google-datetime
          description: >-
            The time at which the entity was last changed. This field is set for
            `FULL` entity results. If this entity is missing, this field will
            not be set.
          type: string
        version:
          description: >-
            The version of the entity, a strictly positive number that
            monotonically increases with changes to the entity. This field is
            set for `FULL` entity results. For missing entities in
            `LookupResponse`, this is the version of the snapshot that was used
            to look up the entity, and it is always set except for eventually
            consistent reads.
          format: int64
          type: string
        createTime:
          format: google-datetime
          type: string
          description: >-
            The time at which the entity was created. This field is set for
            `FULL` entity results. If this entity is missing, this field will
            not be set.
    GoogleDatastoreAdminV1ExportEntitiesMetadata:
      description: Metadata for ExportEntities operations.
      type: object
      properties:
        progressBytes:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
          description: An estimate of the number of bytes processed.
        progressEntities:
          description: An estimate of the number of entities processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
        outputUrlPrefix:
          description: >-
            Location for the export metadata and data files. This will be the
            same value as the
            google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix
            field. The final output location is provided in
            google.datastore.admin.v1.ExportEntitiesResponse.output_url.
          type: string
        entityFilter:
          description: Description of which entities are being exported.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1EntityFilter'
        common:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1CommonMetadata'
          description: Metadata common to all Datastore Admin operations.
      id: GoogleDatastoreAdminV1ExportEntitiesMetadata
    Count:
      properties:
        upTo:
          format: int64
          type: string
          description: >-
            Optional. Optional constraint on the maximum number of entities to
            count. This provides a way to set an upper bound on the number of
            entities to scan, limiting latency, and cost. Unspecified is
            interpreted as no bound. If a zero value is provided, a count result
            of zero should always be expected. High-Level Example: ``` AGGREGATE
            COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be
            non-negative when present.
      description: >-
        Count of entities that match the query. The `COUNT(*)` aggregation
        function operates on the entire entity so it does not require a field
        reference.
      id: Count
      type: object
    PartitionId:
      description: >-
        A partition ID identifies a grouping of entities. The grouping is always
        by project and namespace, however the namespace ID may be empty. A
        partition ID contains several dimensions: project ID and namespace ID.
        Partition dimensions: - May be `""`. - Must be valid UTF-8 bytes. - Must
        have values that match regex `[A-Za-z\d\.\-_]{1,100}` If the value of
        any dimension matches regex `__.*__`, the partition is
        reserved/read-only. A reserved/read-only partition ID is forbidden in
        certain documented contexts. Foreign partition IDs (in which the project
        ID does not match the context project ID ) are discouraged. Reads and
        writes of foreign partition IDs may fail if the project is not in an
        active state.
      properties:
        namespaceId:
          type: string
          description: If not empty, the ID of the namespace to which the entities belong.
        projectId:
          type: string
          description: The ID of the project to which the entities belong.
      type: object
      id: PartitionId
    ReserveIdsRequest:
      type: object
      properties:
        databaseId:
          type: string
          description: >-
            The ID of the database against which to make the request.
            '(default)' is not allowed; please use empty string '' to refer the
            default database.
        keys:
          type: array
          description: >-
            Required. A list of keys with complete key paths whose numeric IDs
            should not be auto-allocated.
          items:
            $ref: '#/components/schemas/Key'
      description: The request for Datastore.ReserveIds.
      id: ReserveIdsRequest
    Aggregation:
      properties:
        count:
          description: Count aggregator.
          $ref: '#/components/schemas/Count'
        alias:
          type: string
          description: >-
            Optional. Optional name of the property to store the result of the
            aggregation. If not provided, Datastore will pick a default name
            following the format `property_`. For example: ``` AGGREGATE
            COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS
            count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE
            COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS property_1,
            COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS property_2 OVER ( ...
            ); ``` Requires: * Must be unique across all aggregation aliases. *
            Conform to entity property name limitations.
      description: Defines an aggregation that produces a single result.
      type: object
      id: Aggregation
    GoogleDatastoreAdminV1beta1Progress:
      description: Measures the progress of a particular metric.
      id: GoogleDatastoreAdminV1beta1Progress
      type: object
      properties:
        workEstimated:
          type: string
          description: >-
            An estimate of how much work needs to be performed. May be zero if
            the work estimate is unavailable.
          format: int64
        workCompleted:
          format: int64
          description: >-
            The amount of work that has been completed. Note that this may be
            greater than work_estimated.
          type: string
    AggregationQuery:
      description: Datastore query for running an aggregation over a Query.
      type: object
      id: AggregationQuery
      properties:
        aggregations:
          items:
            $ref: '#/components/schemas/Aggregation'
          type: array
          description: >-
            Optional. Series of aggregations to apply over the results of the
            `nested_query`. Requires: * A minimum of one and maximum of five
            aggregations per query.
        nestedQuery:
          description: Nested query for aggregation
          $ref: '#/components/schemas/Query'
    GoogleDatastoreAdminV1MigrationProgressEvent:
      properties:
        step:
          enum:
            - MIGRATION_STEP_UNSPECIFIED
            - PREPARE
            - START
            - APPLY_WRITES_SYNCHRONOUSLY
            - COPY_AND_VERIFY
            - REDIRECT_EVENTUALLY_CONSISTENT_READS
            - REDIRECT_STRONGLY_CONSISTENT_READS
            - REDIRECT_WRITES
          enumDescriptions:
            - Unspecified.
            - 'Pre-migration: the database is prepared for migration.'
            - Start of migration.
            - Writes are applied synchronously to at least one replica.
            - >-
              Data is copied to Cloud Firestore and then verified to match the
              data in Cloud Datastore.
            - Eventually-consistent reads are redirected to Cloud Firestore.
            - Strongly-consistent reads are redirected to Cloud Firestore.
            - Writes are redirected to Cloud Firestore.
          description: >-
            The step that is starting. An event with step set to `START`
            indicates that the migration has been reverted back to the initial
            pre-migration state.
          type: string
        prepareStepDetails:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1PrepareStepDetails'
          description: Details for the `PREPARE` step.
        redirectWritesStepDetails:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1RedirectWritesStepDetails'
          description: Details for the `REDIRECT_WRITES` step.
      type: object
      description: >-
        An event signifying the start of a new step in a [migration from Cloud
        Datastore to Cloud Firestore in Datastore
        mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
      id: GoogleDatastoreAdminV1MigrationProgressEvent
    Entity:
      id: Entity
      properties:
        key:
          description: >-
            The entity's key. An entity must have a key, unless otherwise
            documented (for example, an entity in `Value.entity_value` may have
            no key). An entity's kind is its key path's last element's kind, or
            null if it has no key.
          $ref: '#/components/schemas/Key'
        properties:
          description: >-
            The entity's properties. The map's keys are property names. A
            property name matching regex `__.*__` is reserved. A reserved
            property name is forbidden in certain documented contexts. The map
            keys, represented as UTF-8, must not exceed 1,500 bytes and cannot
            be empty.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Value'
      type: object
      description: A Datastore data object. Must not exceed 1 MiB - 4 bytes.
    GoogleDatastoreAdminV1beta1ExportEntitiesMetadata:
      id: GoogleDatastoreAdminV1beta1ExportEntitiesMetadata
      properties:
        entityFilter:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter'
          description: Description of which entities are being exported.
        progressEntities:
          description: An estimate of the number of entities processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
        progressBytes:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
          description: An estimate of the number of bytes processed.
        outputUrlPrefix:
          description: >-
            Location for the export metadata and data files. This will be the
            same value as the
            google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix
            field. The final output location is provided in
            google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
          type: string
        common:
          description: Metadata common to all Datastore Admin operations.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata'
      description: Metadata for ExportEntities operations.
      type: object
    KindExpression:
      id: KindExpression
      properties:
        name:
          description: The name of the kind.
          type: string
      type: object
      description: A representation of a kind.
    GqlQueryParameter:
      description: A binding parameter for a GQL query.
      id: GqlQueryParameter
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Value'
          description: A value parameter.
        cursor:
          description: A query cursor. Query cursors are returned in query result batches.
          type: string
          format: byte
    RollbackResponse:
      properties: {}
      id: RollbackResponse
      description: The response for Datastore.Rollback. (an empty message).
      type: object
    MutationResult:
      id: MutationResult
      description: The result of applying a mutation.
      type: object
      properties:
        key:
          description: >-
            The automatically allocated key. Set only when the mutation
            allocated a key.
          $ref: '#/components/schemas/Key'
        version:
          type: string
          description: >-
            The version of the entity on the server after processing the
            mutation. If the mutation doesn't change anything on the server,
            then the version will be the version of the current entity or, if no
            entity is present, a version that is strictly greater than the
            version of any previous entity and less than the version of any
            possible future entity.
          format: int64
        conflictDetected:
          type: boolean
          description: >-
            Whether a conflict was detected for this mutation. Always false when
            a conflict detection strategy field is not set in the mutation.
        updateTime:
          format: google-datetime
          type: string
          description: >-
            The update time of the entity on the server after processing the
            mutation. If the mutation doesn't change anything on the server,
            then the timestamp will be the update timestamp of the current
            entity. This field will not be set after a 'delete'.
        createTime:
          type: string
          format: google-datetime
          description: >-
            The create time of the entity. This field will not be set after a
            'delete'.
    CommitResponse:
      type: object
      properties:
        mutationResults:
          description: >-
            The result of performing the mutations. The i-th mutation result
            corresponds to the i-th mutation in the request.
          type: array
          items:
            $ref: '#/components/schemas/MutationResult'
        commitTime:
          type: string
          format: google-datetime
          description: >-
            The transaction commit timestamp. Not set for non-transactional
            commits.
        indexUpdates:
          format: int32
          type: integer
          description: >-
            The number of index entries updated during the commit, or zero if
            none were updated.
      id: CommitResponse
      description: The response for Datastore.Commit.
    ReadOptions:
      properties:
        transaction:
          format: byte
          type: string
          description: >-
            The identifier of the transaction in which to read. A transaction
            identifier is returned by a call to Datastore.BeginTransaction.
        readTime:
          type: string
          format: google-datetime
          description: >-
            Reads entities as they were at the given time. This may not be older
            than 270 seconds. This value is only supported for Cloud Firestore
            in Datastore mode.
        readConsistency:
          type: string
          enum:
            - READ_CONSISTENCY_UNSPECIFIED
            - STRONG
            - EVENTUAL
          enumDescriptions:
            - Unspecified. This value must not be used.
            - Strong consistency.
            - Eventual consistency.
          description: The non-transactional read consistency to use.
      id: ReadOptions
      type: object
      description: The options shared by read requests.
    Filter:
      properties:
        compositeFilter:
          description: A composite filter.
          $ref: '#/components/schemas/CompositeFilter'
        propertyFilter:
          $ref: '#/components/schemas/PropertyFilter'
          description: A filter on a property.
      id: Filter
      type: object
      description: A holder for any type of filter.
    RunAggregationQueryResponse:
      properties:
        query:
          description: The parsed form of the `GqlQuery` from the request, if it was set.
          $ref: '#/components/schemas/AggregationQuery'
        batch:
          description: A batch of aggregation results. Always present.
          $ref: '#/components/schemas/AggregationResultBatch'
      id: RunAggregationQueryResponse
      description: The response for Datastore.RunAggregationQuery.
      type: object
    Mutation:
      properties:
        baseVersion:
          type: string
          description: >-
            The version of the entity that this mutation is being applied to. If
            this does not match the current version on the server, the mutation
            conflicts.
          format: int64
        upsert:
          $ref: '#/components/schemas/Entity'
          description: >-
            The entity to upsert. The entity may or may not already exist. The
            entity key's final path element may be incomplete.
        delete:
          $ref: '#/components/schemas/Key'
          description: >-
            The key of the entity to delete. The entity may or may not already
            exist. Must have a complete key path and must not be
            reserved/read-only.
        updateTime:
          format: google-datetime
          description: >-
            The update time of the entity that this mutation is being applied
            to. If this does not match the current update time on the server,
            the mutation conflicts.
          type: string
        update:
          description: >-
            The entity to update. The entity must already exist. Must have a
            complete key path.
          $ref: '#/components/schemas/Entity'
        insert:
          $ref: '#/components/schemas/Entity'
          description: >-
            The entity to insert. The entity must not already exist. The entity
            key's final path element may be incomplete.
      type: object
      description: A mutation to apply to an entity.
      id: Mutation
    GoogleDatastoreAdminV1CommonMetadata:
      description: Metadata common to all Datastore Admin operations.
      type: object
      id: GoogleDatastoreAdminV1CommonMetadata
      properties:
        startTime:
          format: google-datetime
          type: string
          description: The time that work began on the operation.
        labels:
          description: >-
            The client-assigned labels which were provided when the operation
            was created. May also include additional labels.
          additionalProperties:
            type: string
          type: object
        operationType:
          enumDescriptions:
            - Unspecified.
            - ExportEntities.
            - ImportEntities.
            - CreateIndex.
            - DeleteIndex.
          type: string
          enum:
            - OPERATION_TYPE_UNSPECIFIED
            - EXPORT_ENTITIES
            - IMPORT_ENTITIES
            - CREATE_INDEX
            - DELETE_INDEX
          description: >-
            The type of the operation. Can be used as a filter in
            ListOperationsRequest.
        endTime:
          type: string
          description: The time the operation ended, either successfully or otherwise.
          format: google-datetime
        state:
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - >-
              Request is in the process of being cancelled after user called
              google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - Request has finished being processed, but encountered an error.
            - >-
              Request has finished being cancelled after user called
              google.longrunning.Operations.CancelOperation.
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          type: string
          description: The current state of the Operation.
    GoogleDatastoreAdminV1ImportEntitiesMetadata:
      id: GoogleDatastoreAdminV1ImportEntitiesMetadata
      type: object
      description: Metadata for ImportEntities operations.
      properties:
        entityFilter:
          description: Description of which entities are being imported.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1EntityFilter'
        progressEntities:
          description: An estimate of the number of entities processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
        inputUrl:
          description: >-
            The location of the import metadata file. This will be the same
            value as the
            google.datastore.admin.v1.ExportEntitiesResponse.output_url field.
          type: string
        progressBytes:
          description: An estimate of the number of bytes processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
        common:
          description: Metadata common to all Datastore Admin operations.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1CommonMetadata'
    BeginTransactionResponse:
      id: BeginTransactionResponse
      type: object
      description: The response for Datastore.BeginTransaction.
      properties:
        transaction:
          description: The transaction identifier (always present).
          format: byte
          type: string
    ReadOnly:
      type: object
      properties:
        readTime:
          description: >-
            Reads entities at the given time. This may not be older than 60
            seconds.
          type: string
          format: google-datetime
      id: ReadOnly
      description: Options specific to read-only transactions.
    ReadWrite:
      type: object
      properties:
        previousTransaction:
          type: string
          description: The transaction identifier of the transaction being retried.
          format: byte
      id: ReadWrite
      description: Options specific to read / write transactions.
    RunQueryResponse:
      properties:
        batch:
          $ref: '#/components/schemas/QueryResultBatch'
          description: A batch of query results (always present).
        query:
          $ref: '#/components/schemas/Query'
          description: The parsed form of the `GqlQuery` from the request, if it was set.
      id: RunQueryResponse
      type: object
      description: The response for Datastore.RunQuery.
    LookupResponse:
      type: object
      properties:
        missing:
          type: array
          description: >-
            Entities not found as `ResultType.KEY_ONLY` entities. The order of
            results in this field is undefined and has no relation to the order
            of the keys in the input.
          items:
            $ref: '#/components/schemas/EntityResult'
        readTime:
          type: string
          description: The time at which these entities were read or found missing.
          format: google-datetime
        deferred:
          description: >-
            A list of keys that were not looked up due to resource constraints.
            The order of results in this field is undefined and has no relation
            to the order of the keys in the input.
          items:
            $ref: '#/components/schemas/Key'
          type: array
        found:
          items:
            $ref: '#/components/schemas/EntityResult'
          type: array
          description: >-
            Entities found as `ResultType.FULL` entities. The order of results
            in this field is undefined and has no relation to the order of the
            keys in the input.
      description: The response for Datastore.Lookup.
      id: LookupResponse
    GoogleDatastoreAdminV1RedirectWritesStepDetails:
      properties:
        concurrencyMode:
          enum:
            - CONCURRENCY_MODE_UNSPECIFIED
            - PESSIMISTIC
            - OPTIMISTIC
            - OPTIMISTIC_WITH_ENTITY_GROUPS
          enumDescriptions:
            - Unspecified.
            - Pessimistic concurrency.
            - Optimistic concurrency.
            - Optimistic concurrency with entity groups.
          description: Ths concurrency mode for this database.
          type: string
      description: Details for the `REDIRECT_WRITES` step.
      type: object
      id: GoogleDatastoreAdminV1RedirectWritesStepDetails
    GoogleDatastoreAdminV1beta1EntityFilter:
      description: >-
        Identifies a subset of entities in a project. This is specified as
        combinations of kinds and namespaces (either or both of which may be
        all, as described in the following examples). Example usage: Entire
        project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces:
        kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the
        default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo
        and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'],
        namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[],
        namespace_ids=['Baz']
      id: GoogleDatastoreAdminV1beta1EntityFilter
      type: object
      properties:
        namespaceIds:
          type: array
          description: >-
            An empty list represents all namespaces. This is the preferred usage
            for projects that don't use namespaces. An empty string element
            represents the default namespace. This should be used if the project
            has data in non-default namespaces, but doesn't want to include
            them. Each namespace in this list must be unique.
          items:
            type: string
        kinds:
          type: array
          items:
            type: string
          description: If empty, then this represents all kinds.
    PropertyReference:
      id: PropertyReference
      properties:
        name:
          type: string
          description: >-
            The name of the property. If name includes "."s, it may be
            interpreted as a property name path.
      type: object
      description: A reference to a property relative to the kind expressions.
    GoogleDatastoreAdminV1beta1CommonMetadata:
      properties:
        startTime:
          description: The time that work began on the operation.
          format: google-datetime
          type: string
        endTime:
          type: string
          format: google-datetime
          description: The time the operation ended, either successfully or otherwise.
        state:
          description: The current state of the Operation.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - >-
              Request is in the process of being cancelled after user called
              google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - Request has finished being processed, but encountered an error.
            - >-
              Request has finished being cancelled after user called
              google.longrunning.Operations.CancelOperation.
        labels:
          description: >-
            The client-assigned labels which were provided when the operation
            was created. May also include additional labels.
          additionalProperties:
            type: string
          type: object
        operationType:
          type: string
          enum:
            - OPERATION_TYPE_UNSPECIFIED
            - EXPORT_ENTITIES
            - IMPORT_ENTITIES
          enumDescriptions:
            - Unspecified.
            - ExportEntities.
            - ImportEntities.
          description: >-
            The type of the operation. Can be used as a filter in
            ListOperationsRequest.
      type: object
      description: Metadata common to all Datastore Admin operations.
      id: GoogleDatastoreAdminV1beta1CommonMetadata
    RunQueryRequest:
      id: RunQueryRequest
      type: object
      properties:
        partitionId:
          $ref: '#/components/schemas/PartitionId'
          description: >-
            Entities are partitioned into subsets, identified by a partition ID.
            Queries are scoped to a single partition. This partition ID is
            normalized with the standard default context partition ID.
        readOptions:
          $ref: '#/components/schemas/ReadOptions'
          description: The options for this query.
        gqlQuery:
          $ref: '#/components/schemas/GqlQuery'
          description: The GQL query to run. This query must be a non-aggregation query.
        query:
          description: The query to run.
          $ref: '#/components/schemas/Query'
      description: The request for Datastore.RunQuery.
    QueryResultBatch:
      type: object
      id: QueryResultBatch
      properties:
        skippedCursor:
          type: string
          description: >-
            A cursor that points to the position after the last skipped result.
            Will be set when `skipped_results` != 0.
          format: byte
        endCursor:
          format: byte
          type: string
          description: >-
            A cursor that points to the position after the last result in the
            batch.
        entityResults:
          description: The results for this batch.
          items:
            $ref: '#/components/schemas/EntityResult'
          type: array
        skippedResults:
          description: The number of results skipped, typically because of an offset.
          format: int32
          type: integer
        entityResultType:
          enumDescriptions:
            - Unspecified. This value is never used.
            - The key and properties.
            - A projected subset of properties. The entity may have no key.
            - Only the key.
          description: The result type for every entity in `entity_results`.
          type: string
          enum:
            - RESULT_TYPE_UNSPECIFIED
            - FULL
            - PROJECTION
            - KEY_ONLY
        snapshotVersion:
          description: >-
            The version number of the snapshot this batch was returned from.
            This applies to the range of results from the query's `start_cursor`
            (or the beginning of the query if no cursor was given) to this
            batch's `end_cursor` (not the query's `end_cursor`). In a single
            transaction, subsequent query result batches for the same query can
            have a greater snapshot version number. Each batch's snapshot
            version is valid for all preceding batches. The value will be zero
            for eventually consistent queries.
          format: int64
          type: string
        readTime:
          type: string
          description: >-
            Read timestamp this batch was returned from. This applies to the
            range of results from the query's `start_cursor` (or the beginning
            of the query if no cursor was given) to this batch's `end_cursor`
            (not the query's `end_cursor`). In a single transaction, subsequent
            query result batches for the same query can have a greater
            timestamp. Each batch's read timestamp is valid for all preceding
            batches. This value will not be set for eventually consistent
            queries in Cloud Datastore.
          format: google-datetime
        moreResults:
          enumDescriptions:
            - Unspecified. This value is never used.
            - There may be additional batches to fetch from this query.
            - >-
              The query is finished, but there may be more results after the
              limit.
            - >-
              The query is finished, but there may be more results after the end
              cursor.
            - The query is finished, and there are no more results.
          type: string
          description: The state of the query after the current batch.
          enum:
            - MORE_RESULTS_TYPE_UNSPECIFIED
            - NOT_FINISHED
            - MORE_RESULTS_AFTER_LIMIT
            - MORE_RESULTS_AFTER_CURSOR
            - NO_MORE_RESULTS
      description: A batch of results produced by a query.
    GoogleDatastoreAdminV1IndexOperationMetadata:
      id: GoogleDatastoreAdminV1IndexOperationMetadata
      properties:
        common:
          description: Metadata common to all Datastore Admin operations.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1CommonMetadata'
        progressEntities:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
          description: An estimate of the number of entities processed.
        indexId:
          description: The index resource ID that this operation is acting on.
          type: string
      type: object
      description: Metadata for Index operations.
    CommitRequest:
      description: The request for Datastore.Commit.
      id: CommitRequest
      type: object
      properties:
        mutations:
          description: >-
            The mutations to perform. When mode is `TRANSACTIONAL`, mutations
            affecting a single entity are applied in order. The following
            sequences of mutations affecting a single entity are not permitted
            in a single `Commit` request: - `insert` followed by `insert` -
            `update` followed by `insert` - `upsert` followed by `insert` -
            `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no
            two mutations may affect a single entity.
          items:
            $ref: '#/components/schemas/Mutation'
          type: array
        mode:
          enumDescriptions:
            - Unspecified. This value must not be used.
            - >-
              Transactional: The mutations are either all applied, or none are
              applied. Learn about transactions
              [here](https://cloud.google.com/datastore/docs/concepts/transactions).
            - 'Non-transactional: The mutations may not apply as all or none.'
          enum:
            - MODE_UNSPECIFIED
            - TRANSACTIONAL
            - NON_TRANSACTIONAL
          type: string
          description: The type of commit to perform. Defaults to `TRANSACTIONAL`.
        transaction:
          type: string
          description: >-
            The identifier of the transaction associated with the commit. A
            transaction identifier is returned by a call to
            Datastore.BeginTransaction.
          format: byte
    GoogleDatastoreAdminV1EntityFilter:
      id: GoogleDatastoreAdminV1EntityFilter
      properties:
        namespaceIds:
          items:
            type: string
          type: array
          description: >-
            An empty list represents all namespaces. This is the preferred usage
            for projects that don't use namespaces. An empty string element
            represents the default namespace. This should be used if the project
            has data in non-default namespaces, but doesn't want to include
            them. Each namespace in this list must be unique.
        kinds:
          description: If empty, then this represents all kinds.
          items:
            type: string
          type: array
      type: object
      description: >-
        Identifies a subset of entities in a project. This is specified as
        combinations of kinds and namespaces (either or both of which may be
        all, as described in the following examples). Example usage: Entire
        project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces:
        kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the
        default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo
        and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'],
        namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[],
        namespace_ids=['Baz']
    BeginTransactionRequest:
      id: BeginTransactionRequest
      description: The request for Datastore.BeginTransaction.
      type: object
      properties:
        transactionOptions:
          $ref: '#/components/schemas/TransactionOptions'
          description: Options for a new transaction.
  parameters:
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
            https://www.googleapis.com/auth/datastore: View and manage your Google Cloud Datastore data
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1beta3/projects/{projectId}:commit:
    parameters: &ref_1
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
    post:
      description: >-
        Commits a transaction, optionally creating, deleting or modifying some
        entities.
      operationId: datastore.projects.commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
  /v1beta3/projects/{projectId}:beginTransaction:
    parameters: *ref_1
    post:
      description: Begins a new transaction.
      operationId: datastore.projects.beginTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginTransactionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginTransactionResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
  /v1beta3/projects/{projectId}:reserveIds:
    parameters: *ref_1
    post:
      description: >-
        Prevents the supplied keys' IDs from being auto-allocated by Cloud
        Datastore.
      operationId: datastore.projects.reserveIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveIdsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveIdsResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
  /v1beta3/projects/{projectId}:allocateIds:
    parameters: *ref_1
    post:
      description: >-
        Allocates IDs for the given keys, which is useful for referencing an
        entity before it is inserted.
      operationId: datastore.projects.allocateIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocateIdsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocateIdsResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
  /v1beta3/projects/{projectId}:runAggregationQuery:
    parameters: *ref_1
    post:
      description: Runs an aggregation query.
      operationId: datastore.projects.runAggregationQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunAggregationQueryRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAggregationQueryResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
  /v1beta3/projects/{projectId}:runQuery:
    parameters: *ref_1
    post:
      description: Queries for entities.
      operationId: datastore.projects.runQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunQueryRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunQueryResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
  /v1beta3/projects/{projectId}:lookup:
    parameters: *ref_1
    post:
      description: Looks up entities by key.
      operationId: datastore.projects.lookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
  /v1beta3/projects/{projectId}:rollback:
    parameters: *ref_1
    post:
      description: Rolls back a transaction.
      operationId: datastore.projects.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/datastore
          Oauth2c:
            - https://www.googleapis.com/auth/datastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RollbackResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-verb: exec
