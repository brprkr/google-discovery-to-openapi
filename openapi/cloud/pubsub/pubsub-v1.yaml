openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Pub/Sub API
  description: >-
    Provides reliable, many-to-many, asynchronous messaging between
    applications. 
  version: v1
  x-discovery-doc-revision: '20230613'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/pubsub/docs
servers:
  - url: https://pubsub.googleapis.com
components:
  schemas:
    ListSubscriptionsResponse:
      description: Response for the `ListSubscriptions` method.
      id: ListSubscriptionsResponse
      type: object
      properties:
        nextPageToken:
          description: >-
            If not empty, indicates that there may be more subscriptions that
            match the request; this value should be passed in a new
            `ListSubscriptionsRequest` to get more subscriptions.
          type: string
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
          description: The subscriptions that match the request.
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          items:
            type: string
          type: array
    ValidateSchemaResponse:
      description: Response for the `ValidateSchema` method. Empty for now.
      type: object
      id: ValidateSchemaResponse
      properties: {}
    Topic:
      id: Topic
      properties:
        satisfiesPzs:
          type: boolean
          description: >-
            Reserved for future use. This field is set only in responses from
            the server; it is ignored if it is set in any requests.
        kmsKeyName:
          type: string
          description: >-
            The resource name of the Cloud KMS CryptoKey to be used to protect
            access to messages published on this topic. The expected format is
            `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
        messageStoragePolicy:
          description: >-
            Policy constraining the set of Google Cloud Platform regions where
            messages published to the topic may be stored. If not present, then
            no constraints are in effect.
          $ref: '#/components/schemas/MessageStoragePolicy'
        messageRetentionDuration:
          type: string
          format: google-duration
          description: >-
            Indicates the minimum duration to retain a message after it is
            published to the topic. If this field is set, messages published to
            the topic in the last `message_retention_duration` are always
            available to subscribers. For instance, it allows any attached
            subscription to [seek to a
            timestamp](https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time)
            that is up to `message_retention_duration` in the past. If this
            field is not set, message retention is controlled by settings on
            individual subscriptions. Cannot be more than 31 days or less than
            10 minutes.
        schemaSettings:
          description: Settings for validating messages published against a schema.
          $ref: '#/components/schemas/SchemaSettings'
        labels:
          additionalProperties:
            type: string
          description: >-
            See [Creating and managing labels]
            (https://cloud.google.com/pubsub/docs/labels).
          type: object
        name:
          type: string
          description: >-
            Required. The name of the topic. It must have the format
            `"projects/{project}/topics/{topic}"`. `{topic}` must start with a
            letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`),
            dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus
            (`+`) or percent signs (`%`). It must be between 3 and 255
            characters in length, and it must not start with `"goog"`.
      type: object
      description: A topic resource.
    ListTopicSnapshotsResponse:
      id: ListTopicSnapshotsResponse
      description: Response for the `ListTopicSnapshots` method.
      type: object
      properties:
        snapshots:
          type: array
          description: The names of the snapshots that match the request.
          items:
            type: string
        nextPageToken:
          description: >-
            If not empty, indicates that there may be more snapshots that match
            the request; this value should be passed in a new
            `ListTopicSnapshotsRequest` to get more snapshots.
          type: string
    Binding:
      type: object
      description: Associates `members`, or principals, with a `role`.
      id: Binding
      properties:
        condition:
          $ref: '#/components/schemas/Expr'
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        role:
          type: string
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        members:
          type: array
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding.
          items:
            type: string
    Snapshot:
      properties:
        topic:
          type: string
          description: >-
            The name of the topic from which this snapshot is retaining
            messages.
        expireTime:
          format: google-datetime
          type: string
          description: >-
            The snapshot is guaranteed to exist up until this time. A
            newly-created snapshot expires no later than 7 days from the time of
            its creation. Its exact lifetime is determined at creation by the
            existing backlog in the source subscription. Specifically, the
            lifetime of the snapshot is `7 days - (age of oldest unacked message
            in the subscription)`. For example, consider a subscription whose
            oldest unacked message is 3 days old. If a snapshot is created from
            this subscription, the snapshot -- which will always capture this
            3-day-old backlog as long as the snapshot exists -- will expire in 4
            days. The service will refuse to create a snapshot that would expire
            in less than 1 hour after creation.
        labels:
          description: >-
            See [Creating and managing labels]
            (https://cloud.google.com/pubsub/docs/labels).
          additionalProperties:
            type: string
          type: object
        name:
          type: string
          description: The name of the snapshot.
      description: >-
        A snapshot resource. Snapshots are used in
        [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
        which allow you to manage message acknowledgments in bulk. That is, you
        can set the acknowledgment state of messages in an existing subscription
        to the state captured by a snapshot.
      type: object
      id: Snapshot
    TextConfig:
      type: object
      id: TextConfig
      description: >-
        Configuration for writing message data in text format. Message payloads
        will be written to files as raw text, separated by a newline.
      properties: {}
    SetIamPolicyRequest:
      type: object
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
    AvroConfig:
      id: AvroConfig
      properties:
        writeMetadata:
          type: boolean
          description: >-
            When true, write the subscription name, message_id, publish_time,
            attributes, and ordering_key as additional fields in the output.
      type: object
      description: >-
        Configuration for writing message data in Avro format. Message payloads
        and metadata will be written to files as an Avro binary.
    Subscription:
      properties:
        expirationPolicy:
          $ref: '#/components/schemas/ExpirationPolicy'
          description: >-
            A policy that specifies the conditions for this subscription's
            expiration. A subscription is considered active as long as any
            connected subscriber is successfully consuming messages from the
            subscription or is issuing operations on the subscription. If
            `expiration_policy` is not set, a *default policy* with `ttl` of 31
            days will be used. The minimum allowed value for
            `expiration_policy.ttl` is 1 day. If `expiration_policy` is set, but
            `expiration_policy.ttl` is not set, the subscription never expires.
        detached:
          description: >-
            Indicates whether the subscription is detached from its topic.
            Detached subscriptions don't receive messages from their topic and
            don't retain any backlog. `Pull` and `StreamingPull` requests will
            return FAILED_PRECONDITION. If the subscription is a push
            subscription, pushes to the endpoint will not be made.
          type: boolean
        retryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
          description: >-
            A policy that specifies how Pub/Sub retries message delivery for
            this subscription. If not set, the default retry policy is applied.
            This generally implies that messages will be retried as soon as
            possible for healthy subscribers. RetryPolicy will be triggered on
            NACKs or acknowledgement deadline exceeded events for a given
            message.
        enableExactlyOnceDelivery:
          type: boolean
          description: >-
            If true, Pub/Sub provides the following guarantees for the delivery
            of a message with a given value of `message_id` on this
            subscription: * The message sent to a subscriber is guaranteed not
            to be resent before the message's acknowledgement deadline expires.
            * An acknowledged message will not be resent to a subscriber. Note
            that subscribers may still receive multiple copies of a message when
            `enable_exactly_once_delivery` is true if the message was published
            multiple times by a publisher client. These copies are considered
            distinct by Pub/Sub and have distinct `message_id` values.
        retainAckedMessages:
          type: boolean
          description: >-
            Indicates whether to retain acknowledged messages. If true, then
            messages are not expunged from the subscription's backlog, even if
            they are acknowledged, until they fall out of the
            `message_retention_duration` window. This must be true if you would
            like to [`Seek` to a timestamp]
            (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time)
            in the past to replay previously-acknowledged messages.
        labels:
          description: >-
            See [Creating and managing
            labels](https://cloud.google.com/pubsub/docs/labels).
          type: object
          additionalProperties:
            type: string
        pushConfig:
          description: >-
            If push delivery is used with this subscription, this field is used
            to configure it.
          $ref: '#/components/schemas/PushConfig'
        enableMessageOrdering:
          type: boolean
          description: >-
            If true, messages published with the same `ordering_key` in
            `PubsubMessage` will be delivered to the subscribers in the order in
            which they are received by the Pub/Sub system. Otherwise, they may
            be delivered in any order.
        name:
          description: >-
            Required. The name of the subscription. It must have the format
            `"projects/{project}/subscriptions/{subscription}"`.
            `{subscription}` must start with a letter, and contain only letters
            (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`),
            periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It
            must be between 3 and 255 characters in length, and it must not
            start with `"goog"`.
          type: string
        topic:
          description: >-
            Required. The name of the topic from which this subscription is
            receiving messages. Format is `projects/{project}/topics/{topic}`.
            The value of this field will be `_deleted-topic_` if the topic has
            been deleted.
          type: string
        bigqueryConfig:
          $ref: '#/components/schemas/BigQueryConfig'
          description: >-
            If delivery to BigQuery is used with this subscription, this field
            is used to configure it.
        messageRetentionDuration:
          type: string
          format: google-duration
          description: >-
            How long to retain unacknowledged messages in the subscription's
            backlog, from the moment a message is published. If
            `retain_acked_messages` is true, then this also configures the
            retention of acknowledged messages, and thus configures how far back
            in time a `Seek` can be done. Defaults to 7 days. Cannot be more
            than 7 days or less than 10 minutes.
        filter:
          type: string
          description: >-
            An expression written in the Pub/Sub [filter
            language](https://cloud.google.com/pubsub/docs/filtering). If
            non-empty, then only `PubsubMessage`s whose `attributes` field
            matches the filter are delivered on this subscription. If empty,
            then no messages are filtered out.
        deadLetterPolicy:
          description: >-
            A policy that specifies the conditions for dead lettering messages
            in this subscription. If dead_letter_policy is not set, dead
            lettering is disabled. The Cloud Pub/Sub service account associated
            with this subscriptions's parent project (i.e.,
            service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must
            have permission to Acknowledge() messages on this subscription.
          $ref: '#/components/schemas/DeadLetterPolicy'
        ackDeadlineSeconds:
          format: int32
          description: >-
            The approximate amount of time (on a best-effort basis) Pub/Sub
            waits for the subscriber to acknowledge receipt before resending the
            message. In the interval after the message is delivered and before
            it is acknowledged, it is considered to be _outstanding_. During
            that time period, the message will not be redelivered (on a
            best-effort basis). For pull subscriptions, this value is used as
            the initial value for the ack deadline. To override this value for a
            given message, call `ModifyAckDeadline` with the corresponding
            `ack_id` if using non-streaming pull or send the `ack_id` in a
            `StreamingModifyAckDeadlineRequest` if using streaming pull. The
            minimum custom deadline you can specify is 10 seconds. The maximum
            custom deadline you can specify is 600 seconds (10 minutes). If this
            parameter is 0, a default value of 10 seconds is used. For push
            delivery, this value is also used to set the request timeout for the
            call to the push endpoint. If the subscriber never acknowledges the
            message, the Pub/Sub system will eventually redeliver the message.
          type: integer
        state:
          enumDescriptions:
            - Default value. This value is unused.
            - The subscription can actively receive messages
            - >-
              The subscription cannot receive messages because of an error with
              the resource to which it pushes messages. See the more detailed
              error state in the corresponding configuration.
          description: >-
            Output only. An output-only field indicating whether or not the
            subscription can receive messages.
          readOnly: true
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - RESOURCE_ERROR
          type: string
        cloudStorageConfig:
          $ref: '#/components/schemas/CloudStorageConfig'
          description: >-
            If delivery to Google Cloud Storage is used with this subscription,
            this field is used to configure it.
        topicMessageRetentionDuration:
          readOnly: true
          description: >-
            Output only. Indicates the minimum duration for which a message is
            retained after it is published to the subscription's topic. If this
            field is set, messages published to the subscription's topic in the
            last `topic_message_retention_duration` are always available to
            subscribers. See the `message_retention_duration` field in `Topic`.
            This field is set only in responses from the server; it is ignored
            if it is set in any requests.
          type: string
          format: google-duration
      id: Subscription
      type: object
      description: >-
        A subscription resource. If none of `push_config`, `bigquery_config`, or
        `cloud_storage_config` is set, then the subscriber will pull and ack
        messages using API methods. At most one of these fields may be set.
    ValidateMessageResponse:
      properties: {}
      description: Response for the `ValidateMessage` method. Empty for now.
      id: ValidateMessageResponse
      type: object
    PubsubMessage:
      type: object
      description: >-
        A message that is published by publishers and consumed by subscribers.
        The message must contain either a non-empty data field or at least one
        attribute. Note that client libraries represent this object differently
        depending on the language. See the corresponding [client library
        documentation](https://cloud.google.com/pubsub/docs/reference/libraries)
        for more information. See [quotas and limits]
        (https://cloud.google.com/pubsub/quotas) for more information about
        message limits.
      id: PubsubMessage
      properties:
        messageId:
          description: >-
            ID of this message, assigned by the server when the message is
            published. Guaranteed to be unique within the topic. This value may
            be read by a subscriber that receives a `PubsubMessage` via a `Pull`
            call or a push delivery. It must not be populated by the publisher
            in a `Publish` call.
          type: string
        data:
          type: string
          format: byte
          description: >-
            The message data field. If this field is empty, the message must
            contain at least one attribute.
        orderingKey:
          type: string
          description: >-
            If non-empty, identifies related messages for which publish order
            should be respected. If a `Subscription` has
            `enable_message_ordering` set to `true`, messages published with the
            same non-empty `ordering_key` value will be delivered to subscribers
            in the order in which they are received by the Pub/Sub system. All
            `PubsubMessage`s published in a given `PublishRequest` must specify
            the same `ordering_key` value. For more information, see [ordering
            messages](https://cloud.google.com/pubsub/docs/ordering).
        publishTime:
          description: >-
            The time at which the message was published, populated by the server
            when it receives the `Publish` call. It must not be populated by the
            publisher in a `Publish` call.
          type: string
          format: google-datetime
        attributes:
          description: >-
            Attributes for this message. If this field is empty, the message
            must contain non-empty data. This can be used to filter messages on
            the subscription.
          additionalProperties:
            type: string
          type: object
    CloudStorageConfig:
      description: Configuration for a Cloud Storage subscription.
      id: CloudStorageConfig
      type: object
      properties:
        maxDuration:
          type: string
          format: google-duration
          description: >-
            The maximum duration that can elapse before a new Cloud Storage file
            is created. Min 1 minute, max 10 minutes, default 5 minutes. May not
            exceed the subscription's acknowledgement deadline.
        state:
          enumDescriptions:
            - Default value. This value is unused.
            - The subscription can actively send messages to Cloud Storage.
            - >-
              Cannot write to the Cloud Storage bucket because of permission
              denied errors.
            - >-
              Cannot write to the Cloud Storage bucket because it does not
              exist.
          readOnly: true
          description: >-
            Output only. An output-only field that indicates whether or not the
            subscription can receive messages.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - PERMISSION_DENIED
            - NOT_FOUND
        maxBytes:
          format: int64
          type: string
          description: >-
            The maximum bytes that can be written to a Cloud Storage file before
            a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may
            be exceeded in cases where messages are larger than the limit.
        textConfig:
          description: >-
            If set, message data will be written to Cloud Storage in text
            format.
          $ref: '#/components/schemas/TextConfig'
        avroConfig:
          $ref: '#/components/schemas/AvroConfig'
          description: >-
            If set, message data will be written to Cloud Storage in Avro
            format.
        filenamePrefix:
          type: string
          description: >-
            User-provided prefix for Cloud Storage filename. See the [object
            naming
            requirements](https://cloud.google.com/storage/docs/objects#naming).
        bucket:
          description: >-
            Required. User-provided name for the Cloud Storage bucket. The
            bucket must be created by the user. The bucket name must be without
            any prefix like "gs://". See the [bucket naming requirements]
            (https://cloud.google.com/storage/docs/buckets#naming).
          type: string
        filenameSuffix:
          type: string
          description: >-
            User-provided suffix for Cloud Storage filename. See the [object
            naming
            requirements](https://cloud.google.com/storage/docs/objects#naming).
    Policy:
      type: object
      properties:
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        version:
          format: int32
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
        etag:
          type: string
          format: byte
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      id: Policy
    ModifyAckDeadlineRequest:
      properties:
        ackDeadlineSeconds:
          type: integer
          description: >-
            Required. The new ack deadline with respect to the time this request
            was sent to the Pub/Sub system. For example, if the value is 10, the
            new ack deadline will expire 10 seconds after the
            `ModifyAckDeadline` call was made. Specifying zero might immediately
            make the message available for delivery to another subscriber
            client. This typically results in an increase in the rate of message
            redeliveries (that is, duplicates). The minimum deadline you can
            specify is 0 seconds. The maximum deadline you can specify is 600
            seconds (10 minutes).
          format: int32
        ackIds:
          items:
            type: string
          type: array
          description: Required. List of acknowledgment IDs.
      id: ModifyAckDeadlineRequest
      type: object
      description: Request for the ModifyAckDeadline method.
    MessageStoragePolicy:
      type: object
      properties:
        allowedPersistenceRegions:
          items:
            type: string
          type: array
          description: >-
            A list of IDs of GCP regions where messages that are published to
            the topic may be persisted in storage. Messages published by
            publishers running in non-allowed GCP regions (or running outside of
            GCP altogether) will be routed for storage in one of the allowed
            regions. An empty list means that no regions are allowed, and is not
            a valid configuration.
      id: MessageStoragePolicy
      description: A policy constraining the storage of messages published to the topic.
    BigQueryConfig:
      type: object
      id: BigQueryConfig
      description: Configuration for a BigQuery subscription.
      properties:
        dropUnknownFields:
          description: >-
            When true and use_topic_schema is true, any fields that are a part
            of the topic schema that are not part of the BigQuery table schema
            are dropped when writing to BigQuery. Otherwise, the schemas must be
            kept in sync and any messages with extra fields are not written and
            remain in the subscription's backlog.
          type: boolean
        useTopicSchema:
          description: >-
            When true, use the topic's schema as the columns to write to in
            BigQuery, if it exists.
          type: boolean
        table:
          description: >-
            The name of the table to which to write data, of the form
            {projectId}.{datasetId}.{tableId}
          type: string
        state:
          type: string
          enumDescriptions:
            - Default value. This value is unused.
            - The subscription can actively send messages to BigQuery
            - >-
              Cannot write to the BigQuery table because of permission denied
              errors. This can happen if - Pub/Sub SA has not been granted the
              [appropriate BigQuery IAM
              permissions](https://cloud.google.com/pubsub/docs/create-subscription#assign_bigquery_service_account)
              - bigquery.googleapis.com API is not enabled for the project
              ([instructions](https://cloud.google.com/service-usage/docs/enable-disable))
            - Cannot write to the BigQuery table because it does not exist.
            - Cannot write to the BigQuery table due to a schema mismatch.
          readOnly: true
          description: >-
            Output only. An output-only field that indicates whether or not the
            subscription can receive messages.
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - PERMISSION_DENIED
            - NOT_FOUND
            - SCHEMA_MISMATCH
        writeMetadata:
          description: >-
            When true, write the subscription name, message_id, publish_time,
            attributes, and ordering_key to additional columns in the table. The
            subscription name, message_id, and publish_time fields are put in
            their own columns while all other message properties (other than
            data) are written to a JSON object in the attributes column.
          type: boolean
    UpdateTopicRequest:
      description: Request for the UpdateTopic method.
      type: object
      id: UpdateTopicRequest
      properties:
        topic:
          $ref: '#/components/schemas/Topic'
          description: Required. The updated topic object.
        updateMask:
          format: google-fieldmask
          description: >-
            Required. Indicates which fields in the provided topic to update.
            Must be specified and non-empty. Note that if `update_mask` contains
            "message_storage_policy" but the `message_storage_policy` is not set
            in the `topic` provided above, then the updated value is determined
            by the policy configured at the project or organization level.
          type: string
    ListTopicSubscriptionsResponse:
      type: object
      id: ListTopicSubscriptionsResponse
      properties:
        subscriptions:
          items:
            type: string
          description: >-
            The names of subscriptions attached to the topic specified in the
            request.
          type: array
        nextPageToken:
          description: >-
            If not empty, indicates that there may be more subscriptions that
            match the request; this value should be passed in a new
            `ListTopicSubscriptionsRequest` to get more subscriptions.
          type: string
      description: Response for the `ListTopicSubscriptions` method.
    SeekResponse:
      properties: {}
      id: SeekResponse
      description: Response for the `Seek` method (this response is empty).
      type: object
    ExpirationPolicy:
      description: >-
        A policy that specifies the conditions for resource expiration (i.e.,
        automatic resource deletion).
      type: object
      properties:
        ttl:
          description: >-
            Specifies the "time-to-live" duration for an associated resource.
            The resource expires if it is not active for a period of `ttl`. The
            definition of "activity" depends on the type of the associated
            resource. The minimum and maximum allowed values for `ttl` depend on
            the type of the associated resource, as well. If `ttl` is not set,
            the associated resource never expires.
          format: google-duration
          type: string
      id: ExpirationPolicy
    RollbackSchemaRequest:
      id: RollbackSchemaRequest
      properties:
        revisionId:
          description: >-
            Required. The revision ID to roll back to. It must be a revision of
            the same schema. Example: c7cfa2a8
          type: string
      description: Request for the `RollbackSchema` method.
      type: object
    RetryPolicy:
      type: object
      properties:
        maximumBackoff:
          format: google-duration
          description: >-
            The maximum delay between consecutive deliveries of a given message.
            Value should be between 0 and 600 seconds. Defaults to 600 seconds.
          type: string
        minimumBackoff:
          type: string
          description: >-
            The minimum delay between consecutive deliveries of a given message.
            Value should be between 0 and 600 seconds. Defaults to 10 seconds.
          format: google-duration
      id: RetryPolicy
      description: >-
        A policy that specifies how Cloud Pub/Sub retries message delivery.
        Retry delay will be exponential based on provided minimum and maximum
        backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy
        will be triggered on NACKs or acknowledgement deadline exceeded events
        for a given message. Retry Policy is implemented on a best effort basis.
        At times, the delay between consecutive deliveries may not match the
        configuration. That is, delay can be more or less than configured
        backoff.
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
      type: object
      properties: {}
    PublishResponse:
      description: Response for the `Publish` method.
      properties:
        messageIds:
          description: >-
            The server-assigned ID of each published message, in the same order
            as the messages in the request. IDs are guaranteed to be unique
            within the topic.
          type: array
          items:
            type: string
      type: object
      id: PublishResponse
    AcknowledgeRequest:
      id: AcknowledgeRequest
      description: Request for the Acknowledge method.
      type: object
      properties:
        ackIds:
          description: >-
            Required. The acknowledgment ID for the messages being acknowledged
            that was returned by the Pub/Sub system in the `Pull` response. Must
            not be empty.
          items:
            type: string
          type: array
    ListSchemaRevisionsResponse:
      type: object
      id: ListSchemaRevisionsResponse
      properties:
        schemas:
          description: The revisions of the schema.
          items:
            $ref: '#/components/schemas/Schema'
          type: array
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page.
            If this field is empty, there are no subsequent pages.
          type: string
      description: Response for the `ListSchemaRevisions` method.
    ListSnapshotsResponse:
      type: object
      description: Response for the `ListSnapshots` method.
      properties:
        snapshots:
          description: The resulting snapshots.
          items:
            $ref: '#/components/schemas/Snapshot'
          type: array
        nextPageToken:
          type: string
          description: >-
            If not empty, indicates that there may be more snapshot that match
            the request; this value should be passed in a new
            `ListSnapshotsRequest`.
      id: ListSnapshotsResponse
    PublishRequest:
      type: object
      id: PublishRequest
      properties:
        messages:
          description: Required. The messages to publish.
          items:
            $ref: '#/components/schemas/PubsubMessage'
          type: array
      description: Request for the Publish method.
    PullResponse:
      description: Response for the `Pull` method.
      id: PullResponse
      type: object
      properties:
        receivedMessages:
          items:
            $ref: '#/components/schemas/ReceivedMessage'
          description: >-
            Received Pub/Sub messages. The list will be empty if there are no
            more messages available in the backlog, or if no messages could be
            returned before the request timeout. For JSON, the response can be
            entirely empty. The Pub/Sub system may return fewer than the
            `maxMessages` requested even if there are more messages available in
            the backlog.
          type: array
    CommitSchemaRequest:
      description: Request for CommitSchema method.
      id: CommitSchemaRequest
      properties:
        schema:
          $ref: '#/components/schemas/Schema'
          description: Required. The schema revision to commit.
      type: object
    ValidateMessageRequest:
      id: ValidateMessageRequest
      properties:
        name:
          type: string
          description: >-
            Name of the schema against which to validate. Format is
            `projects/{project}/schemas/{schema}`.
        encoding:
          description: The encoding expected for messages
          enumDescriptions:
            - Unspecified
            - JSON encoding
            - >-
              Binary encoding, as defined by the schema type. For some schema
              types, binary encoding may not be available.
          enum:
            - ENCODING_UNSPECIFIED
            - JSON
            - BINARY
          type: string
        schema:
          description: Ad-hoc schema against which to validate
          $ref: '#/components/schemas/Schema'
        message:
          description: Message to validate against the provided `schema_spec`.
          format: byte
          type: string
      type: object
      description: Request for the `ValidateMessage` method.
    PubsubWrapper:
      id: PubsubWrapper
      properties: {}
      type: object
      description: >-
        The payload to the push endpoint is in the form of the JSON
        representation of a PubsubMessage
        (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).
    CreateSnapshotRequest:
      id: CreateSnapshotRequest
      description: Request for the `CreateSnapshot` method.
      type: object
      properties:
        subscription:
          type: string
          description: >-
            Required. The subscription whose backlog the snapshot retains.
            Specifically, the created snapshot is guaranteed to retain: (a) The
            existing backlog on the subscription. More precisely, this is
            defined as the messages in the subscription's backlog that are
            unacknowledged upon the successful completion of the
            `CreateSnapshot` request; as well as: (b) Any messages published to
            the subscription's topic following the successful completion of the
            CreateSnapshot request. Format is
            `projects/{project}/subscriptions/{sub}`.
        labels:
          additionalProperties:
            type: string
          description: >-
            See [Creating and managing
            labels](https://cloud.google.com/pubsub/docs/labels).
          type: object
    ValidateSchemaRequest:
      description: Request for the `ValidateSchema` method.
      type: object
      properties:
        schema:
          description: Required. The schema object to validate.
          $ref: '#/components/schemas/Schema'
      id: ValidateSchemaRequest
    UpdateSnapshotRequest:
      type: object
      properties:
        updateMask:
          type: string
          format: google-fieldmask
          description: >-
            Required. Indicates which fields in the provided snapshot to update.
            Must be specified and non-empty.
        snapshot:
          description: Required. The updated snapshot object.
          $ref: '#/components/schemas/Snapshot'
      id: UpdateSnapshotRequest
      description: Request for the UpdateSnapshot method.
    DetachSubscriptionResponse:
      type: object
      properties: {}
      description: Response for the DetachSubscription method. Reserved for future use.
      id: DetachSubscriptionResponse
    PullRequest:
      properties:
        maxMessages:
          type: integer
          description: >-
            Required. The maximum number of messages to return for this request.
            Must be a positive integer. The Pub/Sub system may return fewer than
            the number specified.
          format: int32
        returnImmediately:
          description: >-
            Optional. If this field set to true, the system will respond
            immediately even if it there are no messages available to return in
            the `Pull` response. Otherwise, the system may wait (for a bounded
            amount of time) until at least one message is available, rather than
            returning no messages. Warning: setting this field to `true` is
            discouraged because it adversely impacts the performance of `Pull`
            operations. We recommend that users do not set this field.
          type: boolean
      id: PullRequest
      description: Request for the `Pull` method.
      type: object
    PushConfig:
      description: Configuration for a push delivery endpoint.
      properties:
        attributes:
          additionalProperties:
            type: string
          description: >-
            Endpoint configuration attributes that can be used to control
            different aspects of the message delivery. The only currently
            supported attribute is `x-goog-version`, which you can use to change
            the format of the pushed message. This attribute indicates the
            version of the data expected by the endpoint. This controls the
            shape of the pushed message (i.e., its fields and metadata). If not
            present during the `CreateSubscription` call, it will default to the
            version of the Pub/Sub API used to make such call. If not present in
            a `ModifyPushConfig` call, its value will not be changed.
            `GetSubscription` calls will always return a valid version, even if
            the subscription was created without this attribute. The only
            supported values for the `x-goog-version` attribute are: *
            `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
            * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub
            API. For example: `attributes { "x-goog-version": "v1" }`
          type: object
        oidcToken:
          description: >-
            If specified, Pub/Sub will generate and attach an OIDC JWT token as
            an `Authorization` header in the HTTP request for every pushed
            message.
          $ref: '#/components/schemas/OidcToken'
        pushEndpoint:
          type: string
          description: >-
            A URL locating the endpoint to which messages should be pushed. For
            example, a Webhook endpoint might use `https://example.com/push`.
        noWrapper:
          description: When set, the payload to the push endpoint is not wrapped.
          $ref: '#/components/schemas/NoWrapper'
        pubsubWrapper:
          $ref: '#/components/schemas/PubsubWrapper'
          description: >-
            When set, the payload to the push endpoint is in the form of the
            JSON representation of a PubsubMessage
            (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).
      type: object
      id: PushConfig
    Schema:
      properties:
        name:
          type: string
          description: >-
            Required. Name of the schema. Format is
            `projects/{project}/schemas/{schema}`.
        revisionCreateTime:
          readOnly: true
          format: google-datetime
          description: Output only. The timestamp that the revision was created.
          type: string
        revisionId:
          readOnly: true
          description: Output only. Immutable. The revision ID of the schema.
          type: string
        definition:
          type: string
          description: >-
            The definition of the schema. This should contain a string
            representing the full definition of the schema that is a valid
            schema definition of the type specified in `type`.
        type:
          description: The type of the schema definition.
          enum:
            - TYPE_UNSPECIFIED
            - PROTOCOL_BUFFER
            - AVRO
          enumDescriptions:
            - Default value. This value is unused.
            - A Protocol Buffer schema definition.
            - An Avro schema definition.
          type: string
      id: Schema
      description: A schema resource.
      type: object
    NoWrapper:
      id: NoWrapper
      description: Sets the `data` field as the HTTP body for delivery.
      type: object
      properties:
        writeMetadata:
          description: >-
            When true, writes the Pub/Sub message metadata to `x-goog-pubsub-:`
            headers of the HTTP request. Writes the Pub/Sub message attributes
            to `:` headers of the HTTP request.
          type: boolean
    ModifyPushConfigRequest:
      description: Request for the ModifyPushConfig method.
      type: object
      id: ModifyPushConfigRequest
      properties:
        pushConfig:
          $ref: '#/components/schemas/PushConfig'
          description: >-
            Required. The push configuration for future deliveries. An empty
            `pushConfig` indicates that the Pub/Sub system should stop pushing
            messages from the given subscription and allow messages to be pulled
            and acknowledged - effectively pausing the subscription if `Pull` or
            `StreamingPull` is not called.
    Expr:
      type: object
      properties:
        expression:
          type: string
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
        description:
          type: string
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
        title:
          type: string
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
        location:
          type: string
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
    ReceivedMessage:
      id: ReceivedMessage
      description: A message and its corresponding acknowledgment ID.
      type: object
      properties:
        message:
          description: The message.
          $ref: '#/components/schemas/PubsubMessage'
        ackId:
          type: string
          description: This ID can be used to acknowledge the received message.
        deliveryAttempt:
          format: int32
          type: integer
          description: >-
            The approximate number of times that Cloud Pub/Sub has attempted to
            deliver the associated message to a subscriber. More precisely, this
            is 1 + (number of NACKs) + (number of ack_deadline exceeds) for this
            message. A NACK is any call to ModifyAckDeadline with a 0 deadline.
            An ack_deadline exceeds event is whenever a message is not
            acknowledged within ack_deadline. Note that ack_deadline is
            initially Subscription.ackDeadlineSeconds, but may get extended
            automatically by the client library. Upon the first delivery of a
            given message, `delivery_attempt` will have a value of 1. The value
            is calculated at best effort and is approximate. If a
            DeadLetterPolicy is not set on the subscription, this will be 0.
    SchemaSettings:
      properties:
        lastRevisionId:
          description: >-
            The maximum (inclusive) revision allowed for validating messages. If
            empty or not present, allow any revision to be validated against
            first_revision or any revision created after.
          type: string
        schema:
          type: string
          description: >-
            Required. The name of the schema that messages published should be
            validated against. Format is `projects/{project}/schemas/{schema}`.
            The value of this field will be `_deleted-schema_` if the schema has
            been deleted.
        encoding:
          enum:
            - ENCODING_UNSPECIFIED
            - JSON
            - BINARY
          type: string
          description: The encoding of messages validated against `schema`.
          enumDescriptions:
            - Unspecified
            - JSON encoding
            - >-
              Binary encoding, as defined by the schema type. For some schema
              types, binary encoding may not be available.
        firstRevisionId:
          type: string
          description: >-
            The minimum (inclusive) revision allowed for validating messages. If
            empty or not present, allow any revision to be validated against
            last_revision or any revision created before.
      type: object
      description: Settings for validating messages published against a schema.
      id: SchemaSettings
    ListSchemasResponse:
      description: Response for the `ListSchemas` method.
      id: ListSchemasResponse
      properties:
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
          description: The resulting schemas.
        nextPageToken:
          description: >-
            If not empty, indicates that there may be more schemas that match
            the request; this value should be passed in a new
            `ListSchemasRequest`.
          type: string
      type: object
    ListTopicsResponse:
      description: Response for the `ListTopics` method.
      id: ListTopicsResponse
      type: object
      properties:
        nextPageToken:
          description: >-
            If not empty, indicates that there may be more topics that match the
            request; this value should be passed in a new `ListTopicsRequest`.
          type: string
        topics:
          items:
            $ref: '#/components/schemas/Topic'
          type: array
          description: The resulting topics.
    OidcToken:
      id: OidcToken
      description: >-
        Contains information needed for generating an [OpenID Connect
        token](https://developers.google.com/identity/protocols/OpenIDConnect).
      properties:
        serviceAccountEmail:
          type: string
          description: >-
            [Service account
            email](https://cloud.google.com/iam/docs/service-accounts) used for
            generating the OIDC token. For more information on setting up
            authentication, see [Push
            subscriptions](https://cloud.google.com/pubsub/docs/push).
        audience:
          type: string
          description: >-
            Audience to be used when generating OIDC token. The audience claim
            identifies the recipients that the JWT is intended for. The audience
            value is a single case-sensitive string. Having multiple values
            (array) for the audience field is not supported. More info about the
            OIDC JWT token audience here:
            https://tools.ietf.org/html/rfc7519#section-4.1.3 Note: if not
            specified, the Push endpoint URL will be used.
      type: object
    TestIamPermissionsResponse:
      type: object
      properties:
        permissions:
          items:
            type: string
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
      description: Response message for `TestIamPermissions` method.
      id: TestIamPermissionsResponse
    SeekRequest:
      properties:
        time:
          format: google-datetime
          type: string
          description: >-
            The time to seek to. Messages retained in the subscription that were
            published before this time are marked as acknowledged, and messages
            retained in the subscription that were published after this time are
            marked as unacknowledged. Note that this operation affects only
            those messages retained in the subscription (configured by the
            combination of `message_retention_duration` and
            `retain_acked_messages`). For example, if `time` corresponds to a
            point before the message retention window (or to a point before the
            system's notion of the subscription creation time), only retained
            messages will be marked as unacknowledged, and already-expunged
            messages will not be restored.
        snapshot:
          type: string
          description: >-
            The snapshot to seek to. The snapshot's topic must be the same as
            that of the provided subscription. Format is
            `projects/{project}/snapshots/{snap}`.
      description: Request for the `Seek` method.
      type: object
      id: SeekRequest
    UpdateSubscriptionRequest:
      type: object
      id: UpdateSubscriptionRequest
      properties:
        updateMask:
          format: google-fieldmask
          description: >-
            Required. Indicates which fields in the provided subscription to
            update. Must be specified and non-empty.
          type: string
        subscription:
          $ref: '#/components/schemas/Subscription'
          description: Required. The updated subscription object.
      description: Request for the UpdateSubscription method.
    DeadLetterPolicy:
      properties:
        deadLetterTopic:
          type: string
          description: >-
            The name of the topic to which dead letter messages should be
            published. Format is `projects/{project}/topics/{topic}`.The Cloud
            Pub/Sub service account associated with the enclosing subscription's
            parent project (i.e.,
            service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must
            have permission to Publish() to this topic. The operation will fail
            if the topic does not exist. Users should ensure that there is a
            subscription attached to this topic since messages published to a
            topic with no subscriptions are lost.
        maxDeliveryAttempts:
          type: integer
          format: int32
          description: >-
            The maximum number of delivery attempts for any message. The value
            must be between 5 and 100. The number of delivery attempts is
            defined as 1 + (the sum of number of NACKs and number of times the
            acknowledgement deadline has been exceeded for the message). A NACK
            is any call to ModifyAckDeadline with a 0 deadline. Note that client
            libraries may automatically extend ack_deadlines. This field will be
            honored on a best effort basis. If this parameter is 0, a default
            value of 5 is used.
      id: DeadLetterPolicy
      type: object
      description: >-
        Dead lettering is done on a best effort basis. The same message might be
        dead lettered multiple times. If validation on any of the fields fails
        at subscription creation/updation, the create/update subscription
        request will fail.
  parameters:
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/pubsub: View and manage Pub/Sub topics and subscriptions
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/projects/{projectsId}/snapshots/{snapshotsId}:setIamPolicy:
    parameters: &ref_1
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/quotaUser'
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: pubsub.projects.snapshots.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: snapshotsId
          required: true
          schema:
            type: string
      x-stackQL-resource: snapshots_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/snapshots:
    parameters: *ref_1
    get:
      description: >-
        Lists the existing snapshots. Snapshots are used in [Seek](
        https://cloud.google.com/pubsub/docs/replay-overview) operations, which
        allow you to manage message acknowledgments in bulk. That is, you can
        set the acknowledgment state of messages in an existing subscription to
        the state captured by a snapshot.
      operationId: pubsub.projects.snapshots.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSnapshotsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: snapshots
      x-stackQL-verb: select
  /v1/projects/{projectsId}/snapshots/{snapshotsId}:
    parameters: *ref_1
    put:
      description: >-
        Creates a snapshot from the requested subscription. Snapshots are used
        in [Seek](https://cloud.google.com/pubsub/docs/replay-overview)
        operations, which allow you to manage message acknowledgments in bulk.
        That is, you can set the acknowledgment state of messages in an existing
        subscription to the state captured by a snapshot. If the snapshot
        already exists, returns `ALREADY_EXISTS`. If the requested subscription
        doesn't exist, returns `NOT_FOUND`. If the backlog in the subscription
        is too old -- and the resulting snapshot would expire in less than 1
        hour -- then `FAILED_PRECONDITION` is returned. See also the
        `Snapshot.expire_time` field. If the name is not provided in the
        request, the server will assign a random name for this snapshot on the
        same project as the subscription, conforming to the [resource name
        format] (https://cloud.google.com/pubsub/docs/admin#resource_names). The
        generated name is populated in the returned Snapshot object. Note that
        for REST API requests, you must specify a name in the request.
      operationId: pubsub.projects.snapshots.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: snapshotsId
          required: true
          schema:
            type: string
      x-stackQL-resource: snapshots
      x-stackQL-verb: insert
    delete:
      description: >-
        Removes an existing snapshot. Snapshots are used in [Seek]
        (https://cloud.google.com/pubsub/docs/replay-overview) operations, which
        allow you to manage message acknowledgments in bulk. That is, you can
        set the acknowledgment state of messages in an existing subscription to
        the state captured by a snapshot. When the snapshot is deleted, all
        messages retained in the snapshot are immediately dropped. After a
        snapshot is deleted, a new one may be created with the same name, but
        the new one has no association with the old snapshot or its
        subscription, unless the same subscription is specified.
      operationId: pubsub.projects.snapshots.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: snapshotsId
          required: true
          schema:
            type: string
      x-stackQL-resource: snapshots
      x-stackQL-verb: delete
    patch:
      description: >-
        Updates an existing snapshot. Snapshots are used in
        [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
        which allow you to manage message acknowledgments in bulk. That is, you
        can set the acknowledgment state of messages in an existing subscription
        to the state captured by a snapshot.
      operationId: pubsub.projects.snapshots.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSnapshotRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: snapshotsId
          required: true
          schema:
            type: string
      x-stackQL-resource: snapshots
      x-stackQL-verb: exec
    get:
      description: >-
        Gets the configuration details of a snapshot. Snapshots are used in
        [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
        which allow you to manage message acknowledgments in bulk. That is, you
        can set the acknowledgment state of messages in an existing subscription
        to the state captured by a snapshot.
      operationId: pubsub.projects.snapshots.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: snapshotsId
          required: true
          schema:
            type: string
      x-stackQL-resource: snapshots
      x-stackQL-verb: select
  /v1/projects/{projectsId}/snapshots/{snapshotsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: pubsub.projects.snapshots.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: snapshotsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: snapshots_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/snapshots/{snapshotsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: pubsub.projects.snapshots.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: snapshotsId
          required: true
          schema:
            type: string
      x-stackQL-resource: snapshots_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/schemas/{schemasId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: pubsub.projects.schemas.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/schemas/{schemasId}:
    parameters: *ref_1
    get:
      description: Gets a schema.
      operationId: pubsub.projects.schemas.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: select
    delete:
      description: Deletes a schema.
      operationId: pubsub.projects.schemas.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/schemas:
    parameters: *ref_1
    post:
      description: Creates a schema.
      operationId: pubsub.projects.schemas.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: schemaId
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: insert
    get:
      description: Lists schemas in a project.
      operationId: pubsub.projects.schemas.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchemasResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: select
  /v1/projects/{projectsId}/schemas/{schemasId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: pubsub.projects.schemas.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/schemas/{schemasId}:deleteRevision:
    parameters: *ref_1
    delete:
      description: Deletes a specific schema revision.
      operationId: pubsub.projects.schemas.deleteRevision
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: revisionId
          schema:
            type: string
      x-stackQL-resource: schemas__revision
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/schemas/{schemasId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: pubsub.projects.schemas.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: schemas_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/schemas:validateMessage:
    parameters: *ref_1
    post:
      description: Validates a message against a schema.
      operationId: pubsub.projects.schemas.validateMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateMessageRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateMessageResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/schemas/{schemasId}:listRevisions:
    parameters: *ref_1
    get:
      description: Lists all schema revisions for the named schema.
      operationId: pubsub.projects.schemas.listRevisions
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchemaRevisionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: schemas__revisions
      x-stackQL-verb: select
  /v1/projects/{projectsId}/schemas/{schemasId}:rollback:
    parameters: *ref_1
    post:
      description: >-
        Creates a new schema revision that is a copy of the provided
        revision_id.
      operationId: pubsub.projects.schemas.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackSchemaRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/schemas/{schemasId}:commit:
    parameters: *ref_1
    post:
      description: Commits a new schema revision to an existing schema.
      operationId: pubsub.projects.schemas.commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitSchemaRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/schemas:validate:
    parameters: *ref_1
    post:
      description: Validates a schema.
      operationId: pubsub.projects.schemas.validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateSchemaRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateSchemaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:acknowledge:
    parameters: *ref_1
    post:
      description: >-
        Acknowledges the messages associated with the `ack_ids` in the
        `AcknowledgeRequest`. The Pub/Sub system can remove the relevant
        messages from the subscription. Acknowledging a message whose ack
        deadline has expired may succeed, but such a message may be redelivered
        later. Acknowledging a message more than once will not result in an
        error.
      operationId: pubsub.projects.subscriptions.acknowledge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcknowledgeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:detach:
    parameters: *ref_1
    post:
      description: >-
        Detaches a subscription from this topic. All messages retained in the
        subscription are dropped. Subsequent `Pull` and `StreamingPull` requests
        will return FAILED_PRECONDITION. If the subscription is a push
        subscription, pushes to the endpoint will stop.
      operationId: pubsub.projects.subscriptions.detach
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetachSubscriptionResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: pubsub.projects.subscriptions.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: subscriptions_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:
    parameters: *ref_1
    get:
      description: Gets the configuration details of a subscription.
      operationId: pubsub.projects.subscriptions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: select
    delete:
      description: >-
        Deletes an existing subscription. All messages retained in the
        subscription are immediately dropped. Calls to `Pull` after deletion
        will return `NOT_FOUND`. After a subscription is deleted, a new one may
        be created with the same name, but the new one has no association with
        the old subscription or its topic unless the same topic is specified.
      operationId: pubsub.projects.subscriptions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: delete
    put:
      description: >-
        Creates a subscription to a given topic. See the [resource name rules]
        (https://cloud.google.com/pubsub/docs/admin#resource_names). If the
        subscription already exists, returns `ALREADY_EXISTS`. If the
        corresponding topic doesn't exist, returns `NOT_FOUND`. If the name is
        not provided in the request, the server will assign a random name for
        this subscription on the same project as the topic, conforming to the
        [resource name format]
        (https://cloud.google.com/pubsub/docs/admin#resource_names). The
        generated name is populated in the returned Subscription object. Note
        that for REST API requests, you must specify a name in the request.
      operationId: pubsub.projects.subscriptions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: insert
    patch:
      description: >-
        Updates an existing subscription. Note that certain properties of a
        subscription, such as its topic, are not modifiable.
      operationId: pubsub.projects.subscriptions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubscriptionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:seek:
    parameters: *ref_1
    post:
      description: >-
        Seeks an existing subscription to a point in time or to a given
        snapshot, whichever is provided in the request. Snapshots are used in
        [Seek] (https://cloud.google.com/pubsub/docs/replay-overview)
        operations, which allow you to manage message acknowledgments in bulk.
        That is, you can set the acknowledgment state of messages in an existing
        subscription to the state captured by a snapshot. Note that both the
        subscription and the snapshot must be on the same topic.
      operationId: pubsub.projects.subscriptions.seek
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeekRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeekResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: pubsub.projects.subscriptions.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:modifyAckDeadline:
    parameters: *ref_1
    post:
      description: >-
        Modifies the ack deadline for a specific message. This method is useful
        to indicate that more time is needed to process a message by the
        subscriber, or to make the message available for redelivery if the
        processing was interrupted. Note that this does not modify the
        subscription-level `ackDeadlineSeconds` used for subsequent messages.
      operationId: pubsub.projects.subscriptions.modifyAckDeadline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAckDeadlineRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:pull:
    parameters: *ref_1
    post:
      description: Pulls messages from the server.
      operationId: pubsub.projects.subscriptions.pull
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions:
    parameters: *ref_1
    get:
      description: Lists matching subscriptions.
      operationId: pubsub.projects.subscriptions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSubscriptionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: select
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:modifyPushConfig:
    parameters: *ref_1
    post:
      description: >-
        Modifies the `PushConfig` for a specified subscription. This may be used
        to change a push subscription to a pull one (signified by an empty
        `PushConfig`) or vice versa, or change the endpoint URL and other
        attributes of a push subscription. Messages will accumulate for delivery
        continuously through the call regardless of changes to the `PushConfig`.
      operationId: pubsub.projects.subscriptions.modifyPushConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyPushConfigRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/subscriptions/{subscriptionsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: pubsub.projects.subscriptions.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: subscriptionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: subscriptions_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/topics/{topicsId}/subscriptions:
    parameters: *ref_1
    get:
      description: Lists the names of the attached subscriptions on this topic.
      operationId: pubsub.projects.topics.subscriptions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTopicSubscriptionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: subscriptions
      x-stackQL-verb: select
  /v1/projects/{projectsId}/topics/{topicsId}/snapshots:
    parameters: *ref_1
    get:
      description: >-
        Lists the names of the snapshots on this topic. Snapshots are used in
        [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations,
        which allow you to manage message acknowledgments in bulk. That is, you
        can set the acknowledgment state of messages in an existing subscription
        to the state captured by a snapshot.
      operationId: pubsub.projects.topics.snapshots.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTopicSnapshotsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: snapshots
      x-stackQL-verb: select
  /v1/projects/{projectsId}/topics/{topicsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: pubsub.projects.topics.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/topics/{topicsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: pubsub.projects.topics.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: topics_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/topics/{topicsId}:publish:
    parameters: *ref_1
    post:
      description: >-
        Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
        does not exist.
      operationId: pubsub.projects.topics.publish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/topics/{topicsId}:
    parameters: *ref_1
    get:
      description: Gets the configuration of a topic.
      operationId: pubsub.projects.topics.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: select
    put:
      description: >-
        Creates the given topic with the given name. See the [resource name
        rules] (https://cloud.google.com/pubsub/docs/admin#resource_names).
      operationId: pubsub.projects.topics.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: insert
    delete:
      description: >-
        Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
        does not exist. After a topic is deleted, a new topic may be created
        with the same name; this is an entirely new topic with none of the old
        configuration or subscriptions. Existing subscriptions to this topic are
        not deleted, but their `topic` field is set to `_deleted-topic_`.
      operationId: pubsub.projects.topics.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: delete
    patch:
      description: >-
        Updates an existing topic. Note that certain properties of a topic are
        not modifiable.
      operationId: pubsub.projects.topics.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTopicRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/topics:
    parameters: *ref_1
    get:
      description: Lists matching topics.
      operationId: pubsub.projects.topics.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTopicsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: select
  /v1/projects/{projectsId}/topics/{topicsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: pubsub.projects.topics.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/pubsub
          Oauth2c:
            - https://www.googleapis.com/auth/pubsub
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics_iam_policies
      x-stackQL-verb: exec
