openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud TPU API
  description: TPU API provides customers with access to Google TPU technology.
  version: v1
  x-discovery-doc-revision: '20230601'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/tpu/
servers:
  - url: https://tpu.googleapis.com
components:
  schemas:
    Operation:
      id: Operation
      properties:
        response:
          type: object
          description: >-
            The normal response of the operation in case of success. If the
            original method returns no data on success, such as `Delete`, the
            response is `google.protobuf.Empty`. If the original method is
            standard `Get`/`Create`/`Update`, the response should be the
            resource. For other methods, the response should have the type
            `XxxResponse`, where `Xxx` is the original method name. For example,
            if the original method name is `TakeSnapshot()`, the inferred
            response type is `TakeSnapshotResponse`.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          type: boolean
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
        name:
          type: string
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
    AcceleratorType:
      properties:
        name:
          type: string
          description: The resource name.
        type:
          description: the accelerator type.
          type: string
      description: A accelerator type that a Node can be configured with.
      type: object
      id: AcceleratorType
    OperationMetadata:
      id: OperationMetadata
      properties:
        cancelRequested:
          type: boolean
          description: Specifies if cancellation was requested for the operation.
        verb:
          description: Name of the verb executed by the operation.
          type: string
        target:
          description: >-
            Target of the operation - for example
            projects/project-1/connectivityTests/test-1
          type: string
        endTime:
          description: The time the operation finished running.
          format: google-datetime
          type: string
        statusDetail:
          type: string
          description: Human-readable status of the operation, if any.
        createTime:
          description: The time the operation was created.
          format: google-datetime
          type: string
        apiVersion:
          description: API version.
          type: string
      description: Metadata describing an Operation
      type: object
    ListTensorFlowVersionsResponse:
      id: ListTensorFlowVersionsResponse
      type: object
      properties:
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
        nextPageToken:
          type: string
          description: The next page token or empty if none.
        tensorflowVersions:
          items:
            $ref: '#/components/schemas/TensorFlowVersion'
          description: The listed nodes.
          type: array
      description: Response for ListTensorFlowVersions.
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      id: Status
      type: object
      properties:
        code:
          format: int32
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
        details:
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      id: Empty
      properties: {}
    ListAcceleratorTypesResponse:
      type: object
      description: Response for ListAcceleratorTypes.
      properties:
        nextPageToken:
          description: The next page token or empty if none.
          type: string
        acceleratorTypes:
          type: array
          description: The listed nodes.
          items:
            $ref: '#/components/schemas/AcceleratorType'
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
      id: ListAcceleratorTypesResponse
    StopNodeRequest:
      properties: {}
      type: object
      id: StopNodeRequest
      description: Request for StopNode.
    ReimageNodeRequest:
      description: Request for ReimageNode.
      id: ReimageNodeRequest
      type: object
      properties:
        tensorflowVersion:
          description: The version for reimage to create.
          type: string
    StartNodeRequest:
      description: Request for StartNode.
      type: object
      properties: {}
      id: StartNodeRequest
    TensorFlowVersion:
      id: TensorFlowVersion
      properties:
        name:
          type: string
          description: The resource name.
        version:
          description: the tensorflow version.
          type: string
      description: A tensorflow version that a Node can be configured with.
      type: object
    ListLocationsResponse:
      description: The response message for Locations.ListLocations.
      id: ListLocationsResponse
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: >-
            A list of locations that matches the specified filter in the
            request.
        nextPageToken:
          type: string
          description: The standard List next-page token.
      type: object
    ListNodesResponse:
      type: object
      properties:
        nodes:
          description: The listed nodes.
          items:
            $ref: '#/components/schemas/Node'
          type: array
        nextPageToken:
          description: The next page token or empty if none.
          type: string
        unreachable:
          type: array
          description: Locations that could not be reached.
          items:
            type: string
      description: Response for ListNodes.
      id: ListNodesResponse
    ListOperationsResponse:
      id: ListOperationsResponse
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          type: string
          description: The standard List next-page token.
      description: The response message for Operations.ListOperations.
    SchedulingConfig:
      id: SchedulingConfig
      type: object
      description: Sets the scheduling options for this node.
      properties:
        preemptible:
          description: Defines whether the node is preemptible.
          type: boolean
        reserved:
          type: boolean
          description: Whether the node is created under a reservation.
    Node:
      properties:
        createTime:
          description: Output only. The time when the node was created.
          readOnly: true
          format: google-datetime
          type: string
        state:
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - READY
            - RESTARTING
            - REIMAGING
            - DELETING
            - REPAIRING
            - STOPPED
            - STOPPING
            - STARTING
            - PREEMPTED
            - TERMINATED
            - HIDING
            - HIDDEN
            - UNHIDING
          enumDescriptions:
            - TPU node state is not known/set.
            - TPU node is being created.
            - TPU node has been created.
            - TPU node is restarting.
            - TPU node is undergoing reimaging.
            - TPU node is being deleted.
            - >-
              TPU node is being repaired and may be unusable. Details can be
              found in the `help_description` field.
            - TPU node is stopped.
            - TPU node is currently stopping.
            - TPU node is currently starting.
            - >-
              TPU node has been preempted. Only applies to Preemptible TPU
              Nodes.
            - >-
              TPU node has been terminated due to maintenance or has reached the
              end of its life cycle (for preemptible nodes).
            - TPU node is currently hiding.
            - TPU node has been hidden.
            - TPU node is currently unhiding.
          description: Output only. The current state for the TPU Node.
          type: string
          readOnly: true
        health:
          description: The health status of the TPU node.
          enum:
            - HEALTH_UNSPECIFIED
            - HEALTHY
            - DEPRECATED_UNHEALTHY
            - TIMEOUT
            - UNHEALTHY_TENSORFLOW
            - UNHEALTHY_MAINTENANCE
          type: string
          enumDescriptions:
            - 'Health status is unknown: not initialized or failed to retrieve.'
            - The resource is healthy.
            - The resource is unhealthy.
            - The resource is unresponsive.
            - The in-guest ML stack is unhealthy.
            - >-
              The node is under maintenance/priority boost caused rescheduling
              and will resume running once rescheduled.
        useServiceNetworking:
          description: >-
            Whether the VPC peering for the node is set up through Service
            Networking API. The VPC Peering should be set up before provisioning
            the node. If this field is set, cidr_block field should not be
            specified. If the network, that you want to peer the TPU Node to, is
            Shared VPC networks, the node must be created with this this field
            enabled.
          type: boolean
        networkEndpoints:
          readOnly: true
          items:
            $ref: '#/components/schemas/NetworkEndpoint'
          type: array
          description: >-
            Output only. The network endpoints where TPU workers can be accessed
            and sent work. It is recommended that Tensorflow clients of the node
            reach out to the 0th entry in this map first.
        network:
          type: string
          description: >-
            The name of a network they wish to peer the TPU node to. It must be
            a preexisting Compute Engine network inside of the project on which
            this API has been activated. If none is provided, "default" will be
            used.
        apiVersion:
          enum:
            - API_VERSION_UNSPECIFIED
            - V1_ALPHA1
            - V1
            - V2_ALPHA1
          enumDescriptions:
            - API version is unknown.
            - TPU API V1Alpha1 version.
            - TPU API V1 version.
            - TPU API V2Alpha1 version.
          description: Output only. The API version that created this Node.
          readOnly: true
          type: string
        cidrBlock:
          description: >-
            The CIDR block that the TPU node will use when selecting an IP
            address. This CIDR block must be a /29 block; the Compute Engine
            networks API forbids a smaller block, and using a larger block would
            be wasteful (a node can only consume one IP address). Errors will
            occur if the CIDR block has already been used for a currently
            existing TPU node, the CIDR block conflicts with any subnetworks in
            the user's provided network, or the provided network is peered with
            another network that is using that CIDR block.
          type: string
        tensorflowVersion:
          description: Required. The version of Tensorflow running in the Node.
          type: string
        schedulingConfig:
          $ref: '#/components/schemas/SchedulingConfig'
          description: The scheduling options for this node.
        labels:
          description: Resource labels to represent user-provided metadata.
          type: object
          additionalProperties:
            type: string
        description:
          description: The user-supplied description of the TPU. Maximum of 512 characters.
          type: string
        healthDescription:
          readOnly: true
          description: >-
            Output only. If this field is populated, it contains a description
            of why the TPU Node is unhealthy.
          type: string
        ipAddress:
          description: >-
            Output only. DEPRECATED! Use network_endpoints instead. The network
            address for the TPU Node as visible to Compute Engine instances.
          type: string
        symptoms:
          description: Output only. The Symptoms that have occurred to the TPU Node.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Symptom'
        serviceAccount:
          description: >-
            Output only. The service account used to run the tensor flow
            services within the node. To share resources, including Google Cloud
            Storage data, with the Tensorflow job running in the Node, this
            account must have permissions to that data.
          type: string
          readOnly: true
        acceleratorType:
          description: >-
            Required. The type of hardware accelerators associated with this
            node.
          type: string
        name:
          description: Output only. Immutable. The name of the TPU
          type: string
          readOnly: true
        port:
          type: string
          description: >-
            Output only. DEPRECATED! Use network_endpoints instead. The network
            port for the TPU Node as visible to Compute Engine instances.
      description: A TPU instance.
      id: Node
      type: object
    NetworkEndpoint:
      id: NetworkEndpoint
      type: object
      description: A network endpoint over which a TPU worker can be reached.
      properties:
        ipAddress:
          description: The IP address of this network endpoint.
          type: string
        port:
          type: integer
          format: int32
          description: The port of this network endpoint.
    Location:
      id: Location
      type: object
      properties:
        labels:
          type: object
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          additionalProperties:
            type: string
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
      description: A resource that represents a Google Cloud location.
    Symptom:
      properties:
        details:
          type: string
          description: Detailed information of the current Symptom.
        workerId:
          type: string
          description: A string used to uniquely distinguish a worker within a TPU node.
        symptomType:
          type: string
          enum:
            - SYMPTOM_TYPE_UNSPECIFIED
            - LOW_MEMORY
            - OUT_OF_MEMORY
            - EXECUTE_TIMED_OUT
            - MESH_BUILD_FAIL
            - HBM_OUT_OF_MEMORY
            - PROJECT_ABUSE
          description: Type of the Symptom.
          enumDescriptions:
            - Unspecified symptom.
            - TPU VM memory is low.
            - TPU runtime is out of memory.
            - TPU runtime execution has timed out.
            - >-
              TPU runtime fails to construct a mesh that recognizes each TPU
              device's neighbors.
            - TPU HBM is out of memory.
            - Abusive behaviors have been identified on the current project.
        createTime:
          format: google-datetime
          type: string
          description: Timestamp when the Symptom is created.
      description: A Symptom instance.
      type: object
      id: Symptom
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
    delete:
      description: Deletes a node.
      operationId: tpu.projects.locations.nodes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
      x-stackQL-resource: nodes
      x-stackQL-verb: delete
    get:
      description: Gets the details of a node.
      operationId: tpu.projects.locations.nodes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
      x-stackQL-resource: nodes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:stop:
    parameters: *ref_1
    post:
      description: Stops a node, this operation is only available with single TPU nodes.
      operationId: tpu.projects.locations.nodes.stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopNodeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
      x-stackQL-resource: nodes
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:reimage:
    parameters: *ref_1
    post:
      description: Reimages a node's OS.
      operationId: tpu.projects.locations.nodes.reimage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReimageNodeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
      x-stackQL-resource: nodes
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:start:
    parameters: *ref_1
    post:
      description: Starts a node.
      operationId: tpu.projects.locations.nodes.start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartNodeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
      x-stackQL-resource: nodes
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/nodes:
    parameters: *ref_1
    post:
      description: Creates a node.
      operationId: tpu.projects.locations.nodes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: nodeId
          schema:
            type: string
      x-stackQL-resource: nodes
      x-stackQL-verb: insert
    get:
      description: Lists nodes.
      operationId: tpu.projects.locations.nodes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: nodes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/tensorflowVersions/{tensorflowVersionsId}:
    parameters: *ref_1
    get:
      description: Gets TensorFlow Version.
      operationId: tpu.projects.locations.tensorflowVersions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TensorFlowVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tensorflowVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tensorflow_versions
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/tensorflowVersions:
    parameters: *ref_1
    get:
      description: List TensorFlow versions supported by this API.
      operationId: tpu.projects.locations.tensorflowVersions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTensorFlowVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: tensorflow_versions
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/acceleratorTypes/{acceleratorTypesId}:
    parameters: *ref_1
    get:
      description: Gets AcceleratorType.
      operationId: tpu.projects.locations.acceleratorTypes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceleratorType'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: acceleratorTypesId
          required: true
          schema:
            type: string
      x-stackQL-resource: accelerator_types
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/acceleratorTypes:
    parameters: *ref_1
    get:
      description: Lists accelerator types supported by this API.
      operationId: tpu.projects.locations.acceleratorTypes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAcceleratorTypesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: accelerator_types
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: tpu.projects.locations.operations.cancel
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: tpu.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: tpu.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: tpu.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: tpu.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: tpu.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: locations
      x-stackQL-verb: select
