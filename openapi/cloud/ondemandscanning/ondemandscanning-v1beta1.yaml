openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: On-Demand Scanning API
  description: A service to scan container images for vulnerabilities.
  version: v1beta1
  x-discovery-doc-revision: '20230612'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://cloud.google.com/container-analysis/docs/on-demand-scanning/
servers:
  - url: https://ondemandscanning.googleapis.com
components:
  schemas:
    PackageVersion:
      type: object
      properties:
        version:
          type: string
        name:
          type: string
      id: PackageVersion
    Signature:
      properties:
        publicKeyId:
          description: >-
            The identifier for the public key that verifies this signature. *
            The `public_key_id` is required. * The `public_key_id` SHOULD be an
            RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD
            be an immutable reference, such as a cryptographic digest. Examples
            of valid `public_key_id`s: OpenPGP V4 public key fingerprint: *
            "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See
            https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for
            more details on this scheme. RFC6920 digest-named
            SubjectPublicKeyInfo (digest of the DER serialization): *
            "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" *
            "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
          type: string
        signature:
          description: >-
            The content of the signature, an opaque bytestring. The payload that
            this signature verifies MUST be unambiguously provided with the
            Signature during verification. A wrapper message might provide the
            payload explicitly. Alternatively, a message might have a canonical
            serialization that can always be unambiguously computed to derive
            the payload.
          format: byte
          type: string
      description: >-
        Verifiers (e.g. Kritis implementations) MUST verify signatures with
        respect to the trust anchors defined in policy (e.g. a Kritis policy).
        Typically this means that the verifier has been configured with a map
        from `public_key_id` to public key material (and any required
        parameters, e.g. signing algorithm). In particular, verification
        implementations MUST NOT treat the signature `public_key_id` as anything
        more than a key lookup hint. The `public_key_id` DOES NOT validate or
        authenticate a public key; it only provides a mechanism for quickly
        selecting a public key ALREADY CONFIGURED on the verifier through a
        trusted channel. Verification implementations MUST reject signatures in
        any of the following circumstances: * The `public_key_id` is not
        recognized by the verifier. * The public key that `public_key_id` refers
        to does not verify the signature with respect to the payload. The
        `signature` contents SHOULD NOT be "attached" (where the payload is
        included with the serialized `signature` bytes). Verifiers MUST ignore
        any "attached" payload and only verify signatures with respect to
        explicitly provided payload (e.g. a `payload` field on the proto message
        that holds this Signature, or the canonical serialization of the proto
        message that holds this signature).
      type: object
      id: Signature
    SlsaProvenanceZeroTwo:
      properties:
        buildType:
          type: string
        buildConfig:
          additionalProperties:
            description: Properties of the object.
            type: any
          type: object
        invocation:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation'
        metadata:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata'
        builder:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder'
        materials:
          items:
            $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial'
          type: array
      id: SlsaProvenanceZeroTwo
      description: See full explanation of fields at slsa.dev/provenance/v0.2.
      type: object
    PackageData:
      id: PackageData
      properties:
        architecture:
          type: string
          description: The architecture of the package.
        sourceVersion:
          description: DEPRECATED
          $ref: '#/components/schemas/PackageVersion'
        osVersion:
          description: The version of the OS Used to generate the cpe_uri for OS packages
          type: string
        os:
          type: string
          description: >-
            The OS affected by a vulnerability Used to generate the cpe_uri for
            OS packages
        binaryVersion:
          description: DEPRECATED
          $ref: '#/components/schemas/PackageVersion'
        package:
          type: string
          description: The package being analysed for vulnerabilities
        hashDigest:
          description: >-
            HashDigest stores the SHA512 hash digest of the jar file if the
            package is of type Maven. This field will be unset for non Maven
            packages.
          type: string
        packageType:
          enumDescriptions:
            - ''
            - Operating System
            - Java packages from Maven.
            - Go third-party packages.
            - Go toolchain + standard library packages.
            - Python packages.
            - NPM packages.
          description: 'The type of package: os, maven, go, etc.'
          type: string
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - OS
            - MAVEN
            - GO
            - GO_STDLIB
            - PYPI
            - NPM
        fileLocation:
          description: The path to the jar file / go binary file.
          type: array
          items:
            $ref: '#/components/schemas/FileLocation'
        binarySourceInfo:
          items:
            $ref: '#/components/schemas/BinarySourceInfo'
          description: A bundle containing the binary and source information.
          type: array
        patchedCve:
          description: >-
            CVEs that this package is no longer vulnerable to
            go/drydock-dd-custom-binary-scanning
          type: array
          items:
            type: string
        version:
          description: The version of the package being analysed
          type: string
        maintainer:
          $ref: '#/components/schemas/Maintainer'
          description: The maintainer of the package.
        unused:
          type: string
        dependencyChain:
          items:
            $ref: '#/components/schemas/LanguagePackageDependency'
          description: >-
            The dependency chain between this package and the user's artifact.
            List in order from the customer's package under review first, to the
            current package last. Inclusive of the original package and the
            current package.
          type: array
        cpeUri:
          type: string
          description: >-
            The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)
            in which the vulnerability may manifest. Examples include distro or
            storage location for vulnerable jar.
      type: object
    GerritSourceContext:
      id: GerritSourceContext
      properties:
        gerritProject:
          type: string
          description: >-
            The full project name within the host. Projects may be nested, so
            "project/subproject" is a valid project name. The "repo name" is the
            hostURI/project.
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        revisionId:
          type: string
          description: A revision (commit) ID.
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
      description: A SourceContext referring to a Gerrit project.
      type: object
    AnalysisCompleted:
      description: >-
        Indicates which analysis completed successfully. Multiple types of
        analysis can be performed on a single resource.
      id: AnalysisCompleted
      type: object
      properties:
        analysisType:
          items:
            type: string
          type: array
    AnalyzePackagesRequest:
      type: object
      properties:
        packages:
          items:
            $ref: '#/components/schemas/PackageData'
          description: The packages to analyze.
          type: array
        resourceUri:
          description: Required. The resource URI of the container image being scanned.
          type: string
      id: AnalyzePackagesRequest
      description: >-
        AnalyzePackagesRequest is the request to analyze a list of packages and
        create Vulnerability Occurrences for it.
    SbomReferenceIntotoPayload:
      properties:
        subject:
          type: array
          description: >-
            Set of software artifacts that the attestation applies to. Each
            element represents a single software artifact.
          items:
            $ref: '#/components/schemas/Subject'
        predicate:
          description: >-
            Additional parameters of the Predicate. Includes the actual data
            about the SBOM.
          $ref: '#/components/schemas/SbomReferenceIntotoPredicate'
        _type:
          description: Identifier for the schema of the Statement.
          type: string
        predicateType:
          description: URI identifying the type of the Predicate.
          type: string
      type: object
      description: >-
        The actual payload that contains the SBOM Reference data. The payload
        follows the intoto statement specification. See
        https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md
        for more details.
      id: SbomReferenceIntotoPayload
    ProjectRepoId:
      type: object
      id: ProjectRepoId
      description: >-
        Selects a repo using a Google Cloud Platform project ID (e.g.,
        winged-cargo-31) and a repo name within that project.
      properties:
        projectId:
          description: The ID of the project.
          type: string
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata:
      properties:
        buildFinishedOn:
          type: string
          format: google-datetime
        buildInvocationId:
          type: string
        buildStartedOn:
          format: google-datetime
          type: string
        completeness:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness'
        reproducible:
          type: boolean
      description: Other properties of the build.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
      type: object
    Category:
      id: Category
      properties:
        name:
          description: The localized name of the category.
          type: string
        categoryId:
          description: The identifier of the category.
          type: string
      type: object
      description: The category to which the update belongs.
    VexAssessment:
      properties:
        noteName:
          description: >-
            The VulnerabilityAssessment note from which this VexAssessment was
            generated. This will be of the form:
            `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
          type: string
        impacts:
          items:
            type: string
          description: >-
            Contains information about the impact of this vulnerability, this
            will change with time.
          type: array
        state:
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - >-
              It is not known yet whether these versions are or are not affected
              by the vulnerability. However, it is still under investigation.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          description: Provides the state of this Vulnerability assessment.
        remediations:
          type: array
          description: >-
            Specifies details on how to handle (and presumably, fix) a
            vulnerability.
          items:
            $ref: '#/components/schemas/Remediation'
        relatedUris:
          description: >-
            Holds a list of references associated with this vulnerability item
            and assessment.
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
        justification:
          $ref: '#/components/schemas/Justification'
          description: >-
            Justification provides the justification when the state of the
            assessment if NOT_AFFECTED.
        cve:
          description: >-
            Holds the MITRE standard Common Vulnerabilities and Exposures (CVE)
            tracking number for the vulnerability.
          type: string
      type: object
      id: VexAssessment
      description: >-
        VexAssessment provides all publisher provided Vex information that is
        related to this vulnerability.
    ImageOccurrence:
      description: >-
        Details of the derived image portion of the DockerImage relationship.
        This image would be produced from a Dockerfile with FROM .
      type: object
      id: ImageOccurrence
      properties:
        distance:
          format: int32
          description: >-
            Output only. The number of layers by which this image differs from
            the associated image basis.
          type: integer
        fingerprint:
          description: Required. The fingerprint of the derived image.
          $ref: '#/components/schemas/Fingerprint'
        layerInfo:
          type: array
          items:
            $ref: '#/components/schemas/Layer'
          description: >-
            This contains layer-specific metadata, if populated it has length
            "distance" and is ordered with [distance] being the layer
            immediately following the base image and [1] being the final layer.
        baseResourceUrl:
          description: >-
            Output only. This contains the base image URL for the derived image
            occurrence.
          type: string
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          type: string
          description: The standard List next-page token.
      id: ListOperationsResponse
      type: object
    CloudRepoSourceContext:
      description: >-
        A CloudRepoSourceContext denotes a particular revision in a Google Cloud
        Source Repo.
      type: object
      id: CloudRepoSourceContext
      properties:
        repoId:
          $ref: '#/components/schemas/RepoId'
          description: The ID of the repo.
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        revisionId:
          type: string
          description: A revision ID.
    Identity:
      properties:
        revision:
          description: The revision number of the update.
          format: int32
          type: integer
        updateId:
          type: string
          description: The revision independent identifier of the update.
      type: object
      description: The unique identifier of the update.
      id: Identity
    Operation:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Status'
          description: >-
            The error result of the operation in case of failure or
            cancellation.
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: >-
            The normal response of the operation in case of success. If the
            original method returns no data on success, such as `Delete`, the
            response is `google.protobuf.Empty`. If the original method is
            standard `Get`/`Create`/`Update`, the response should be the
            resource. For other methods, the response should have the type
            `XxxResponse`, where `Xxx` is the original method name. For example,
            if the original method name is `TakeSnapshot()`, the inferred
            response type is `TakeSnapshotResponse`.
          type: object
        metadata:
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
    Occurrence:
      properties:
        vulnerability:
          description: Describes a security vulnerability.
          $ref: '#/components/schemas/VulnerabilityOccurrence'
        image:
          description: >-
            Describes how this resource derives from the basis in the associated
            note.
          $ref: '#/components/schemas/ImageOccurrence'
        sbomReference:
          description: Describes a specific SBOM reference occurrences.
          $ref: '#/components/schemas/SBOMReferenceOccurrence'
        attestation:
          $ref: '#/components/schemas/AttestationOccurrence'
          description: Describes an attestation of an artifact.
        name:
          type: string
          description: >-
            Output only. The name of the occurrence in the form of
            `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
        compliance:
          description: Describes a compliance violation on a linked resource.
          $ref: '#/components/schemas/ComplianceOccurrence'
        deployment:
          description: Describes the deployment of an artifact on a runtime.
          $ref: '#/components/schemas/DeploymentOccurrence'
        remediation:
          type: string
          description: A description of actions that can be taken to remedy the note.
        build:
          description: Describes a verifiable build.
          $ref: '#/components/schemas/BuildOccurrence'
        dsseAttestation:
          description: Describes an attestation of an artifact using dsse.
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
        upgrade:
          $ref: '#/components/schemas/UpgradeOccurrence'
          description: Describes an available package upgrade on the linked resource.
        discovery:
          description: Describes when a resource was discovered.
          $ref: '#/components/schemas/DiscoveryOccurrence'
        resourceUri:
          type: string
          description: >-
            Required. Immutable. A URI that represents the resource for which
            the occurrence applies. For example,
            `https://gcr.io/project/image@sha256:123abc` for a Docker image.
        kind:
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - >-
              The note and occurrence track the initial discovery status of a
              resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          description: >-
            Output only. This explicitly denotes which of the occurrence details
            are specified. This field can be used as a filter in list requests.
          type: string
        createTime:
          format: google-datetime
          description: Output only. The time this occurrence was created.
          type: string
        envelope:
          description: https://github.com/secure-systems-lab/dsse
          $ref: '#/components/schemas/Envelope'
        updateTime:
          description: Output only. The time this occurrence was last updated.
          format: google-datetime
          type: string
        package:
          description: Describes the installation of a package on the linked resource.
          $ref: '#/components/schemas/PackageOccurrence'
        noteName:
          description: >-
            Required. Immutable. The analysis note associated with this
            occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
            This field can be used as a filter in list requests.
          type: string
      description: An instance of an analysis type that has been found on a resource.
      type: object
      id: Occurrence
    NonCompliantFile:
      description: >-
        Details about files that caused a compliance check to fail.
        display_command is a single command that can be used to display a list
        of non compliant files. When there is no such command, we can also
        iterate a list of non compliant file using 'path'.
      id: NonCompliantFile
      properties:
        path:
          description: Empty if `display_command` is set.
          type: string
        reason:
          description: Explains why a file is non compliant for a CIS check.
          type: string
        displayCommand:
          type: string
          description: Command to display the non-compliant files.
      type: object
    EnvelopeSignature:
      type: object
      properties:
        keyid:
          type: string
        sig:
          format: byte
          type: string
      id: EnvelopeSignature
    LanguagePackageDependency:
      description: >-
        Indicates a language package available between this package and the
        customer's resource artifact.
      id: LanguagePackageDependency
      type: object
      properties:
        version:
          type: string
        package:
          type: string
    WindowsUpdate:
      description: >-
        Windows Update represents the metadata about the update for the Windows
        operating system. The fields in this message come from the Windows
        Update API documented at
        https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
      properties:
        description:
          type: string
          description: The localized description of the update.
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
        categories:
          description: The list of categories to which the update belongs.
          items:
            $ref: '#/components/schemas/Category'
          type: array
        lastPublishedTimestamp:
          description: The last published timestamp of the update.
          format: google-datetime
          type: string
        kbArticleIds:
          description: >-
            The Microsoft Knowledge Base article IDs that are associated with
            the update.
          items:
            type: string
          type: array
        title:
          description: The localized title of the update.
          type: string
        identity:
          description: Required - The unique identifier for the update.
          $ref: '#/components/schemas/Identity'
      type: object
      id: WindowsUpdate
    AnalyzePackagesMetadataV1:
      id: AnalyzePackagesMetadataV1
      description: >-
        AnalyzePackagesMetadata contains metadata for an active scan of a
        container image.
      type: object
      properties:
        createTime:
          format: google-datetime
          description: When the scan was created.
          type: string
        resourceUri:
          description: The resource URI of the container image being scanned.
          type: string
    Maintainer:
      id: Maintainer
      type: object
      properties:
        name:
          type: string
        kind:
          type: string
    DSSEAttestationOccurrence:
      description: >-
        Deprecated. Prefer to use a regular Occurrence, and populate the
        Envelope at the top level of the Occurrence.
      type: object
      id: DSSEAttestationOccurrence
      properties:
        statement:
          $ref: '#/components/schemas/InTotoStatement'
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: >-
            If doing something security critical, make sure to verify the
            signatures in this metadata.
    Hash:
      type: object
      description: Container message for hash values.
      properties:
        type:
          description: Required. The type of hash that was performed, e.g. "SHA-256".
          type: string
        value:
          description: Required. The hash value.
          type: string
          format: byte
      id: Hash
    AnalyzePackagesMetadata:
      type: object
      description: >-
        AnalyzePackagesMetadata contains metadata for an active scan of a
        container image.
      properties:
        resourceUri:
          type: string
          description: The resource URI of the container image being scanned.
        createTime:
          format: google-datetime
          type: string
          description: When the scan was created.
      id: AnalyzePackagesMetadata
    DeploymentOccurrence:
      type: object
      description: The period during which some deployable was active in a runtime.
      id: DeploymentOccurrence
      properties:
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
        deployTime:
          type: string
          format: google-datetime
          description: Required. Beginning of the lifetime of this deployment.
        resourceUri:
          type: array
          items:
            type: string
          description: >-
            Output only. Resource URI for the artifact being deployed taken from
            the deployable field with the same name.
        config:
          description: Configuration used to create this deployment.
          type: string
        platform:
          type: string
          description: Platform hosting this deployment.
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
        undeployTime:
          format: google-datetime
          type: string
          description: End of the lifetime of this deployment.
        address:
          type: string
          description: Address of the runtime element hosting this deployment.
    RelatedUrl:
      id: RelatedUrl
      properties:
        label:
          description: Label to describe usage of the URL.
          type: string
        url:
          type: string
          description: Specific URL associated with the resource.
      type: object
      description: Metadata for any related URL information.
    UpgradeDistribution:
      properties:
        cpeUri:
          description: >-
            Required - The specific operating system this metadata applies to.
            See https://cpe.mitre.org/specification/.
          type: string
        classification:
          type: string
          description: >-
            The operating system classification of this Upgrade, as specified by
            the upstream operating system upgrade feed. For Windows the
            classification is one of the category_ids listed at
            https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
        cve:
          type: array
          description: The cve tied to this Upgrade.
          items:
            type: string
        severity:
          description: The severity as specified by the upstream operating system.
          type: string
      description: >-
        The Upgrade Distribution represents metadata about the Upgrade for each
        operating system (CPE). Some distributions have additional metadata
        around updates, classifying them into various categories and severities.
      id: UpgradeDistribution
      type: object
    FileHashes:
      id: FileHashes
      properties:
        fileHash:
          items:
            $ref: '#/components/schemas/Hash'
          type: array
          description: Required. Collection of file hashes.
      description: >-
        Container message for hashes of byte content of files, used in source
        messages to verify integrity of source input to the build.
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
      description: >-
        Describes where the config file that kicked off the build came from.
        This is effectively a pointer to the source where buildConfig came from.
      type: object
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
        entryPoint:
          type: string
        uri:
          type: string
    Recipe:
      type: object
      properties:
        definedInMaterial:
          format: int64
          type: string
          description: >-
            Index in materials containing the recipe steps that are not implied
            by recipe.type. For example, if the recipe type were "make", then
            this would point to the source containing the Makefile, not the make
            program itself. Set to -1 if the recipe doesn't come from a
            material, as zero is default unset value for int64.
        entryPoint:
          type: string
          description: >-
            String identifying the entry point into the build. This is often a
            path to a configuration file and/or a target label within that file.
            The syntax and meaning are defined by recipe.type. For example, if
            the recipe type were "make", then this would reference the directory
            in which to run make as well as which target to use.
        environment:
          description: >-
            Any other builder-controlled inputs necessary for correctly
            evaluating the recipe. Usually only needed for reproducing the build
            but not evaluated as part of policy. Since the environment field can
            greatly vary in structure, depending on the builder and recipe type,
            this is of form "Any".
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          type: array
        arguments:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: >-
            Collection of all external inputs that influenced the build on top
            of recipe.definedInMaterial and recipe.entryPoint. For example, if
            the recipe type were "make", then this might be the flags passed to
            make aside from the target, which is captured in recipe.entryPoint.
            Since the arguments field can greatly vary in structure, depending
            on the builder and recipe type, this is of form "Any".
          type: array
        type:
          type: string
          description: >-
            URI indicating what type of recipe was performed. It determines the
            meaning of recipe.entryPoint, recipe.arguments, recipe.environment,
            and materials.
      description: >-
        Steps taken to build the artifact. For a TaskRun, typically each
        container corresponds to one step in the recipe.
      id: Recipe
    RepoId:
      type: object
      properties:
        uid:
          type: string
          description: A server-assigned, globally unique identifier.
        projectRepoId:
          $ref: '#/components/schemas/ProjectRepoId'
          description: A combination of a project ID and a repo name.
      id: RepoId
      description: A unique identifier for a Cloud Repo.
    AttestationOccurrence:
      properties:
        serializedPayload:
          description: >-
            Required. The serialized payload that is verified by one or more
            `signatures`.
          format: byte
          type: string
        jwts:
          items:
            $ref: '#/components/schemas/Jwt'
          description: >-
            One or more JWTs encoding a self-contained attestation. Each JWT
            encodes the payload that it verifies within the JWT itself. Verifier
            implementation SHOULD ignore the `serialized_payload` field when
            verifying these JWTs. If only JWTs are present on this
            AttestationOccurrence, then the `serialized_payload` SHOULD be left
            empty. Each JWT SHOULD encode a claim specific to the `resource_uri`
            of this Occurrence, but this is not validated by Grafeas metadata
            API implementations. The JWT itself is opaque to Grafeas.
          type: array
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          description: >-
            One or more signatures over `serialized_payload`. Verifier
            implementations should consider this attestation message verified if
            at least one `signature` verifies `serialized_payload`. See
            `Signature` in common.proto for more details on signature structure
            and verification.
          type: array
      description: >-
        Occurrence that represents a single "attestation". The authenticity of
        an attestation can be verified using the attached signature. If the
        verifier trusts the public key of the signer, then verifying the
        signature is sufficient to establish trust. In this circumstance, the
        authority to which this attestation is attached is primarily useful for
        lookup (how to find this attestation if you already know the authority
        and artifact to be verified) and intent (for which authority this
        attestation was intended to sign.
      id: AttestationOccurrence
      type: object
    Artifact:
      description: Artifact describes a build product.
      properties:
        id:
          type: string
          description: >-
            Artifact ID, if any; for container images, this will be a URL by
            digest like `gcr.io/projectID/imagename@sha256:123456`.
        names:
          description: >-
            Related artifact names. This may be the path to a binary or jar
            file, or in the case of a container build, the name used to push the
            container image to Google Container Registry, as presented to
            `docker push`. Note that a single Artifact ID can have multiple
            names, for example if two tags are applied to one image.
          type: array
          items:
            type: string
        checksum:
          type: string
          description: >-
            Hash or checksum value of a binary, or Docker Registry 2.0 digest of
            a container.
      type: object
      id: Artifact
    AnalyzePackagesResponseV1:
      id: AnalyzePackagesResponseV1
      description: >-
        AnalyzePackagesResponse contains the information necessary to find
        results for the given scan.
      type: object
      properties:
        scan:
          type: string
          description: The name of the scan resource created by this successful scan.
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      properties: {}
      type: object
      id: Empty
    AnalyzePackagesResponse:
      description: >-
        AnalyzePackagesResponse contains the information necessary to find
        results for the given scan.
      type: object
      properties:
        scan:
          type: string
          description: The name of the scan resource created by this successful scan.
      id: AnalyzePackagesResponse
    Remediation:
      type: object
      description: >-
        Specifies details on how to handle (and presumably, fix) a
        vulnerability.
      id: Remediation
      properties:
        remediationType:
          description: The type of remediation that can be applied.
          type: string
          enumDescriptions:
            - No remediation type specified.
            - A MITIGATION is available.
            - No fix is planned.
            - Not available.
            - A vendor fix is available.
            - A workaround is available.
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
        remediationUri:
          $ref: '#/components/schemas/RelatedUrl'
          description: Contains the URL where to obtain the remediation.
        details:
          type: string
          description: >-
            Contains a comprehensive human-readable discussion of the
            remediation.
    InTotoStatement:
      properties:
        _type:
          type: string
          description: Always `https://in-toto.io/Statement/v0.1`.
        slsaProvenanceZeroTwo:
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
        slsaProvenance:
          $ref: '#/components/schemas/SlsaProvenance'
        predicateType:
          description: '`https://slsa.dev/provenance/v0.1` for SlsaProvenance.'
          type: string
        subject:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        provenance:
          $ref: '#/components/schemas/InTotoProvenance'
      id: InTotoStatement
      type: object
      description: >-
        Spec defined at
        https://github.com/in-toto/attestation/tree/main/spec#statement The
        serialized InTotoStatement will be stored as Envelope.payload.
        Envelope.payloadType is always "application/vnd.in-toto+json".
    SbomReferenceIntotoPredicate:
      description: A predicate which describes the SBOM being referenced.
      id: SbomReferenceIntotoPredicate
      properties:
        location:
          type: string
          description: The location of the SBOM.
        mimeType:
          type: string
          description: The mime type of the SBOM.
        referrerId:
          description: The person or system referring this predicate to the consumer.
          type: string
        digest:
          description: A map of algorithm to digest of the contents of the SBOM.
          type: object
          additionalProperties:
            type: string
      type: object
    VulnerabilityOccurrence:
      id: VulnerabilityOccurrence
      properties:
        relatedUrls:
          description: Output only. URLs related to this vulnerability.
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
        cvssScore:
          type: number
          description: >-
            Output only. The CVSS score of this vulnerability. CVSS score is on
            a scale of 0 - 10 where 0 indicates low severity and 10 indicates
            high severity.
          format: float
        severity:
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: >-
            Output only. The note provider assigned severity of this
            vulnerability.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
        longDescription:
          description: Output only. A detailed description of this vulnerability.
          type: string
        type:
          description: >-
            The type of package; whether native or non native (e.g., ruby gems,
            node.js packages, etc.).
          type: string
        fixAvailable:
          description: >-
            Output only. Whether at least one of the affected packages has a fix
            available.
          type: boolean
        effectiveSeverity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: >-
            The distro assigned severity for this vulnerability when it is
            available, otherwise this is the note provider assigned severity.
            When there are multiple PackageIssues for this vulnerability, they
            can have different effective severities because some might be
            provided by the distro while others are provided by the language
            ecosystem for a language pack. For this reason, it is advised to use
            the effective severity on the PackageIssue level. In the case where
            multiple PackageIssues have differing effective severities, this
            field should be the highest severity for any of the PackageIssues.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
        packageIssue:
          type: array
          description: >-
            Required. The set of affected locations and their fixes (if
            available) within the associated resource.
          items:
            $ref: '#/components/schemas/PackageIssue'
        vexAssessment:
          $ref: '#/components/schemas/VexAssessment'
        cvssV2:
          description: The cvss v2 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        cvssVersion:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          description: Output only. CVSS version used to populate cvss_score and severity.
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
        shortDescription:
          description: Output only. A one sentence description of this vulnerability.
          type: string
        cvssv3:
          description: The cvss v3 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
      description: An occurrence of a severity vulnerability on a resource.
      type: object
    CVSS:
      properties:
        baseScore:
          format: float
          description: The base score is a function of the base metric scores.
          type: number
        userInteraction:
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
        privilegesRequired:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
        scope:
          type: string
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          enumDescriptions:
            - ''
            - ''
            - ''
        attackVector:
          type: string
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          description: >-
            Base Metrics Represents the intrinsic characteristics of a
            vulnerability that are constant over time and across user
            environments.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
        availabilityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
        integrityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
        exploitabilityScore:
          type: number
          format: float
        impactScore:
          type: number
          format: float
        confidentialityImpact:
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
        authentication:
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
        attackComplexity:
          type: string
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
      type: object
      id: CVSS
      description: >-
        Common Vulnerability Scoring System. For details, see
        https://www.first.org/cvss/specification-document This is a message we
        will try to use for storing various versions of CVSS rather than making
        a separate proto for storing a specific version.
    Version:
      description: Version contains structured information about the version of a package.
      id: Version
      type: object
      properties:
        inclusive:
          description: >-
            Whether this version is specifying part of an inclusive range.
            Grafeas does not have the capability to specify version ranges;
            instead we have fields that specify start version and end versions.
            At times this is insufficient - we also need to specify whether the
            version is included in the range or is excluded from the range. This
            boolean is expected to be set to true when the version is included
            in a range.
          type: boolean
        epoch:
          format: int32
          type: integer
          description: Used to correct mistakes in the version numbering scheme.
        kind:
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
          type: string
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          description: >-
            Required. Distinguishes between sentinel MIN/MAX versions and normal
            versions.
        fullName:
          type: string
          description: >-
            Human readable version string. This string is of the form :- and is
            only set when kind is NORMAL.
        revision:
          description: The iteration of the package build from the above version.
          type: string
        name:
          description: >-
            Required only when version kind is NORMAL. The main part of the
            version name.
          type: string
    SlsaBuilder:
      properties:
        id:
          type: string
      id: SlsaBuilder
      type: object
    GrafeasV1FileLocation:
      description: Indicates the location at which a package was found.
      type: object
      properties:
        filePath:
          type: string
          description: >-
            For jars that are contained inside .war files, this filepath can
            indicate the path to war file combined with the path to jar file.
      id: GrafeasV1FileLocation
    SlsaRecipe:
      type: object
      id: SlsaRecipe
      properties:
        environment:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
          description: >-
            Any other builder-controlled inputs necessary for correctly
            evaluating the recipe. Usually only needed for reproducing the build
            but not evaluated as part of policy. Depending on the recipe Type,
            the structure may be different.
        type:
          description: >-
            URI indicating what type of recipe was performed. It determines the
            meaning of recipe.entryPoint, recipe.arguments, recipe.environment,
            and materials.
          type: string
        entryPoint:
          type: string
          description: >-
            String identifying the entry point into the build. This is often a
            path to a configuration file and/or a target label within that file.
            The syntax and meaning are defined by recipe.type. For example, if
            the recipe type were "make", then this would reference the directory
            in which to run make as well as which target to use.
        arguments:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
          description: >-
            Collection of all external inputs that influenced the build on top
            of recipe.definedInMaterial and recipe.entryPoint. For example, if
            the recipe type were "make", then this might be the flags passed to
            make aside from the target, which is captured in recipe.entryPoint.
            Depending on the recipe Type, the structure may be different.
        definedInMaterial:
          description: >-
            Index in materials containing the recipe steps that are not implied
            by recipe.type. For example, if the recipe type were "make", then
            this would point to the source containing the Makefile, not the make
            program itself. Set to -1 if the recipe doesn't come from a
            material, as zero is default unset value for int64.
          format: int64
          type: string
      description: >-
        Steps taken to build the artifact. For a TaskRun, typically each
        container corresponds to one step in the recipe.
    Metadata:
      properties:
        buildInvocationId:
          type: string
          description: >-
            Identifies the particular build invocation, which can be useful for
            finding associated logs or other ad-hoc analysis. The value SHOULD
            be globally unique, per in-toto Provenance spec.
        buildStartedOn:
          type: string
          format: google-datetime
          description: The timestamp of when the build started.
        reproducible:
          description: >-
            If true, the builder claims that running the recipe on materials
            will produce bit-for-bit identical output.
          type: boolean
        buildFinishedOn:
          description: The timestamp of when the build completed.
          type: string
          format: google-datetime
        completeness:
          description: >-
            Indicates that the builder claims certain fields in this message to
            be complete.
          $ref: '#/components/schemas/Completeness'
      id: Metadata
      type: object
      description: Other properties of the build.
    PackageOccurrence:
      type: object
      description: Details on how a particular software package was installed on a system.
      properties:
        name:
          description: Required. Output only. The name of the installed package.
          readOnly: true
          type: string
        location:
          items:
            $ref: '#/components/schemas/Location'
          description: >-
            All of the places within the filesystem versions of this package
            have been found.
          type: array
        license:
          $ref: '#/components/schemas/License'
          description: Licenses that have been declared by the authors of the package.
        architecture:
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          description: >-
            Output only. The CPU architecture for which packages in this
            distribution channel were built. Architecture will be blank for
            language packages.
          type: string
          readOnly: true
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
        packageType:
          type: string
          readOnly: true
          description: >-
            Output only. The type of package; whether native or non native
            (e.g., ruby gems, node.js packages, etc.).
        version:
          readOnly: true
          description: Output only. The version of the package.
          $ref: '#/components/schemas/Version'
        cpeUri:
          readOnly: true
          description: >-
            Output only. The cpe_uri in [CPE
            format](https://cpe.mitre.org/specification/) denoting the package
            manager version distributing a package. The cpe_uri will be blank
            for language packages.
          type: string
      id: PackageOccurrence
    InTotoProvenance:
      properties:
        builderConfig:
          description: required
          $ref: '#/components/schemas/BuilderConfig'
        materials:
          type: array
          description: >-
            The collection of artifacts that influenced the build including
            sources, dependencies, build tools, base images, and so on. This is
            considered to be incomplete unless metadata.completeness.materials
            is true. Unset or null is equivalent to empty.
          items:
            type: string
        recipe:
          description: >-
            Identifies the configuration used for the build. When combined with
            materials, this SHOULD fully describe the build, such that
            re-running this recipe results in bit-for-bit identical output (if
            the build is reproducible). required
          $ref: '#/components/schemas/Recipe'
        metadata:
          $ref: '#/components/schemas/Metadata'
      id: InTotoProvenance
      type: object
    BinarySourceInfo:
      type: object
      id: BinarySourceInfo
      properties:
        binaryVersion:
          $ref: '#/components/schemas/PackageVersion'
          description: >-
            The binary package. This is significant when the source is different
            than the binary itself. Historically if they've differed, we've
            stored the name of the source and its version in the package/version
            fields, but we should also store the binary package info, as that's
            what's actually installed. See b/175908657#comment15.
        sourceVersion:
          $ref: '#/components/schemas/PackageVersion'
          description: >-
            The source package. Similar to the above, this is significant when
            the source is different than the binary itself. Since the top-level
            package/version fields are based on an if/else, we need a separate
            field for both binary and source if we want to know definitively
            where the data is coming from.
    Jwt:
      type: object
      properties:
        compactJwt:
          type: string
          description: >-
            The compact encoding of a JWS, which is always three base64 encoded
            strings joined by periods. For details, see:
            https://tools.ietf.org/html/rfc7515.html#section-3.1
      id: Jwt
    AliasContext:
      id: AliasContext
      description: An alias to a repo revision.
      type: object
      properties:
        kind:
          description: The alias kind.
          type: string
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - >-
              Used to specify non-standard aliases. For example, if a Git repo
              has a ref named "refs/foo/bar".
        name:
          description: The alias name.
          type: string
    Justification:
      id: Justification
      type: object
      description: >-
        Justification provides the justification when the state of the
        assessment if NOT_AFFECTED.
      properties:
        justificationType:
          type: string
          enumDescriptions:
            - JUSTIFICATION_TYPE_UNSPECIFIED.
            - The vulnerable component is not present in the product.
            - >-
              The vulnerable code is not present. Typically this case occurs
              when source code is configured or built in a way that excludes the
              vulnerable code.
            - >-
              The vulnerable code can not be executed. Typically this case
              occurs when the product includes the vulnerable code but does not
              call or use the vulnerable code.
            - >-
              The vulnerable code cannot be controlled by an attacker to exploit
              the vulnerability.
            - >-
              The product includes built-in protections or features that prevent
              exploitation of the vulnerability. These built-in protections
              cannot be subverted by the attacker and cannot be configured or
              disabled by the user. These mitigations completely prevent
              exploitation based on known attack vectors.
          description: The justification type for this vulnerability.
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
        details:
          description: Additional details on why this justification was chosen.
          type: string
    DiscoveryOccurrence:
      description: Provides information about the analysis status of a discovered resource.
      properties:
        cpe:
          description: The CPE of the resource being scanned.
          type: string
        archiveTime:
          description: >-
            Output only. The time occurrences related to this discovery
            occurrence were archived.
          readOnly: true
          type: string
          format: google-datetime
        analysisStatusError:
          description: >-
            When an error is encountered this will contain a LocalizedMessage
            under details to show to the user. The LocalizedMessage is output
            only and populated by the API.
          $ref: '#/components/schemas/Status'
        analysisError:
          items:
            $ref: '#/components/schemas/Status'
          type: array
          description: >-
            Indicates any errors encountered during analysis of a resource.
            There could be 0 or more of these errors.
        continuousAnalysis:
          description: Whether the resource is continuously analyzed.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          type: string
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
        lastScanTime:
          format: google-datetime
          description: The last time this resource was scanned.
          type: string
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
        analysisStatus:
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          type: string
          description: The status of discovery for the resource.
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - >-
              Analysis has finished unsuccessfully, the analysis itself is in a
              bad state.
            - The resource is known not to be supported.
      type: object
      id: DiscoveryOccurrence
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness:
      properties:
        environment:
          type: boolean
        parameters:
          type: boolean
        materials:
          type: boolean
      type: object
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
    GitSourceContext:
      properties:
        url:
          type: string
          description: Git repository URL.
        revisionId:
          type: string
          description: Git commit hash.
      type: object
      description: >-
        A GitSourceContext denotes a particular revision in a third party Git
        repository (e.g., GitHub).
      id: GitSourceContext
    GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial:
      description: >-
        The collection of artifacts that influenced the build including sources,
        dependencies, build tools, base images, and so on.
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
    Layer:
      type: object
      properties:
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
        directive:
          description: >-
            Required. The recovered Dockerfile directive used to construct this
            layer. See https://docs.docker.com/engine/reference/builder/ for
            more information.
          type: string
      description: Layer holds metadata specific to a layer of a Docker image.
      id: Layer
    Status:
      properties:
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
        code:
          format: int32
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
        details:
          type: array
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
    Material:
      properties:
        uri:
          type: string
        digest:
          type: object
          additionalProperties:
            type: string
      type: object
      id: Material
    Command:
      id: Command
      description: Command describes a step performed as part of the build pipeline.
      properties:
        dir:
          description: >-
            Working directory (relative to project source root) used when
            running this command.
          type: string
        id:
          description: >-
            Optional unique identifier for this command, used in wait_for to
            reference this command as a dependency.
          type: string
        name:
          type: string
          description: >-
            Required. Name of the command, as presented on the command line, or
            if the command is packaged as a Docker container, as presented to
            `docker pull`.
        args:
          description: Command-line arguments used when executing this command.
          items:
            type: string
          type: array
        waitFor:
          type: array
          items:
            type: string
          description: The ID(s) of the command(s) that this command depends on.
        env:
          type: array
          description: Environment variables set before running this command.
          items:
            type: string
      type: object
    UpgradeOccurrence:
      properties:
        package:
          type: string
          description: Required for non-Windows OS. The package this Upgrade is for.
        parsedVersion:
          description: >-
            Required for non-Windows OS. The version of the package in a machine
            + human readable form.
          $ref: '#/components/schemas/Version'
        windowsUpdate:
          $ref: '#/components/schemas/WindowsUpdate'
          description: >-
            Required for Windows OS. Represents the metadata about the Windows
            update.
        distribution:
          description: >-
            Metadata about the upgrade for available for the specific operating
            system for the resource_url. This allows efficient filtering, as
            well as making it easier to use the occurrence.
          $ref: '#/components/schemas/UpgradeDistribution'
      type: object
      id: UpgradeOccurrence
      description: >-
        An Upgrade Occurrence represents that a specific resource_url could
        install a specific upgrade. This presence is supplied via local sources
        (i.e. it is present in the mirror and the running system has noticed its
        availability). For Windows, both distribution and windows_update contain
        information for the Windows update.
    SBOMReferenceOccurrence:
      description: >-
        The occurrence representing an SBOM reference as applied to a specific
        resource. The occurrence follows the DSSE specification. See
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for
        more details.
      properties:
        payload:
          $ref: '#/components/schemas/SbomReferenceIntotoPayload'
          description: The actual payload that contains the SBOM reference data.
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          description: The signatures over the payload.
        payloadType:
          type: string
          description: >-
            The kind of payload that SbomReferenceIntotoPayload takes. Since
            it's in the intoto format, this value is expected to be
            'application/vnd.in-toto+json'.
      type: object
      id: SBOMReferenceOccurrence
    GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder:
      properties:
        id:
          type: string
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
      type: object
      description: >-
        Identifies the entity that executed the recipe, which is trusted to have
        correctly performed the operation and populated this provenance.
    SlsaMetadata:
      type: object
      id: SlsaMetadata
      properties:
        completeness:
          description: >-
            Indicates that the builder claims certain fields in this message to
            be complete.
          $ref: '#/components/schemas/SlsaCompleteness'
        buildStartedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build started.
        reproducible:
          description: >-
            If true, the builder claims that running the recipe on materials
            will produce bit-for-bit identical output.
          type: boolean
        buildFinishedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build completed.
        buildInvocationId:
          description: >-
            Identifies the particular build invocation, which can be useful for
            finding associated logs or other ad-hoc analysis. The value SHOULD
            be globally unique, per in-toto Provenance spec.
          type: string
      description: Other properties of the build.
    Source:
      type: object
      description: Source describes the location of the source used for the build.
      properties:
        fileHashes:
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          description: >-
            Hash(es) of the build source, which can be used to verify that the
            original source integrity was maintained in the build. The keys to
            this map are file paths used as build source and the values contain
            the hash values for those files. If the build source came in a
            single package such as a gzipped tarfile (.tar.gz), the FileHash
            will be for the single path to that file.
          type: object
        additionalContexts:
          items:
            $ref: '#/components/schemas/SourceContext'
          description: >-
            If provided, some of the source code used for the build may be found
            in these locations, in the case where the source repository had
            multiple remotes or submodules. This list will not include the
            context specified in the context field.
          type: array
        context:
          $ref: '#/components/schemas/SourceContext'
          description: >-
            If provided, the source code used for the build came from this
            location.
        artifactStorageSourceUri:
          description: >-
            If provided, the input binary artifacts for the build came from this
            location.
          type: string
      id: Source
    PackageIssue:
      type: object
      properties:
        fixedPackage:
          type: string
          description: >-
            The package this vulnerability was fixed in. It is possible for this
            to be different from the affected_package.
        fixedCpeUri:
          description: >-
            The [CPE URI](https://cpe.mitre.org/specification/) this
            vulnerability was fixed in. It is possible for this to be different
            from the affected_cpe_uri.
          type: string
        affectedPackage:
          description: Required. The package this vulnerability was found in.
          type: string
        fixAvailable:
          description: Output only. Whether a fix is available for this package.
          type: boolean
        packageType:
          description: The type of package (e.g. OS, MAVEN, GO).
          type: string
        fixedVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            Required. The version of the package this vulnerability was fixed
            in. Setting this to VersionKind.MAXIMUM means no fix is yet
            available.
        affectedCpeUri:
          type: string
          description: >-
            Required. The [CPE URI](https://cpe.mitre.org/specification/) this
            vulnerability was found in.
        effectiveSeverity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          readOnly: true
          description: >-
            Output only. The distro or language system assigned severity for
            this vulnerability when that is available and note provider assigned
            severity when it is not available.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        affectedVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            Required. The version of the package that is installed on the
            resource affected by this vulnerability.
        fileLocation:
          description: The location at which this package was found.
          items:
            $ref: '#/components/schemas/GrafeasV1FileLocation'
          type: array
      description: >-
        A detail for a distro and package this vulnerability occurrence was
        found in and its associated fix (if one is available).
      id: PackageIssue
    Completeness:
      id: Completeness
      properties:
        materials:
          type: boolean
          description: >-
            If true, the builder claims that materials are complete, usually
            through some controls to prevent network access. Sometimes called
            "hermetic".
        arguments:
          description: >-
            If true, the builder claims that recipe.arguments is complete,
            meaning that all external inputs are properly captured in the
            recipe.
          type: boolean
        environment:
          description: >-
            If true, the builder claims that recipe.environment is claimed to be
            complete.
          type: boolean
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
      type: object
    SourceContext:
      description: >-
        A SourceContext is a reference to a tree of files. A SourceContext
        together with a path point to a unique revision of a single file or
        directory.
      properties:
        labels:
          type: object
          description: Labels with user defined metadata.
          additionalProperties:
            type: string
        cloudRepo:
          description: >-
            A SourceContext referring to a revision in a Google Cloud Source
            Repo.
          $ref: '#/components/schemas/CloudRepoSourceContext'
        gerrit:
          description: A SourceContext referring to a Gerrit project.
          $ref: '#/components/schemas/GerritSourceContext'
        git:
          description: >-
            A SourceContext referring to any third party Git repo (e.g.,
            GitHub).
          $ref: '#/components/schemas/GitSourceContext'
      type: object
      id: SourceContext
    SlsaProvenance:
      id: SlsaProvenance
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/SlsaMetadata'
        materials:
          description: >-
            The collection of artifacts that influenced the build including
            sources, dependencies, build tools, base images, and so on. This is
            considered to be incomplete unless metadata.completeness.materials
            is true. Unset or null is equivalent to empty.
          items:
            $ref: '#/components/schemas/Material'
          type: array
        recipe:
          $ref: '#/components/schemas/SlsaRecipe'
          description: >-
            Identifies the configuration used for the build. When combined with
            materials, this SHOULD fully describe the build, such that
            re-running this recipe results in bit-for-bit identical output (if
            the build is reproducible). required
        builder:
          description: required
          $ref: '#/components/schemas/SlsaBuilder'
    License:
      type: object
      id: License
      properties:
        comments:
          description: Comments
          type: string
        expression:
          description: >-
            Often a single license can be used to represent the licensing terms.
            Sometimes it is necessary to include a choice of one or more
            licenses or some combination of license identifiers. Examples:
            "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later
            WITH Bison-exception-2.2".
          type: string
      description: License information.
    Envelope:
      type: object
      id: Envelope
      description: >-
        MUST match
        https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto.
        An authenticated message of arbitrary type.
      properties:
        payload:
          type: string
          format: byte
        payloadType:
          type: string
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
    ComplianceOccurrence:
      description: >-
        An indication that the compliance checks in the associated
        ComplianceNote were not satisfied for particular resources or a
        specified reason.
      type: object
      id: ComplianceOccurrence
      properties:
        nonCompliantFiles:
          items:
            $ref: '#/components/schemas/NonCompliantFile'
          type: array
        nonComplianceReason:
          type: string
    BuildProvenance:
      type: object
      id: BuildProvenance
      description: >-
        Provenance of a build. Contains all information needed to verify the
        full details about the build from source to completion.
      properties:
        creator:
          description: >-
            E-mail address of the user who initiated this build. Note that this
            was the user's e-mail address at the time the build was initiated;
            this address may not represent the same end-user for all time.
          type: string
        logsUri:
          type: string
          description: URI where any logs for this provenance were written.
        endTime:
          format: google-datetime
          description: Time at which execution of the build was finished.
          type: string
        buildOptions:
          description: >-
            Special options applied to this build. This is a catch-all field
            where build providers can enter any desired additional details.
          additionalProperties:
            type: string
          type: object
        startTime:
          description: Time at which execution of the build was started.
          type: string
          format: google-datetime
        commands:
          items:
            $ref: '#/components/schemas/Command'
          description: Commands requested by the build.
          type: array
        builtArtifacts:
          description: Output of the build.
          items:
            $ref: '#/components/schemas/Artifact'
          type: array
        triggerId:
          description: >-
            Trigger identifier if the build was triggered automatically; empty
            if not.
          type: string
        id:
          description: Required. Unique identifier of the build.
          type: string
        sourceProvenance:
          $ref: '#/components/schemas/Source'
          description: Details of the Source input to the build.
        createTime:
          type: string
          format: google-datetime
          description: Time at which the build was created.
        projectId:
          description: ID of the project.
          type: string
        builderVersion:
          description: Version string of the builder at the time this build was executed.
          type: string
    SlsaCompleteness:
      description: >-
        Indicates that the builder claims certain fields in this message to be
        complete.
      type: object
      id: SlsaCompleteness
      properties:
        environment:
          description: >-
            If true, the builder claims that recipe.environment is claimed to be
            complete.
          type: boolean
        arguments:
          description: >-
            If true, the builder claims that recipe.arguments is complete,
            meaning that all external inputs are properly captured in the
            recipe.
          type: boolean
        materials:
          type: boolean
          description: >-
            If true, the builder claims that materials are complete, usually
            through some controls to prevent network access. Sometimes called
            "hermetic".
    Location:
      description: >-
        An occurrence of a particular package installation found within a
        system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
      type: object
      id: Location
      properties:
        path:
          description: >-
            The path from which we gathered that this package/version is
            installed.
          type: string
        version:
          $ref: '#/components/schemas/Version'
          description: Deprecated. The version installed at this location.
        cpeUri:
          description: >-
            Deprecated. The CPE URI in [CPE
            format](https://cpe.mitre.org/specification/)
          type: string
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation:
      description: Identifies the event that kicked off the build.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
      properties:
        configSource:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource'
        parameters:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
        environment:
          additionalProperties:
            description: Properties of the object.
            type: any
          type: object
      type: object
    BuildOccurrence:
      type: object
      properties:
        provenanceBytes:
          type: string
          description: >-
            Serialized JSON representation of the provenance, used in generating
            the build signature in the corresponding build note. After verifying
            the signature, `provenance_bytes` can be unmarshalled and compared
            to the provenance to confirm that it is unchanged. A base64-encoded
            string representation of the provenance bytes is used for the
            signature in order to interoperate with openssl which expects this
            format for signature verification. The serialized form is captured
            both to avoid ambiguity in how the provenance is marshalled to json
            as well to prevent incompatibilities with future changes.
        intotoStatement:
          $ref: '#/components/schemas/InTotoStatement'
          description: >-
            In-toto Statement representation as defined in spec. The
            intoto_statement can contain any type of provenance. The serialized
            payload of the statement can be stored and signed in the
            Occurrence's envelope.
        intotoProvenance:
          description: >-
            Deprecated. See InTotoStatement for the replacement. In-toto
            Provenance representation as defined in spec.
          $ref: '#/components/schemas/InTotoProvenance'
        provenance:
          $ref: '#/components/schemas/BuildProvenance'
          description: The actual provenance for the build.
      description: Details of a build occurrence.
      id: BuildOccurrence
    Fingerprint:
      id: Fingerprint
      properties:
        v2Blob:
          type: array
          description: Required. The ordered list of v2 blobs that represent a given image.
          items:
            type: string
        v2Name:
          description: >-
            Output only. The name of the image's v2 blobs computed via: [bottom]
            := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the
            name of the final blob is kept.
          type: string
        v1Name:
          type: string
          description: >-
            Required. The layer ID of the final layer in the Docker image's v1
            representation.
      type: object
      description: A set of properties that uniquely identify a given Docker image.
    ListVulnerabilitiesResponse:
      description: >-
        ListVulnerabilitiesResponse contains a single page of vulnerabilities
        resulting from a scan.
      properties:
        occurrences:
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The list of Vulnerability Occurrences resulting from a scan.
        nextPageToken:
          type: string
          description: >-
            A page token that can be used in a subsequent call to
            ListVulnerabilities to continue retrieving results.
      type: object
      id: ListVulnerabilitiesResponse
    FileLocation:
      type: object
      id: FileLocation
      properties:
        filePath:
          description: >-
            For jars that are contained inside .war files, this filepath can
            indicate the path to war file combined with the path to jar file.
          type: string
      description: Indicates the location at which a package was found.
    Subject:
      id: Subject
      type: object
      properties:
        digest:
          description: >-
            `"": ""` Algorithms can be e.g. sha256, sha512 See
            https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
          type: object
          additionalProperties:
            type: string
        name:
          type: string
    BuilderConfig:
      properties:
        id:
          type: string
      id: BuilderConfig
      type: object
  parameters:
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1beta1/projects/{projectsId}/locations/{locationsId}/scans/{scansId}/vulnerabilities:
    parameters: &ref_1
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/key'
    get:
      description: Lists vulnerabilities resulting from a successfully completed scan.
      operationId: ondemandscanning.projects.locations.scans.vulnerabilities.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVulnerabilitiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: scansId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: vulnerabilities
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/scans:analyzePackages:
    parameters: *ref_1
    post:
      description: Initiates an analysis of the provided packages.
      operationId: ondemandscanning.projects.locations.scans.analyzePackages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzePackagesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: scans
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:wait:
    parameters: *ref_1
    post:
      description: >-
        Waits until the specified long-running operation is done or reaches at
        most a specified timeout, returning the latest state. If the operation
        is already done, the latest state is immediately returned. If the
        timeout specified is greater than the default HTTP/RPC timeout, the
        HTTP/RPC timeout is used. If the server does not support this method, it
        returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a
        best-effort basis. It may return the latest state before the specified
        timeout (including immediately), meaning even an immediate response is
        no guarantee that the operation is done.
      operationId: ondemandscanning.projects.locations.operations.wait
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
        - in: query
          name: timeout
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: ondemandscanning.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: ondemandscanning.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: ondemandscanning.projects.locations.operations.cancel
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1beta1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: ondemandscanning.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
