openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Chrome Verified Access API
  description: >-
    API for Verified Access chrome extension to provide credential verification
    for chrome devices connecting to an enterprise network
  version: v1
  x-discovery-doc-revision: '20230606'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://developers.google.com/chrome/verified-access
servers:
  - url: https://verifiedaccess.googleapis.com
components:
  schemas:
    SignedData:
      properties:
        data:
          description: The data to be signed.
          type: string
          format: byte
        signature:
          type: string
          description: The signature of the data field.
          format: byte
      type: object
      id: SignedData
      description: The wrapper message of any data and its signature.
    Challenge:
      type: object
      properties:
        challenge:
          description: Generated challenge
          $ref: '#/components/schemas/SignedData'
        alternativeChallenge:
          description: >-
            Challenge generated with the old signing key (this will only be
            present during key rotation)
          $ref: '#/components/schemas/SignedData'
      id: Challenge
      description: Result message for VerifiedAccess.CreateChallenge.
    Empty:
      id: Empty
      properties: {}
      type: object
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    VerifyChallengeResponseRequest:
      type: object
      description: signed ChallengeResponse
      properties:
        expectedIdentity:
          description: >-
            Service can optionally provide identity information about the device
            or user associated with the key. For an EMK, this value is the
            enrolled domain. For an EUK, this value is the user's email address.
            If present, this value will be checked against contents of the
            response, and verification will fail if there is no match.
          type: string
        challengeResponse:
          $ref: '#/components/schemas/SignedData'
          description: The generated response to the challenge
      id: VerifyChallengeResponseRequest
    VerifyChallengeResponseResult:
      type: object
      id: VerifyChallengeResponseResult
      description: Result message for VerifiedAccess.VerifyChallengeResponse.
      properties:
        verificationOutput:
          description: >-
            For EMCert check, device permanent id is returned here. For EUCert
            check, signed_public_key_and_challenge [base64 encoded] is returned
            if present, otherwise empty string is returned. This field is
            deprecated, please use device_permanent_id or
            signed_public_key_and_challenge fields.
          type: string
        signedPublicKeyAndChallenge:
          description: >-
            Certificate Signing Request (in the SPKAC format, base64 encoded) is
            returned in this field. This field will be set only if device has
            included CSR in its challenge response. (the option to include CSR
            is now available for both user and machine responses)
          type: string
        deviceEnrollmentId:
          type: string
          description: >-
            Device enrollment id is returned in this field (for the machine
            response only).
        devicePermanentId:
          type: string
          description: >-
            Device permanent id is returned in this field (for the machine
            response only).
  parameters:
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/verifiedaccess: Verify your enterprise credentials
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/challenge:verify:
    parameters: &ref_1
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
    post:
      description: VerifyChallengeResponse API
      operationId: verifiedaccess.challenge.verify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyChallengeResponseRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/verifiedaccess
          Oauth2c:
            - https://www.googleapis.com/auth/verifiedaccess
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyChallengeResponseResult'
      parameters: []
      x-stackQL-resource: challenge
      x-stackQL-verb: exec
  /v1/challenge:
    parameters: *ref_1
    post:
      description: CreateChallenge API
      operationId: verifiedaccess.challenge.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/verifiedaccess
          Oauth2c:
            - https://www.googleapis.com/auth/verifiedaccess
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
      parameters: []
      x-stackQL-resource: challenge
      x-stackQL-verb: insert
