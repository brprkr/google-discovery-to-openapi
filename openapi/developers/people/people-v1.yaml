openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: People API
  description: Provides access to information about profiles and contacts.
  version: v1
  x-discovery-doc-revision: '20230621'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://developers.google.com/people/
servers:
  - url: https://people.googleapis.com
components:
  schemas:
    Occupation:
      properties:
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the occupation.
        value:
          description: The occupation; for example, `carpenter`.
          type: string
      description: A person's occupation.
      id: Occupation
      type: object
    Birthday:
      id: Birthday
      type: object
      properties:
        metadata:
          description: Metadata about the birthday.
          $ref: '#/components/schemas/FieldMetadata'
        text:
          type: string
          deprecated: true
          description: >-
            Prefer to use the `date` field if set. A free-form string
            representing the user's birthday. This value is not validated.
        date:
          $ref: '#/components/schemas/Date'
          description: The structured date of the birthday.
      description: >-
        A person's birthday. At least one of the `date` and `text` fields are
        specified. The `date` and `text` fields typically represent the same
        date, but are not guaranteed to. Clients should always set the `date`
        field when mutating birthdays.
    SipAddress:
      type: object
      id: SipAddress
      description: >-
        A person's SIP address. Session Initial Protocol addresses are used for
        VoIP communications to make voice or video calls over the internet.
      properties:
        value:
          type: string
          description: >-
            The SIP address in the [RFC 3261
            19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI
            format.
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the SIP address.
        type:
          description: >-
            The type of the SIP address. The type can be custom or or one of
            these predefined values: * `home` * `work` * `mobile` * `other`
          type: string
        formattedType:
          readOnly: true
          description: >-
            Output only. The type of the SIP address translated and formatted in
            the viewer's account locale or the `Accept-Language` HTTP header
            locale.
          type: string
    Photo:
      properties:
        metadata:
          description: Metadata about the photo.
          $ref: '#/components/schemas/FieldMetadata'
        url:
          type: string
          description: >-
            The URL of the photo. You can change the desired size by appending a
            query parameter `sz={size}` at the end of the url, where {size} is
            the size in pixels. Example:
            https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50
        default:
          description: >-
            True if the photo is a default photo; false if the photo is a
            user-provided photo.
          type: boolean
      id: Photo
      description: >-
        A person's photo. A picture shown next to the person's name to help
        others recognize the person.
      type: object
    ExternalId:
      id: ExternalId
      properties:
        value:
          type: string
          description: The value of the external ID.
        metadata:
          description: Metadata about the external ID.
          $ref: '#/components/schemas/FieldMetadata'
        formattedType:
          readOnly: true
          type: string
          description: >-
            Output only. The type of the event translated and formatted in the
            viewer's account locale or the `Accept-Language` HTTP header locale.
        type:
          type: string
          description: >-
            The type of the external ID. The type can be custom or one of these
            predefined values: * `account` * `customer` * `loginId` * `network`
            * `organization`
      description: An identifier from an external entity related to the person.
      type: object
    SearchDirectoryPeopleResponse:
      type: object
      description: >-
        The response to a request for people in the authenticated user's domain
        directory that match the specified query.
      id: SearchDirectoryPeopleResponse
      properties:
        totalSize:
          description: The total number of items in the list without pagination.
          format: int32
          type: integer
        people:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          description: The list of people in the domain directory that match the query.
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
    ListOtherContactsResponse:
      properties:
        nextSyncToken:
          type: string
          description: >-
            A token, which can be sent as `sync_token` to retrieve changes since
            the last request. Request must set `request_sync_token` to return
            the sync token.
        otherContacts:
          description: >-
            The list of "Other contacts" returned as Person resources. "Other
            contacts" support a limited subset of fields. See
            ListOtherContactsRequest.request_mask for more detailed information.
          type: array
          items:
            $ref: '#/components/schemas/Person'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
        totalSize:
          type: integer
          format: int32
          description: The total number of other contacts in the list without pagination.
      type: object
      description: The response to a request for the authenticated user's "Other contacts".
      id: ListOtherContactsResponse
    Location:
      properties:
        deskCode:
          type: string
          description: The individual desk location.
        value:
          description: The free-form value of the location.
          type: string
        buildingId:
          type: string
          description: The building identifier.
        floorSection:
          type: string
          description: The floor section in `floor_name`.
        current:
          description: Whether the location is the current location.
          type: boolean
        floor:
          type: string
          description: The floor name or number.
        metadata:
          description: Metadata about the location.
          $ref: '#/components/schemas/FieldMetadata'
        type:
          description: >-
            The type of the location. The type can be custom or one of these
            predefined values: * `desk` * `grewUp`
          type: string
      id: Location
      description: A person's location.
      type: object
    ListDirectoryPeopleResponse:
      description: The response to a request for the authenticated user's domain directory.
      type: object
      properties:
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
        nextSyncToken:
          type: string
          description: >-
            A token, which can be sent as `sync_token` to retrieve changes since
            the last request. Request must set `request_sync_token` to return
            the sync token.
        people:
          items:
            $ref: '#/components/schemas/Person'
          description: The list of people in the domain directory.
          type: array
      id: ListDirectoryPeopleResponse
    ProfileMetadata:
      properties:
        objectType:
          enum:
            - OBJECT_TYPE_UNSPECIFIED
            - PERSON
            - PAGE
          type: string
          enumDescriptions:
            - Unspecified.
            - Person.
            - '[Currents Page.](https://workspace.google.com/products/currents/)'
          readOnly: true
          description: Output only. The profile object type.
        userTypes:
          readOnly: true
          type: array
          items:
            type: string
            enum:
              - USER_TYPE_UNKNOWN
              - GOOGLE_USER
              - GPLUS_USER
              - GOOGLE_APPS_USER
            enumDescriptions:
              - The user type is not known.
              - The user is a Google user.
              - The user is a Currents user.
              - The user is a Google Workspace user.
          description: Output only. The user types.
      description: The metadata about a profile.
      id: ProfileMetadata
      type: object
    Membership:
      id: Membership
      properties:
        contactGroupMembership:
          description: The contact group membership.
          $ref: '#/components/schemas/ContactGroupMembership'
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the membership.
        domainMembership:
          description: Output only. The domain membership.
          $ref: '#/components/schemas/DomainMembership'
          readOnly: true
      type: object
      description: >-
        A person's membership in a group. Only contact group memberships can be
        modified.
    Url:
      description: A person's associated URLs.
      properties:
        type:
          type: string
          description: >-
            The type of the URL. The type can be custom or one of these
            predefined values: * `home` * `work` * `blog` * `profile` *
            `homePage` * `ftp` * `reservations` * `appInstallPage`: website for
            a Currents application. * `other`
        value:
          description: The URL.
          type: string
        formattedType:
          readOnly: true
          type: string
          description: >-
            Output only. The type of the URL translated and formatted in the
            viewer's account locale or the `Accept-Language` HTTP header locale.
        metadata:
          description: Metadata about the URL.
          $ref: '#/components/schemas/FieldMetadata'
      id: Url
      type: object
    BatchCreateContactsResponse:
      description: >-
        If not successful, returns BatchCreateContactsErrorDetails which
        contains a list of errors for each invalid contact. The response to a
        request to create a batch of contacts.
      properties:
        createdPeople:
          description: >-
            The contacts that were created, unless the request `read_mask` is
            empty.
          type: array
          items:
            $ref: '#/components/schemas/PersonResponse'
      type: object
      id: BatchCreateContactsResponse
    ContactGroupResponse:
      description: The response for a specific contact group.
      properties:
        requestedResourceName:
          description: The original requested resource name.
          type: string
        status:
          description: The status of the response.
          $ref: '#/components/schemas/Status'
        contactGroup:
          description: The contact group.
          $ref: '#/components/schemas/ContactGroup'
      id: ContactGroupResponse
      type: object
    SearchResponse:
      type: object
      properties:
        results:
          description: The results of the request.
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
      id: SearchResponse
      description: >-
        The response to a search request for the authenticated user, given a
        query.
    Empty:
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
      properties: {}
      type: object
    MiscKeyword:
      description: A person's miscellaneous keyword.
      id: MiscKeyword
      type: object
      properties:
        value:
          type: string
          description: The value of the miscellaneous keyword.
        type:
          enumDescriptions:
            - Unspecified.
            - Outlook field for billing information.
            - Outlook field for directory server.
            - Outlook field for keyword.
            - Outlook field for mileage.
            - Outlook field for priority.
            - Outlook field for sensitivity.
            - Outlook field for subject.
            - Outlook field for user.
            - Home.
            - Work.
            - Other.
          description: The miscellaneous keyword type.
          type: string
          enum:
            - TYPE_UNSPECIFIED
            - OUTLOOK_BILLING_INFORMATION
            - OUTLOOK_DIRECTORY_SERVER
            - OUTLOOK_KEYWORD
            - OUTLOOK_MILEAGE
            - OUTLOOK_PRIORITY
            - OUTLOOK_SENSITIVITY
            - OUTLOOK_SUBJECT
            - OUTLOOK_USER
            - HOME
            - WORK
            - OTHER
        formattedType:
          description: >-
            Output only. The type of the miscellaneous keyword translated and
            formatted in the viewer's account locale or the `Accept-Language`
            HTTP header locale.
          type: string
          readOnly: true
        metadata:
          description: Metadata about the miscellaneous keyword.
          $ref: '#/components/schemas/FieldMetadata'
    Relation:
      properties:
        type:
          description: >-
            The person's relation to the other person. The type can be custom or
            one of these predefined values: * `spouse` * `child` * `mother` *
            `father` * `parent` * `brother` * `sister` * `friend` * `relative` *
            `domesticPartner` * `manager` * `assistant` * `referredBy` *
            `partner`
          type: string
        formattedType:
          description: >-
            Output only. The type of the relation translated and formatted in
            the viewer's account locale or the locale specified in the
            Accept-Language HTTP header.
          readOnly: true
          type: string
        person:
          type: string
          description: The name of the other person this relation refers to.
        metadata:
          description: Metadata about the relation.
          $ref: '#/components/schemas/FieldMetadata'
      id: Relation
      type: object
      description: A person's relation to another person.
    BatchUpdateContactsRequest:
      type: object
      properties:
        readMask:
          format: google-fieldmask
          description: >-
            Required. A field mask to restrict which fields on each person are
            returned. Multiple fields can be specified by separating them with
            commas. If read mask is left empty, the post-mutate-get is skipped
            and no data will be returned in the response. Valid values are: *
            addresses * ageRanges * biographies * birthdays * calendarUrls *
            clientData * coverPhotos * emailAddresses * events * externalIds *
            genders * imClients * interests * locales * locations * memberships
            * metadata * miscKeywords * names * nicknames * occupations *
            organizations * phoneNumbers * photos * relations * sipAddresses *
            skills * urls * userDefined
          type: string
        contacts:
          description: >-
            Required. A map of resource names to the person data to be updated.
            Allows up to 200 contacts in a single request.
          additionalProperties:
            $ref: '#/components/schemas/Person'
          type: object
        sources:
          description: >-
            Optional. A mask of what source types to return. Defaults to
            READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
          items:
            enumDescriptions:
              - Unspecified.
              - >-
                Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
                SourceType.PROFILE.
              - Returns SourceType.CONTACT.
              - Returns SourceType.DOMAIN_CONTACT.
            enum:
              - READ_SOURCE_TYPE_UNSPECIFIED
              - READ_SOURCE_TYPE_PROFILE
              - READ_SOURCE_TYPE_CONTACT
              - READ_SOURCE_TYPE_DOMAIN_CONTACT
            type: string
          type: array
        updateMask:
          type: string
          format: google-fieldmask
          description: >-
            Required. A field mask to restrict which fields on the person are
            updated. Multiple fields can be specified by separating them with
            commas. All specified fields will be replaced, or cleared if left
            empty for each person. Valid values are: * addresses * biographies *
            birthdays * calendarUrls * clientData * emailAddresses * events *
            externalIds * genders * imClients * interests * locales * locations
            * memberships * miscKeywords * names * nicknames * occupations *
            organizations * phoneNumbers * relations * sipAddresses * urls *
            userDefined
      id: BatchUpdateContactsRequest
      description: A request to update a batch of contacts.
    ContactGroupMembership:
      description: A Google contact group membership.
      properties:
        contactGroupId:
          type: string
          description: Output only. The contact group ID for the contact group membership.
          readOnly: true
          deprecated: true
        contactGroupResourceName:
          type: string
          description: >-
            The resource name for the contact group, assigned by the server. An
            ASCII string, in the form of `contactGroups/{contact_group_id}`.
            Only contact_group_resource_name can be used for modifying
            memberships. Any contact group membership can be removed, but only
            user group or "myContacts" or "starred" system groups memberships
            can be added. A contact must always have at least one contact group
            membership.
      type: object
      id: ContactGroupMembership
    GetPeopleResponse:
      description: The response to a get request for a list of people by resource name.
      type: object
      properties:
        responses:
          description: The response for each requested resource name.
          type: array
          items:
            $ref: '#/components/schemas/PersonResponse'
      id: GetPeopleResponse
    BatchGetContactGroupsResponse:
      properties:
        responses:
          description: The list of responses for each requested contact group resource.
          type: array
          items:
            $ref: '#/components/schemas/ContactGroupResponse'
      id: BatchGetContactGroupsResponse
      type: object
      description: The response to a batch get contact groups request.
    BatchUpdateContactsResponse:
      id: BatchUpdateContactsResponse
      description: >-
        If not successful, returns BatchUpdateContactsErrorDetails, a list of
        errors corresponding to each contact. The response to a request to
        update a batch of contacts.
      properties:
        updateResult:
          description: >-
            A map of resource names to the contacts that were updated, unless
            the request `read_mask` is empty.
          additionalProperties:
            $ref: '#/components/schemas/PersonResponse'
          type: object
      type: object
    Interest:
      properties:
        metadata:
          description: Metadata about the interest.
          $ref: '#/components/schemas/FieldMetadata'
        value:
          description: The interest; for example, `stargazing`.
          type: string
      id: Interest
      type: object
      description: One of the person's interests.
    Biography:
      type: object
      id: Biography
      properties:
        contentType:
          description: The content type of the biography.
          enum:
            - CONTENT_TYPE_UNSPECIFIED
            - TEXT_PLAIN
            - TEXT_HTML
          enumDescriptions:
            - Unspecified.
            - Plain text.
            - HTML text.
          type: string
        value:
          description: The short biography.
          type: string
        metadata:
          description: Metadata about the biography.
          $ref: '#/components/schemas/FieldMetadata'
      description: A person's short biography.
    PhoneNumber:
      description: A person's phone number.
      id: PhoneNumber
      type: object
      properties:
        canonicalForm:
          readOnly: true
          type: string
          description: >-
            Output only. The canonicalized [ITU-T
            E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)
            form of the phone number.
        type:
          description: >-
            The type of the phone number. The type can be custom or one of these
            predefined values: * `home` * `work` * `mobile` * `homeFax` *
            `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` *
            `main` * `googleVoice` * `other`
          type: string
        value:
          description: The phone number.
          type: string
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the phone number.
        formattedType:
          description: >-
            Output only. The type of the phone number translated and formatted
            in the viewer's account locale or the `Accept-Language` HTTP header
            locale.
          type: string
          readOnly: true
    DomainMembership:
      id: DomainMembership
      properties:
        inViewerDomain:
          description: True if the person is in the viewer's Google Workspace domain.
          type: boolean
      description: A Google Workspace Domain membership.
      type: object
    Date:
      type: object
      properties:
        month:
          format: int32
          description: >-
            Month of a year. Must be from 1 to 12, or 0 to specify a year
            without a month and day.
          type: integer
        day:
          type: integer
          description: >-
            Day of a month. Must be from 1 to 31 and valid for the year and
            month, or 0 to specify a year by itself or a year and month where
            the day isn't significant.
          format: int32
        year:
          format: int32
          description: >-
            Year of the date. Must be from 1 to 9999, or 0 to specify a date
            without a year.
          type: integer
      id: Date
      description: >-
        Represents a whole or partial calendar date, such as a birthday. The
        time of day and time zone are either specified elsewhere or are
        insignificant. The date is relative to the Gregorian Calendar. This can
        represent one of the following: * A full date, with non-zero year,
        month, and day values. * A month and day, with a zero year (for example,
        an anniversary). * A year on its own, with a zero month and a zero day.
        * A year and month, with a zero day (for example, a credit card
        expiration date). Related types: * google.type.TimeOfDay *
        google.type.DateTime * google.protobuf.Timestamp
    Tagline:
      properties:
        metadata:
          description: Metadata about the tagline.
          $ref: '#/components/schemas/FieldMetadata'
        value:
          type: string
          description: The tagline.
      id: Tagline
      deprecated: true
      description: >-
        **DEPRECATED**: No data will be returned A brief one-line description of
        the person.
      type: object
    BatchCreateContactsRequest:
      properties:
        sources:
          description: >-
            Optional. A mask of what source types to return in the post mutate
            read. Defaults to READ_SOURCE_TYPE_CONTACT and
            READ_SOURCE_TYPE_PROFILE if not set.
          type: array
          items:
            enumDescriptions:
              - Unspecified.
              - >-
                Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
                SourceType.PROFILE.
              - Returns SourceType.CONTACT.
              - Returns SourceType.DOMAIN_CONTACT.
            enum:
              - READ_SOURCE_TYPE_UNSPECIFIED
              - READ_SOURCE_TYPE_PROFILE
              - READ_SOURCE_TYPE_CONTACT
              - READ_SOURCE_TYPE_DOMAIN_CONTACT
            type: string
        contacts:
          description: >-
            Required. The contact to create. Allows up to 200 contacts in a
            single request.
          items:
            $ref: '#/components/schemas/ContactToCreate'
          type: array
        readMask:
          type: string
          format: google-fieldmask
          description: >-
            Required. A field mask to restrict which fields on each person are
            returned in the response. Multiple fields can be specified by
            separating them with commas. If read mask is left empty, the
            post-mutate-get is skipped and no data will be returned in the
            response. Valid values are: * addresses * ageRanges * biographies *
            birthdays * calendarUrls * clientData * coverPhotos * emailAddresses
            * events * externalIds * genders * imClients * interests * locales *
            locations * memberships * metadata * miscKeywords * names *
            nicknames * occupations * organizations * phoneNumbers * photos *
            relations * sipAddresses * skills * urls * userDefined
      id: BatchCreateContactsRequest
      description: A request to create a batch of contacts.
      type: object
    RelationshipStatus:
      type: object
      id: RelationshipStatus
      description: '**DEPRECATED**: No data will be returned A person''s relationship status.'
      properties:
        formattedValue:
          description: >-
            Output only. The value of the relationship status translated and
            formatted in the viewer's account locale or the `Accept-Language`
            HTTP header locale.
          type: string
          readOnly: true
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the relationship status.
        value:
          description: >-
            The relationship status. The value can be custom or one of these
            predefined values: * `single` * `inARelationship` * `engaged` *
            `married` * `itsComplicated` * `openRelationship` * `widowed` *
            `inDomesticPartnership` * `inCivilUnion`
          type: string
      deprecated: true
    AgeRangeType:
      properties:
        ageRange:
          description: The age range.
          type: string
          enum:
            - AGE_RANGE_UNSPECIFIED
            - LESS_THAN_EIGHTEEN
            - EIGHTEEN_TO_TWENTY
            - TWENTY_ONE_OR_OLDER
          enumDescriptions:
            - Unspecified.
            - Younger than eighteen.
            - Between eighteen and twenty.
            - Twenty-one and older.
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the age range.
      id: AgeRangeType
      description: A person's age range.
      type: object
    ListContactGroupsResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
          description: The total number of items in the list without pagination.
        nextSyncToken:
          type: string
          description: >-
            The token that can be used to retrieve changes since the last
            request.
        nextPageToken:
          description: The token that can be used to retrieve the next page of results.
          type: string
        contactGroups:
          type: array
          items:
            $ref: '#/components/schemas/ContactGroup'
          description: >-
            The list of contact groups. Members of the contact groups are not
            populated.
      description: The response to a list contact groups request.
      id: ListContactGroupsResponse
    FieldMetadata:
      properties:
        verified:
          type: boolean
          description: >-
            Output only. True if the field is verified; false if the field is
            unverified. A verified field is typically a name, email address,
            phone number, or website that has been confirmed to be owned by the
            person.
          readOnly: true
        source:
          description: The source of the field.
          $ref: '#/components/schemas/Source'
        sourcePrimary:
          description: >-
            True if the field is the primary field for the source. Each source
            must have at most one field with `source_primary` set to true.
          type: boolean
        primary:
          readOnly: true
          description: >-
            Output only. True if the field is the primary field for all sources
            in the person. Each person will have at most one field with
            `primary` set to true.
          type: boolean
      id: FieldMetadata
      type: object
      description: Metadata about a field.
    Residence:
      description: >-
        **DEPRECATED**: Please use `person.locations` instead. A person's past
        or current residence.
      type: object
      id: Residence
      deprecated: true
      properties:
        current:
          description: >-
            True if the residence is the person's current residence; false if
            the residence is a past residence.
          type: boolean
        metadata:
          description: Metadata about the residence.
          $ref: '#/components/schemas/FieldMetadata'
        value:
          description: The address of the residence.
          type: string
    BatchDeleteContactsRequest:
      properties:
        resourceNames:
          type: array
          description: >-
            Required. The resource names of the contact to delete. It's
            repeatable. Allows up to 500 resource names in a single request.
          items:
            type: string
      description: A request to delete a batch of existing contacts.
      id: BatchDeleteContactsRequest
      type: object
    Source:
      properties:
        etag:
          description: >-
            **Only populated in `person.metadata.sources`.** The [HTTP entity
            tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used
            for web cache validation.
          type: string
        updateTime:
          description: >-
            Output only. **Only populated in `person.metadata.sources`.** Last
            update timestamp of this source.
          type: string
          readOnly: true
          format: google-datetime
        type:
          description: The source type.
          type: string
          enumDescriptions:
            - Unspecified.
            - '[Google Account](https://accounts.google.com).'
            - >-
              [Google profile](https://profiles.google.com). You can view the
              profile at
              [https://profiles.google.com/](https://profiles.google.com/){id},
              where {id} is the source id.
            - >-
              [Google Workspace domain
              profile](https://support.google.com/a/answer/1628008).
            - >-
              [Google contact](https://contacts.google.com). You can view the
              contact at
              [https://contact.google.com/](https://contact.google.com/){id},
              where {id} is the source id.
            - '[Google "Other contact"](https://contacts.google.com/other).'
            - >-
              [Google Workspace domain shared
              contact](https://support.google.com/a/answer/9281635).
          enum:
            - SOURCE_TYPE_UNSPECIFIED
            - ACCOUNT
            - PROFILE
            - DOMAIN_PROFILE
            - CONTACT
            - OTHER_CONTACT
            - DOMAIN_CONTACT
        profileMetadata:
          $ref: '#/components/schemas/ProfileMetadata'
          description: >-
            Output only. **Only populated in `person.metadata.sources`.**
            Metadata about a source of type PROFILE.
          readOnly: true
        id:
          type: string
          description: >-
            The unique identifier within the source type generated by the
            server.
      id: Source
      description: The source of a field.
      type: object
    UserDefined:
      description: Arbitrary user data that is populated by the end users.
      type: object
      id: UserDefined
      properties:
        key:
          description: The end user specified key of the user defined data.
          type: string
        value:
          type: string
          description: The end user specified value of the user defined data.
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the user defined data.
    Organization:
      description: >-
        A person's past or current organization. Overlapping date ranges are
        permitted.
      properties:
        startDate:
          description: The start date when the person joined the organization.
          $ref: '#/components/schemas/Date'
        current:
          description: >-
            True if the organization is the person's current organization; false
            if the organization is a past organization.
          type: boolean
        phoneticName:
          type: string
          description: The phonetic name of the organization.
        costCenter:
          description: The person's cost center at the organization.
          type: string
        endDate:
          $ref: '#/components/schemas/Date'
          description: The end date when the person left the organization.
        department:
          description: The person's department at the organization.
          type: string
        location:
          type: string
          description: The location of the organization office the person works at.
        symbol:
          description: >-
            The symbol associated with the organization; for example, a stock
            ticker symbol, abbreviation, or acronym.
          type: string
        jobDescription:
          type: string
          description: The person's job description at the organization.
        name:
          type: string
          description: The name of the organization.
        domain:
          type: string
          description: >-
            The domain name associated with the organization; for example,
            `google.com`.
        title:
          type: string
          description: The person's job title at the organization.
        formattedType:
          readOnly: true
          description: >-
            Output only. The type of the organization translated and formatted
            in the viewer's account locale or the `Accept-Language` HTTP header
            locale.
          type: string
        metadata:
          description: Metadata about the organization.
          $ref: '#/components/schemas/FieldMetadata'
        type:
          description: >-
            The type of the organization. The type can be custom or one of these
            predefined values: * `work` * `school`
          type: string
        fullTimeEquivalentMillipercent:
          format: int32
          type: integer
          description: >-
            The person's full-time equivalent millipercent within the
            organization (100000 = 100%).
      id: Organization
      type: object
    ContactGroupMetadata:
      properties:
        updateTime:
          readOnly: true
          description: Output only. The time the group was last updated.
          type: string
          format: google-datetime
        deleted:
          readOnly: true
          type: boolean
          description: >-
            Output only. True if the contact group resource has been deleted.
            Populated only for
            [`ListContactGroups`](/people/api/rest/v1/contactgroups/list)
            requests that include a sync token.
      description: The metadata about a contact group.
      type: object
      id: ContactGroupMetadata
    ContactToCreate:
      description: >-
        A wrapper that contains the person data to populate a newly created
        source.
      properties:
        contactPerson:
          description: Required. The person data to populate a newly created source.
          $ref: '#/components/schemas/Person'
      type: object
      id: ContactToCreate
    Gender:
      description: A person's gender.
      type: object
      properties:
        value:
          type: string
          description: >-
            The gender for the person. The gender can be custom or one of these
            predefined values: * `male` * `female` * `unspecified`
        formattedValue:
          type: string
          description: >-
            Output only. The value of the gender translated and formatted in the
            viewer's account locale or the `Accept-Language` HTTP header locale.
            Unspecified or custom value are not localized.
          readOnly: true
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the gender.
        addressMeAs:
          type: string
          description: >-
            Free form text field for pronouns that should be used to address the
            person. Common values are: * `he`/`him` * `she`/`her` *
            `they`/`them`
      id: Gender
    SearchResult:
      id: SearchResult
      type: object
      properties:
        person:
          $ref: '#/components/schemas/Person'
          description: The matched Person.
      description: A result of a search query.
    CoverPhoto:
      description: >-
        A person's cover photo. A large image shown on the person's profile page
        that represents who they are or what they care about.
      properties:
        metadata:
          description: Metadata about the cover photo.
          $ref: '#/components/schemas/FieldMetadata'
        default:
          description: >-
            True if the cover photo is the default cover photo; false if the
            cover photo is a user-provided cover photo.
          type: boolean
        url:
          description: The URL of the cover photo.
          type: string
      type: object
      id: CoverPhoto
    ContactGroup:
      properties:
        memberCount:
          type: integer
          description: >-
            Output only. The total number of contacts in the group irrespective
            of max members in specified in the request.
          readOnly: true
          format: int32
        metadata:
          $ref: '#/components/schemas/ContactGroupMetadata'
          description: Output only. Metadata about the contact group.
          readOnly: true
        clientData:
          type: array
          items:
            $ref: '#/components/schemas/GroupClientData'
          description: The group's client data.
        groupType:
          readOnly: true
          type: string
          enumDescriptions:
            - Unspecified.
            - User defined contact group.
            - System defined contact group.
          description: Output only. The contact group type.
          enum:
            - GROUP_TYPE_UNSPECIFIED
            - USER_CONTACT_GROUP
            - SYSTEM_CONTACT_GROUP
        name:
          type: string
          description: >-
            The contact group name set by the group owner or a system provided
            name for system groups. For
            [`contactGroups.create`](/people/api/rest/v1/contactGroups/create)
            or
            [`contactGroups.update`](/people/api/rest/v1/contactGroups/update)
            the name must be unique to the users contact groups. Attempting to
            create a group with a duplicate name will return a HTTP 409 error.
        resourceName:
          description: >-
            The resource name for the contact group, assigned by the server. An
            ASCII string, in the form of `contactGroups/{contact_group_id}`.
          type: string
        etag:
          type: string
          description: >-
            The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of
            the resource. Used for web cache validation.
        formattedName:
          readOnly: true
          description: >-
            Output only. The name translated and formatted in the viewer's
            account locale or the `Accept-Language` HTTP header locale for
            system groups names. Group names set by the owner are the same as
            name.
          type: string
        memberResourceNames:
          description: >-
            Output only. The list of contact person resource names that are
            members of the contact group. The field is only populated for GET
            requests and will only return as many members as `maxMembers` in the
            get request.
          type: array
          items:
            type: string
          readOnly: true
      description: A contact group.
      type: object
      id: ContactGroup
    Locale:
      id: Locale
      type: object
      description: A person's locale preference.
      properties:
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the locale.
        value:
          description: >-
            The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)
            language tag representing the locale.
          type: string
    Event:
      id: Event
      properties:
        formattedType:
          type: string
          description: >-
            Output only. The type of the event translated and formatted in the
            viewer's account locale or the `Accept-Language` HTTP header locale.
          readOnly: true
        metadata:
          description: Metadata about the event.
          $ref: '#/components/schemas/FieldMetadata'
        date:
          $ref: '#/components/schemas/Date'
          description: The date of the event.
        type:
          type: string
          description: >-
            The type of the event. The type can be custom or one of these
            predefined values: * `anniversary` * `other`
      type: object
      description: An event related to the person.
    EmailAddress:
      properties:
        formattedType:
          description: >-
            Output only. The type of the email address translated and formatted
            in the viewer's account locale or the `Accept-Language` HTTP header
            locale.
          type: string
          readOnly: true
        displayName:
          description: The display name of the email.
          type: string
        value:
          description: The email address.
          type: string
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the email address.
        type:
          type: string
          description: >-
            The type of the email address. The type can be custom or one of
            these predefined values: * `home` * `work` * `other`
      type: object
      description: A person's email address.
      id: EmailAddress
    Person:
      type: object
      description: >-
        Information about a person merged from various data sources such as the
        authenticated user's contacts and profile data. Most fields can have
        multiple items. The items in a field have no guaranteed order, but each
        non-empty field is guaranteed to have exactly one field with
        `metadata.primary` set to true.
      properties:
        emailAddresses:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
          description: >-
            The person's email addresses. For `people.connections.list` and
            `otherContacts.list` the number of email addresses is limited to
            100. If a Person has more email addresses the entire set can be
            obtained by calling GetPeople.
        braggingRights:
          items:
            $ref: '#/components/schemas/BraggingRights'
          deprecated: true
          description: >-
            **DEPRECATED**: No data will be returned The person's bragging
            rights.
          type: array
        skills:
          items:
            $ref: '#/components/schemas/Skill'
          type: array
          description: The person's skills.
        clientData:
          items:
            $ref: '#/components/schemas/ClientData'
          type: array
          description: The person's client data.
        metadata:
          description: Output only. Metadata about the person.
          $ref: '#/components/schemas/PersonMetadata'
          readOnly: true
        residences:
          type: array
          items:
            $ref: '#/components/schemas/Residence'
          deprecated: true
          description: >-
            **DEPRECATED**: (Please use `person.locations` instead) The person's
            residences.
        coverPhotos:
          description: Output only. The person's cover photos.
          readOnly: true
          items:
            $ref: '#/components/schemas/CoverPhoto'
          type: array
        miscKeywords:
          type: array
          items:
            $ref: '#/components/schemas/MiscKeyword'
          description: The person's miscellaneous keywords.
        calendarUrls:
          description: The person's calendar URLs.
          type: array
          items:
            $ref: '#/components/schemas/CalendarUrl'
        externalIds:
          type: array
          description: The person's external IDs.
          items:
            $ref: '#/components/schemas/ExternalId'
        sipAddresses:
          items:
            $ref: '#/components/schemas/SipAddress'
          type: array
          description: The person's SIP addresses.
        relationshipInterests:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelationshipInterest'
          deprecated: true
          description: >-
            Output only. **DEPRECATED**: No data will be returned The person's
            relationship interests.
        ageRange:
          readOnly: true
          type: string
          enumDescriptions:
            - Unspecified.
            - Younger than eighteen.
            - Between eighteen and twenty.
            - Twenty-one and older.
          enum:
            - AGE_RANGE_UNSPECIFIED
            - LESS_THAN_EIGHTEEN
            - EIGHTEEN_TO_TWENTY
            - TWENTY_ONE_OR_OLDER
          description: >-
            Output only. **DEPRECATED** (Please use `person.ageRanges` instead)
            The person's age range.
          deprecated: true
        nicknames:
          description: The person's nicknames.
          type: array
          items:
            $ref: '#/components/schemas/Nickname'
        memberships:
          items:
            $ref: '#/components/schemas/Membership'
          type: array
          description: The person's group memberships.
        imClients:
          type: array
          description: The person's instant messaging clients.
          items:
            $ref: '#/components/schemas/ImClient'
        organizations:
          description: The person's past or current organizations.
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        taglines:
          deprecated: true
          description: >-
            Output only. **DEPRECATED**: No data will be returned The person's
            taglines.
          items:
            $ref: '#/components/schemas/Tagline'
          type: array
          readOnly: true
        birthdays:
          type: array
          items:
            $ref: '#/components/schemas/Birthday'
          description: >-
            The person's birthdays. This field is a singleton for contact
            sources.
        phoneNumbers:
          description: >-
            The person's phone numbers. For `people.connections.list` and
            `otherContacts.list` the number of phone numbers is limited to 100.
            If a Person has more phone numbers the entire set can be obtained by
            calling GetPeople.
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        genders:
          items:
            $ref: '#/components/schemas/Gender'
          description: The person's genders. This field is a singleton for contact sources.
          type: array
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          description: The person's events.
        ageRanges:
          readOnly: true
          description: Output only. The person's age ranges.
          type: array
          items:
            $ref: '#/components/schemas/AgeRangeType'
        etag:
          type: string
          description: >-
            The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of
            the resource. Used for web cache validation.
        photos:
          readOnly: true
          items:
            $ref: '#/components/schemas/Photo'
          type: array
          description: Output only. The person's photos.
        userDefined:
          description: The person's user defined data.
          type: array
          items:
            $ref: '#/components/schemas/UserDefined'
        locales:
          type: array
          description: The person's locale preferences.
          items:
            $ref: '#/components/schemas/Locale'
        addresses:
          items:
            $ref: '#/components/schemas/Address'
          type: array
          description: The person's street addresses.
        fileAses:
          description: The person's file-ases.
          type: array
          items:
            $ref: '#/components/schemas/FileAs'
        locations:
          description: The person's locations.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        relations:
          type: array
          description: The person's relations.
          items:
            $ref: '#/components/schemas/Relation'
        biographies:
          items:
            $ref: '#/components/schemas/Biography'
          description: >-
            The person's biographies. This field is a singleton for contact
            sources.
          type: array
        interests:
          items:
            $ref: '#/components/schemas/Interest'
          type: array
          description: The person's interests.
        names:
          type: array
          items:
            $ref: '#/components/schemas/Name'
          description: The person's names. This field is a singleton for contact sources.
        urls:
          type: array
          description: The person's associated URLs.
          items:
            $ref: '#/components/schemas/Url'
        resourceName:
          description: >-
            The resource name for the person, assigned by the server. An ASCII
            string in the form of `people/{person_id}`.
          type: string
        relationshipStatuses:
          type: array
          description: >-
            Output only. **DEPRECATED**: No data will be returned The person's
            relationship statuses.
          readOnly: true
          deprecated: true
          items:
            $ref: '#/components/schemas/RelationshipStatus'
        occupations:
          description: The person's occupations.
          type: array
          items:
            $ref: '#/components/schemas/Occupation'
      id: Person
    ClientData:
      id: ClientData
      description: >-
        Arbitrary client data that is populated by clients. Duplicate keys and
        values are allowed.
      properties:
        key:
          description: The client specified key of the client data.
          type: string
        value:
          description: The client specified value of the client data.
          type: string
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the client data.
      type: object
    PersonMetadata:
      properties:
        deleted:
          description: >-
            Output only. True if the person resource has been deleted. Populated
            only for `people.connections.list` and `otherContacts.list` sync
            requests.
          type: boolean
          readOnly: true
        linkedPeopleResourceNames:
          readOnly: true
          items:
            type: string
          description: Output only. Resource names of people linked to this resource.
          type: array
        objectType:
          enum:
            - OBJECT_TYPE_UNSPECIFIED
            - PERSON
            - PAGE
          enumDescriptions:
            - Unspecified.
            - Person.
            - '[Currents Page.](https://workspace.google.com/products/currents/)'
          description: >-
            Output only. **DEPRECATED** (Please use
            `person.metadata.sources.profileMetadata.objectType` instead) The
            type of the person object.
          deprecated: true
          readOnly: true
          type: string
        sources:
          description: The sources of data for the person.
          items:
            $ref: '#/components/schemas/Source'
          type: array
        previousResourceNames:
          items:
            type: string
          readOnly: true
          type: array
          description: >-
            Output only. Any former resource names this person has had.
            Populated only for `people.connections.list` requests that include a
            sync token. The resource name may change when adding or removing
            fields that link a contact and profile such as a verified email,
            verified phone number, or profile URL.
      id: PersonMetadata
      description: The metadata about a person.
      type: object
    BraggingRights:
      type: object
      properties:
        value:
          description: The bragging rights; for example, `climbed mount everest`.
          type: string
        metadata:
          description: Metadata about the bragging rights.
          $ref: '#/components/schemas/FieldMetadata'
      description: '**DEPRECATED**: No data will be returned A person''s bragging rights.'
      id: BraggingRights
      deprecated: true
    ModifyContactGroupMembersResponse:
      type: object
      description: The response to a modify contact group members request.
      properties:
        canNotRemoveLastContactGroupResourceNames:
          type: array
          items:
            type: string
          description: >-
            The contact people resource names that cannot be removed from their
            last contact group.
        notFoundResourceNames:
          type: array
          description: The contact people resource names that were not found.
          items:
            type: string
      id: ModifyContactGroupMembersResponse
    Address:
      description: >-
        A person's physical address. May be a P.O. box or street address. All
        fields are optional.
      type: object
      id: Address
      properties:
        poBox:
          type: string
          description: The P.O. box of the address.
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the address.
        formattedType:
          readOnly: true
          type: string
          description: >-
            Output only. The type of the address translated and formatted in the
            viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedValue:
          type: string
          description: >-
            The unstructured value of the address. If this is not set by the
            user it will be automatically constructed from structured values.
        extendedAddress:
          type: string
          description: >-
            The extended address of the address; for example, the apartment
            number.
        streetAddress:
          description: The street address.
          type: string
        country:
          type: string
          description: The country of the address.
        type:
          description: >-
            The type of the address. The type can be custom or one of these
            predefined values: * `home` * `work` * `other`
          type: string
        postalCode:
          type: string
          description: The postal code of the address.
        countryCode:
          type: string
          description: >-
            The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm)
            country code of the address.
        region:
          type: string
          description: The region of the address; for example, the state or province.
        city:
          description: The city of the address.
          type: string
    ListConnectionsResponse:
      properties:
        totalPeople:
          type: integer
          description: >-
            **DEPRECATED** (Please use totalItems) The total number of people in
            the list without pagination.
          format: int32
          deprecated: true
        connections:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          description: The list of people that the requestor is connected to.
        nextPageToken:
          type: string
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
        nextSyncToken:
          type: string
          description: >-
            A token, which can be sent as `sync_token` to retrieve changes since
            the last request. Request must set `request_sync_token` to return
            the sync token. When the response is paginated, only the last page
            will contain `nextSyncToken`.
        totalItems:
          description: The total number of items in the list without pagination.
          type: integer
          format: int32
      description: The response to a request for the authenticated user's connections.
      id: ListConnectionsResponse
      type: object
    CreateContactGroupRequest:
      type: object
      id: CreateContactGroupRequest
      properties:
        readGroupFields:
          format: google-fieldmask
          description: >-
            Optional. A field mask to restrict which fields on the group are
            returned. Defaults to `metadata`, `groupType`, and `name` if not set
            or set to empty. Valid fields are: * clientData * groupType *
            metadata * name
          type: string
        contactGroup:
          description: Required. The contact group to create.
          $ref: '#/components/schemas/ContactGroup'
      description: A request to create a new contact group.
    Skill:
      type: object
      description: A skill that the person has.
      id: Skill
      properties:
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the skill.
        value:
          type: string
          description: The skill; for example, `underwater basket weaving`.
    UpdateContactGroupRequest:
      id: UpdateContactGroupRequest
      type: object
      properties:
        contactGroup:
          description: Required. The contact group to update.
          $ref: '#/components/schemas/ContactGroup'
        readGroupFields:
          description: >-
            Optional. A field mask to restrict which fields on the group are
            returned. Defaults to `metadata`, `groupType`, and `name` if not set
            or set to empty. Valid fields are: * clientData * groupType *
            memberCount * metadata * name
          type: string
          format: google-fieldmask
        updateGroupFields:
          description: >-
            Optional. A field mask to restrict which fields on the group are
            updated. Multiple fields can be specified by separating them with
            commas. Defaults to `name` if not set or set to empty. Updated
            fields are replaced. Valid values are: * clientData * name
          format: google-fieldmask
          type: string
      description: >-
        A request to update an existing user contact group. All updated fields
        will be replaced.
    Status:
      properties:
        code:
          type: integer
          format: int32
          description: The status code, which should be an enum value of google.rpc.Code.
        details:
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
      type: object
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
    DeleteContactPhotoResponse:
      type: object
      id: DeleteContactPhotoResponse
      properties:
        person:
          $ref: '#/components/schemas/Person'
          description: >-
            The updated person, if person_fields is set in the
            DeleteContactPhotoRequest; otherwise this will be unset.
      description: The response for deleting a contact's photo.
    RelationshipInterest:
      description: >-
        **DEPRECATED**: No data will be returned A person's relationship
        interest .
      type: object
      properties:
        formattedValue:
          readOnly: true
          type: string
          description: >-
            Output only. The value of the relationship interest translated and
            formatted in the viewer's account locale or the locale specified in
            the Accept-Language HTTP header.
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the relationship interest.
        value:
          type: string
          description: >-
            The kind of relationship the person is looking for. The value can be
            custom or one of these predefined values: * `friend` * `date` *
            `relationship` * `networking`
      deprecated: true
      id: RelationshipInterest
    CopyOtherContactToMyContactsGroupRequest:
      type: object
      properties:
        copyMask:
          description: >-
            Required. A field mask to restrict which fields are copied into the
            new contact. Valid values are: * emailAddresses * names *
            phoneNumbers
          type: string
          format: google-fieldmask
        readMask:
          type: string
          description: >-
            Optional. A field mask to restrict which fields on the person are
            returned. Multiple fields can be specified by separating them with
            commas. Defaults to the copy mask with metadata and membership
            fields if not set. Valid values are: * addresses * ageRanges *
            biographies * birthdays * calendarUrls * clientData * coverPhotos *
            emailAddresses * events * externalIds * genders * imClients *
            interests * locales * locations * memberships * metadata *
            miscKeywords * names * nicknames * occupations * organizations *
            phoneNumbers * photos * relations * sipAddresses * skills * urls *
            userDefined
          format: google-fieldmask
        sources:
          type: array
          items:
            enum:
              - READ_SOURCE_TYPE_UNSPECIFIED
              - READ_SOURCE_TYPE_PROFILE
              - READ_SOURCE_TYPE_CONTACT
              - READ_SOURCE_TYPE_DOMAIN_CONTACT
            type: string
            enumDescriptions:
              - Unspecified.
              - >-
                Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
                SourceType.PROFILE.
              - Returns SourceType.CONTACT.
              - Returns SourceType.DOMAIN_CONTACT.
          description: >-
            Optional. A mask of what source types to return. Defaults to
            READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
      id: CopyOtherContactToMyContactsGroupRequest
      description: A request to copy an "Other contact" to my contacts group.
    UpdateContactPhotoRequest:
      properties:
        photoBytes:
          description: Required. Raw photo bytes
          format: byte
          type: string
        sources:
          items:
            enumDescriptions:
              - Unspecified.
              - >-
                Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and
                SourceType.PROFILE.
              - Returns SourceType.CONTACT.
              - Returns SourceType.DOMAIN_CONTACT.
            type: string
            enum:
              - READ_SOURCE_TYPE_UNSPECIFIED
              - READ_SOURCE_TYPE_PROFILE
              - READ_SOURCE_TYPE_CONTACT
              - READ_SOURCE_TYPE_DOMAIN_CONTACT
          type: array
          description: >-
            Optional. A mask of what source types to return. Defaults to
            READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
        personFields:
          type: string
          description: >-
            Optional. A field mask to restrict which fields on the person are
            returned. Multiple fields can be specified by separating them with
            commas. Defaults to empty if not set, which will skip the post
            mutate get. Valid values are: * addresses * ageRanges * biographies
            * birthdays * calendarUrls * clientData * coverPhotos *
            emailAddresses * events * externalIds * genders * imClients *
            interests * locales * locations * memberships * metadata *
            miscKeywords * names * nicknames * occupations * organizations *
            phoneNumbers * photos * relations * sipAddresses * skills * urls *
            userDefined
          format: google-fieldmask
      id: UpdateContactPhotoRequest
      type: object
      description: >-
        A request to update an existing contact's photo. All requests must have
        a valid photo format: JPEG or PNG.
    Nickname:
      description: A person's nickname.
      id: Nickname
      properties:
        value:
          description: The nickname.
          type: string
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the nickname.
        type:
          description: The type of the nickname.
          enumDeprecated:
            - false
            - true
            - true
            - true
            - true
            - false
            - true
          enumDescriptions:
            - Generic nickname.
            - >-
              Maiden name or birth family name. Used when the person's family
              name has changed as a result of marriage.
            - Initials.
            - Google+ profile nickname.
            - >-
              A professional affiliation or other name; for example, `Dr.
              Smith.`
            - Alternate name person is known by.
            - A shorter version of the person's name.
          type: string
          enum:
            - DEFAULT
            - MAIDEN_NAME
            - INITIALS
            - GPLUS
            - OTHER_NAME
            - ALTERNATE_NAME
            - SHORT_NAME
      type: object
    UpdateContactPhotoResponse:
      type: object
      description: The response for updating a contact's photo.
      id: UpdateContactPhotoResponse
      properties:
        person:
          description: >-
            The updated person, if person_fields is set in the
            UpdateContactPhotoRequest; otherwise this will be unset.
          $ref: '#/components/schemas/Person'
    GroupClientData:
      id: GroupClientData
      type: object
      description: >-
        Arbitrary client data that is populated by clients. Duplicate keys and
        values are allowed.
      properties:
        key:
          type: string
          description: The client specified key of the client data.
        value:
          description: The client specified value of the client data.
          type: string
    Name:
      properties:
        phoneticHonorificPrefix:
          type: string
          description: The honorific prefixes spelled as they sound.
        displayName:
          description: >-
            Output only. The display name formatted according to the locale
            specified by the viewer's account or the `Accept-Language` HTTP
            header.
          type: string
          readOnly: true
        givenName:
          description: The given name.
          type: string
        phoneticHonorificSuffix:
          type: string
          description: The honorific suffixes spelled as they sound.
        phoneticMiddleName:
          type: string
          description: The middle name(s) spelled as they sound.
        unstructuredName:
          description: The free form name value.
          type: string
        metadata:
          $ref: '#/components/schemas/FieldMetadata'
          description: Metadata about the name.
        displayNameLastFirst:
          readOnly: true
          type: string
          description: >-
            Output only. The display name with the last name first formatted
            according to the locale specified by the viewer's account or the
            `Accept-Language` HTTP header.
        phoneticGivenName:
          type: string
          description: The given name spelled as it sounds.
        phoneticFamilyName:
          description: The family name spelled as it sounds.
          type: string
        familyName:
          description: The family name.
          type: string
        honorificPrefix:
          type: string
          description: The honorific prefixes, such as `Mrs.` or `Dr.`
        middleName:
          type: string
          description: The middle name(s).
        phoneticFullName:
          description: The full name spelled as it sounds.
          type: string
        honorificSuffix:
          type: string
          description: The honorific suffixes, such as `Jr.`
      type: object
      description: A person's name. If the name is a mononym, the family name is empty.
      id: Name
    ModifyContactGroupMembersRequest:
      type: object
      description: >-
        A request to modify an existing contact group's members. Contacts can be
        removed from any group but they can only be added to a user group or
        "myContacts" or "starred" system groups.
      id: ModifyContactGroupMembersRequest
      properties:
        resourceNamesToRemove:
          type: array
          description: >-
            Optional. The resource names of the contact people to remove in the
            form of `people/{person_id}`. The total number of resource names in
            `resource_names_to_add` and `resource_names_to_remove` must be less
            than or equal to 1000.
          items:
            type: string
        resourceNamesToAdd:
          type: array
          description: >-
            Optional. The resource names of the contact people to add in the
            form of `people/{person_id}`. The total number of resource names in
            `resource_names_to_add` and `resource_names_to_remove` must be less
            than or equal to 1000.
          items:
            type: string
    FileAs:
      description: The name that should be used to sort the person in a list.
      id: FileAs
      type: object
      properties:
        metadata:
          description: Metadata about the file-as.
          $ref: '#/components/schemas/FieldMetadata'
        value:
          type: string
          description: The file-as value
    ImClient:
      description: A person's instant messaging client.
      properties:
        username:
          type: string
          description: The user name used in the IM client.
        metadata:
          description: Metadata about the IM client.
          $ref: '#/components/schemas/FieldMetadata'
        protocol:
          description: >-
            The protocol of the IM client. The protocol can be custom or one of
            these predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq`
            * `googleTalk` * `icq` * `jabber` * `netMeeting`
          type: string
        formattedType:
          readOnly: true
          description: >-
            Output only. The type of the IM client translated and formatted in
            the viewer's account locale or the `Accept-Language` HTTP header
            locale.
          type: string
        formattedProtocol:
          readOnly: true
          description: >-
            Output only. The protocol of the IM client formatted in the viewer's
            account locale or the `Accept-Language` HTTP header locale.
          type: string
        type:
          type: string
          description: >-
            The type of the IM client. The type can be custom or one of these
            predefined values: * `home` * `work` * `other`
      type: object
      id: ImClient
    CalendarUrl:
      id: CalendarUrl
      description: A person's calendar URL.
      properties:
        formattedType:
          readOnly: true
          description: >-
            Output only. The type of the calendar URL translated and formatted
            in the viewer's account locale or the `Accept-Language` HTTP header
            locale.
          type: string
        metadata:
          description: Metadata about the calendar URL.
          $ref: '#/components/schemas/FieldMetadata'
        type:
          description: >-
            The type of the calendar URL. The type can be custom or one of these
            predefined values: * `home` * `freeBusy` * `work`
          type: string
        url:
          description: The calendar URL.
          type: string
      type: object
    PersonResponse:
      type: object
      properties:
        requestedResourceName:
          description: >-
            The original requested resource name. May be different than the
            resource name on the returned person. The resource name can change
            when adding or removing fields that link a contact and profile such
            as a verified email, verified phone number, or a profile URL.
          type: string
        status:
          description: The status of the response.
          $ref: '#/components/schemas/Status'
        person:
          $ref: '#/components/schemas/Person'
          description: The person.
        httpStatusCode:
          format: int32
          description: >-
            **DEPRECATED** (Please use status instead) [HTTP 1.1 status code]
            (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
          deprecated: true
          type: integer
      id: PersonResponse
      description: The response for a single person
  parameters:
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/user.emails.read: See and download all of your Google Account email addresses
            https://www.googleapis.com/auth/user.addresses.read: View your street addresses
            https://www.googleapis.com/auth/userinfo.profile: >-
              See your personal info, including any personal info you've made
              publicly available
            https://www.googleapis.com/auth/userinfo.email: See your primary Google Account email address
            https://www.googleapis.com/auth/contacts: See, edit, download, and permanently delete your contacts
            https://www.googleapis.com/auth/contacts.other.readonly: >-
              See and download contact info automatically saved in your "Other
              contacts"
            https://www.googleapis.com/auth/directory.readonly: See and download your organization's GSuite directory
            https://www.googleapis.com/auth/user.gender.read: See your gender
            https://www.googleapis.com/auth/user.phonenumbers.read: See and download your personal phone numbers
            https://www.googleapis.com/auth/user.birthday.read: See and download your exact date of birth
            https://www.googleapis.com/auth/contacts.readonly: See and download your contacts
            https://www.googleapis.com/auth/user.organization.read: See your education, work history and org info
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/contactGroups:batchGet:
    parameters: &ref_1
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
    get:
      description: >-
        Get a list of contact groups owned by the authenticated user by
        specifying a list of contact group resource names.
      operationId: people.contactGroups.batchGet
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetContactGroupsResponse'
      parameters:
        - in: query
          name: maxMembers
          schema:
            type: integer
        - in: query
          name: groupFields
          schema:
            type: string
        - in: query
          name: resourceNames
          schema:
            type: string
      x-stackQL-resource: contact_groups
      x-stackQL-verb: select
  /v1/contactGroups:
    parameters: *ref_1
    post:
      description: >-
        Create a new contact group owned by the authenticated user. Created
        contact group names must be unique to the users contact groups.
        Attempting to create a group with a duplicate name will return a HTTP
        409 error. Mutate requests for the same user should be sent sequentially
        to avoid increased latency and failures.
      operationId: people.contactGroups.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactGroupRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroup'
      parameters: []
      x-stackQL-resource: contact_groups
      x-stackQL-verb: insert
    get:
      description: >-
        List all contact groups owned by the authenticated user. Members of the
        contact groups are not populated.
      operationId: people.contactGroups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContactGroupsResponse'
      parameters:
        - in: query
          name: groupFields
          schema:
            type: string
        - in: query
          name: syncToken
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: contact_groups
      x-stackQL-verb: select
  /v1/contactGroups/{contactGroupsId}:
    parameters: *ref_1
    get:
      description: >-
        Get a specific contact group owned by the authenticated user by
        specifying a contact group resource name.
      operationId: people.contactGroups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroup'
      parameters:
        - in: path
          name: contactGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: maxMembers
          schema:
            type: integer
        - in: query
          name: groupFields
          schema:
            type: string
      x-stackQL-resource: contact_groups
      x-stackQL-verb: select
    delete:
      description: >-
        Delete an existing contact group owned by the authenticated user by
        specifying a contact group resource name. Mutate requests for the same
        user should be sent sequentially to avoid increased latency and
        failures.
      operationId: people.contactGroups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: contactGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: deleteContacts
          schema:
            type: boolean
      x-stackQL-resource: contact_groups
      x-stackQL-verb: delete
    put:
      description: >-
        Update the name of an existing contact group owned by the authenticated
        user. Updated contact group names must be unique to the users contact
        groups. Attempting to create a group with a duplicate name will return a
        HTTP 409 error. Mutate requests for the same user should be sent
        sequentially to avoid increased latency and failures.
      operationId: people.contactGroups.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactGroupRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactGroup'
      parameters:
        - in: path
          name: contactGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: contact_groups
      x-stackQL-verb: exec
  /v1/contactGroups/{contactGroupsId}/members:modify:
    parameters: *ref_1
    post:
      description: >-
        Modify the members of a contact group owned by the authenticated user.
        The only system contact groups that can have members added are
        `contactGroups/myContacts` and `contactGroups/starred`. Other system
        contact groups are deprecated and can only have contacts removed.
      operationId: people.contactGroups.members.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyContactGroupMembersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyContactGroupMembersResponse'
      parameters:
        - in: path
          name: contactGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: exec
  /v1/people/{peopleId}/connections:
    parameters: *ref_1
    get:
      description: >-
        Provides a list of the authenticated user's contacts. Sync tokens expire
        7 days after the full sync. A request with an expired sync token will
        get an error with an
        [google.rpc.ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
        with reason "EXPIRED_SYNC_TOKEN". In the case of such an error clients
        should make a full sync request without a `sync_token`. The first page
        of a full sync request has an additional quota. If the quota is
        exceeded, a 429 error will be returned. This quota is fixed and can not
        be increased. When the `sync_token` is specified, resources deleted
        since the last sync will be returned as a person with
        `PersonMetadata.deleted` set to true. When the `page_token` or
        `sync_token` is specified, all other request parameters must match the
        first call. Writes may have a propagation delay of several minutes for
        sync requests. Incremental syncs are not intended for read-after-write
        use cases. See example usage at [List the user's contacts that have
        changed](/people/v1/contacts#list_the_users_contacts_that_have_changed).
      operationId: people.people.connections.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectionsResponse'
      parameters:
        - in: path
          name: peopleId
          required: true
          schema:
            type: string
        - in: query
          name: syncToken
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: requestMask.includeField
          schema:
            type: string
        - in: query
          name: personFields
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: requestSyncToken
          schema:
            type: boolean
      x-stackQL-resource: connections
      x-stackQL-verb: select
  /v1/people:batchGet:
    parameters: *ref_1
    get:
      description: >-
        Provides information about a list of specific people by specifying a
        list of requested resource names. Use `people/me` to indicate the
        authenticated user. The request returns a 400 error if 'personFields' is
        not specified.
      operationId: people.people.getBatchGet
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/directory.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/directory.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/user.addresses.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.addresses.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.birthday.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.birthday.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.emails.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.emails.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.gender.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.gender.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.organization.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.organization.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.phonenumbers.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.phonenumbers.read
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.email
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.email
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.profile
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.profile
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPeopleResponse'
      parameters:
        - in: query
          name: requestMask.includeField
          schema:
            type: string
        - in: query
          name: personFields
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
        - in: query
          name: resourceNames
          schema:
            type: string
      x-stackQL-resource: people__batch_get
      x-stackQL-verb: select
  /v1/people:searchDirectoryPeople:
    parameters: *ref_1
    get:
      description: >-
        Provides a list of domain profiles and domain contacts in the
        authenticated user's domain directory that match the search query.
      operationId: people.people.searchDirectoryPeople
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/directory.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/directory.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDirectoryPeopleResponse'
      parameters:
        - in: query
          name: sources
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: readMask
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: mergeSources
          schema:
            type: string
      x-stackQL-resource: people
      x-stackQL-verb: exec
  /v1/people:createContact:
    parameters: *ref_1
    post:
      description: >-
        Create a new contact and return the person resource for that contact.
        The request returns a 400 error if more than one field is specified on a
        field that is a singleton for contact sources: * biographies * birthdays
        * genders * names Mutate requests for the same user should be sent
        sequentially to avoid increased latency and failures.
      operationId: people.people.createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      parameters:
        - in: query
          name: personFields
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
      x-stackQL-resource: people__contact
      x-stackQL-verb: insert
  /v1/people/{peopleId}:deleteContactPhoto:
    parameters: *ref_1
    delete:
      description: >-
        Delete a contact's photo. Mutate requests for the same user should be
        done sequentially to avoid // lock contention.
      operationId: people.people.deleteContactPhoto
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContactPhotoResponse'
      parameters:
        - in: path
          name: peopleId
          required: true
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
        - in: query
          name: personFields
          schema:
            type: string
      x-stackQL-resource: people__contact_photo
      x-stackQL-verb: delete
  /v1/people:listDirectoryPeople:
    parameters: *ref_1
    get:
      description: >-
        Provides a list of domain profiles and domain contacts in the
        authenticated user's domain directory. When the `sync_token` is
        specified, resources deleted since the last sync will be returned as a
        person with `PersonMetadata.deleted` set to true. When the `page_token`
        or `sync_token` is specified, all other request parameters must match
        the first call. Writes may have a propagation delay of several minutes
        for sync requests. Incremental syncs are not intended for
        read-after-write use cases. See example usage at [List the directory
        people that have
        changed](/people/v1/directory#list_the_directory_people_that_have_changed).
      operationId: people.people.listDirectoryPeople
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/directory.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/directory.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDirectoryPeopleResponse'
      parameters:
        - in: query
          name: syncToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
        - in: query
          name: mergeSources
          schema:
            type: string
        - in: query
          name: readMask
          schema:
            type: string
        - in: query
          name: requestSyncToken
          schema:
            type: boolean
      x-stackQL-resource: people__directory_people
      x-stackQL-verb: select
  /v1/people/{peopleId}:
    parameters: *ref_1
    get:
      description: >-
        Provides information about a person by specifying a resource name. Use
        `people/me` to indicate the authenticated user. The request returns a
        400 error if 'personFields' is not specified.
      operationId: people.people.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/directory.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/directory.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/user.addresses.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.addresses.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.birthday.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.birthday.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.emails.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.emails.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.gender.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.gender.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.organization.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.organization.read
        - Oauth2:
            - https://www.googleapis.com/auth/user.phonenumbers.read
          Oauth2c:
            - https://www.googleapis.com/auth/user.phonenumbers.read
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.email
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.email
        - Oauth2:
            - https://www.googleapis.com/auth/userinfo.profile
          Oauth2c:
            - https://www.googleapis.com/auth/userinfo.profile
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      parameters:
        - in: path
          name: peopleId
          required: true
          schema:
            type: string
        - in: query
          name: requestMask.includeField
          schema:
            type: string
        - in: query
          name: personFields
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
      x-stackQL-resource: people
      x-stackQL-verb: select
  /v1/people/{peopleId}:deleteContact:
    parameters: *ref_1
    delete:
      description: >-
        Delete a contact person. Any non-contact data will not be deleted.
        Mutate requests for the same user should be sent sequentially to avoid
        increased latency and failures.
      operationId: people.people.deleteContact
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: peopleId
          required: true
          schema:
            type: string
      x-stackQL-resource: people__contact
      x-stackQL-verb: delete
  /v1/people:searchContacts:
    parameters: *ref_1
    get:
      description: >-
        Provides a list of contacts in the authenticated user's grouped contacts
        that matches the search query. The query matches on a contact's `names`,
        `nickNames`, `emailAddresses`, `phoneNumbers`, and `organizations`
        fields that are from the CONTACT source. **IMPORTANT**: Before
        searching, clients should send a warmup request with an empty query to
        update the cache. See
        https://developers.google.com/people/v1/contacts#search_the_users_contacts
      operationId: people.people.searchContacts
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
      parameters:
        - in: query
          name: sources
          schema:
            type: string
        - in: query
          name: readMask
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
      x-stackQL-resource: people
      x-stackQL-verb: exec
  /v1/people/{peopleId}:updateContact:
    parameters: *ref_1
    patch:
      description: >-
        Update contact data for an existing contact person. Any non-contact data
        will not be modified. Any non-contact data in the person to update will
        be ignored. All fields specified in the `update_mask` will be replaced.
        The server returns a 400 error if `person.metadata.sources` is not
        specified for the contact to be updated or if there is no contact
        source. The server returns a 400 error with reason
        `"failedPrecondition"` if `person.metadata.sources.etag` is different
        than the contact's etag, which indicates the contact has changed since
        its data was read. Clients should get the latest person and merge their
        updates into the latest person. The server returns a 400 error if
        `memberships` are being updated and there are no contact group
        memberships specified on the person. The server returns a 400 error if
        more than one field is specified on a field that is a singleton for
        contact sources: * biographies * birthdays * genders * names Mutate
        requests for the same user should be sent sequentially to avoid
        increased latency and failures.
      operationId: people.people.updateContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      parameters:
        - in: path
          name: peopleId
          required: true
          schema:
            type: string
        - in: query
          name: updatePersonFields
          schema:
            type: string
        - in: query
          name: personFields
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
      x-stackQL-resource: people
      x-stackQL-verb: exec
  /v1/people:batchUpdateContacts:
    parameters: *ref_1
    post:
      description: >-
        Update a batch of contacts and return a map of resource names to
        PersonResponses for the updated contacts. Mutate requests for the same
        user should be sent sequentially to avoid increased latency and
        failures.
      operationId: people.people.batchUpdateContacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateContactsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateContactsResponse'
      parameters: []
      x-stackQL-resource: people
      x-stackQL-verb: exec
  /v1/people:batchDeleteContacts:
    parameters: *ref_1
    post:
      description: >-
        Delete a batch of contacts. Any non-contact data will not be deleted.
        Mutate requests for the same user should be sent sequentially to avoid
        increased latency and failures.
      operationId: people.people.batchDeleteContacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteContactsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters: []
      x-stackQL-resource: people
      x-stackQL-verb: exec
  /v1/people:batchCreateContacts:
    parameters: *ref_1
    post:
      description: >-
        Create a batch of new contacts and return the PersonResponses for the
        newly Mutate requests for the same user should be sent sequentially to
        avoid increased latency and failures.
      operationId: people.people.batchCreateContacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateContactsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateContactsResponse'
      parameters: []
      x-stackQL-resource: people
      x-stackQL-verb: exec
  /v1/people/{peopleId}:updateContactPhoto:
    parameters: *ref_1
    patch:
      description: >-
        Update a contact's photo. Mutate requests for the same user should be
        sent sequentially to avoid increased latency and failures.
      operationId: people.people.updateContactPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactPhotoRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateContactPhotoResponse'
      parameters:
        - in: path
          name: peopleId
          required: true
          schema:
            type: string
      x-stackQL-resource: people
      x-stackQL-verb: exec
  /v1/otherContacts:search:
    parameters: *ref_1
    get:
      description: >-
        Provides a list of contacts in the authenticated user's other contacts
        that matches the search query. The query matches on a contact's `names`,
        `emailAddresses`, and `phoneNumbers` fields that are from the
        OTHER_CONTACT source. **IMPORTANT**: Before searching, clients should
        send a warmup request with an empty query to update the cache. See
        https://developers.google.com/people/v1/other-contacts#search_the_users_other_contacts
      operationId: people.otherContacts.search
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.other.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.other.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
      parameters:
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: readMask
          schema:
            type: string
      x-stackQL-resource: other_contacts
      x-stackQL-verb: exec
  /v1/otherContacts/{otherContactsId}:copyOtherContactToMyContactsGroup:
    parameters: *ref_1
    post:
      description: >-
        Copies an "Other contact" to a new contact in the user's "myContacts"
        group Mutate requests for the same user should be sent sequentially to
        avoid increased latency and failures.
      operationId: people.otherContacts.copyOtherContactToMyContactsGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyOtherContactToMyContactsGroupRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts
          Oauth2c:
            - https://www.googleapis.com/auth/contacts
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.other.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.other.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      parameters:
        - in: path
          name: otherContactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: other_contacts
      x-stackQL-verb: exec
  /v1/otherContacts:
    parameters: *ref_1
    get:
      description: >-
        List all "Other contacts", that is contacts that are not in a contact
        group. "Other contacts" are typically auto created contacts from
        interactions. Sync tokens expire 7 days after the full sync. A request
        with an expired sync token will get an error with an
        [google.rpc.ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
        with reason "EXPIRED_SYNC_TOKEN". In the case of such an error clients
        should make a full sync request without a `sync_token`. The first page
        of a full sync request has an additional quota. If the quota is
        exceeded, a 429 error will be returned. This quota is fixed and can not
        be increased. When the `sync_token` is specified, resources deleted
        since the last sync will be returned as a person with
        `PersonMetadata.deleted` set to true. When the `page_token` or
        `sync_token` is specified, all other request parameters must match the
        first call. Writes may have a propagation delay of several minutes for
        sync requests. Incremental syncs are not intended for read-after-write
        use cases. See example usage at [List the user's other contacts that
        have
        changed](/people/v1/other-contacts#list_the_users_other_contacts_that_have_changed).
      operationId: people.otherContacts.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/contacts.other.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/contacts.other.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOtherContactsResponse'
      parameters:
        - in: query
          name: requestSyncToken
          schema:
            type: boolean
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: readMask
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: syncToken
          schema:
            type: string
        - in: query
          name: sources
          schema:
            type: string
      x-stackQL-resource: other_contacts
      x-stackQL-verb: select
