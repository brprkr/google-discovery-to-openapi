openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: My Business Q&A API
  description: >-
    The My Business Q&A API allows questions and answers to be posted for
    specific listings. Note - If you have a quota of 0 after enabling the API,
    please request for GBP API access.
  version: v1
  x-discovery-doc-revision: '20230621'
  x-generated-date: '2023-06-25'
externalDocs:
  url: https://developers.google.com/my-business/
servers:
  - url: https://mybusinessqanda.googleapis.com
components:
  schemas:
    Author:
      properties:
        profilePhotoUri:
          type: string
          description: The profile photo URI of the user.
        type:
          type: string
          enumDescriptions:
            - This should not be used.
            - A regular user.
            - A Local Guide
            - The owner/manager of the location
          description: The type of user the author is.
          enum:
            - AUTHOR_TYPE_UNSPECIFIED
            - REGULAR_USER
            - LOCAL_GUIDE
            - MERCHANT
        displayName:
          type: string
          description: The display name of the user
      type: object
      id: Author
      description: Represents the author of a question or answer
    ListAnswersResponse:
      properties:
        answers:
          type: array
          description: The requested answers.
          items:
            $ref: '#/components/schemas/Answer'
        totalSize:
          type: integer
          format: int32
          description: >-
            The total number of answers posted for this question across all
            pages.
        nextPageToken:
          description: >-
            If the number of answers exceeds the requested max page size, this
            field is populated with a token to fetch the next page of answers on
            a subsequent call. If there are no more answers, this field is not
            present in the response.
          type: string
      description: Response message for QuestionsAndAnswers.ListAnswers
      type: object
      id: ListAnswersResponse
    Question:
      id: Question
      type: object
      description: Represents a single question and some of its answers.
      properties:
        updateTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The timestamp for when the question was last modified.
        name:
          description: >-
            Immutable. The unique name for the question. locations/*/questions/*
            This field will be ignored if set during question creation.
          type: string
        totalAnswerCount:
          format: int32
          readOnly: true
          type: integer
          description: Output only. The total number of answers posted for this question.
        upvoteCount:
          format: int32
          description: Output only. The number of upvotes for the question.
          readOnly: true
          type: integer
        text:
          type: string
          description: >-
            Required. The text of the question. It should contain at least three
            words and the total length should be greater than or equal to 10
            characters. The maximum length is 4096 characters.
        topAnswers:
          items:
            $ref: '#/components/schemas/Answer'
          description: >-
            Output only. A list of answers to the question, sorted by upvotes.
            This may not be a complete list of answers depending on the request
            parameters (answers_per_question)
          readOnly: true
          type: array
        author:
          description: Output only. The author of the question.
          $ref: '#/components/schemas/Author'
          readOnly: true
        createTime:
          type: string
          readOnly: true
          description: Output only. The timestamp for when the question was written.
          format: google-datetime
    ListQuestionsResponse:
      properties:
        nextPageToken:
          type: string
          description: >-
            If the number of questions exceeds the requested max page size, this
            field is populated with a token to fetch the next page of questions
            on a subsequent call. If there are no more questions, this field is
            not present in the response.
        totalSize:
          description: >-
            The total number of questions posted for this location across all
            pages.
          type: integer
          format: int32
        questions:
          items:
            $ref: '#/components/schemas/Question'
          description: The requested questions,
          type: array
      description: Response message for QuestionsAndAnswers.ListQuestions
      type: object
      id: ListQuestionsResponse
    Empty:
      type: object
      properties: {}
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      id: Empty
    Answer:
      id: Answer
      properties:
        author:
          description: >-
            Output only. The author of the answer. Will only be set during list
            operations.
          $ref: '#/components/schemas/Author'
          readOnly: true
        upvoteCount:
          description: Output only. The number of upvotes for the answer.
          readOnly: true
          format: int32
          type: integer
        name:
          description: >-
            Output only. The unique name for the answer
            locations/*/questions/*/answers/*
          type: string
          readOnly: true
        createTime:
          type: string
          readOnly: true
          format: google-datetime
          description: >-
            Output only. The timestamp for when the answer was written. Only
            retrieved during ListResponse fetching.
        updateTime:
          format: google-datetime
          readOnly: true
          description: Output only. The timestamp for when the answer was last modified.
          type: string
        text:
          type: string
          description: >-
            Required. The text of the answer. It should contain at least one
            non-whitespace character. The maximum length is 4096 characters.
      description: Represents an answer to a question
      type: object
    UpsertAnswerRequest:
      properties:
        answer:
          description: Required. The new answer.
          $ref: '#/components/schemas/Answer'
      type: object
      description: Request message for QuestionsAndAnswers.UpsertAnswer
      id: UpsertAnswerRequest
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/monitoring: >-
              View and write monitoring data for all of your Google and
              third-party Cloud and API projects
            https://www.googleapis.com/auth/monitoring.read: >-
              View monitoring data for all of your Google Cloud and third-party
              projects
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
            https://www.googleapis.com/auth/monitoring.write: Publish metric data to your Google Cloud projects
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
paths:
  /v1/locations/{locationsId}/questions/{questionsId}/answers:upsert:
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
    post:
      description: >-
        Creates an answer or updates the existing answer written by the user for
        the specified question. A user can only create one answer per question.
      operationId: mybusinessqanda.locations.questions.answers.upsert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertAnswerRequest'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: questionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: answers
      x-stackQL-verb: exec
  /v1/locations/{locationsId}/questions/{questionsId}/answers:
    parameters: *ref_1
    get:
      description: Returns the paginated list of answers for a specified question.
      operationId: mybusinessqanda.locations.questions.answers.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnswersResponse'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: questionsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: answers
      x-stackQL-verb: select
  /v1/locations/{locationsId}/questions/{questionsId}/answers:delete:
    parameters: *ref_1
    delete:
      description: Deletes the answer written by the current user to a question.
      operationId: mybusinessqanda.locations.questions.answers.delete
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: questionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: answers
      x-stackQL-verb: delete
  /v1/locations/{locationsId}/questions:
    parameters: *ref_1
    get:
      description: >-
        Returns the paginated list of questions and some of its answers for a
        specified location. This operation is only valid if the specified
        location is verified.
      operationId: mybusinessqanda.locations.questions.list
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQuestionsResponse'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: answersPerQuestion
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: questions
      x-stackQL-verb: select
    post:
      description: Adds a question for the specified location.
      operationId: mybusinessqanda.locations.questions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: questions
      x-stackQL-verb: insert
  /v1/locations/{locationsId}/questions/{questionsId}:
    parameters: *ref_1
    delete:
      description: Deletes a specific question written by the current user.
      operationId: mybusinessqanda.locations.questions.delete
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: questionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: questions
      x-stackQL-verb: delete
    patch:
      description: Updates a specific question written by the current user.
      operationId: mybusinessqanda.locations.questions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: questionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: questions
      x-stackQL-verb: exec
